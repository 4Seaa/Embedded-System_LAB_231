
Bai7_TouchScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030c4  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3ec  0800b3ec  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3ec  0800b3ec  0001b3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3f4  0800b3f4  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3f4  0800b3f4  0001b3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3f8  0800b3f8  0001b3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800b3fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          00000584  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000063c  2000063c  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001554d  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e14  00000000  00000000  00035678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014a8  00000000  00000000  00039490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ff2  00000000  00000000  0003a938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025e9d  00000000  00000000  0003b92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cf4f  00000000  00000000  000617c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd6f3  00000000  00000000  0007e716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005838  00000000  00000000  0015be0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00161644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008310 	.word	0x08008310

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	08008310 	.word	0x08008310

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b970 	b.w	8000de8 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	460d      	mov	r5, r1
 8000b28:	4604      	mov	r4, r0
 8000b2a:	460f      	mov	r7, r1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d14a      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b30:	428a      	cmp	r2, r1
 8000b32:	4694      	mov	ip, r2
 8000b34:	d965      	bls.n	8000c02 <__udivmoddi4+0xe2>
 8000b36:	fab2 f382 	clz	r3, r2
 8000b3a:	b143      	cbz	r3, 8000b4e <__udivmoddi4+0x2e>
 8000b3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b40:	f1c3 0220 	rsb	r2, r3, #32
 8000b44:	409f      	lsls	r7, r3
 8000b46:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4a:	4317      	orrs	r7, r2
 8000b4c:	409c      	lsls	r4, r3
 8000b4e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b52:	fa1f f58c 	uxth.w	r5, ip
 8000b56:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b5a:	0c22      	lsrs	r2, r4, #16
 8000b5c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b64:	fb01 f005 	mul.w	r0, r1, r5
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	d90a      	bls.n	8000b82 <__udivmoddi4+0x62>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b74:	f080 811c 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f240 8119 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4462      	add	r2, ip
 8000b82:	1a12      	subs	r2, r2, r0
 8000b84:	b2a4      	uxth	r4, r4
 8000b86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b92:	fb00 f505 	mul.w	r5, r0, r5
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x90>
 8000b9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba2:	f080 8107 	bcs.w	8000db4 <__udivmoddi4+0x294>
 8000ba6:	42a5      	cmp	r5, r4
 8000ba8:	f240 8104 	bls.w	8000db4 <__udivmoddi4+0x294>
 8000bac:	4464      	add	r4, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb4:	1b64      	subs	r4, r4, r5
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11e      	cbz	r6, 8000bc2 <__udivmoddi4+0xa2>
 8000bba:	40dc      	lsrs	r4, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0xbc>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80ed 	beq.w	8000daa <__udivmoddi4+0x28a>
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	fab3 f183 	clz	r1, r3
 8000be0:	2900      	cmp	r1, #0
 8000be2:	d149      	bne.n	8000c78 <__udivmoddi4+0x158>
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	d302      	bcc.n	8000bee <__udivmoddi4+0xce>
 8000be8:	4282      	cmp	r2, r0
 8000bea:	f200 80f8 	bhi.w	8000dde <__udivmoddi4+0x2be>
 8000bee:	1a84      	subs	r4, r0, r2
 8000bf0:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d0e2      	beq.n	8000bc2 <__udivmoddi4+0xa2>
 8000bfc:	e9c6 4700 	strd	r4, r7, [r6]
 8000c00:	e7df      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xe6>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f382 	clz	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c10:	1a8a      	subs	r2, r1, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c20:	fb07 2015 	mls	r0, r7, r5, r2
 8000c24:	0c22      	lsrs	r2, r4, #16
 8000c26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c2a:	fb0e f005 	mul.w	r0, lr, r5
 8000c2e:	4290      	cmp	r0, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c32:	eb1c 0202 	adds.w	r2, ip, r2
 8000c36:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f200 80cb 	bhi.w	8000dd8 <__udivmoddi4+0x2b8>
 8000c42:	4645      	mov	r5, r8
 8000c44:	1a12      	subs	r2, r2, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c4c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c54:	fb0e fe00 	mul.w	lr, lr, r0
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x14e>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x14c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f200 80bb 	bhi.w	8000de2 <__udivmoddi4+0x2c2>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c76:	e79f      	b.n	8000bb8 <__udivmoddi4+0x98>
 8000c78:	f1c1 0720 	rsb	r7, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c86:	fa05 f401 	lsl.w	r4, r5, r1
 8000c8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8e:	40fd      	lsrs	r5, r7
 8000c90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	fb09 5518 	mls	r5, r9, r8, r5
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cac:	42a5      	cmp	r5, r4
 8000cae:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb2:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc0:	f080 8088 	bcs.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cc4:	42a5      	cmp	r5, r4
 8000cc6:	f240 8085 	bls.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cca:	f1a8 0802 	sub.w	r8, r8, #2
 8000cce:	4464      	add	r4, ip
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	b29d      	uxth	r5, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ce0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cf0:	d26c      	bcs.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	d96a      	bls.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fba3 9502 	umull	r9, r5, r3, r2
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	42ac      	cmp	r4, r5
 8000d08:	46c8      	mov	r8, r9
 8000d0a:	46ae      	mov	lr, r5
 8000d0c:	d356      	bcc.n	8000dbc <__udivmoddi4+0x29c>
 8000d0e:	d053      	beq.n	8000db8 <__udivmoddi4+0x298>
 8000d10:	b156      	cbz	r6, 8000d28 <__udivmoddi4+0x208>
 8000d12:	ebb0 0208 	subs.w	r2, r0, r8
 8000d16:	eb64 040e 	sbc.w	r4, r4, lr
 8000d1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1e:	40ca      	lsrs	r2, r1
 8000d20:	40cc      	lsrs	r4, r1
 8000d22:	4317      	orrs	r7, r2
 8000d24:	e9c6 7400 	strd	r7, r4, [r6]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d30:	f1c3 0120 	rsb	r1, r3, #32
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	fa20 f201 	lsr.w	r2, r0, r1
 8000d3c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d40:	409d      	lsls	r5, r3
 8000d42:	432a      	orrs	r2, r5
 8000d44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1510 	mls	r5, r7, r0, r1
 8000d54:	0c11      	lsrs	r1, r2, #16
 8000d56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d5a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5e:	428d      	cmp	r5, r1
 8000d60:	fa04 f403 	lsl.w	r4, r4, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x258>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6e:	d22f      	bcs.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d70:	428d      	cmp	r5, r1
 8000d72:	d92d      	bls.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1b49      	subs	r1, r1, r5
 8000d7a:	b292      	uxth	r2, r2
 8000d7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d80:	fb07 1115 	mls	r1, r7, r5, r1
 8000d84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d88:	fb05 f10e 	mul.w	r1, r5, lr
 8000d8c:	4291      	cmp	r1, r2
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x282>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d98:	d216      	bcs.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9a:	4291      	cmp	r1, r2
 8000d9c:	d914      	bls.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9e:	3d02      	subs	r5, #2
 8000da0:	4462      	add	r2, ip
 8000da2:	1a52      	subs	r2, r2, r1
 8000da4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da8:	e738      	b.n	8000c1c <__udivmoddi4+0xfc>
 8000daa:	4631      	mov	r1, r6
 8000dac:	4630      	mov	r0, r6
 8000dae:	e708      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000db0:	4639      	mov	r1, r7
 8000db2:	e6e6      	b.n	8000b82 <__udivmoddi4+0x62>
 8000db4:	4610      	mov	r0, r2
 8000db6:	e6fb      	b.n	8000bb0 <__udivmoddi4+0x90>
 8000db8:	4548      	cmp	r0, r9
 8000dba:	d2a9      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000dbc:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	e7a3      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc8:	4645      	mov	r5, r8
 8000dca:	e7ea      	b.n	8000da2 <__udivmoddi4+0x282>
 8000dcc:	462b      	mov	r3, r5
 8000dce:	e794      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dd0:	4640      	mov	r0, r8
 8000dd2:	e7d1      	b.n	8000d78 <__udivmoddi4+0x258>
 8000dd4:	46d0      	mov	r8, sl
 8000dd6:	e77b      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd8:	3d02      	subs	r5, #2
 8000dda:	4462      	add	r2, ip
 8000ddc:	e732      	b.n	8000c44 <__udivmoddi4+0x124>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e70a      	b.n	8000bf8 <__udivmoddi4+0xd8>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e742      	b.n	8000c6e <__udivmoddi4+0x14e>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dfe:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e00:	4a3d      	ldr	r2, [pc, #244]	; (8000ef8 <MX_ADC1_Init+0x10c>)
 8000e02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e04:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e10:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e1c:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e24:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e2a:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e2c:	4a33      	ldr	r2, [pc, #204]	; (8000efc <MX_ADC1_Init+0x110>)
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000e36:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e38:	2205      	movs	r2, #5
 8000e3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e44:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e4a:	482a      	ldr	r0, [pc, #168]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e4c:	f003 f95e 	bl	800410c <HAL_ADC_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e56:	f001 fee0 	bl	8002c1a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4822      	ldr	r0, [pc, #136]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e6c:	f003 f992 	bl	8004194 <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e76:	f001 fed0 	bl	8002c1a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e7a:	2309      	movs	r3, #9
 8000e7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	4619      	mov	r1, r3
 8000e86:	481b      	ldr	r0, [pc, #108]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000e88:	f003 f984 	bl	8004194 <HAL_ADC_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e92:	f001 fec2 	bl	8002c1a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e96:	230a      	movs	r3, #10
 8000e98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000ea4:	f003 f976 	bl	8004194 <HAL_ADC_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000eae:	f001 feb4 	bl	8002c1a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000eb2:	230b      	movs	r3, #11
 8000eb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000ec0:	f003 f968 	bl	8004194 <HAL_ADC_ConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000eca:	f001 fea6 	bl	8002c1a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ece:	230c      	movs	r3, #12
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <MX_ADC1_Init+0x108>)
 8000edc:	f003 f95a 	bl	8004194 <HAL_ADC_ConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000ee6:	f001 fe98 	bl	8002c1a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000d4 	.word	0x200000d4
 8000ef8:	40012000 	.word	0x40012000
 8000efc:	0f000001 	.word	0x0f000001

08000f00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a3c      	ldr	r2, [pc, #240]	; (8001010 <HAL_ADC_MspInit+0x110>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d171      	bne.n	8001006 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b3b      	ldr	r3, [pc, #236]	; (8001014 <HAL_ADC_MspInit+0x114>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a3a      	ldr	r2, [pc, #232]	; (8001014 <HAL_ADC_MspInit+0x114>)
 8000f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b38      	ldr	r3, [pc, #224]	; (8001014 <HAL_ADC_MspInit+0x114>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b34      	ldr	r3, [pc, #208]	; (8001014 <HAL_ADC_MspInit+0x114>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a33      	ldr	r2, [pc, #204]	; (8001014 <HAL_ADC_MspInit+0x114>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b31      	ldr	r3, [pc, #196]	; (8001014 <HAL_ADC_MspInit+0x114>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <HAL_ADC_MspInit+0x114>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a2c      	ldr	r2, [pc, #176]	; (8001014 <HAL_ADC_MspInit+0x114>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <HAL_ADC_MspInit+0x114>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f76:	2307      	movs	r3, #7
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4823      	ldr	r0, [pc, #140]	; (8001018 <HAL_ADC_MspInit+0x118>)
 8000f8a:	f003 ff1d 	bl	8004dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f92:	2303      	movs	r3, #3
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481e      	ldr	r0, [pc, #120]	; (800101c <HAL_ADC_MspInit+0x11c>)
 8000fa2:	f003 ff11 	bl	8004dc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <HAL_ADC_MspInit+0x120>)
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <HAL_ADC_MspInit+0x124>)
 8000faa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_ADC_MspInit+0x120>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_ADC_MspInit+0x120>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_ADC_MspInit+0x120>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_ADC_MspInit+0x120>)
 8000fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <HAL_ADC_MspInit+0x120>)
 8000fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fcc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <HAL_ADC_MspInit+0x120>)
 8000fd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_ADC_MspInit+0x120>)
 8000fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fdc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <HAL_ADC_MspInit+0x120>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_ADC_MspInit+0x120>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <HAL_ADC_MspInit+0x120>)
 8000fec:	f003 fc02 	bl	80047f4 <HAL_DMA_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000ff6:	f001 fe10 	bl	8002c1a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a08      	ldr	r2, [pc, #32]	; (8001020 <HAL_ADC_MspInit+0x120>)
 8000ffe:	639a      	str	r2, [r3, #56]	; 0x38
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_ADC_MspInit+0x120>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40012000 	.word	0x40012000
 8001014:	40023800 	.word	0x40023800
 8001018:	40020800 	.word	0x40020800
 800101c:	40020400 	.word	0x40020400
 8001020:	2000011c 	.word	0x2000011c
 8001024:	40026410 	.word	0x40026410

08001028 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	at24c_Check();
 800102c:	f000 f83c 	bl	80010a8 <at24c_Check>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af04      	add	r7, sp, #16
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 8001042:	88fa      	ldrh	r2, [r7, #6]
 8001044:	230a      	movs	r3, #10
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f107 030f 	add.w	r3, r7, #15
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2310      	movs	r3, #16
 8001054:	21a0      	movs	r1, #160	; 0xa0
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <at24c_ReadOneByte+0x34>)
 8001058:	f004 fac2 	bl	80055e0 <HAL_I2C_Mem_Read>
	return temp;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000368 	.word	0x20000368

0800106c <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af04      	add	r7, sp, #16
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	80fb      	strh	r3, [r7, #6]
 8001078:	4613      	mov	r3, r2
 800107a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 800107c:	88fa      	ldrh	r2, [r7, #6]
 800107e:	230a      	movs	r3, #10
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	2301      	movs	r3, #1
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	1d7b      	adds	r3, r7, #5
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2310      	movs	r3, #16
 800108c:	21a0      	movs	r1, #160	; 0xa0
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <at24c_WriteOneByte+0x38>)
 8001090:	f004 f9ac 	bl	80053ec <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001094:	2005      	movs	r0, #5
 8001096:	f003 f815 	bl	80040c4 <HAL_Delay>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000368 	.word	0x20000368

080010a8 <at24c_Check>:

uint8_t at24c_Check(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 80010ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010b2:	f7ff ffbf 	bl	8001034 <at24c_ReadOneByte>
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b55      	cmp	r3, #85	; 0x55
 80010be:	d101      	bne.n	80010c4 <at24c_Check+0x1c>
 80010c0:	2300      	movs	r3, #0
 80010c2:	e010      	b.n	80010e6 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 80010c4:	2155      	movs	r1, #85	; 0x55
 80010c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010ca:	f7ff ffcf 	bl	800106c <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 80010ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010d2:	f7ff ffaf 	bl	8001034 <at24c_ReadOneByte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b55      	cmp	r3, #85	; 0x55
 80010de:	d101      	bne.n	80010e4 <at24c_Check+0x3c>
 80010e0:	2300      	movs	r3, #0
 80010e2:	e000      	b.n	80010e6 <at24c_Check+0x3e>
	}
	return 1;
 80010e4:	2301      	movs	r3, #1
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 80010ee:	b590      	push	{r4, r7, lr}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	6039      	str	r1, [r7, #0]
 80010f8:	80fb      	strh	r3, [r7, #6]
 80010fa:	4613      	mov	r3, r2
 80010fc:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80010fe:	e00d      	b.n	800111c <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	80fa      	strh	r2, [r7, #6]
 8001106:	683c      	ldr	r4, [r7, #0]
 8001108:	1c62      	adds	r2, r4, #1
 800110a:	603a      	str	r2, [r7, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff91 	bl	8001034 <at24c_ReadOneByte>
 8001112:	4603      	mov	r3, r0
 8001114:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8001116:	88bb      	ldrh	r3, [r7, #4]
 8001118:	3b01      	subs	r3, #1
 800111a:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800111c:	88bb      	ldrh	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1ee      	bne.n	8001100 <at24c_Read+0x12>
	}
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}

0800112c <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	80fb      	strh	r3, [r7, #6]
 8001138:	4613      	mov	r3, r2
 800113a:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 800113c:	e00c      	b.n	8001158 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff90 	bl	800106c <at24c_WriteOneByte>
		WriteAddr++;
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	3301      	adds	r3, #1
 8001150:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	1e5a      	subs	r2, r3, #1
 800115c:	80ba      	strh	r2, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1ed      	bne.n	800113e <at24c_Write+0x12>
	}
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001170:	2201      	movs	r2, #1
 8001172:	2108      	movs	r1, #8
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <button_init+0x14>)
 8001176:	f003 ffdb 	bl	8005130 <HAL_GPIO_WritePin>
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40020c00 	.word	0x40020c00

08001184 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_DMA_Init+0x3c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <MX_DMA_Init+0x3c>)
 8001194:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_DMA_Init+0x3c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2038      	movs	r0, #56	; 0x38
 80011ac:	f003 faeb 	bl	8004786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011b0:	2038      	movs	r0, #56	; 0x38
 80011b2:	f003 fb04 	bl	80047be <HAL_NVIC_EnableIRQ>

}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	; 0x38
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80011de:	463b      	mov	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	615a      	str	r2, [r3, #20]
 80011ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80011f0:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <MX_FSMC_Init+0xec>)
 80011f2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011f6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <MX_FSMC_Init+0xec>)
 80011fa:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <MX_FSMC_Init+0xf0>)
 80011fc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <MX_FSMC_Init+0xec>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <MX_FSMC_Init+0xec>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <MX_FSMC_Init+0xec>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <MX_FSMC_Init+0xec>)
 8001212:	2210      	movs	r2, #16
 8001214:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001216:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <MX_FSMC_Init+0xec>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <MX_FSMC_Init+0xec>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001222:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <MX_FSMC_Init+0xec>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <MX_FSMC_Init+0xec>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <MX_FSMC_Init+0xec>)
 8001230:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001236:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <MX_FSMC_Init+0xec>)
 8001238:	2200      	movs	r2, #0
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <MX_FSMC_Init+0xec>)
 800123e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_FSMC_Init+0xec>)
 8001246:	2200      	movs	r2, #0
 8001248:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <MX_FSMC_Init+0xec>)
 800124c:	2200      	movs	r2, #0
 800124e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_FSMC_Init+0xec>)
 8001252:	2200      	movs	r2, #0
 8001254:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001256:	230f      	movs	r3, #15
 8001258:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800125a:	230f      	movs	r3, #15
 800125c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800125e:	233c      	movs	r3, #60	; 0x3c
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001266:	2310      	movs	r3, #16
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800126a:	2311      	movs	r3, #17
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800126e:	2300      	movs	r3, #0
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001272:	2308      	movs	r3, #8
 8001274:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001276:	230f      	movs	r3, #15
 8001278:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800127a:	2309      	movs	r3, #9
 800127c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001282:	2310      	movs	r3, #16
 8001284:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001286:	2311      	movs	r3, #17
 8001288:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800128e:	463a      	mov	r2, r7
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <MX_FSMC_Init+0xec>)
 8001298:	f005 fe38 	bl	8006f0c <HAL_SRAM_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80012a2:	f001 fcba 	bl	8002c1a <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80012a6:	bf00      	nop
 80012a8:	3738      	adds	r7, #56	; 0x38
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000017c 	.word	0x2000017c
 80012b4:	a0000104 	.word	0xa0000104

080012b8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_FSMC_MspInit+0x88>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d131      	bne.n	8001338 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <HAL_FSMC_MspInit+0x88>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_FSMC_MspInit+0x8c>)
 80012e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e2:	4a18      	ldr	r2, [pc, #96]	; (8001344 <HAL_FSMC_MspInit+0x8c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6393      	str	r3, [r2, #56]	; 0x38
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_FSMC_MspInit+0x8c>)
 80012ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80012f6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80012fa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001308:	230c      	movs	r3, #12
 800130a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4619      	mov	r1, r3
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <HAL_FSMC_MspInit+0x90>)
 8001312:	f003 fd59 	bl	8004dc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001316:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800131a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001328:	230c      	movs	r3, #12
 800132a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4619      	mov	r1, r3
 8001330:	4806      	ldr	r0, [pc, #24]	; (800134c <HAL_FSMC_MspInit+0x94>)
 8001332:	f003 fd49 	bl	8004dc8 <HAL_GPIO_Init>
 8001336:	e000      	b.n	800133a <HAL_FSMC_MspInit+0x82>
    return;
 8001338:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200001cc 	.word	0x200001cc
 8001344:	40023800 	.word	0x40023800
 8001348:	40021000 	.word	0x40021000
 800134c:	40020c00 	.word	0x40020c00

08001350 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001358:	f7ff ffae 	bl	80012b8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <snake_init>:

uint16_t snake_x[100];
uint16_t snake_y[100];
int snake_len;

void snake_init(void) {
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
  snake_dir = RIGHT;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <snake_init+0x68>)
 800136c:	2204      	movs	r2, #4
 800136e:	701a      	strb	r2, [r3, #0]
  next_dir = RIGHT;
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <snake_init+0x6c>)
 8001372:	2204      	movs	r2, #4
 8001374:	701a      	strb	r2, [r3, #0]
  int i;
  snake_x[0] = 25;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <snake_init+0x70>)
 8001378:	2219      	movs	r2, #25
 800137a:	801a      	strh	r2, [r3, #0]
  snake_y[0] = 55;
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <snake_init+0x74>)
 800137e:	2237      	movs	r2, #55	; 0x37
 8001380:	801a      	strh	r2, [r3, #0]
  snake_x[1] = 15;
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <snake_init+0x70>)
 8001384:	220f      	movs	r2, #15
 8001386:	805a      	strh	r2, [r3, #2]
  snake_y[1] = 55;
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <snake_init+0x74>)
 800138a:	2237      	movs	r2, #55	; 0x37
 800138c:	805a      	strh	r2, [r3, #2]
  for (i = 2; i < 100; i++) {
 800138e:	2302      	movs	r3, #2
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	e00e      	b.n	80013b2 <snake_init+0x4e>
    snake_x[i] = -1;
 8001394:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <snake_init+0x70>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800139c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    snake_y[i] = -1;
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <snake_init+0x74>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (i = 2; i < 100; i++) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3301      	adds	r3, #1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b63      	cmp	r3, #99	; 0x63
 80013b6:	dded      	ble.n	8001394 <snake_init+0x30>
  }
  snake_len = 1;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <snake_init+0x78>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	601a      	str	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200001d2 	.word	0x200001d2
 80013d0:	200001d3 	.word	0x200001d3
 80013d4:	200001d4 	.word	0x200001d4
 80013d8:	2000029c 	.word	0x2000029c
 80013dc:	20000364 	.word	0x20000364

080013e0 <isStart>:

uint8_t isStart(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  if (!touch_IsTouched()) return 0;
 80013e4:	f002 fda8 	bl	8003f38 <touch_IsTouched>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <isStart+0x12>
 80013ee:	2300      	movs	r3, #0
 80013f0:	e017      	b.n	8001422 <isStart+0x42>
  return touch_GetX() > 60 && touch_GetX() < 180 && touch_GetY() > 10 &&
 80013f2:	f002 fdb3 	bl	8003f5c <touch_GetX>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b3c      	cmp	r3, #60	; 0x3c
 80013fa:	d910      	bls.n	800141e <isStart+0x3e>
 80013fc:	f002 fdae 	bl	8003f5c <touch_GetX>
 8001400:	4603      	mov	r3, r0
 8001402:	2bb3      	cmp	r3, #179	; 0xb3
 8001404:	d80b      	bhi.n	800141e <isStart+0x3e>
 8001406:	f002 fdb5 	bl	8003f74 <touch_GetY>
 800140a:	4603      	mov	r3, r0
 800140c:	2b0a      	cmp	r3, #10
 800140e:	d906      	bls.n	800141e <isStart+0x3e>
         touch_GetY() < 60;
 8001410:	f002 fdb0 	bl	8003f74 <touch_GetY>
 8001414:	4603      	mov	r3, r0
  return touch_GetX() > 60 && touch_GetX() < 180 && touch_GetY() > 10 &&
 8001416:	2b3b      	cmp	r3, #59	; 0x3b
 8001418:	d801      	bhi.n	800141e <isStart+0x3e>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <isStart+0x40>
 800141e:	2300      	movs	r3, #0
 8001420:	b2db      	uxtb	r3, r3
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <top>:
    default:
      break;
  }
}

void top(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  UI();
 800142c:	f000 f97c 	bl	8001728 <UI>
  // update_fsm_state();

  switch (fsm_state) {
 8001430:	4b70      	ldr	r3, [pc, #448]	; (80015f4 <top+0x1cc>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b04      	cmp	r3, #4
 8001436:	f200 80d5 	bhi.w	80015e4 <top+0x1bc>
 800143a:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <top+0x18>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	08001455 	.word	0x08001455
 8001444:	0800145d 	.word	0x0800145d
 8001448:	0800147d 	.word	0x0800147d
 800144c:	080015e5 	.word	0x080015e5
 8001450:	080015e5 	.word	0x080015e5
    case INIT:
      fsm_state = START;
 8001454:	4b67      	ldr	r3, [pc, #412]	; (80015f4 <top+0x1cc>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
      break;
 800145a:	e0c8      	b.n	80015ee <top+0x1c6>
    case START:
      if (isStart()) {
 800145c:	f7ff ffc0 	bl	80013e0 <isStart>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 80c0 	beq.w	80015e8 <top+0x1c0>
        fsm_state = PLAY;
 8001468:	4b62      	ldr	r3, [pc, #392]	; (80015f4 <top+0x1cc>)
 800146a:	2202      	movs	r2, #2
 800146c:	701a      	strb	r2, [r3, #0]
        lcd_Clear(WHITE);
 800146e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001472:	f000 fd1f 	bl	8001eb4 <lcd_Clear>
        snake_init();
 8001476:	f7ff ff75 	bl	8001364 <snake_init>
      }
      break;
 800147a:	e0b5      	b.n	80015e8 <top+0x1c0>
    case PLAY:
      isNavigated();
 800147c:	f000 fa42 	bl	8001904 <isNavigated>

      time_counter1 = (time_counter1 + 1) % 20;
 8001480:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <top+0x1d0>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <top+0x1d4>)
 8001488:	fb83 1302 	smull	r1, r3, r3, r2
 800148c:	10d9      	asrs	r1, r3, #3
 800148e:	17d3      	asrs	r3, r2, #31
 8001490:	1ac9      	subs	r1, r1, r3
 8001492:	460b      	mov	r3, r1
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	1ad1      	subs	r1, r2, r3
 800149c:	b2ca      	uxtb	r2, r1
 800149e:	4b56      	ldr	r3, [pc, #344]	; (80015f8 <top+0x1d0>)
 80014a0:	701a      	strb	r2, [r3, #0]
      if (time_counter1 == 0) {
 80014a2:	4b55      	ldr	r3, [pc, #340]	; (80015f8 <top+0x1d0>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d103      	bne.n	80014b2 <top+0x8a>
        eat_prey();
 80014aa:	f000 f8b1 	bl	8001610 <eat_prey>
        handle_snake_dir();
 80014ae:	f000 fa9d 	bl	80019ec <handle_snake_dir>
      }

      switch (snake_dir) {
 80014b2:	4b53      	ldr	r3, [pc, #332]	; (8001600 <top+0x1d8>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	f200 8098 	bhi.w	80015ec <top+0x1c4>
 80014bc:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <top+0x9c>)
 80014be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c2:	bf00      	nop
 80014c4:	080015d1 	.word	0x080015d1
 80014c8:	080014d9 	.word	0x080014d9
 80014cc:	08001517 	.word	0x08001517
 80014d0:	08001555 	.word	0x08001555
 80014d4:	08001593 	.word	0x08001593
        case IDLE:
          // handle_snake_dir();
          break;
        case UP:
          if (next_dir != DOWN && next_dir != snake_dir) {
 80014d8:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <top+0x1dc>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d00a      	beq.n	80014f6 <top+0xce>
 80014e0:	4b48      	ldr	r3, [pc, #288]	; (8001604 <top+0x1dc>)
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	4b46      	ldr	r3, [pc, #280]	; (8001600 <top+0x1d8>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d004      	beq.n	80014f6 <top+0xce>
            snake_dir = next_dir;
 80014ec:	4b45      	ldr	r3, [pc, #276]	; (8001604 <top+0x1dc>)
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	4b43      	ldr	r3, [pc, #268]	; (8001600 <top+0x1d8>)
 80014f2:	701a      	strb	r2, [r3, #0]
            if ((snake_dir == UP) && (snake_y[0] - HIT < LIMIT_UP)) {
              fsm_state = LOSE;
              lcd_Clear(WHITE);
            }
          }
          break;
 80014f4:	e06e      	b.n	80015d4 <top+0x1ac>
            if ((snake_dir == UP) && (snake_y[0] - HIT < LIMIT_UP)) {
 80014f6:	4b42      	ldr	r3, [pc, #264]	; (8001600 <top+0x1d8>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d16a      	bne.n	80015d4 <top+0x1ac>
 80014fe:	4b42      	ldr	r3, [pc, #264]	; (8001608 <top+0x1e0>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	2b3b      	cmp	r3, #59	; 0x3b
 8001504:	d866      	bhi.n	80015d4 <top+0x1ac>
              fsm_state = LOSE;
 8001506:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <top+0x1cc>)
 8001508:	2203      	movs	r2, #3
 800150a:	701a      	strb	r2, [r3, #0]
              lcd_Clear(WHITE);
 800150c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001510:	f000 fcd0 	bl	8001eb4 <lcd_Clear>
          break;
 8001514:	e05e      	b.n	80015d4 <top+0x1ac>
        case DOWN:
          if (next_dir != UP && next_dir != snake_dir) {
 8001516:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <top+0x1dc>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d00a      	beq.n	8001534 <top+0x10c>
 800151e:	4b39      	ldr	r3, [pc, #228]	; (8001604 <top+0x1dc>)
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <top+0x1d8>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d004      	beq.n	8001534 <top+0x10c>
            snake_dir = next_dir;
 800152a:	4b36      	ldr	r3, [pc, #216]	; (8001604 <top+0x1dc>)
 800152c:	781a      	ldrb	r2, [r3, #0]
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <top+0x1d8>)
 8001530:	701a      	strb	r2, [r3, #0]
            if ((snake_dir == DOWN) && (snake_y[0] + HIT > LIMIT_DOWN)) {
              fsm_state = LOSE;
              lcd_Clear(WHITE);
            }
          }
          break;
 8001532:	e051      	b.n	80015d8 <top+0x1b0>
            if ((snake_dir == DOWN) && (snake_y[0] + HIT > LIMIT_DOWN)) {
 8001534:	4b32      	ldr	r3, [pc, #200]	; (8001600 <top+0x1d8>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d14d      	bne.n	80015d8 <top+0x1b0>
 800153c:	4b32      	ldr	r3, [pc, #200]	; (8001608 <top+0x1e0>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	2b8c      	cmp	r3, #140	; 0x8c
 8001542:	d949      	bls.n	80015d8 <top+0x1b0>
              fsm_state = LOSE;
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <top+0x1cc>)
 8001546:	2203      	movs	r2, #3
 8001548:	701a      	strb	r2, [r3, #0]
              lcd_Clear(WHITE);
 800154a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800154e:	f000 fcb1 	bl	8001eb4 <lcd_Clear>
          break;
 8001552:	e041      	b.n	80015d8 <top+0x1b0>
        case LEFT:
          if (next_dir != RIGHT && next_dir != snake_dir) {
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <top+0x1dc>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b04      	cmp	r3, #4
 800155a:	d00a      	beq.n	8001572 <top+0x14a>
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <top+0x1dc>)
 800155e:	781a      	ldrb	r2, [r3, #0]
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <top+0x1d8>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d004      	beq.n	8001572 <top+0x14a>
            snake_dir = next_dir;
 8001568:	4b26      	ldr	r3, [pc, #152]	; (8001604 <top+0x1dc>)
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <top+0x1d8>)
 800156e:	701a      	strb	r2, [r3, #0]
            if ((snake_dir == LEFT) && (snake_x[0] - HIT < LIMIT_LEFT)) {
              fsm_state = LOSE;
              lcd_Clear(WHITE);
            }
          }
          break;
 8001570:	e034      	b.n	80015dc <top+0x1b4>
            if ((snake_dir == LEFT) && (snake_x[0] - HIT < LIMIT_LEFT)) {
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <top+0x1d8>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d130      	bne.n	80015dc <top+0x1b4>
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <top+0x1e4>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	2b13      	cmp	r3, #19
 8001580:	d82c      	bhi.n	80015dc <top+0x1b4>
              fsm_state = LOSE;
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <top+0x1cc>)
 8001584:	2203      	movs	r2, #3
 8001586:	701a      	strb	r2, [r3, #0]
              lcd_Clear(WHITE);
 8001588:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800158c:	f000 fc92 	bl	8001eb4 <lcd_Clear>
          break;
 8001590:	e024      	b.n	80015dc <top+0x1b4>
        case RIGHT:
          if (next_dir != LEFT && next_dir != snake_dir) {
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <top+0x1dc>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d00a      	beq.n	80015b0 <top+0x188>
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <top+0x1dc>)
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <top+0x1d8>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d004      	beq.n	80015b0 <top+0x188>
            snake_dir = next_dir;
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <top+0x1dc>)
 80015a8:	781a      	ldrb	r2, [r3, #0]
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <top+0x1d8>)
 80015ac:	701a      	strb	r2, [r3, #0]
            if ((snake_dir == RIGHT) && (snake_x[0] + HIT > LIMIT_RIGHT)) {
              fsm_state = LOSE;
              lcd_Clear(WHITE);
            }
          }
          break;
 80015ae:	e017      	b.n	80015e0 <top+0x1b8>
            if ((snake_dir == RIGHT) && (snake_x[0] + HIT > LIMIT_RIGHT)) {
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <top+0x1d8>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d113      	bne.n	80015e0 <top+0x1b8>
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <top+0x1e4>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	2bdc      	cmp	r3, #220	; 0xdc
 80015be:	d90f      	bls.n	80015e0 <top+0x1b8>
              fsm_state = LOSE;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <top+0x1cc>)
 80015c2:	2203      	movs	r2, #3
 80015c4:	701a      	strb	r2, [r3, #0]
              lcd_Clear(WHITE);
 80015c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015ca:	f000 fc73 	bl	8001eb4 <lcd_Clear>
          break;
 80015ce:	e007      	b.n	80015e0 <top+0x1b8>
          break;
 80015d0:	bf00      	nop
 80015d2:	e00b      	b.n	80015ec <top+0x1c4>
          break;
 80015d4:	bf00      	nop
 80015d6:	e009      	b.n	80015ec <top+0x1c4>
          break;
 80015d8:	bf00      	nop
 80015da:	e007      	b.n	80015ec <top+0x1c4>
          break;
 80015dc:	bf00      	nop
 80015de:	e005      	b.n	80015ec <top+0x1c4>
          break;
 80015e0:	bf00      	nop
        default:
      }
      break;
 80015e2:	e003      	b.n	80015ec <top+0x1c4>
      break;
    case WIN:

      break;
    default:
      break;
 80015e4:	bf00      	nop
 80015e6:	e002      	b.n	80015ee <top+0x1c6>
      break;
 80015e8:	bf00      	nop
 80015ea:	e000      	b.n	80015ee <top+0x1c6>
      break;
 80015ec:	bf00      	nop
  }
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200001d1 	.word	0x200001d1
 80015f8:	200001d0 	.word	0x200001d0
 80015fc:	66666667 	.word	0x66666667
 8001600:	200001d2 	.word	0x200001d2
 8001604:	200001d3 	.word	0x200001d3
 8001608:	2000029c 	.word	0x2000029c
 800160c:	200001d4 	.word	0x200001d4

08001610 <eat_prey>:

void eat_prey(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  if (prey_x == snake_x[0] && prey_y == snake_y[0]) {
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <eat_prey+0x6c>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <eat_prey+0x70>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d129      	bne.n	8001676 <eat_prey+0x66>
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <eat_prey+0x74>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <eat_prey+0x78>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d122      	bne.n	8001676 <eat_prey+0x66>
    snake_len = snake_len + 1;
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <eat_prey+0x7c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a15      	ldr	r2, [pc, #84]	; (800168c <eat_prey+0x7c>)
 8001638:	6013      	str	r3, [r2, #0]
    remain_prey = remain_prey - 1;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <eat_prey+0x80>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3b01      	subs	r3, #1
 8001640:	4a13      	ldr	r2, [pc, #76]	; (8001690 <eat_prey+0x80>)
 8001642:	6013      	str	r3, [r2, #0]
    if (remain_prey == 0) {
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <eat_prey+0x80>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10a      	bne.n	8001662 <eat_prey+0x52>
      snake_dir = IDLE;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <eat_prey+0x84>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
      fsm_state = WIN;
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <eat_prey+0x88>)
 8001654:	2204      	movs	r2, #4
 8001656:	701a      	strb	r2, [r3, #0]
      lcd_Clear(WHITE);
 8001658:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800165c:	f000 fc2a 	bl	8001eb4 <lcd_Clear>
    } else {
      prey_x = prey_x + HIT;
      prey_y = prey_y + HIT;
    }
  }
}
 8001660:	e009      	b.n	8001676 <eat_prey+0x66>
      prey_x = prey_x + HIT;
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <eat_prey+0x70>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	330a      	adds	r3, #10
 8001668:	4a05      	ldr	r2, [pc, #20]	; (8001680 <eat_prey+0x70>)
 800166a:	6013      	str	r3, [r2, #0]
      prey_y = prey_y + HIT;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <eat_prey+0x78>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	330a      	adds	r3, #10
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <eat_prey+0x78>)
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200001d4 	.word	0x200001d4
 8001680:	20000000 	.word	0x20000000
 8001684:	2000029c 	.word	0x2000029c
 8001688:	20000004 	.word	0x20000004
 800168c:	20000364 	.word	0x20000364
 8001690:	20000008 	.word	0x20000008
 8001694:	200001d2 	.word	0x200001d2
 8001698:	200001d1 	.word	0x200001d1

0800169c <snake_move>:

void snake_move(void) {
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b085      	sub	sp, #20
 80016a0:	af02      	add	r7, sp, #8
  lcd_Fill(10, 50, 230, 150, BLACK);
 80016a2:	2300      	movs	r3, #0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2396      	movs	r3, #150	; 0x96
 80016a8:	22e6      	movs	r2, #230	; 0xe6
 80016aa:	2132      	movs	r1, #50	; 0x32
 80016ac:	200a      	movs	r0, #10
 80016ae:	f000 fc33 	bl	8001f18 <lcd_Fill>

  lcd_DrawCircle(snake_x[0], snake_y[0], GREEN, 1, 1);
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <snake_move+0x80>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <snake_move+0x84>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	2301      	movs	r3, #1
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80016c8:	f001 f871 	bl	80027ae <lcd_DrawCircle>

  int i;
  for (i = 0; i < snake_len; i++) {
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	e019      	b.n	8001706 <snake_move+0x6a>
    lcd_DrawLine(snake_x[i], snake_y[i], snake_x[i + 1], snake_y[i + 1], RED);
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <snake_move+0x80>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <snake_move+0x84>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3301      	adds	r3, #1
 80016e6:	4a0d      	ldr	r2, [pc, #52]	; (800171c <snake_move+0x80>)
 80016e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3301      	adds	r3, #1
 80016f0:	4c0b      	ldr	r4, [pc, #44]	; (8001720 <snake_move+0x84>)
 80016f2:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80016f6:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80016fa:	9400      	str	r4, [sp, #0]
 80016fc:	f000 fc59 	bl	8001fb2 <lcd_DrawLine>
  for (i = 0; i < snake_len; i++) {
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3301      	adds	r3, #1
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <snake_move+0x88>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	429a      	cmp	r2, r3
 800170e:	dbe0      	blt.n	80016d2 <snake_move+0x36>
  }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bd90      	pop	{r4, r7, pc}
 800171a:	bf00      	nop
 800171c:	200001d4 	.word	0x200001d4
 8001720:	2000029c 	.word	0x2000029c
 8001724:	20000364 	.word	0x20000364

08001728 <UI>:

void UI(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af04      	add	r7, sp, #16
  switch (fsm_state) {
 800172e:	4b69      	ldr	r3, [pc, #420]	; (80018d4 <UI+0x1ac>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b04      	cmp	r3, #4
 8001734:	f200 80cb 	bhi.w	80018ce <UI+0x1a6>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <UI+0x18>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001755 	.word	0x08001755
 8001744:	080018cf 	.word	0x080018cf
 8001748:	08001783 	.word	0x08001783
 800174c:	08001897 	.word	0x08001897
 8001750:	080018b3 	.word	0x080018b3
    case INIT:
      lcd_Fill(60, 10, 180, 60, GBLUE);
 8001754:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	233c      	movs	r3, #60	; 0x3c
 800175c:	22b4      	movs	r2, #180	; 0xb4
 800175e:	210a      	movs	r1, #10
 8001760:	203c      	movs	r0, #60	; 0x3c
 8001762:	f000 fbd9 	bl	8001f18 <lcd_Fill>
      lcd_ShowStr(90, 20, "START", RED, BLACK, 24, 1);
 8001766:	2301      	movs	r3, #1
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2318      	movs	r3, #24
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	2300      	movs	r3, #0
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001776:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <UI+0x1b0>)
 8001778:	2114      	movs	r1, #20
 800177a:	205a      	movs	r0, #90	; 0x5a
 800177c:	f001 f884 	bl	8002888 <lcd_ShowStr>
      break;
 8001780:	e0a5      	b.n	80018ce <UI+0x1a6>
    case PLAY:
      lcd_Fill(100, 260, 140, 280, BLUE);
 8001782:	231f      	movs	r3, #31
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	f44f 738c 	mov.w	r3, #280	; 0x118
 800178a:	228c      	movs	r2, #140	; 0x8c
 800178c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001790:	2064      	movs	r0, #100	; 0x64
 8001792:	f000 fbc1 	bl	8001f18 <lcd_Fill>
      lcd_StrCenter(0, 260, "UP", RED, BLUE, 16, 1);
 8001796:	2301      	movs	r3, #1
 8001798:	9302      	str	r3, [sp, #8]
 800179a:	2310      	movs	r3, #16
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	231f      	movs	r3, #31
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017a6:	4a4d      	ldr	r2, [pc, #308]	; (80018dc <UI+0x1b4>)
 80017a8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80017ac:	2000      	movs	r0, #0
 80017ae:	f001 f8cf 	bl	8002950 <lcd_StrCenter>

      lcd_Fill(100, 300, 140, 320, BLUE);
 80017b2:	231f      	movs	r3, #31
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80017ba:	228c      	movs	r2, #140	; 0x8c
 80017bc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80017c0:	2064      	movs	r0, #100	; 0x64
 80017c2:	f000 fba9 	bl	8001f18 <lcd_Fill>
      lcd_StrCenter(0, 300, "DOWN", RED, BLUE, 16, 1);
 80017c6:	2301      	movs	r3, #1
 80017c8:	9302      	str	r3, [sp, #8]
 80017ca:	2310      	movs	r3, #16
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	231f      	movs	r3, #31
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017d6:	4a42      	ldr	r2, [pc, #264]	; (80018e0 <UI+0x1b8>)
 80017d8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80017dc:	2000      	movs	r0, #0
 80017de:	f001 f8b7 	bl	8002950 <lcd_StrCenter>

      lcd_Fill(60, 280, 100, 300, BLUE);
 80017e2:	231f      	movs	r3, #31
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80017ea:	2264      	movs	r2, #100	; 0x64
 80017ec:	f44f 718c 	mov.w	r1, #280	; 0x118
 80017f0:	203c      	movs	r0, #60	; 0x3c
 80017f2:	f000 fb91 	bl	8001f18 <lcd_Fill>
      lcd_ShowStr(65, 280, "LEFT", RED, BLUE, 16, 1);
 80017f6:	2301      	movs	r3, #1
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	2310      	movs	r3, #16
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	231f      	movs	r3, #31
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001806:	4a37      	ldr	r2, [pc, #220]	; (80018e4 <UI+0x1bc>)
 8001808:	f44f 718c 	mov.w	r1, #280	; 0x118
 800180c:	2041      	movs	r0, #65	; 0x41
 800180e:	f001 f83b 	bl	8002888 <lcd_ShowStr>

      lcd_Fill(140, 280, 180, 300, BLUE);
 8001812:	231f      	movs	r3, #31
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800181a:	22b4      	movs	r2, #180	; 0xb4
 800181c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001820:	208c      	movs	r0, #140	; 0x8c
 8001822:	f000 fb79 	bl	8001f18 <lcd_Fill>
      lcd_ShowStr(142, 280, "RIGHT", RED, BLUE, 16, 1);
 8001826:	2301      	movs	r3, #1
 8001828:	9302      	str	r3, [sp, #8]
 800182a:	2310      	movs	r3, #16
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	231f      	movs	r3, #31
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001836:	4a2c      	ldr	r2, [pc, #176]	; (80018e8 <UI+0x1c0>)
 8001838:	f44f 718c 	mov.w	r1, #280	; 0x118
 800183c:	208e      	movs	r0, #142	; 0x8e
 800183e:	f001 f823 	bl	8002888 <lcd_ShowStr>

      lcd_StrCenter(0, 200, "REMAINING PREY:", BLACK, WHITE, 16, 1);
 8001842:	2301      	movs	r3, #1
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	2310      	movs	r3, #16
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2300      	movs	r3, #0
 8001852:	4a26      	ldr	r2, [pc, #152]	; (80018ec <UI+0x1c4>)
 8001854:	21c8      	movs	r1, #200	; 0xc8
 8001856:	2000      	movs	r0, #0
 8001858:	f001 f87a 	bl	8002950 <lcd_StrCenter>
      lcd_ShowIntNum(180, 200, remain_prey, 1, BLUE, WHITE, 16);
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <UI+0x1c8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b29a      	uxth	r2, r3
 8001862:	2310      	movs	r3, #16
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	231f      	movs	r3, #31
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	21c8      	movs	r1, #200	; 0xc8
 8001874:	20b4      	movs	r0, #180	; 0xb4
 8001876:	f000 fd0d 	bl	8002294 <lcd_ShowIntNum>

      lcd_DrawCircle(prey_x, prey_y, YELLOW, 1, 1);
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <UI+0x1cc>)
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <UI+0x1d0>)
 8001880:	6819      	ldr	r1, [r3, #0]
 8001882:	2301      	movs	r3, #1
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2301      	movs	r3, #1
 8001888:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800188c:	f000 ff8f 	bl	80027ae <lcd_DrawCircle>

      snake_move();
 8001890:	f7ff ff04 	bl	800169c <snake_move>
      break;
 8001894:	e01b      	b.n	80018ce <UI+0x1a6>
    case LOSE:
      // lcd_Fill(10, 50, 230, 150, BLACK);

      lcd_StrCenter(0, 75, "LOSE!", RED, BLACK, 32, 1);
 8001896:	2301      	movs	r3, #1
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	2320      	movs	r3, #32
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	2300      	movs	r3, #0
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018a6:	4a15      	ldr	r2, [pc, #84]	; (80018fc <UI+0x1d4>)
 80018a8:	214b      	movs	r1, #75	; 0x4b
 80018aa:	2000      	movs	r0, #0
 80018ac:	f001 f850 	bl	8002950 <lcd_StrCenter>
      break;
 80018b0:	e00d      	b.n	80018ce <UI+0x1a6>
      // time_counter0 = (time_counter0 + 1) % 60;
      // if (time_counter0 == 0) {

      // lcd_Fill(10, 50, 230, 150, BLACK);

      lcd_StrCenter(0, 75, "WIN!", RED, BLACK, 32, 1);
 80018b2:	2301      	movs	r3, #1
 80018b4:	9302      	str	r3, [sp, #8]
 80018b6:	2320      	movs	r3, #32
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	2300      	movs	r3, #0
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018c2:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <UI+0x1d8>)
 80018c4:	214b      	movs	r1, #75	; 0x4b
 80018c6:	2000      	movs	r0, #0
 80018c8:	f001 f842 	bl	8002950 <lcd_StrCenter>
      // }
      break;
 80018cc:	bf00      	nop
    default:
  }
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200001d1 	.word	0x200001d1
 80018d8:	08008328 	.word	0x08008328
 80018dc:	08008330 	.word	0x08008330
 80018e0:	08008334 	.word	0x08008334
 80018e4:	0800833c 	.word	0x0800833c
 80018e8:	08008344 	.word	0x08008344
 80018ec:	0800834c 	.word	0x0800834c
 80018f0:	20000008 	.word	0x20000008
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004
 80018fc:	0800835c 	.word	0x0800835c
 8001900:	08008364 	.word	0x08008364

08001904 <isNavigated>:

void isNavigated(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  if (!touch_IsTouched())
 8001908:	f002 fb16 	bl	8003f38 <touch_IsTouched>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d067      	beq.n	80019e2 <isNavigated+0xde>
    ;
  else if (touch_GetX() > 100 && touch_GetX() < 140 && touch_GetY() > 260 &&
 8001912:	f002 fb23 	bl	8003f5c <touch_GetX>
 8001916:	4603      	mov	r3, r0
 8001918:	2b64      	cmp	r3, #100	; 0x64
 800191a:	d914      	bls.n	8001946 <isNavigated+0x42>
 800191c:	f002 fb1e 	bl	8003f5c <touch_GetX>
 8001920:	4603      	mov	r3, r0
 8001922:	2b8b      	cmp	r3, #139	; 0x8b
 8001924:	d80f      	bhi.n	8001946 <isNavigated+0x42>
 8001926:	f002 fb25 	bl	8003f74 <touch_GetY>
 800192a:	4603      	mov	r3, r0
 800192c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001930:	d909      	bls.n	8001946 <isNavigated+0x42>
           touch_GetY() < 280)
 8001932:	f002 fb1f 	bl	8003f74 <touch_GetY>
 8001936:	4603      	mov	r3, r0
  else if (touch_GetX() > 100 && touch_GetX() < 140 && touch_GetY() > 260 &&
 8001938:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800193c:	d203      	bcs.n	8001946 <isNavigated+0x42>
    next_dir = UP;
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <isNavigated+0xe4>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	e04d      	b.n	80019e2 <isNavigated+0xde>
  else if (touch_GetX() > 100 && touch_GetX() < 140 && touch_GetY() > 300 &&
 8001946:	f002 fb09 	bl	8003f5c <touch_GetX>
 800194a:	4603      	mov	r3, r0
 800194c:	2b64      	cmp	r3, #100	; 0x64
 800194e:	d914      	bls.n	800197a <isNavigated+0x76>
 8001950:	f002 fb04 	bl	8003f5c <touch_GetX>
 8001954:	4603      	mov	r3, r0
 8001956:	2b8b      	cmp	r3, #139	; 0x8b
 8001958:	d80f      	bhi.n	800197a <isNavigated+0x76>
 800195a:	f002 fb0b 	bl	8003f74 <touch_GetY>
 800195e:	4603      	mov	r3, r0
 8001960:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001964:	d909      	bls.n	800197a <isNavigated+0x76>
           touch_GetY() < 320)
 8001966:	f002 fb05 	bl	8003f74 <touch_GetY>
 800196a:	4603      	mov	r3, r0
  else if (touch_GetX() > 100 && touch_GetX() < 140 && touch_GetY() > 300 &&
 800196c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001970:	d203      	bcs.n	800197a <isNavigated+0x76>
    next_dir = DOWN;
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <isNavigated+0xe4>)
 8001974:	2202      	movs	r2, #2
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	e033      	b.n	80019e2 <isNavigated+0xde>
  else if (touch_GetX() > 60 && touch_GetX() < 100 && touch_GetY() > 280 &&
 800197a:	f002 faef 	bl	8003f5c <touch_GetX>
 800197e:	4603      	mov	r3, r0
 8001980:	2b3c      	cmp	r3, #60	; 0x3c
 8001982:	d914      	bls.n	80019ae <isNavigated+0xaa>
 8001984:	f002 faea 	bl	8003f5c <touch_GetX>
 8001988:	4603      	mov	r3, r0
 800198a:	2b63      	cmp	r3, #99	; 0x63
 800198c:	d80f      	bhi.n	80019ae <isNavigated+0xaa>
 800198e:	f002 faf1 	bl	8003f74 <touch_GetY>
 8001992:	4603      	mov	r3, r0
 8001994:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001998:	d909      	bls.n	80019ae <isNavigated+0xaa>
           touch_GetY() < 300)
 800199a:	f002 faeb 	bl	8003f74 <touch_GetY>
 800199e:	4603      	mov	r3, r0
  else if (touch_GetX() > 60 && touch_GetX() < 100 && touch_GetY() > 280 &&
 80019a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80019a4:	d203      	bcs.n	80019ae <isNavigated+0xaa>
    next_dir = LEFT;
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <isNavigated+0xe4>)
 80019a8:	2203      	movs	r2, #3
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	e019      	b.n	80019e2 <isNavigated+0xde>
  else if (touch_GetX() > 140 && touch_GetX() < 180 && touch_GetY() > 280 &&
 80019ae:	f002 fad5 	bl	8003f5c <touch_GetX>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b8c      	cmp	r3, #140	; 0x8c
 80019b6:	d914      	bls.n	80019e2 <isNavigated+0xde>
 80019b8:	f002 fad0 	bl	8003f5c <touch_GetX>
 80019bc:	4603      	mov	r3, r0
 80019be:	2bb3      	cmp	r3, #179	; 0xb3
 80019c0:	d80f      	bhi.n	80019e2 <isNavigated+0xde>
 80019c2:	f002 fad7 	bl	8003f74 <touch_GetY>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80019cc:	d909      	bls.n	80019e2 <isNavigated+0xde>
           touch_GetY() < 300)
 80019ce:	f002 fad1 	bl	8003f74 <touch_GetY>
 80019d2:	4603      	mov	r3, r0
  else if (touch_GetX() > 140 && touch_GetX() < 180 && touch_GetY() > 280 &&
 80019d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80019d8:	d203      	bcs.n	80019e2 <isNavigated+0xde>
    next_dir = RIGHT;
 80019da:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <isNavigated+0xe4>)
 80019dc:	2204      	movs	r2, #4
 80019de:	701a      	strb	r2, [r3, #0]
}
 80019e0:	e7ff      	b.n	80019e2 <isNavigated+0xde>
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200001d3 	.word	0x200001d3

080019ec <handle_snake_dir>:

void handle_snake_dir(void) {
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
  int i;
  for (i = snake_len; i > 0; i--) {
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <handle_snake_dir+0xa4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	e014      	b.n	8001a24 <handle_snake_dir+0x38>
    snake_x[i] = snake_x[i - 1];
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <handle_snake_dir+0xa8>)
 8001a00:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a04:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <handle_snake_dir+0xa8>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    snake_y[i] = snake_y[i - 1];
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	4a21      	ldr	r2, [pc, #132]	; (8001a98 <handle_snake_dir+0xac>)
 8001a12:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a16:	4a20      	ldr	r2, [pc, #128]	; (8001a98 <handle_snake_dir+0xac>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (i = snake_len; i > 0; i--) {
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	dce7      	bgt.n	80019fa <handle_snake_dir+0xe>
  }

  switch (snake_dir) {
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <handle_snake_dir+0xb0>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d827      	bhi.n	8001a84 <handle_snake_dir+0x98>
 8001a34:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <handle_snake_dir+0x50>)
 8001a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001a5b 	.word	0x08001a5b
 8001a44:	08001a69 	.word	0x08001a69
 8001a48:	08001a77 	.word	0x08001a77
    case UP:
      snake_y[0] = snake_y[1] - HIT;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <handle_snake_dir+0xac>)
 8001a4e:	885b      	ldrh	r3, [r3, #2]
 8001a50:	3b0a      	subs	r3, #10
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <handle_snake_dir+0xac>)
 8001a56:	801a      	strh	r2, [r3, #0]
      break;
 8001a58:	e014      	b.n	8001a84 <handle_snake_dir+0x98>
    case DOWN:
      snake_y[0] = snake_y[1] + HIT;
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <handle_snake_dir+0xac>)
 8001a5c:	885b      	ldrh	r3, [r3, #2]
 8001a5e:	330a      	adds	r3, #10
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <handle_snake_dir+0xac>)
 8001a64:	801a      	strh	r2, [r3, #0]
      break;
 8001a66:	e00d      	b.n	8001a84 <handle_snake_dir+0x98>
    case LEFT:
      snake_x[0] = snake_x[1] - HIT;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <handle_snake_dir+0xa8>)
 8001a6a:	885b      	ldrh	r3, [r3, #2]
 8001a6c:	3b0a      	subs	r3, #10
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <handle_snake_dir+0xa8>)
 8001a72:	801a      	strh	r2, [r3, #0]
      break;
 8001a74:	e006      	b.n	8001a84 <handle_snake_dir+0x98>
    case RIGHT:
      snake_x[0] = snake_x[1] + HIT;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <handle_snake_dir+0xa8>)
 8001a78:	885b      	ldrh	r3, [r3, #2]
 8001a7a:	330a      	adds	r3, #10
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <handle_snake_dir+0xa8>)
 8001a80:	801a      	strh	r2, [r3, #0]
      break;
 8001a82:	bf00      	nop
    default:
  }
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	20000364 	.word	0x20000364
 8001a94:	200001d4 	.word	0x200001d4
 8001a98:	2000029c 	.word	0x2000029c
 8001a9c:	200001d2 	.word	0x200001d2

08001aa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08e      	sub	sp, #56	; 0x38
 8001aa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
 8001aba:	4b7e      	ldr	r3, [pc, #504]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a7d      	ldr	r2, [pc, #500]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001ac0:	f043 0310 	orr.w	r3, r3, #16
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b7b      	ldr	r3, [pc, #492]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	4b77      	ldr	r3, [pc, #476]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a76      	ldr	r2, [pc, #472]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b74      	ldr	r3, [pc, #464]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	4b70      	ldr	r3, [pc, #448]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a6f      	ldr	r2, [pc, #444]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001af8:	f043 0320 	orr.w	r3, r3, #32
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b6d      	ldr	r3, [pc, #436]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0320 	and.w	r3, r3, #32
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	4b69      	ldr	r3, [pc, #420]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a68      	ldr	r2, [pc, #416]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b66      	ldr	r3, [pc, #408]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b62      	ldr	r3, [pc, #392]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a61      	ldr	r2, [pc, #388]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b5f      	ldr	r3, [pc, #380]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b54      	ldr	r3, [pc, #336]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a53      	ldr	r2, [pc, #332]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b51      	ldr	r3, [pc, #324]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4b4d      	ldr	r3, [pc, #308]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a4c      	ldr	r2, [pc, #304]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	; (8001cb4 <MX_GPIO_Init+0x214>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2170      	movs	r1, #112	; 0x70
 8001b9a:	4847      	ldr	r0, [pc, #284]	; (8001cb8 <MX_GPIO_Init+0x218>)
 8001b9c:	f003 fac8 	bl	8005130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8001ba6:	4845      	ldr	r0, [pc, #276]	; (8001cbc <MX_GPIO_Init+0x21c>)
 8001ba8:	f003 fac2 	bl	8005130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001bb2:	4843      	ldr	r0, [pc, #268]	; (8001cc0 <MX_GPIO_Init+0x220>)
 8001bb4:	f003 fabc 	bl	8005130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bbe:	4841      	ldr	r0, [pc, #260]	; (8001cc4 <MX_GPIO_Init+0x224>)
 8001bc0:	f003 fab6 	bl	8005130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2108      	movs	r1, #8
 8001bc8:	483f      	ldr	r0, [pc, #252]	; (8001cc8 <MX_GPIO_Init+0x228>)
 8001bca:	f003 fab1 	bl	8005130 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001bce:	2370      	movs	r3, #112	; 0x70
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be2:	4619      	mov	r1, r3
 8001be4:	4834      	ldr	r0, [pc, #208]	; (8001cb8 <MX_GPIO_Init+0x218>)
 8001be6:	f003 f8ef 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8001bea:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	4619      	mov	r1, r3
 8001c02:	482e      	ldr	r0, [pc, #184]	; (8001cbc <MX_GPIO_Init+0x21c>)
 8001c04:	f003 f8e0 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001c08:	23c0      	movs	r3, #192	; 0xc0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	482a      	ldr	r0, [pc, #168]	; (8001cc4 <MX_GPIO_Init+0x224>)
 8001c1c:	f003 f8d4 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001c20:	2330      	movs	r3, #48	; 0x30
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c30:	4619      	mov	r1, r3
 8001c32:	4822      	ldr	r0, [pc, #136]	; (8001cbc <MX_GPIO_Init+0x21c>)
 8001c34:	f003 f8c8 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001c38:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	481b      	ldr	r0, [pc, #108]	; (8001cc0 <MX_GPIO_Init+0x220>)
 8001c52:	f003 f8b9 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8001c56:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4814      	ldr	r0, [pc, #80]	; (8001cbc <MX_GPIO_Init+0x21c>)
 8001c6c:	f003 f8ac 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	4619      	mov	r1, r3
 8001c88:	480e      	ldr	r0, [pc, #56]	; (8001cc4 <MX_GPIO_Init+0x224>)
 8001c8a:	f003 f89d 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001c8e:	2308      	movs	r3, #8
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4808      	ldr	r0, [pc, #32]	; (8001cc8 <MX_GPIO_Init+0x228>)
 8001ca6:	f003 f88f 	bl	8004dc8 <HAL_GPIO_Init>

}
 8001caa:	bf00      	nop
 8001cac:	3738      	adds	r7, #56	; 0x38
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40021800 	.word	0x40021800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40020c00 	.word	0x40020c00

08001ccc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <MX_I2C1_Init+0x50>)
 8001cd2:	4a13      	ldr	r2, [pc, #76]	; (8001d20 <MX_I2C1_Init+0x54>)
 8001cd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_I2C1_Init+0x50>)
 8001cd8:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <MX_I2C1_Init+0x58>)
 8001cda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MX_I2C1_Init+0x50>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_I2C1_Init+0x50>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_I2C1_Init+0x50>)
 8001cea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <MX_I2C1_Init+0x50>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_I2C1_Init+0x50>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <MX_I2C1_Init+0x50>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_I2C1_Init+0x50>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d08:	4804      	ldr	r0, [pc, #16]	; (8001d1c <MX_I2C1_Init+0x50>)
 8001d0a:	f003 fa2b 	bl	8005164 <HAL_I2C_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d14:	f000 ff81 	bl	8002c1a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000368 	.word	0x20000368
 8001d20:	40005400 	.word	0x40005400
 8001d24:	000186a0 	.word	0x000186a0

08001d28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a19      	ldr	r2, [pc, #100]	; (8001dac <HAL_I2C_MspInit+0x84>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d12b      	bne.n	8001da2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_I2C_MspInit+0x88>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_I2C_MspInit+0x88>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_I2C_MspInit+0x88>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d66:	23c0      	movs	r3, #192	; 0xc0
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d6a:	2312      	movs	r3, #18
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d76:	2304      	movs	r3, #4
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480c      	ldr	r0, [pc, #48]	; (8001db4 <HAL_I2C_MspInit+0x8c>)
 8001d82:	f003 f821 	bl	8004dc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_I2C_MspInit+0x88>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <HAL_I2C_MspInit+0x88>)
 8001d90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_I2C_MspInit+0x88>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40005400 	.word	0x40005400
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020400 	.word	0x40020400

08001db8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001dc2:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <LCD_WR_REG+0x1c>)
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	8013      	strh	r3, [r2, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	600ffffe 	.word	0x600ffffe

08001dd8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001de2:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <LCD_WR_DATA+0x1c>)
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	8053      	strh	r3, [r2, #2]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	600ffffe 	.word	0x600ffffe

08001df8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <LCD_RD_DATA+0x20>)
 8001e00:	885b      	ldrh	r3, [r3, #2]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	b29b      	uxth	r3, r3
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	600ffffe 	.word	0x600ffffe

08001e1c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4604      	mov	r4, r0
 8001e24:	4608      	mov	r0, r1
 8001e26:	4611      	mov	r1, r2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4623      	mov	r3, r4
 8001e2c:	80fb      	strh	r3, [r7, #6]
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80bb      	strh	r3, [r7, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	807b      	strh	r3, [r7, #2]
 8001e36:	4613      	mov	r3, r2
 8001e38:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001e3a:	202a      	movs	r0, #42	; 0x2a
 8001e3c:	f7ff ffbc 	bl	8001db8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ffc6 	bl	8001dd8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ffc0 	bl	8001dd8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ffba 	bl	8001dd8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ffb4 	bl	8001dd8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001e70:	202b      	movs	r0, #43	; 0x2b
 8001e72:	f7ff ffa1 	bl	8001db8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001e76:	88bb      	ldrh	r3, [r7, #4]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ffab 	bl	8001dd8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001e82:	88bb      	ldrh	r3, [r7, #4]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ffa5 	bl	8001dd8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001e8e:	883b      	ldrh	r3, [r7, #0]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff9f 	bl	8001dd8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001e9a:	883b      	ldrh	r3, [r7, #0]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff99 	bl	8001dd8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001ea6:	202c      	movs	r0, #44	; 0x2c
 8001ea8:	f7ff ff86 	bl	8001db8 <LCD_WR_REG>
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd90      	pop	{r4, r7, pc}

08001eb4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <lcd_Clear+0x60>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <lcd_Clear+0x60>)
 8001ec8:	885b      	ldrh	r3, [r3, #2]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff ffa3 	bl	8001e1c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	81fb      	strh	r3, [r7, #14]
 8001eda:	e011      	b.n	8001f00 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	81bb      	strh	r3, [r7, #12]
 8001ee0:	e006      	b.n	8001ef0 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff77 	bl	8001dd8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001eea:	89bb      	ldrh	r3, [r7, #12]
 8001eec:	3301      	adds	r3, #1
 8001eee:	81bb      	strh	r3, [r7, #12]
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <lcd_Clear+0x60>)
 8001ef2:	885b      	ldrh	r3, [r3, #2]
 8001ef4:	89ba      	ldrh	r2, [r7, #12]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3f3      	bcc.n	8001ee2 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	3301      	adds	r3, #1
 8001efe:	81fb      	strh	r3, [r7, #14]
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <lcd_Clear+0x60>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	89fa      	ldrh	r2, [r7, #14]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d3e8      	bcc.n	8001edc <lcd_Clear+0x28>
		}
	}
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200003bc 	.word	0x200003bc

08001f18 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4604      	mov	r4, r0
 8001f20:	4608      	mov	r0, r1
 8001f22:	4611      	mov	r1, r2
 8001f24:	461a      	mov	r2, r3
 8001f26:	4623      	mov	r3, r4
 8001f28:	80fb      	strh	r3, [r7, #6]
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	80bb      	strh	r3, [r7, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	807b      	strh	r3, [r7, #2]
 8001f32:	4613      	mov	r3, r2
 8001f34:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	883b      	ldrh	r3, [r7, #0]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	88b9      	ldrh	r1, [r7, #4]
 8001f44:	88f8      	ldrh	r0, [r7, #6]
 8001f46:	f7ff ff69 	bl	8001e1c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001f4a:	88bb      	ldrh	r3, [r7, #4]
 8001f4c:	81fb      	strh	r3, [r7, #14]
 8001f4e:	e010      	b.n	8001f72 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	81bb      	strh	r3, [r7, #12]
 8001f54:	e006      	b.n	8001f64 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001f56:	8c3b      	ldrh	r3, [r7, #32]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff3d 	bl	8001dd8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001f5e:	89bb      	ldrh	r3, [r7, #12]
 8001f60:	3301      	adds	r3, #1
 8001f62:	81bb      	strh	r3, [r7, #12]
 8001f64:	89ba      	ldrh	r2, [r7, #12]
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d3f4      	bcc.n	8001f56 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001f6c:	89fb      	ldrh	r3, [r7, #14]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	81fb      	strh	r3, [r7, #14]
 8001f72:	89fa      	ldrh	r2, [r7, #14]
 8001f74:	883b      	ldrh	r3, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3ea      	bcc.n	8001f50 <lcd_Fill+0x38>
		}
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd90      	pop	{r4, r7, pc}

08001f84 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80fb      	strh	r3, [r7, #6]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	80bb      	strh	r3, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001f96:	88bb      	ldrh	r3, [r7, #4]
 8001f98:	88fa      	ldrh	r2, [r7, #6]
 8001f9a:	88b9      	ldrh	r1, [r7, #4]
 8001f9c:	88f8      	ldrh	r0, [r7, #6]
 8001f9e:	f7ff ff3d 	bl	8001e1c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff17 	bl	8001dd8 <LCD_WR_DATA>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001fb2:	b590      	push	{r4, r7, lr}
 8001fb4:	b08d      	sub	sp, #52	; 0x34
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4604      	mov	r4, r0
 8001fba:	4608      	mov	r0, r1
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4623      	mov	r3, r4
 8001fc2:	80fb      	strh	r3, [r7, #6]
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	80bb      	strh	r3, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001fd8:	887a      	ldrh	r2, [r7, #2]
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001fe0:	883a      	ldrh	r2, [r7, #0]
 8001fe2:	88bb      	ldrh	r3, [r7, #4]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001fec:	88bb      	ldrh	r3, [r7, #4]
 8001fee:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	dd02      	ble.n	8001ffc <lcd_DrawLine+0x4a>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e00b      	b.n	8002014 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <lcd_DrawLine+0x56>
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e005      	b.n	8002014 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	425b      	negs	r3, r3
 8002012:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	dd02      	ble.n	8002020 <lcd_DrawLine+0x6e>
 800201a:	2301      	movs	r3, #1
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	e00b      	b.n	8002038 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <lcd_DrawLine+0x7a>
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e005      	b.n	8002038 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 800202c:	f04f 33ff 	mov.w	r3, #4294967295
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	425b      	negs	r3, r3
 8002036:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8002038:	6a3a      	ldr	r2, [r7, #32]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	429a      	cmp	r2, r3
 800203e:	dd02      	ble.n	8002046 <lcd_DrawLine+0x94>
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	e001      	b.n	800204a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800204a:	2300      	movs	r3, #0
 800204c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800204e:	e02b      	b.n	80020a8 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	b29b      	uxth	r3, r3
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	b291      	uxth	r1, r2
 8002058:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff91 	bl	8001f84 <lcd_DrawPoint>
		xerr+=delta_x;
 8002062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	4413      	add	r3, r2
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 800206a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	4413      	add	r3, r2
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8002072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	429a      	cmp	r2, r3
 8002078:	dd07      	ble.n	800208a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 800207a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 800208a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	429a      	cmp	r2, r3
 8002090:	dd07      	ble.n	80020a2 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8002092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80020a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020a4:	3301      	adds	r3, #1
 80020a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80020a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	dacf      	bge.n	8002050 <lcd_DrawLine+0x9e>
		}
	}
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3734      	adds	r7, #52	; 0x34
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd90      	pop	{r4, r7, pc}
	...

080020bc <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4604      	mov	r4, r0
 80020c4:	4608      	mov	r0, r1
 80020c6:	4611      	mov	r1, r2
 80020c8:	461a      	mov	r2, r3
 80020ca:	4623      	mov	r3, r4
 80020cc:	80fb      	strh	r3, [r7, #6]
 80020ce:	4603      	mov	r3, r0
 80020d0:	80bb      	strh	r3, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	70fb      	strb	r3, [r7, #3]
 80020d6:	4613      	mov	r3, r2
 80020d8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80020da:	2300      	movs	r3, #0
 80020dc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80020e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	08db      	lsrs	r3, r3, #3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf14      	ite	ne
 80020fe:	2301      	movne	r3, #1
 8002100:	2300      	moveq	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4413      	add	r3, r2
 8002106:	b29a      	uxth	r2, r3
 8002108:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800210c:	b29b      	uxth	r3, r3
 800210e:	fb12 f303 	smulbb	r3, r2, r3
 8002112:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	3b20      	subs	r3, #32
 8002118:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	b29a      	uxth	r2, r3
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	4413      	add	r3, r2
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29c      	uxth	r4, r3
 8002128:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800212c:	b29a      	uxth	r2, r3
 800212e:	88bb      	ldrh	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29b      	uxth	r3, r3
 8002138:	88b9      	ldrh	r1, [r7, #4]
 800213a:	88f8      	ldrh	r0, [r7, #6]
 800213c:	4622      	mov	r2, r4
 800213e:	f7ff fe6d 	bl	8001e1c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8002142:	2300      	movs	r3, #0
 8002144:	827b      	strh	r3, [r7, #18]
 8002146:	e07a      	b.n	800223e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002148:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800214c:	2b0c      	cmp	r3, #12
 800214e:	d028      	beq.n	80021a2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8002150:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002154:	2b10      	cmp	r3, #16
 8002156:	d108      	bne.n	800216a <lcd_ShowChar+0xae>
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	8a7b      	ldrh	r3, [r7, #18]
 800215c:	493c      	ldr	r1, [pc, #240]	; (8002250 <lcd_ShowChar+0x194>)
 800215e:	0112      	lsls	r2, r2, #4
 8002160:	440a      	add	r2, r1
 8002162:	4413      	add	r3, r2
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	75fb      	strb	r3, [r7, #23]
 8002168:	e01b      	b.n	80021a2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800216a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800216e:	2b18      	cmp	r3, #24
 8002170:	d10b      	bne.n	800218a <lcd_ShowChar+0xce>
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	8a79      	ldrh	r1, [r7, #18]
 8002176:	4837      	ldr	r0, [pc, #220]	; (8002254 <lcd_ShowChar+0x198>)
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	4403      	add	r3, r0
 8002182:	440b      	add	r3, r1
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	75fb      	strb	r3, [r7, #23]
 8002188:	e00b      	b.n	80021a2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800218a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800218e:	2b20      	cmp	r3, #32
 8002190:	d15a      	bne.n	8002248 <lcd_ShowChar+0x18c>
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	8a7b      	ldrh	r3, [r7, #18]
 8002196:	4930      	ldr	r1, [pc, #192]	; (8002258 <lcd_ShowChar+0x19c>)
 8002198:	0192      	lsls	r2, r2, #6
 800219a:	440a      	add	r2, r1
 800219c:	4413      	add	r3, r2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	75bb      	strb	r3, [r7, #22]
 80021a6:	e044      	b.n	8002232 <lcd_ShowChar+0x176>
		{
			if(!mode)
 80021a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d120      	bne.n	80021f2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80021b0:	7dfa      	ldrb	r2, [r7, #23]
 80021b2:	7dbb      	ldrb	r3, [r7, #22]
 80021b4:	fa42 f303 	asr.w	r3, r2, r3
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <lcd_ShowChar+0x10e>
 80021c0:	883b      	ldrh	r3, [r7, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fe08 	bl	8001dd8 <LCD_WR_DATA>
 80021c8:	e003      	b.n	80021d2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80021ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fe03 	bl	8001dd8 <LCD_WR_DATA>
				m++;
 80021d2:	7d7b      	ldrb	r3, [r7, #21]
 80021d4:	3301      	adds	r3, #1
 80021d6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80021d8:	7d7b      	ldrb	r3, [r7, #21]
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80021e0:	fb01 f202 	mul.w	r2, r1, r2
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d11f      	bne.n	800222c <lcd_ShowChar+0x170>
				{
					m=0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	757b      	strb	r3, [r7, #21]
					break;
 80021f0:	e022      	b.n	8002238 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80021f2:	7dfa      	ldrb	r2, [r7, #23]
 80021f4:	7dbb      	ldrb	r3, [r7, #22]
 80021f6:	fa42 f303 	asr.w	r3, r2, r3
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <lcd_ShowChar+0x152>
 8002202:	883a      	ldrh	r2, [r7, #0]
 8002204:	88b9      	ldrh	r1, [r7, #4]
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff febb 	bl	8001f84 <lcd_DrawPoint>
				x++;
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	3301      	adds	r3, #1
 8002212:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002214:	88fa      	ldrh	r2, [r7, #6]
 8002216:	8a3b      	ldrh	r3, [r7, #16]
 8002218:	1ad2      	subs	r2, r2, r3
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	429a      	cmp	r2, r3
 800221e:	d105      	bne.n	800222c <lcd_ShowChar+0x170>
				{
					x=x0;
 8002220:	8a3b      	ldrh	r3, [r7, #16]
 8002222:	80fb      	strh	r3, [r7, #6]
					y++;
 8002224:	88bb      	ldrh	r3, [r7, #4]
 8002226:	3301      	adds	r3, #1
 8002228:	80bb      	strh	r3, [r7, #4]
					break;
 800222a:	e005      	b.n	8002238 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 800222c:	7dbb      	ldrb	r3, [r7, #22]
 800222e:	3301      	adds	r3, #1
 8002230:	75bb      	strb	r3, [r7, #22]
 8002232:	7dbb      	ldrb	r3, [r7, #22]
 8002234:	2b07      	cmp	r3, #7
 8002236:	d9b7      	bls.n	80021a8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002238:	8a7b      	ldrh	r3, [r7, #18]
 800223a:	3301      	adds	r3, #1
 800223c:	827b      	strh	r3, [r7, #18]
 800223e:	8a7a      	ldrh	r2, [r7, #18]
 8002240:	89bb      	ldrh	r3, [r7, #12]
 8002242:	429a      	cmp	r2, r3
 8002244:	d380      	bcc.n	8002148 <lcd_ShowChar+0x8c>
 8002246:	e000      	b.n	800224a <lcd_ShowChar+0x18e>
		else return;
 8002248:	bf00      	nop
				}
			}
		}
	}
}
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd90      	pop	{r4, r7, pc}
 8002250:	0800844c 	.word	0x0800844c
 8002254:	08008a3c 	.word	0x08008a3c
 8002258:	08009c0c 	.word	0x08009c0c

0800225c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	460a      	mov	r2, r1
 8002266:	71fb      	strb	r3, [r7, #7]
 8002268:	4613      	mov	r3, r2
 800226a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 800226c:	2301      	movs	r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002270:	e004      	b.n	800227c <mypow+0x20>
 8002272:	79fa      	ldrb	r2, [r7, #7]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	71ba      	strb	r2, [r7, #6]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f5      	bne.n	8002272 <mypow+0x16>
	return result;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af04      	add	r7, sp, #16
 800229a:	4604      	mov	r4, r0
 800229c:	4608      	mov	r0, r1
 800229e:	4611      	mov	r1, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	4623      	mov	r3, r4
 80022a4:	80fb      	strh	r3, [r7, #6]
 80022a6:	4603      	mov	r3, r0
 80022a8:	80bb      	strh	r3, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]
 80022ae:	4613      	mov	r3, r2
 80022b0:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80022b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	e059      	b.n	8002378 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80022c4:	887c      	ldrh	r4, [r7, #2]
 80022c6:	787a      	ldrb	r2, [r7, #1]
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	4619      	mov	r1, r3
 80022d4:	200a      	movs	r0, #10
 80022d6:	f7ff ffc1 	bl	800225c <mypow>
 80022da:	4603      	mov	r3, r0
 80022dc:	fbb4 f1f3 	udiv	r1, r4, r3
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <lcd_ShowIntNum+0xf8>)
 80022e2:	fba3 2301 	umull	r2, r3, r3, r1
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	1aca      	subs	r2, r1, r3
 80022f2:	4613      	mov	r3, r2
 80022f4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80022f6:	7bbb      	ldrb	r3, [r7, #14]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d121      	bne.n	8002340 <lcd_ShowIntNum+0xac>
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	787b      	ldrb	r3, [r7, #1]
 8002300:	3b01      	subs	r3, #1
 8002302:	429a      	cmp	r2, r3
 8002304:	da1c      	bge.n	8002340 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8002306:	7b3b      	ldrb	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d117      	bne.n	800233c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	b29a      	uxth	r2, r3
 8002310:	7b7b      	ldrb	r3, [r7, #13]
 8002312:	b29b      	uxth	r3, r3
 8002314:	fb12 f303 	smulbb	r3, r2, r3
 8002318:	b29a      	uxth	r2, r3
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	4413      	add	r3, r2
 800231e:	b298      	uxth	r0, r3
 8002320:	8c3a      	ldrh	r2, [r7, #32]
 8002322:	88b9      	ldrh	r1, [r7, #4]
 8002324:	2300      	movs	r3, #0
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	4613      	mov	r3, r2
 8002334:	2220      	movs	r2, #32
 8002336:	f7ff fec1 	bl	80020bc <lcd_ShowChar>
				continue;
 800233a:	e01a      	b.n	8002372 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 800233c:	2301      	movs	r3, #1
 800233e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	b29a      	uxth	r2, r3
 8002344:	7b7b      	ldrb	r3, [r7, #13]
 8002346:	b29b      	uxth	r3, r3
 8002348:	fb12 f303 	smulbb	r3, r2, r3
 800234c:	b29a      	uxth	r2, r3
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	4413      	add	r3, r2
 8002352:	b298      	uxth	r0, r3
 8002354:	7b3b      	ldrb	r3, [r7, #12]
 8002356:	3330      	adds	r3, #48	; 0x30
 8002358:	b2da      	uxtb	r2, r3
 800235a:	8c3c      	ldrh	r4, [r7, #32]
 800235c:	88b9      	ldrh	r1, [r7, #4]
 800235e:	2300      	movs	r3, #0
 8002360:	9302      	str	r3, [sp, #8]
 8002362:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4623      	mov	r3, r4
 800236e:	f7ff fea5 	bl	80020bc <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	3301      	adds	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	787b      	ldrb	r3, [r7, #1]
 800237c:	429a      	cmp	r2, r3
 800237e:	d3a1      	bcc.n	80022c4 <lcd_ShowIntNum+0x30>
	}
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	bf00      	nop
 800238c:	cccccccd 	.word	0xcccccccd

08002390 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <lcd_SetDir+0x44>)
 80023ac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023b0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <lcd_SetDir+0x44>)
 80023b4:	22f0      	movs	r2, #240	; 0xf0
 80023b6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80023b8:	e006      	b.n	80023c8 <lcd_SetDir+0x38>
		lcddev.width=240;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <lcd_SetDir+0x44>)
 80023bc:	22f0      	movs	r2, #240	; 0xf0
 80023be:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <lcd_SetDir+0x44>)
 80023c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023c6:	805a      	strh	r2, [r3, #2]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	200003bc 	.word	0x200003bc

080023d8 <lcd_init>:


void lcd_init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80023dc:	2200      	movs	r2, #0
 80023de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023e2:	48aa      	ldr	r0, [pc, #680]	; (800268c <lcd_init+0x2b4>)
 80023e4:	f002 fea4 	bl	8005130 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80023e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023ec:	f001 fe6a 	bl	80040c4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80023f0:	2201      	movs	r2, #1
 80023f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023f6:	48a5      	ldr	r0, [pc, #660]	; (800268c <lcd_init+0x2b4>)
 80023f8:	f002 fe9a 	bl	8005130 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80023fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002400:	f001 fe60 	bl	80040c4 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002404:	2000      	movs	r0, #0
 8002406:	f7ff ffc3 	bl	8002390 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800240a:	20d3      	movs	r0, #211	; 0xd3
 800240c:	f7ff fcd4 	bl	8001db8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002410:	f7ff fcf2 	bl	8001df8 <LCD_RD_DATA>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	4b9d      	ldr	r3, [pc, #628]	; (8002690 <lcd_init+0x2b8>)
 800241a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800241c:	f7ff fcec 	bl	8001df8 <LCD_RD_DATA>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	4b9a      	ldr	r3, [pc, #616]	; (8002690 <lcd_init+0x2b8>)
 8002426:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002428:	f7ff fce6 	bl	8001df8 <LCD_RD_DATA>
 800242c:	4603      	mov	r3, r0
 800242e:	461a      	mov	r2, r3
 8002430:	4b97      	ldr	r3, [pc, #604]	; (8002690 <lcd_init+0x2b8>)
 8002432:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002434:	4b96      	ldr	r3, [pc, #600]	; (8002690 <lcd_init+0x2b8>)
 8002436:	889b      	ldrh	r3, [r3, #4]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b94      	ldr	r3, [pc, #592]	; (8002690 <lcd_init+0x2b8>)
 800243e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002440:	f7ff fcda 	bl	8001df8 <LCD_RD_DATA>
 8002444:	4603      	mov	r3, r0
 8002446:	461a      	mov	r2, r3
 8002448:	4b91      	ldr	r3, [pc, #580]	; (8002690 <lcd_init+0x2b8>)
 800244a:	889b      	ldrh	r3, [r3, #4]
 800244c:	4313      	orrs	r3, r2
 800244e:	b29a      	uxth	r2, r3
 8002450:	4b8f      	ldr	r3, [pc, #572]	; (8002690 <lcd_init+0x2b8>)
 8002452:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002454:	20cf      	movs	r0, #207	; 0xcf
 8002456:	f7ff fcaf 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800245a:	2000      	movs	r0, #0
 800245c:	f7ff fcbc 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002460:	20c1      	movs	r0, #193	; 0xc1
 8002462:	f7ff fcb9 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002466:	2030      	movs	r0, #48	; 0x30
 8002468:	f7ff fcb6 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800246c:	20ed      	movs	r0, #237	; 0xed
 800246e:	f7ff fca3 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002472:	2064      	movs	r0, #100	; 0x64
 8002474:	f7ff fcb0 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002478:	2003      	movs	r0, #3
 800247a:	f7ff fcad 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800247e:	2012      	movs	r0, #18
 8002480:	f7ff fcaa 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002484:	2081      	movs	r0, #129	; 0x81
 8002486:	f7ff fca7 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800248a:	20e8      	movs	r0, #232	; 0xe8
 800248c:	f7ff fc94 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002490:	2085      	movs	r0, #133	; 0x85
 8002492:	f7ff fca1 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002496:	2010      	movs	r0, #16
 8002498:	f7ff fc9e 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800249c:	207a      	movs	r0, #122	; 0x7a
 800249e:	f7ff fc9b 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80024a2:	20cb      	movs	r0, #203	; 0xcb
 80024a4:	f7ff fc88 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80024a8:	2039      	movs	r0, #57	; 0x39
 80024aa:	f7ff fc95 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80024ae:	202c      	movs	r0, #44	; 0x2c
 80024b0:	f7ff fc92 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80024b4:	2000      	movs	r0, #0
 80024b6:	f7ff fc8f 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80024ba:	2034      	movs	r0, #52	; 0x34
 80024bc:	f7ff fc8c 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80024c0:	2002      	movs	r0, #2
 80024c2:	f7ff fc89 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80024c6:	20f7      	movs	r0, #247	; 0xf7
 80024c8:	f7ff fc76 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80024cc:	2020      	movs	r0, #32
 80024ce:	f7ff fc83 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80024d2:	20ea      	movs	r0, #234	; 0xea
 80024d4:	f7ff fc70 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80024d8:	2000      	movs	r0, #0
 80024da:	f7ff fc7d 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80024de:	2000      	movs	r0, #0
 80024e0:	f7ff fc7a 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80024e4:	20c0      	movs	r0, #192	; 0xc0
 80024e6:	f7ff fc67 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80024ea:	201b      	movs	r0, #27
 80024ec:	f7ff fc74 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80024f0:	20c1      	movs	r0, #193	; 0xc1
 80024f2:	f7ff fc61 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80024f6:	2001      	movs	r0, #1
 80024f8:	f7ff fc6e 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80024fc:	20c5      	movs	r0, #197	; 0xc5
 80024fe:	f7ff fc5b 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002502:	2030      	movs	r0, #48	; 0x30
 8002504:	f7ff fc68 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002508:	2030      	movs	r0, #48	; 0x30
 800250a:	f7ff fc65 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800250e:	20c7      	movs	r0, #199	; 0xc7
 8002510:	f7ff fc52 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002514:	20b7      	movs	r0, #183	; 0xb7
 8002516:	f7ff fc5f 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800251a:	2036      	movs	r0, #54	; 0x36
 800251c:	f7ff fc4c 	bl	8001db8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002520:	2008      	movs	r0, #8
 8002522:	f7ff fc59 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002526:	203a      	movs	r0, #58	; 0x3a
 8002528:	f7ff fc46 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800252c:	2055      	movs	r0, #85	; 0x55
 800252e:	f7ff fc53 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002532:	20b1      	movs	r0, #177	; 0xb1
 8002534:	f7ff fc40 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002538:	2000      	movs	r0, #0
 800253a:	f7ff fc4d 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800253e:	201a      	movs	r0, #26
 8002540:	f7ff fc4a 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002544:	20b6      	movs	r0, #182	; 0xb6
 8002546:	f7ff fc37 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800254a:	200a      	movs	r0, #10
 800254c:	f7ff fc44 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002550:	20a2      	movs	r0, #162	; 0xa2
 8002552:	f7ff fc41 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002556:	20f2      	movs	r0, #242	; 0xf2
 8002558:	f7ff fc2e 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800255c:	2000      	movs	r0, #0
 800255e:	f7ff fc3b 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002562:	2026      	movs	r0, #38	; 0x26
 8002564:	f7ff fc28 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002568:	2001      	movs	r0, #1
 800256a:	f7ff fc35 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800256e:	20e0      	movs	r0, #224	; 0xe0
 8002570:	f7ff fc22 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002574:	200f      	movs	r0, #15
 8002576:	f7ff fc2f 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800257a:	202a      	movs	r0, #42	; 0x2a
 800257c:	f7ff fc2c 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002580:	2028      	movs	r0, #40	; 0x28
 8002582:	f7ff fc29 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002586:	2008      	movs	r0, #8
 8002588:	f7ff fc26 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800258c:	200e      	movs	r0, #14
 800258e:	f7ff fc23 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002592:	2008      	movs	r0, #8
 8002594:	f7ff fc20 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002598:	2054      	movs	r0, #84	; 0x54
 800259a:	f7ff fc1d 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800259e:	20a9      	movs	r0, #169	; 0xa9
 80025a0:	f7ff fc1a 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80025a4:	2043      	movs	r0, #67	; 0x43
 80025a6:	f7ff fc17 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80025aa:	200a      	movs	r0, #10
 80025ac:	f7ff fc14 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80025b0:	200f      	movs	r0, #15
 80025b2:	f7ff fc11 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7ff fc0e 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff fc0b 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f7ff fc08 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7ff fc05 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80025ce:	20e1      	movs	r0, #225	; 0xe1
 80025d0:	f7ff fbf2 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff fbff 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80025da:	2015      	movs	r0, #21
 80025dc:	f7ff fbfc 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80025e0:	2017      	movs	r0, #23
 80025e2:	f7ff fbf9 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80025e6:	2007      	movs	r0, #7
 80025e8:	f7ff fbf6 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80025ec:	2011      	movs	r0, #17
 80025ee:	f7ff fbf3 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80025f2:	2006      	movs	r0, #6
 80025f4:	f7ff fbf0 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80025f8:	202b      	movs	r0, #43	; 0x2b
 80025fa:	f7ff fbed 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80025fe:	2056      	movs	r0, #86	; 0x56
 8002600:	f7ff fbea 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002604:	203c      	movs	r0, #60	; 0x3c
 8002606:	f7ff fbe7 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800260a:	2005      	movs	r0, #5
 800260c:	f7ff fbe4 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002610:	2010      	movs	r0, #16
 8002612:	f7ff fbe1 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002616:	200f      	movs	r0, #15
 8002618:	f7ff fbde 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800261c:	203f      	movs	r0, #63	; 0x3f
 800261e:	f7ff fbdb 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002622:	203f      	movs	r0, #63	; 0x3f
 8002624:	f7ff fbd8 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002628:	200f      	movs	r0, #15
 800262a:	f7ff fbd5 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800262e:	202b      	movs	r0, #43	; 0x2b
 8002630:	f7ff fbc2 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002634:	2000      	movs	r0, #0
 8002636:	f7ff fbcf 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800263a:	2000      	movs	r0, #0
 800263c:	f7ff fbcc 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002640:	2001      	movs	r0, #1
 8002642:	f7ff fbc9 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002646:	203f      	movs	r0, #63	; 0x3f
 8002648:	f7ff fbc6 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800264c:	202a      	movs	r0, #42	; 0x2a
 800264e:	f7ff fbb3 	bl	8001db8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002652:	2000      	movs	r0, #0
 8002654:	f7ff fbc0 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002658:	2000      	movs	r0, #0
 800265a:	f7ff fbbd 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800265e:	2000      	movs	r0, #0
 8002660:	f7ff fbba 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002664:	20ef      	movs	r0, #239	; 0xef
 8002666:	f7ff fbb7 	bl	8001dd8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800266a:	2011      	movs	r0, #17
 800266c:	f7ff fba4 	bl	8001db8 <LCD_WR_REG>
	HAL_Delay(120);
 8002670:	2078      	movs	r0, #120	; 0x78
 8002672:	f001 fd27 	bl	80040c4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002676:	2029      	movs	r0, #41	; 0x29
 8002678:	f7ff fb9e 	bl	8001db8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800267c:	2201      	movs	r2, #1
 800267e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002682:	4804      	ldr	r0, [pc, #16]	; (8002694 <lcd_init+0x2bc>)
 8002684:	f002 fd54 	bl	8005130 <HAL_GPIO_WritePin>
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40020800 	.word	0x40020800
 8002690:	200003bc 	.word	0x200003bc
 8002694:	40020000 	.word	0x40020000

08002698 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	b298      	uxth	r0, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	b29b      	uxth	r3, r3
 80026be:	8b3a      	ldrh	r2, [r7, #24]
 80026c0:	4619      	mov	r1, r3
 80026c2:	f7ff fc5f 	bl	8001f84 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	b298      	uxth	r0, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4413      	add	r3, r2
 80026dc:	b29b      	uxth	r3, r3
 80026de:	8b3a      	ldrh	r2, [r7, #24]
 80026e0:	4619      	mov	r1, r3
 80026e2:	f7ff fc4f 	bl	8001f84 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	b298      	uxth	r0, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	8b3a      	ldrh	r2, [r7, #24]
 8002700:	4619      	mov	r1, r3
 8002702:	f7ff fc3f 	bl	8001f84 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	b29a      	uxth	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	b29b      	uxth	r3, r3
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	b298      	uxth	r0, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	b29a      	uxth	r2, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b29b      	uxth	r3, r3
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	b29b      	uxth	r3, r3
 800271e:	8b3a      	ldrh	r2, [r7, #24]
 8002720:	4619      	mov	r1, r3
 8002722:	f7ff fc2f 	bl	8001f84 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	b29a      	uxth	r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b29b      	uxth	r3, r3
 800272e:	4413      	add	r3, r2
 8002730:	b298      	uxth	r0, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	b29a      	uxth	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	b29b      	uxth	r3, r3
 800273a:	4413      	add	r3, r2
 800273c:	b29b      	uxth	r3, r3
 800273e:	8b3a      	ldrh	r2, [r7, #24]
 8002740:	4619      	mov	r1, r3
 8002742:	f7ff fc1f 	bl	8001f84 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	b29a      	uxth	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b29b      	uxth	r3, r3
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	b298      	uxth	r0, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	b29a      	uxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	b29b      	uxth	r3, r3
 800275a:	4413      	add	r3, r2
 800275c:	b29b      	uxth	r3, r3
 800275e:	8b3a      	ldrh	r2, [r7, #24]
 8002760:	4619      	mov	r1, r3
 8002762:	f7ff fc0f 	bl	8001f84 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	b29a      	uxth	r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	4413      	add	r3, r2
 8002770:	b298      	uxth	r0, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	b29a      	uxth	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	b29b      	uxth	r3, r3
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	b29b      	uxth	r3, r3
 800277e:	8b3a      	ldrh	r2, [r7, #24]
 8002780:	4619      	mov	r1, r3
 8002782:	f7ff fbff 	bl	8001f84 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	b29a      	uxth	r2, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	b298      	uxth	r0, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	b29a      	uxth	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	b29b      	uxth	r3, r3
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	b29b      	uxth	r3, r3
 800279e:	8b3a      	ldrh	r2, [r7, #24]
 80027a0:	4619      	mov	r1, r3
 80027a2:	f7ff fbef 	bl	8001f84 <lcd_DrawPoint>
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b08a      	sub	sp, #40	; 0x28
 80027b2:	af02      	add	r7, sp, #8
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	603b      	str	r3, [r7, #0]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	f1c3 0303 	rsb	r3, r3, #3
 80027ce:	613b      	str	r3, [r7, #16]


	if (fill)
 80027d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d04f      	beq.n	8002876 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80027d6:	e029      	b.n	800282c <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e00a      	b.n	80027f4 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f7ff ff55 	bl	8002698 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	ddf0      	ble.n	80027de <lcd_DrawCircle+0x30>

			if (d < 0) {
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	da06      	bge.n	8002810 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	009a      	lsls	r2, r3, #2
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4413      	add	r3, r2
 800280a:	3306      	adds	r3, #6
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	e00a      	b.n	8002826 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	009a      	lsls	r2, r3, #2
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	330a      	adds	r3, #10
 800281e:	613b      	str	r3, [r7, #16]
				y--;
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	3b01      	subs	r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3301      	adds	r3, #1
 800282a:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	429a      	cmp	r2, r3
 8002832:	ddd1      	ble.n	80027d8 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8002834:	e023      	b.n	800287e <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f7ff ff29 	bl	8002698 <_draw_circle_8>
			if (d < 0) {
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	da06      	bge.n	800285a <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	009a      	lsls	r2, r3, #2
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	3306      	adds	r3, #6
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	e00a      	b.n	8002870 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	009a      	lsls	r2, r3, #2
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4413      	add	r3, r2
 8002866:	330a      	adds	r3, #10
 8002868:	613b      	str	r3, [r7, #16]
				y--;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	3b01      	subs	r3, #1
 800286e:	61bb      	str	r3, [r7, #24]
			x++;
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	3301      	adds	r3, #1
 8002874:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	429a      	cmp	r2, r3
 800287c:	dddb      	ble.n	8002836 <lcd_DrawCircle+0x88>
}
 800287e:	bf00      	nop
 8002880:	3720      	adds	r7, #32
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b08b      	sub	sp, #44	; 0x2c
 800288c:	af04      	add	r7, sp, #16
 800288e:	60ba      	str	r2, [r7, #8]
 8002890:	461a      	mov	r2, r3
 8002892:	4603      	mov	r3, r0
 8002894:	81fb      	strh	r3, [r7, #14]
 8002896:	460b      	mov	r3, r1
 8002898:	81bb      	strh	r3, [r7, #12]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800289e:	89fb      	ldrh	r3, [r7, #14]
 80028a0:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80028a6:	e048      	b.n	800293a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d145      	bne.n	800293a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80028ae:	89fa      	ldrh	r2, [r7, #14]
 80028b0:	4b26      	ldr	r3, [pc, #152]	; (800294c <lcd_ShowStr+0xc4>)
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	1acb      	subs	r3, r1, r3
 80028c0:	429a      	cmp	r2, r3
 80028c2:	dc3f      	bgt.n	8002944 <lcd_ShowStr+0xbc>
 80028c4:	89ba      	ldrh	r2, [r7, #12]
 80028c6:	4b21      	ldr	r3, [pc, #132]	; (800294c <lcd_ShowStr+0xc4>)
 80028c8:	885b      	ldrh	r3, [r3, #2]
 80028ca:	4619      	mov	r1, r3
 80028cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80028d0:	1acb      	subs	r3, r1, r3
 80028d2:	429a      	cmp	r2, r3
 80028d4:	dc36      	bgt.n	8002944 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b80      	cmp	r3, #128	; 0x80
 80028dc:	d902      	bls.n	80028e4 <lcd_ShowStr+0x5c>
 80028de:	2301      	movs	r3, #1
 80028e0:	75fb      	strb	r3, [r7, #23]
 80028e2:	e02a      	b.n	800293a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b0d      	cmp	r3, #13
 80028ea:	d10b      	bne.n	8002904 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80028ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	89bb      	ldrh	r3, [r7, #12]
 80028f4:	4413      	add	r3, r2
 80028f6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80028f8:	8abb      	ldrh	r3, [r7, #20]
 80028fa:	81fb      	strh	r3, [r7, #14]
					str++;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	3301      	adds	r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	e017      	b.n	8002934 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781a      	ldrb	r2, [r3, #0]
 8002908:	88fc      	ldrh	r4, [r7, #6]
 800290a:	89b9      	ldrh	r1, [r7, #12]
 800290c:	89f8      	ldrh	r0, [r7, #14]
 800290e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002912:	9302      	str	r3, [sp, #8]
 8002914:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	4623      	mov	r3, r4
 8002920:	f7ff fbcc 	bl	80020bc <lcd_ShowChar>
					x+=sizey/2;
 8002924:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	b2db      	uxtb	r3, r3
 800292c:	b29a      	uxth	r2, r3
 800292e:	89fb      	ldrh	r3, [r7, #14]
 8002930:	4413      	add	r3, r2
 8002932:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	3301      	adds	r3, #1
 8002938:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1b2      	bne.n	80028a8 <lcd_ShowStr+0x20>
 8002942:	e000      	b.n	8002946 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002944:	bf00      	nop
			}
		}
	}
}
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	bd90      	pop	{r4, r7, pc}
 800294c:	200003bc 	.word	0x200003bc

08002950 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af04      	add	r7, sp, #16
 8002956:	60ba      	str	r2, [r7, #8]
 8002958:	461a      	mov	r2, r3
 800295a:	4603      	mov	r3, r0
 800295c:	81fb      	strh	r3, [r7, #14]
 800295e:	460b      	mov	r3, r1
 8002960:	81bb      	strh	r3, [r7, #12]
 8002962:	4613      	mov	r3, r2
 8002964:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002966:	68b8      	ldr	r0, [r7, #8]
 8002968:	f7fd fc2e 	bl	80001c8 <strlen>
 800296c:	4603      	mov	r3, r0
 800296e:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <lcd_StrCenter+0x60>)
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	8afb      	ldrh	r3, [r7, #22]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	0fda      	lsrs	r2, r3, #31
 800297e:	4413      	add	r3, r2
 8002980:	105b      	asrs	r3, r3, #1
 8002982:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002984:	89fa      	ldrh	r2, [r7, #14]
 8002986:	8abb      	ldrh	r3, [r7, #20]
 8002988:	4413      	add	r3, r2
 800298a:	b298      	uxth	r0, r3
 800298c:	88fa      	ldrh	r2, [r7, #6]
 800298e:	89b9      	ldrh	r1, [r7, #12]
 8002990:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002994:	9302      	str	r3, [sp, #8]
 8002996:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	8c3b      	ldrh	r3, [r7, #32]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	f7ff ff70 	bl	8002888 <lcd_ShowStr>
}
 80029a8:	bf00      	nop
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200003bc 	.word	0x200003bc

080029b4 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80029b8:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <led7_Scan+0x104>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	b29a      	uxth	r2, r3
 80029c0:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <led7_Scan+0x104>)
 80029c2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80029c4:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <led7_Scan+0x108>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a3d      	ldr	r2, [pc, #244]	; (8002ac0 <led7_Scan+0x10c>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	b21a      	sxth	r2, r3
 80029d0:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <led7_Scan+0x104>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b21b      	sxth	r3, r3
 80029d6:	4313      	orrs	r3, r2
 80029d8:	b21b      	sxth	r3, r3
 80029da:	b29a      	uxth	r2, r3
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <led7_Scan+0x104>)
 80029de:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80029e0:	4b36      	ldr	r3, [pc, #216]	; (8002abc <led7_Scan+0x108>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d847      	bhi.n	8002a78 <led7_Scan+0xc4>
 80029e8:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <led7_Scan+0x3c>)
 80029ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ee:	bf00      	nop
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a1f 	.word	0x08002a1f
 80029f8:	08002a3d 	.word	0x08002a3d
 80029fc:	08002a5b 	.word	0x08002a5b
	case 0:
		spi_buffer |= 0x00b0;
 8002a00:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <led7_Scan+0x104>)
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <led7_Scan+0x104>)
 8002a0c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002a0e:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <led7_Scan+0x104>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <led7_Scan+0x104>)
 8002a1a:	801a      	strh	r2, [r3, #0]
		break;
 8002a1c:	e02d      	b.n	8002a7a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <led7_Scan+0x104>)
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <led7_Scan+0x104>)
 8002a2a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002a2c:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <led7_Scan+0x104>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	f023 0320 	bic.w	r3, r3, #32
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <led7_Scan+0x104>)
 8002a38:	801a      	strh	r2, [r3, #0]
		break;
 8002a3a:	e01e      	b.n	8002a7a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002a3c:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <led7_Scan+0x104>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <led7_Scan+0x104>)
 8002a48:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <led7_Scan+0x104>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	f023 0310 	bic.w	r3, r3, #16
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <led7_Scan+0x104>)
 8002a56:	801a      	strh	r2, [r3, #0]
		break;
 8002a58:	e00f      	b.n	8002a7a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002a5a:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <led7_Scan+0x104>)
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <led7_Scan+0x104>)
 8002a66:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <led7_Scan+0x104>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <led7_Scan+0x104>)
 8002a74:	801a      	strh	r2, [r3, #0]
		break;
 8002a76:	e000      	b.n	8002a7a <led7_Scan+0xc6>
	default:
		break;
 8002a78:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <led7_Scan+0x108>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	425a      	negs	r2, r3
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	f002 0203 	and.w	r2, r2, #3
 8002a8a:	bf58      	it	pl
 8002a8c:	4253      	negpl	r3, r2
 8002a8e:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <led7_Scan+0x108>)
 8002a90:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2140      	movs	r1, #64	; 0x40
 8002a96:	480b      	ldr	r0, [pc, #44]	; (8002ac4 <led7_Scan+0x110>)
 8002a98:	f002 fb4a 	bl	8005130 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	4905      	ldr	r1, [pc, #20]	; (8002ab8 <led7_Scan+0x104>)
 8002aa2:	4809      	ldr	r0, [pc, #36]	; (8002ac8 <led7_Scan+0x114>)
 8002aa4:	f004 f82b 	bl	8006afe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	2140      	movs	r1, #64	; 0x40
 8002aac:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <led7_Scan+0x110>)
 8002aae:	f002 fb3f 	bl	8005130 <HAL_GPIO_WritePin>
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000010 	.word	0x20000010
 8002abc:	200003c4 	.word	0x200003c4
 8002ac0:	2000000c 	.word	0x2000000c
 8002ac4:	40021800 	.word	0x40021800
 8002ac8:	200003d0 	.word	0x200003d0

08002acc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8002ad0:	f001 fa86 	bl	8003fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ad4:	f000 f828 	bl	8002b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ad8:	f7fe ffe2 	bl	8001aa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002adc:	f7fe fb52 	bl	8001184 <MX_DMA_Init>
  MX_SPI1_Init();
 8002ae0:	f000 f90e 	bl	8002d00 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002ae4:	f7fe fb6e 	bl	80011c4 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002ae8:	f7ff f8f0 	bl	8001ccc <MX_I2C1_Init>
  MX_TIM13_Init();
 8002aec:	f000 fa9a 	bl	8003024 <MX_TIM13_Init>
  MX_TIM2_Init();
 8002af0:	f000 fa4c 	bl	8002f8c <MX_TIM2_Init>
  MX_ADC1_Init();
 8002af4:	f7fe f97a 	bl	8000dec <MX_ADC1_Init>
  MX_TIM1_Init();
 8002af8:	f000 f9f8 	bl	8002eec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002afc:	f000 f87e 	bl	8002bfc <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  touch_Adjust();
 8002b00:	f000 fe2e 	bl	8003760 <touch_Adjust>
  lcd_Clear(BLACK);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7ff f9d5 	bl	8001eb4 <lcd_Clear>
  while (1) {
    // scan touch screen
    touch_Scan();
 8002b0a:	f001 fa0b 	bl	8003f24 <touch_Scan>
    // 	flag_timer2 = 0;
    // 	top();
    // 	// touchProcess();
    // 	// test_LedDebug();
    // }
    while (!flag_timer2)
 8002b0e:	bf00      	nop
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <main+0x58>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0fb      	beq.n	8002b10 <main+0x44>
      ;
    flag_timer2 = 0;
 8002b18:	4b02      	ldr	r3, [pc, #8]	; (8002b24 <main+0x58>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	801a      	strh	r2, [r3, #0]
	top();
 8002b1e:	f7fe fc83 	bl	8001428 <top>
    touch_Scan();
 8002b22:	e7f2      	b.n	8002b0a <main+0x3e>
 8002b24:	200003c8 	.word	0x200003c8

08002b28 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b094      	sub	sp, #80	; 0x50
 8002b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b2e:	f107 0320 	add.w	r3, r7, #32
 8002b32:	2230      	movs	r2, #48	; 0x30
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f005 fab2 	bl	80080a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b3c:	f107 030c 	add.w	r3, r7, #12
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <SystemClock_Config+0xcc>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <SystemClock_Config+0xcc>)
 8002b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5c:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <SystemClock_Config+0xcc>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <SystemClock_Config+0xd0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a21      	ldr	r2, [pc, #132]	; (8002bf8 <SystemClock_Config+0xd0>)
 8002b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <SystemClock_Config+0xd0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b84:	2302      	movs	r3, #2
 8002b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b8c:	2310      	movs	r3, #16
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b90:	2302      	movs	r3, #2
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b94:	2300      	movs	r3, #0
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b98:	2308      	movs	r3, #8
 8002b9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b9c:	23a8      	movs	r3, #168	; 0xa8
 8002b9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002ba8:	f107 0320 	add.w	r3, r7, #32
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 fa99 	bl	80060e4 <HAL_RCC_OscConfig>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <SystemClock_Config+0x94>
    Error_Handler();
 8002bb8:	f000 f82f 	bl	8002c1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8002bbc:	230f      	movs	r3, #15
 8002bbe:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002bce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002bd4:	f107 030c 	add.w	r3, r7, #12
 8002bd8:	2105      	movs	r1, #5
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 fcfa 	bl	80065d4 <HAL_RCC_ClockConfig>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <SystemClock_Config+0xc2>
    Error_Handler();
 8002be6:	f000 f818 	bl	8002c1a <Error_Handler>
  }
}
 8002bea:	bf00      	nop
 8002bec:	3750      	adds	r7, #80	; 0x50
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40007000 	.word	0x40007000

08002bfc <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  timer_init();
 8002c00:	f000 f810 	bl	8002c24 <timer_init>
  button_init();
 8002c04:	f7fe fab2 	bl	800116c <button_init>
  lcd_init();
 8002c08:	f7ff fbe6 	bl	80023d8 <lcd_init>
  touch_init();
 8002c0c:	f001 f97a 	bl	8003f04 <touch_init>
  setTimer2(50);
 8002c10:	2032      	movs	r0, #50	; 0x32
 8002c12:	f000 f815 	bl	8002c40 <setTimer2>
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c1e:	b672      	cpsid	i
}
 8002c20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8002c22:	e7fe      	b.n	8002c22 <Error_Handler+0x8>

08002c24 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002c28:	4803      	ldr	r0, [pc, #12]	; (8002c38 <timer_init+0x14>)
 8002c2a:	f004 fa6b 	bl	8007104 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002c2e:	4803      	ldr	r0, [pc, #12]	; (8002c3c <timer_init+0x18>)
 8002c30:	f004 fa00 	bl	8007034 <HAL_TIM_Base_Start>
}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000470 	.word	0x20000470
 8002c3c:	20000428 	.word	0x20000428

08002c40 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002c4a:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <setTimer2+0x2c>)
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <setTimer2+0x2c>)
 8002c52:	881a      	ldrh	r2, [r3, #0]
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <setTimer2+0x30>)
 8002c56:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <setTimer2+0x34>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	801a      	strh	r2, [r3, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	200003cc 	.word	0x200003cc
 8002c70:	200003ca 	.word	0x200003ca
 8002c74:	200003c8 	.word	0x200003c8

08002c78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c88:	d116      	bne.n	8002cb8 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d010      	beq.n	8002cb4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002c9c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002c9e:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002ca6:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002cb2:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002cb4:	f7ff fe7e 	bl	80029b4 <led7_Scan>
	}
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	200003ca 	.word	0x200003ca
 8002cc4:	200003c8 	.word	0x200003c8
 8002cc8:	200003cc 	.word	0x200003cc

08002ccc <delay_us>:

void delay_us (uint16_t us)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <delay_us+0x30>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002cde:	bf00      	nop
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <delay_us+0x30>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d3f9      	bcc.n	8002ce0 <delay_us+0x14>
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000428 	.word	0x20000428

08002d00 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d04:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <MX_SPI1_Init+0x64>)
 8002d06:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <MX_SPI1_Init+0x68>)
 8002d08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d0a:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <MX_SPI1_Init+0x64>)
 8002d0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <MX_SPI1_Init+0x64>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <MX_SPI1_Init+0x64>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <MX_SPI1_Init+0x64>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <MX_SPI1_Init+0x64>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <MX_SPI1_Init+0x64>)
 8002d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <MX_SPI1_Init+0x64>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <MX_SPI1_Init+0x64>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <MX_SPI1_Init+0x64>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <MX_SPI1_Init+0x64>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <MX_SPI1_Init+0x64>)
 8002d4c:	220a      	movs	r2, #10
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d50:	4804      	ldr	r0, [pc, #16]	; (8002d64 <MX_SPI1_Init+0x64>)
 8002d52:	f003 fe4b 	bl	80069ec <HAL_SPI_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d5c:	f7ff ff5d 	bl	8002c1a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	200003d0 	.word	0x200003d0
 8002d68:	40013000 	.word	0x40013000

08002d6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <HAL_SPI_MspInit+0x84>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d12b      	bne.n	8002de6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <HAL_SPI_MspInit+0x88>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <HAL_SPI_MspInit+0x88>)
 8002d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_SPI_MspInit+0x88>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_SPI_MspInit+0x88>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_SPI_MspInit+0x88>)
 8002db4:	f043 0302 	orr.w	r3, r3, #2
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_SPI_MspInit+0x88>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002dc6:	2338      	movs	r3, #56	; 0x38
 8002dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dd6:	2305      	movs	r3, #5
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dda:	f107 0314 	add.w	r3, r7, #20
 8002dde:	4619      	mov	r1, r3
 8002de0:	4805      	ldr	r0, [pc, #20]	; (8002df8 <HAL_SPI_MspInit+0x8c>)
 8002de2:	f001 fff1 	bl	8004dc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002de6:	bf00      	nop
 8002de8:	3728      	adds	r7, #40	; 0x28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40013000 	.word	0x40013000
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020400 	.word	0x40020400

08002dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a0f      	ldr	r2, [pc, #60]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a08      	ldr	r2, [pc, #32]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800

08002e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e50:	e7fe      	b.n	8002e50 <NMI_Handler+0x4>

08002e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e56:	e7fe      	b.n	8002e56 <HardFault_Handler+0x4>

08002e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <MemManage_Handler+0x4>

08002e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e62:	e7fe      	b.n	8002e62 <BusFault_Handler+0x4>

08002e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <UsageFault_Handler+0x4>

08002e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e98:	f001 f8f4 	bl	8004084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <TIM2_IRQHandler+0x10>)
 8002ea6:	f004 f9f6 	bl	8007296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000470 	.word	0x20000470

08002eb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002eb8:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <DMA2_Stream0_IRQHandler+0x10>)
 8002eba:	f001 fd49 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	2000011c 	.word	0x2000011c

08002ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <SystemInit+0x20>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	4a05      	ldr	r2, [pc, #20]	; (8002ee8 <SystemInit+0x20>)
 8002ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ef2:	f107 0308 	add.w	r3, r7, #8
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f00:	463b      	mov	r3, r7
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f08:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <MX_TIM1_Init+0x98>)
 8002f0a:	4a1f      	ldr	r2, [pc, #124]	; (8002f88 <MX_TIM1_Init+0x9c>)
 8002f0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <MX_TIM1_Init+0x98>)
 8002f10:	2253      	movs	r2, #83	; 0x53
 8002f12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <MX_TIM1_Init+0x98>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <MX_TIM1_Init+0x98>)
 8002f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f22:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <MX_TIM1_Init+0x98>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <MX_TIM1_Init+0x98>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <MX_TIM1_Init+0x98>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f34:	4813      	ldr	r0, [pc, #76]	; (8002f84 <MX_TIM1_Init+0x98>)
 8002f36:	f004 f82d 	bl	8006f94 <HAL_TIM_Base_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002f40:	f7ff fe6b 	bl	8002c1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f4a:	f107 0308 	add.w	r3, r7, #8
 8002f4e:	4619      	mov	r1, r3
 8002f50:	480c      	ldr	r0, [pc, #48]	; (8002f84 <MX_TIM1_Init+0x98>)
 8002f52:	f004 fb6b 	bl	800762c <HAL_TIM_ConfigClockSource>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002f5c:	f7ff fe5d 	bl	8002c1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f68:	463b      	mov	r3, r7
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4805      	ldr	r0, [pc, #20]	; (8002f84 <MX_TIM1_Init+0x98>)
 8002f6e:	f004 ff37 	bl	8007de0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002f78:	f7ff fe4f 	bl	8002c1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f7c:	bf00      	nop
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000428 	.word	0x20000428
 8002f88:	40010000 	.word	0x40010000

08002f8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f92:	f107 0308 	add.w	r3, r7, #8
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	605a      	str	r2, [r3, #4]
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa0:	463b      	mov	r3, r7
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <MX_TIM2_Init+0x94>)
 8002faa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <MX_TIM2_Init+0x94>)
 8002fb2:	f240 3247 	movw	r2, #839	; 0x347
 8002fb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <MX_TIM2_Init+0x94>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002fbe:	4b18      	ldr	r3, [pc, #96]	; (8003020 <MX_TIM2_Init+0x94>)
 8002fc0:	2263      	movs	r2, #99	; 0x63
 8002fc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc4:	4b16      	ldr	r3, [pc, #88]	; (8003020 <MX_TIM2_Init+0x94>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <MX_TIM2_Init+0x94>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fd0:	4813      	ldr	r0, [pc, #76]	; (8003020 <MX_TIM2_Init+0x94>)
 8002fd2:	f003 ffdf 	bl	8006f94 <HAL_TIM_Base_Init>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002fdc:	f7ff fe1d 	bl	8002c1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fe6:	f107 0308 	add.w	r3, r7, #8
 8002fea:	4619      	mov	r1, r3
 8002fec:	480c      	ldr	r0, [pc, #48]	; (8003020 <MX_TIM2_Init+0x94>)
 8002fee:	f004 fb1d 	bl	800762c <HAL_TIM_ConfigClockSource>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ff8:	f7ff fe0f 	bl	8002c1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003000:	2300      	movs	r3, #0
 8003002:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003004:	463b      	mov	r3, r7
 8003006:	4619      	mov	r1, r3
 8003008:	4805      	ldr	r0, [pc, #20]	; (8003020 <MX_TIM2_Init+0x94>)
 800300a:	f004 fee9 	bl	8007de0 <HAL_TIMEx_MasterConfigSynchronization>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003014:	f7ff fe01 	bl	8002c1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003018:	bf00      	nop
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20000470 	.word	0x20000470

08003024 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800302a:	1d3b      	adds	r3, r7, #4
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
 8003038:	615a      	str	r2, [r3, #20]
 800303a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <MX_TIM13_Init+0x94>)
 800303e:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <MX_TIM13_Init+0x98>)
 8003040:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8003042:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <MX_TIM13_Init+0x94>)
 8003044:	f240 3247 	movw	r2, #839	; 0x347
 8003048:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304a:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <MX_TIM13_Init+0x94>)
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <MX_TIM13_Init+0x94>)
 8003052:	2263      	movs	r2, #99	; 0x63
 8003054:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003056:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <MX_TIM13_Init+0x94>)
 8003058:	2200      	movs	r2, #0
 800305a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800305c:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <MX_TIM13_Init+0x94>)
 800305e:	2200      	movs	r2, #0
 8003060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003062:	4815      	ldr	r0, [pc, #84]	; (80030b8 <MX_TIM13_Init+0x94>)
 8003064:	f003 ff96 	bl	8006f94 <HAL_TIM_Base_Init>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800306e:	f7ff fdd4 	bl	8002c1a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003072:	4811      	ldr	r0, [pc, #68]	; (80030b8 <MX_TIM13_Init+0x94>)
 8003074:	f004 f8b6 	bl	80071e4 <HAL_TIM_PWM_Init>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800307e:	f7ff fdcc 	bl	8002c1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003082:	2360      	movs	r3, #96	; 0x60
 8003084:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	2200      	movs	r2, #0
 8003096:	4619      	mov	r1, r3
 8003098:	4807      	ldr	r0, [pc, #28]	; (80030b8 <MX_TIM13_Init+0x94>)
 800309a:	f004 fa05 	bl	80074a8 <HAL_TIM_PWM_ConfigChannel>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80030a4:	f7ff fdb9 	bl	8002c1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80030a8:	4803      	ldr	r0, [pc, #12]	; (80030b8 <MX_TIM13_Init+0x94>)
 80030aa:	f000 f85b 	bl	8003164 <HAL_TIM_MspPostInit>

}
 80030ae:	bf00      	nop
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200004b8 	.word	0x200004b8
 80030bc:	40001c00 	.word	0x40001c00

080030c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a22      	ldr	r2, [pc, #136]	; (8003158 <HAL_TIM_Base_MspInit+0x98>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	4b21      	ldr	r3, [pc, #132]	; (800315c <HAL_TIM_Base_MspInit+0x9c>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4a20      	ldr	r2, [pc, #128]	; (800315c <HAL_TIM_Base_MspInit+0x9c>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6453      	str	r3, [r2, #68]	; 0x44
 80030e2:	4b1e      	ldr	r3, [pc, #120]	; (800315c <HAL_TIM_Base_MspInit+0x9c>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80030ee:	e02e      	b.n	800314e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f8:	d116      	bne.n	8003128 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_TIM_Base_MspInit+0x9c>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a16      	ldr	r2, [pc, #88]	; (800315c <HAL_TIM_Base_MspInit+0x9c>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_TIM_Base_MspInit+0x9c>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2100      	movs	r1, #0
 800311a:	201c      	movs	r0, #28
 800311c:	f001 fb33 	bl	8004786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003120:	201c      	movs	r0, #28
 8003122:	f001 fb4c 	bl	80047be <HAL_NVIC_EnableIRQ>
}
 8003126:	e012      	b.n	800314e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0c      	ldr	r2, [pc, #48]	; (8003160 <HAL_TIM_Base_MspInit+0xa0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d10d      	bne.n	800314e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_TIM_Base_MspInit+0x9c>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a08      	ldr	r2, [pc, #32]	; (800315c <HAL_TIM_Base_MspInit+0x9c>)
 800313c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_TIM_Base_MspInit+0x9c>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
}
 800314e:	bf00      	nop
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40010000 	.word	0x40010000
 800315c:	40023800 	.word	0x40023800
 8003160:	40001c00 	.word	0x40001c00

08003164 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a12      	ldr	r2, [pc, #72]	; (80031cc <HAL_TIM_MspPostInit+0x68>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d11e      	bne.n	80031c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <HAL_TIM_MspPostInit+0x6c>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	4a10      	ldr	r2, [pc, #64]	; (80031d0 <HAL_TIM_MspPostInit+0x6c>)
 8003190:	f043 0320 	orr.w	r3, r3, #32
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
 8003196:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_TIM_MspPostInit+0x6c>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80031b4:	2309      	movs	r3, #9
 80031b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031b8:	f107 030c 	add.w	r3, r7, #12
 80031bc:	4619      	mov	r1, r3
 80031be:	4805      	ldr	r0, [pc, #20]	; (80031d4 <HAL_TIM_MspPostInit+0x70>)
 80031c0:	f001 fe02 	bl	8004dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80031c4:	bf00      	nop
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40001c00 	.word	0x40001c00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40021400 	.word	0x40021400

080031d8 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]
 80031ea:	e025      	b.n	8003238 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da06      	bge.n	8003202 <TP_Write_Byte+0x2a>
 80031f4:	2201      	movs	r2, #1
 80031f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031fa:	4813      	ldr	r0, [pc, #76]	; (8003248 <TP_Write_Byte+0x70>)
 80031fc:	f001 ff98 	bl	8005130 <HAL_GPIO_WritePin>
 8003200:	e005      	b.n	800320e <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8003202:	2200      	movs	r2, #0
 8003204:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003208:	480f      	ldr	r0, [pc, #60]	; (8003248 <TP_Write_Byte+0x70>)
 800320a:	f001 ff91 	bl	8005130 <HAL_GPIO_WritePin>
		num<<=1;
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003214:	2200      	movs	r2, #0
 8003216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800321a:	480c      	ldr	r0, [pc, #48]	; (800324c <TP_Write_Byte+0x74>)
 800321c:	f001 ff88 	bl	8005130 <HAL_GPIO_WritePin>
		delay_us(1);
 8003220:	2001      	movs	r0, #1
 8003222:	f7ff fd53 	bl	8002ccc <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8003226:	2201      	movs	r2, #1
 8003228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800322c:	4807      	ldr	r0, [pc, #28]	; (800324c <TP_Write_Byte+0x74>)
 800322e:	f001 ff7f 	bl	8005130 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	3301      	adds	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b07      	cmp	r3, #7
 800323c:	d9d6      	bls.n	80031ec <TP_Write_Byte+0x14>
	}
}
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40020800 	.word	0x40020800
 800324c:	40021800 	.word	0x40021800

08003250 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 800325e:	2300      	movs	r3, #0
 8003260:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003262:	2200      	movs	r2, #0
 8003264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003268:	482f      	ldr	r0, [pc, #188]	; (8003328 <TP_Read_AD+0xd8>)
 800326a:	f001 ff61 	bl	8005130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003274:	482d      	ldr	r0, [pc, #180]	; (800332c <TP_Read_AD+0xdc>)
 8003276:	f001 ff5b 	bl	8005130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 800327a:	2200      	movs	r2, #0
 800327c:	2180      	movs	r1, #128	; 0x80
 800327e:	482a      	ldr	r0, [pc, #168]	; (8003328 <TP_Read_AD+0xd8>)
 8003280:	f001 ff56 	bl	8005130 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ffa6 	bl	80031d8 <TP_Write_Byte>
	delay_us(6);
 800328c:	2006      	movs	r0, #6
 800328e:	f7ff fd1d 	bl	8002ccc <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003298:	4823      	ldr	r0, [pc, #140]	; (8003328 <TP_Read_AD+0xd8>)
 800329a:	f001 ff49 	bl	8005130 <HAL_GPIO_WritePin>
	delay_us(1);
 800329e:	2001      	movs	r0, #1
 80032a0:	f7ff fd14 	bl	8002ccc <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80032a4:	2201      	movs	r2, #1
 80032a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032aa:	481f      	ldr	r0, [pc, #124]	; (8003328 <TP_Read_AD+0xd8>)
 80032ac:	f001 ff40 	bl	8005130 <HAL_GPIO_WritePin>
	delay_us(1);
 80032b0:	2001      	movs	r0, #1
 80032b2:	f7ff fd0b 	bl	8002ccc <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032bc:	481a      	ldr	r0, [pc, #104]	; (8003328 <TP_Read_AD+0xd8>)
 80032be:	f001 ff37 	bl	8005130 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	e01f      	b.n	8003308 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 80032c8:	89bb      	ldrh	r3, [r7, #12]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032d4:	4814      	ldr	r0, [pc, #80]	; (8003328 <TP_Read_AD+0xd8>)
 80032d6:	f001 ff2b 	bl	8005130 <HAL_GPIO_WritePin>
		delay_us(1);
 80032da:	2001      	movs	r0, #1
 80032dc:	f7ff fcf6 	bl	8002ccc <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80032e0:	2201      	movs	r2, #1
 80032e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032e6:	4810      	ldr	r0, [pc, #64]	; (8003328 <TP_Read_AD+0xd8>)
 80032e8:	f001 ff22 	bl	8005130 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 80032ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032f0:	480e      	ldr	r0, [pc, #56]	; (800332c <TP_Read_AD+0xdc>)
 80032f2:	f001 ff05 	bl	8005100 <HAL_GPIO_ReadPin>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <TP_Read_AD+0xb2>
 80032fc:	89bb      	ldrh	r3, [r7, #12]
 80032fe:	3301      	adds	r3, #1
 8003300:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	3301      	adds	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b0f      	cmp	r3, #15
 800330c:	d9dc      	bls.n	80032c8 <TP_Read_AD+0x78>
	}
	Num>>=4;
 800330e:	89bb      	ldrh	r3, [r7, #12]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8003314:	2201      	movs	r2, #1
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	4803      	ldr	r0, [pc, #12]	; (8003328 <TP_Read_AD+0xd8>)
 800331a:	f001 ff09 	bl	8005130 <HAL_GPIO_WritePin>
	return(Num);
 800331e:	89bb      	ldrh	r3, [r7, #12]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021800 	.word	0x40021800
 800332c:	40020800 	.word	0x40020800

08003330 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b089      	sub	sp, #36	; 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 800333a:	2300      	movs	r3, #0
 800333c:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 800333e:	2300      	movs	r3, #0
 8003340:	83fb      	strh	r3, [r7, #30]
 8003342:	e00e      	b.n	8003362 <TP_Read_XOY+0x32>
 8003344:	8bfc      	ldrh	r4, [r7, #30]
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff81 	bl	8003250 <TP_Read_AD>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	0063      	lsls	r3, r4, #1
 8003354:	3320      	adds	r3, #32
 8003356:	443b      	add	r3, r7
 8003358:	f823 2c14 	strh.w	r2, [r3, #-20]
 800335c:	8bfb      	ldrh	r3, [r7, #30]
 800335e:	3301      	adds	r3, #1
 8003360:	83fb      	strh	r3, [r7, #30]
 8003362:	8bfb      	ldrh	r3, [r7, #30]
 8003364:	2b04      	cmp	r3, #4
 8003366:	d9ed      	bls.n	8003344 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8003368:	2300      	movs	r3, #0
 800336a:	83fb      	strh	r3, [r7, #30]
 800336c:	e035      	b.n	80033da <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 800336e:	8bfb      	ldrh	r3, [r7, #30]
 8003370:	3301      	adds	r3, #1
 8003372:	83bb      	strh	r3, [r7, #28]
 8003374:	e02b      	b.n	80033ce <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])
 8003376:	8bfb      	ldrh	r3, [r7, #30]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	3320      	adds	r3, #32
 800337c:	443b      	add	r3, r7
 800337e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003382:	8bbb      	ldrh	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	3320      	adds	r3, #32
 8003388:	443b      	add	r3, r7
 800338a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800338e:	429a      	cmp	r2, r3
 8003390:	d91a      	bls.n	80033c8 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 8003392:	8bfb      	ldrh	r3, [r7, #30]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	3320      	adds	r3, #32
 8003398:	443b      	add	r3, r7
 800339a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800339e:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 80033a0:	8bbb      	ldrh	r3, [r7, #28]
 80033a2:	8bfa      	ldrh	r2, [r7, #30]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	3320      	adds	r3, #32
 80033a8:	443b      	add	r3, r7
 80033aa:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 80033ae:	0053      	lsls	r3, r2, #1
 80033b0:	3320      	adds	r3, #32
 80033b2:	443b      	add	r3, r7
 80033b4:	460a      	mov	r2, r1
 80033b6:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 80033ba:	8bbb      	ldrh	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	3320      	adds	r3, #32
 80033c0:	443b      	add	r3, r7
 80033c2:	8b3a      	ldrh	r2, [r7, #24]
 80033c4:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 80033c8:	8bbb      	ldrh	r3, [r7, #28]
 80033ca:	3301      	adds	r3, #1
 80033cc:	83bb      	strh	r3, [r7, #28]
 80033ce:	8bbb      	ldrh	r3, [r7, #28]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d9d0      	bls.n	8003376 <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)
 80033d4:	8bfb      	ldrh	r3, [r7, #30]
 80033d6:	3301      	adds	r3, #1
 80033d8:	83fb      	strh	r3, [r7, #30]
 80033da:	8bfb      	ldrh	r3, [r7, #30]
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d9c6      	bls.n	800336e <TP_Read_XOY+0x3e>
			}
		}
	}
	sum=0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 80033e4:	2301      	movs	r3, #1
 80033e6:	83fb      	strh	r3, [r7, #30]
 80033e8:	e00b      	b.n	8003402 <TP_Read_XOY+0xd2>
 80033ea:	8bfb      	ldrh	r3, [r7, #30]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	3320      	adds	r3, #32
 80033f0:	443b      	add	r3, r7
 80033f2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80033f6:	8b7b      	ldrh	r3, [r7, #26]
 80033f8:	4413      	add	r3, r2
 80033fa:	837b      	strh	r3, [r7, #26]
 80033fc:	8bfb      	ldrh	r3, [r7, #30]
 80033fe:	3301      	adds	r3, #1
 8003400:	83fb      	strh	r3, [r7, #30]
 8003402:	8bfb      	ldrh	r3, [r7, #30]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d9f0      	bls.n	80033ea <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8003408:	8b7b      	ldrh	r3, [r7, #26]
 800340a:	4a05      	ldr	r2, [pc, #20]	; (8003420 <TP_Read_XOY+0xf0>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	833b      	strh	r3, [r7, #24]
	return temp;
 8003414:	8b3b      	ldrh	r3, [r7, #24]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3724      	adds	r7, #36	; 0x24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd90      	pop	{r4, r7, pc}
 800341e:	bf00      	nop
 8003420:	aaaaaaab 	.word	0xaaaaaaab

08003424 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <TP_Read_XY+0x3c>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff ff7c 	bl	8003330 <TP_Read_XOY>
 8003438:	4603      	mov	r3, r0
 800343a:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <TP_Read_XY+0x40>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff75 	bl	8003330 <TP_Read_XOY>
 8003446:	4603      	mov	r3, r0
 8003448:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	89fa      	ldrh	r2, [r7, #14]
 800344e:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	89ba      	ldrh	r2, [r7, #12]
 8003454:	801a      	strh	r2, [r3, #0]
	return 1;
 8003456:	2301      	movs	r3, #1
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	2000004c 	.word	0x2000004c
 8003464:	2000004d 	.word	0x2000004d

08003468 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8003472:	f107 0212 	add.w	r2, r7, #18
 8003476:	f107 0314 	add.w	r3, r7, #20
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ffd1 	bl	8003424 <TP_Read_XY>
 8003482:	4603      	mov	r3, r0
 8003484:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <TP_Read_XY2+0x28>
 800348c:	2300      	movs	r3, #0
 800348e:	e049      	b.n	8003524 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8003490:	f107 020e 	add.w	r2, r7, #14
 8003494:	f107 0310 	add.w	r3, r7, #16
 8003498:	4611      	mov	r1, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ffc2 	bl	8003424 <TP_Read_XY>
 80034a0:	4603      	mov	r3, r0
 80034a2:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <TP_Read_XY2+0x46>
 80034aa:	2300      	movs	r3, #0
 80034ac:	e03a      	b.n	8003524 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 80034ae:	8a3a      	ldrh	r2, [r7, #16]
 80034b0:	8abb      	ldrh	r3, [r7, #20]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d804      	bhi.n	80034c0 <TP_Read_XY2+0x58>
 80034b6:	8a3b      	ldrh	r3, [r7, #16]
 80034b8:	3363      	adds	r3, #99	; 0x63
 80034ba:	8aba      	ldrh	r2, [r7, #20]
 80034bc:	4293      	cmp	r3, r2
 80034be:	da08      	bge.n	80034d2 <TP_Read_XY2+0x6a>
 80034c0:	8aba      	ldrh	r2, [r7, #20]
 80034c2:	8a3b      	ldrh	r3, [r7, #16]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d82c      	bhi.n	8003522 <TP_Read_XY2+0xba>
 80034c8:	8abb      	ldrh	r3, [r7, #20]
 80034ca:	3363      	adds	r3, #99	; 0x63
 80034cc:	8a3a      	ldrh	r2, [r7, #16]
 80034ce:	4293      	cmp	r3, r2
 80034d0:	db27      	blt.n	8003522 <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 80034d2:	89fa      	ldrh	r2, [r7, #14]
 80034d4:	8a7b      	ldrh	r3, [r7, #18]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d804      	bhi.n	80034e4 <TP_Read_XY2+0x7c>
 80034da:	89fb      	ldrh	r3, [r7, #14]
 80034dc:	3363      	adds	r3, #99	; 0x63
 80034de:	8a7a      	ldrh	r2, [r7, #18]
 80034e0:	4293      	cmp	r3, r2
 80034e2:	da08      	bge.n	80034f6 <TP_Read_XY2+0x8e>
 80034e4:	8a7a      	ldrh	r2, [r7, #18]
 80034e6:	89fb      	ldrh	r3, [r7, #14]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d81a      	bhi.n	8003522 <TP_Read_XY2+0xba>
 80034ec:	8a7b      	ldrh	r3, [r7, #18]
 80034ee:	3363      	adds	r3, #99	; 0x63
 80034f0:	89fa      	ldrh	r2, [r7, #14]
 80034f2:	4293      	cmp	r3, r2
 80034f4:	db15      	blt.n	8003522 <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 80034f6:	8abb      	ldrh	r3, [r7, #20]
 80034f8:	461a      	mov	r2, r3
 80034fa:	8a3b      	ldrh	r3, [r7, #16]
 80034fc:	4413      	add	r3, r2
 80034fe:	0fda      	lsrs	r2, r3, #31
 8003500:	4413      	add	r3, r2
 8003502:	105b      	asrs	r3, r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 800350a:	8a7b      	ldrh	r3, [r7, #18]
 800350c:	461a      	mov	r2, r3
 800350e:	89fb      	ldrh	r3, [r7, #14]
 8003510:	4413      	add	r3, r2
 8003512:	0fda      	lsrs	r2, r3, #31
 8003514:	4413      	add	r3, r2
 8003516:	105b      	asrs	r3, r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	801a      	strh	r2, [r3, #0]
		return 1;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <TP_Read_XY2+0xbc>
	}else return 0;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b085      	sub	sp, #20
 8003530:	af02      	add	r7, sp, #8
 8003532:	4603      	mov	r3, r0
 8003534:	80fb      	strh	r3, [r7, #6]
 8003536:	460b      	mov	r3, r1
 8003538:	80bb      	strh	r3, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	3b0c      	subs	r3, #12
 8003542:	b298      	uxth	r0, r3
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	330d      	adds	r3, #13
 8003548:	b29a      	uxth	r2, r3
 800354a:	88bc      	ldrh	r4, [r7, #4]
 800354c:	88b9      	ldrh	r1, [r7, #4]
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	4623      	mov	r3, r4
 8003554:	f7fe fd2d 	bl	8001fb2 <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8003558:	88bb      	ldrh	r3, [r7, #4]
 800355a:	3b0c      	subs	r3, #12
 800355c:	b299      	uxth	r1, r3
 800355e:	88bb      	ldrh	r3, [r7, #4]
 8003560:	330d      	adds	r3, #13
 8003562:	b29c      	uxth	r4, r3
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	88f8      	ldrh	r0, [r7, #6]
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	4623      	mov	r3, r4
 800356e:	f7fe fd20 	bl	8001fb2 <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	3301      	adds	r3, #1
 8003576:	b298      	uxth	r0, r3
 8003578:	88bb      	ldrh	r3, [r7, #4]
 800357a:	3301      	adds	r3, #1
 800357c:	b29b      	uxth	r3, r3
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	4619      	mov	r1, r3
 8003582:	f7fe fcff 	bl	8001f84 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	3b01      	subs	r3, #1
 800358a:	b298      	uxth	r0, r3
 800358c:	88bb      	ldrh	r3, [r7, #4]
 800358e:	3301      	adds	r3, #1
 8003590:	b29b      	uxth	r3, r3
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	4619      	mov	r1, r3
 8003596:	f7fe fcf5 	bl	8001f84 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	3301      	adds	r3, #1
 800359e:	b298      	uxth	r0, r3
 80035a0:	88bb      	ldrh	r3, [r7, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	887a      	ldrh	r2, [r7, #2]
 80035a8:	4619      	mov	r1, r3
 80035aa:	f7fe fceb 	bl	8001f84 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b298      	uxth	r0, r3
 80035b4:	88bb      	ldrh	r3, [r7, #4]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	887a      	ldrh	r2, [r7, #2]
 80035bc:	4619      	mov	r1, r3
 80035be:	f7fe fce1 	bl	8001f84 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 80035c2:	88f8      	ldrh	r0, [r7, #6]
 80035c4:	88b9      	ldrh	r1, [r7, #4]
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	2300      	movs	r3, #0
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2306      	movs	r3, #6
 80035ce:	f7ff f8ee 	bl	80027ae <lcd_DrawCircle>
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd90      	pop	{r4, r7, pc}
	...

080035dc <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 80035e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035ea:	4843      	ldr	r0, [pc, #268]	; (80036f8 <TP_Scan+0x11c>)
 80035ec:	f001 fd88 	bl	8005100 <HAL_GPIO_ReadPin>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d157      	bne.n	80036a6 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <TP_Scan+0x2a>
 80035fc:	493f      	ldr	r1, [pc, #252]	; (80036fc <TP_Scan+0x120>)
 80035fe:	4840      	ldr	r0, [pc, #256]	; (8003700 <TP_Scan+0x124>)
 8003600:	f7ff ff32 	bl	8003468 <TP_Read_XY2>
 8003604:	e03c      	b.n	8003680 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8003606:	493d      	ldr	r1, [pc, #244]	; (80036fc <TP_Scan+0x120>)
 8003608:	483d      	ldr	r0, [pc, #244]	; (8003700 <TP_Scan+0x124>)
 800360a:	f7ff ff2d 	bl	8003468 <TP_Read_XY2>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d035      	beq.n	8003680 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8003614:	4b3b      	ldr	r3, [pc, #236]	; (8003704 <TP_Scan+0x128>)
 8003616:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800361a:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <TP_Scan+0x128>)
 800361c:	899b      	ldrh	r3, [r3, #12]
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003626:	ee27 7a27 	vmul.f32	s14, s14, s15
 800362a:	4b36      	ldr	r3, [pc, #216]	; (8003704 <TP_Scan+0x128>)
 800362c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003630:	ee07 3a90 	vmov	s15, r3
 8003634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800363c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003640:	ee17 3a90 	vmov	r3, s15
 8003644:	b29a      	uxth	r2, r3
 8003646:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <TP_Scan+0x128>)
 8003648:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 800364a:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <TP_Scan+0x128>)
 800364c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003650:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <TP_Scan+0x128>)
 8003652:	8adb      	ldrh	r3, [r3, #22]
 8003654:	ee07 3a90 	vmov	s15, r3
 8003658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800365c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003660:	4b28      	ldr	r3, [pc, #160]	; (8003704 <TP_Scan+0x128>)
 8003662:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800366e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003676:	ee17 3a90 	vmov	r3, s15
 800367a:	b29a      	uxth	r2, r3
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <TP_Scan+0x128>)
 800367e:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8003680:	4b20      	ldr	r3, [pc, #128]	; (8003704 <TP_Scan+0x128>)
 8003682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003686:	b25b      	sxtb	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	db2a      	blt.n	80036e2 <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <TP_Scan+0x128>)
 800368e:	22c0      	movs	r2, #192	; 0xc0
 8003690:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8003694:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <TP_Scan+0x128>)
 8003696:	899a      	ldrh	r2, [r3, #12]
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <TP_Scan+0x128>)
 800369a:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 800369c:	4b19      	ldr	r3, [pc, #100]	; (8003704 <TP_Scan+0x128>)
 800369e:	8ada      	ldrh	r2, [r3, #22]
 80036a0:	4b18      	ldr	r3, [pc, #96]	; (8003704 <TP_Scan+0x128>)
 80036a2:	83da      	strh	r2, [r3, #30]
 80036a4:	e01d      	b.n	80036e2 <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 80036a6:	4b17      	ldr	r3, [pc, #92]	; (8003704 <TP_Scan+0x128>)
 80036a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	da09      	bge.n	80036c6 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 80036b2:	4b14      	ldr	r3, [pc, #80]	; (8003704 <TP_Scan+0x128>)
 80036b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	4b11      	ldr	r3, [pc, #68]	; (8003704 <TP_Scan+0x128>)
 80036c0:	f883 2020 	strb.w	r2, [r3, #32]
 80036c4:	e00d      	b.n	80036e2 <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 80036c6:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <TP_Scan+0x128>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <TP_Scan+0x128>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 80036d2:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <TP_Scan+0x128>)
 80036d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036d8:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <TP_Scan+0x128>)
 80036dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036e0:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <TP_Scan+0x128>)
 80036e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036ec:	b2db      	uxtb	r3, r3
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40020800 	.word	0x40020800
 80036fc:	2000002e 	.word	0x2000002e
 8003700:	20000024 	.word	0x20000024
 8003704:	20000018 	.word	0x20000018

08003708 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 800370c:	220e      	movs	r2, #14
 800370e:	4905      	ldr	r1, [pc, #20]	; (8003724 <TP_Save_Adjdata+0x1c>)
 8003710:	2000      	movs	r0, #0
 8003712:	f7fd fd0b 	bl	800112c <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8003716:	2100      	movs	r1, #0
 8003718:	200e      	movs	r0, #14
 800371a:	f7fd fca7 	bl	800106c <at24c_WriteOneByte>
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	2000003c 	.word	0x2000003c

08003728 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8003732:	200e      	movs	r0, #14
 8003734:	f7fd fc7e 	bl	8001034 <at24c_ReadOneByte>
 8003738:	4603      	mov	r3, r0
 800373a:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8003742:	220e      	movs	r2, #14
 8003744:	4905      	ldr	r1, [pc, #20]	; (800375c <TP_Get_Adjdata+0x34>)
 8003746:	2000      	movs	r0, #0
 8003748:	f7fd fcd1 	bl	80010ee <at24c_Read>
		return 1;
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	2000003c 	.word	0x2000003c

08003760 <touch_Adjust>:


void touch_Adjust(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	; 0x38
 8003764:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8003766:	2300      	movs	r3, #0
 8003768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 800376c:	2300      	movs	r3, #0
 800376e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8003772:	4b5f      	ldr	r3, [pc, #380]	; (80038f0 <touch_Adjust+0x190>)
 8003774:	881a      	ldrh	r2, [r3, #0]
 8003776:	4b5e      	ldr	r3, [pc, #376]	; (80038f0 <touch_Adjust+0x190>)
 8003778:	885b      	ldrh	r3, [r3, #2]
 800377a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800377e:	9100      	str	r1, [sp, #0]
 8003780:	2100      	movs	r1, #0
 8003782:	2000      	movs	r0, #0
 8003784:	f7fe fbc8 	bl	8001f18 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8003788:	2300      	movs	r3, #0
 800378a:	9302      	str	r3, [sp, #8]
 800378c:	2310      	movs	r3, #16
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800379a:	4a56      	ldr	r2, [pc, #344]	; (80038f4 <touch_Adjust+0x194>)
 800379c:	2128      	movs	r1, #40	; 0x28
 800379e:	2005      	movs	r0, #5
 80037a0:	f7ff f872 	bl	8002888 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 80037a4:	2300      	movs	r3, #0
 80037a6:	9302      	str	r3, [sp, #8]
 80037a8:	2310      	movs	r3, #16
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037b6:	4a50      	ldr	r2, [pc, #320]	; (80038f8 <touch_Adjust+0x198>)
 80037b8:	2141      	movs	r1, #65	; 0x41
 80037ba:	2005      	movs	r0, #5
 80037bc:	f7ff f864 	bl	8002888 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 80037c0:	2300      	movs	r3, #0
 80037c2:	9302      	str	r3, [sp, #8]
 80037c4:	2310      	movs	r3, #16
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037d2:	4a4a      	ldr	r2, [pc, #296]	; (80038fc <touch_Adjust+0x19c>)
 80037d4:	215a      	movs	r1, #90	; 0x5a
 80037d6:	2005      	movs	r0, #5
 80037d8:	f7ff f856 	bl	8002888 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 80037dc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80037e0:	2114      	movs	r1, #20
 80037e2:	2014      	movs	r0, #20
 80037e4:	f7ff fea2 	bl	800352c <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 80037e8:	4b45      	ldr	r3, [pc, #276]	; (8003900 <touch_Adjust+0x1a0>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 80037f0:	4b43      	ldr	r3, [pc, #268]	; (8003900 <touch_Adjust+0x1a0>)
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 80037f8:	2032      	movs	r0, #50	; 0x32
 80037fa:	f000 fc63 	bl	80040c4 <HAL_Delay>
		tp_dev.scan(1);
 80037fe:	4b40      	ldr	r3, [pc, #256]	; (8003900 <touch_Adjust+0x1a0>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2001      	movs	r0, #1
 8003804:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8003806:	4b3e      	ldr	r3, [pc, #248]	; (8003900 <touch_Adjust+0x1a0>)
 8003808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800380c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d1f1      	bne.n	80037f8 <touch_Adjust+0x98>
		{
			tp_dev.sta&=~(1<<6);
 8003814:	4b3a      	ldr	r3, [pc, #232]	; (8003900 <touch_Adjust+0x1a0>)
 8003816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800381a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381e:	b2da      	uxtb	r2, r3
 8003820:	4b37      	ldr	r3, [pc, #220]	; (8003900 <touch_Adjust+0x1a0>)
 8003822:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8003826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800382a:	4a35      	ldr	r2, [pc, #212]	; (8003900 <touch_Adjust+0x1a0>)
 800382c:	8992      	ldrh	r2, [r2, #12]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	3328      	adds	r3, #40	; 0x28
 8003832:	443b      	add	r3, r7
 8003834:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8003838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800383c:	4a30      	ldr	r2, [pc, #192]	; (8003900 <touch_Adjust+0x1a0>)
 800383e:	8ad2      	ldrh	r2, [r2, #22]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	3328      	adds	r3, #40	; 0x28
 8003844:	443b      	add	r3, r7
 8003846:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 800384a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800384e:	3301      	adds	r3, #1
 8003850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 8003854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003858:	3b01      	subs	r3, #1
 800385a:	2b03      	cmp	r3, #3
 800385c:	d8cc      	bhi.n	80037f8 <touch_Adjust+0x98>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <touch_Adjust+0x104>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	08003875 	.word	0x08003875
 8003868:	08003897 	.word	0x08003897
 800386c:	080038c1 	.word	0x080038c1
 8003870:	08003905 	.word	0x08003905
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 8003874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003878:	2114      	movs	r1, #20
 800387a:	2014      	movs	r0, #20
 800387c:	f7ff fe56 	bl	800352c <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8003880:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <touch_Adjust+0x190>)
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	3b14      	subs	r3, #20
 8003886:	b29b      	uxth	r3, r3
 8003888:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800388c:	2114      	movs	r1, #20
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff fe4c 	bl	800352c <TP_Drow_Touch_Point>
					break;
 8003894:	e319      	b.n	8003eca <touch_Adjust+0x76a>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 8003896:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <touch_Adjust+0x190>)
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	3b14      	subs	r3, #20
 800389c:	b29b      	uxth	r3, r3
 800389e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038a2:	2114      	movs	r1, #20
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fe41 	bl	800352c <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 80038aa:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <touch_Adjust+0x190>)
 80038ac:	885b      	ldrh	r3, [r3, #2]
 80038ae:	3b14      	subs	r3, #20
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80038b6:	4619      	mov	r1, r3
 80038b8:	2014      	movs	r0, #20
 80038ba:	f7ff fe37 	bl	800352c <TP_Drow_Touch_Point>
					break;
 80038be:	e304      	b.n	8003eca <touch_Adjust+0x76a>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <touch_Adjust+0x190>)
 80038c2:	885b      	ldrh	r3, [r3, #2]
 80038c4:	3b14      	subs	r3, #20
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038cc:	4619      	mov	r1, r3
 80038ce:	2014      	movs	r0, #20
 80038d0:	f7ff fe2c 	bl	800352c <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <touch_Adjust+0x190>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	3b14      	subs	r3, #20
 80038da:	b298      	uxth	r0, r3
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <touch_Adjust+0x190>)
 80038de:	885b      	ldrh	r3, [r3, #2]
 80038e0:	3b14      	subs	r3, #20
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80038e8:	4619      	mov	r1, r3
 80038ea:	f7ff fe1f 	bl	800352c <TP_Drow_Touch_Point>
					break;
 80038ee:	e2ec      	b.n	8003eca <touch_Adjust+0x76a>
 80038f0:	200003bc 	.word	0x200003bc
 80038f4:	0800836c 	.word	0x0800836c
 80038f8:	08008388 	.word	0x08008388
 80038fc:	080083a0 	.word	0x080083a0
 8003900:	20000018 	.word	0x20000018
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8003904:	883b      	ldrh	r3, [r7, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	88bb      	ldrh	r3, [r7, #4]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	bfb8      	it	lt
 8003910:	425b      	neglt	r3, r3
 8003912:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8003914:	887b      	ldrh	r3, [r7, #2]
 8003916:	461a      	mov	r2, r3
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	bfb8      	it	lt
 8003920:	425b      	neglt	r3, r3
 8003922:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	fb03 f303 	mul.w	r3, r3, r3
 800392a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	fb03 f303 	mul.w	r3, r3, r3
 8003932:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003934:	6a3a      	ldr	r2, [r7, #32]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f7fc fd8e 	bl	800045c <__aeabi_ui2d>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	ec43 2b10 	vmov	d0, r2, r3
 8003948:	f004 fbdc 	bl	8008104 <sqrt>
 800394c:	ec53 2b10 	vmov	r2, r3, d0
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	f7fd f8ac 	bl	8000ab0 <__aeabi_d2uiz>
 8003958:	4603      	mov	r3, r0
 800395a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 800395c:	893b      	ldrh	r3, [r7, #8]
 800395e:	461a      	mov	r2, r3
 8003960:	89bb      	ldrh	r3, [r7, #12]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	bfb8      	it	lt
 8003968:	425b      	neglt	r3, r3
 800396a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 800396c:	897b      	ldrh	r3, [r7, #10]
 800396e:	461a      	mov	r2, r3
 8003970:	89fb      	ldrh	r3, [r7, #14]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	bfb8      	it	lt
 8003978:	425b      	neglt	r3, r3
 800397a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	fb03 f303 	mul.w	r3, r3, r3
 8003982:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	fb03 f303 	mul.w	r3, r3, r3
 800398a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f7fc fd62 	bl	800045c <__aeabi_ui2d>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	ec43 2b10 	vmov	d0, r2, r3
 80039a0:	f004 fbb0 	bl	8008104 <sqrt>
 80039a4:	ec53 2b10 	vmov	r2, r3, d0
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	f7fd f880 	bl	8000ab0 <__aeabi_d2uiz>
 80039b0:	4603      	mov	r3, r0
 80039b2:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80039b4:	8b7b      	ldrh	r3, [r7, #26]
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039be:	8b3b      	ldrh	r3, [r7, #24]
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039cc:	ee16 0a90 	vmov	r0, s13
 80039d0:	f7fc fd66 	bl	80004a0 <__aeabi_f2d>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 80039dc:	a384      	add	r3, pc, #528	; (adr r3, 8003bf0 <touch_Adjust+0x490>)
 80039de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039e6:	f7fd f825 	bl	8000a34 <__aeabi_dcmplt>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10f      	bne.n	8003a10 <touch_Adjust+0x2b0>
 80039f0:	a381      	add	r3, pc, #516	; (adr r3, 8003bf8 <touch_Adjust+0x498>)
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039fa:	f7fd f839 	bl	8000a70 <__aeabi_dcmpgt>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d105      	bne.n	8003a10 <touch_Adjust+0x2b0>
 8003a04:	8b7b      	ldrh	r3, [r7, #26]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <touch_Adjust+0x2b0>
 8003a0a:	8b3b      	ldrh	r3, [r7, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d136      	bne.n	8003a7e <touch_Adjust+0x31e>
					{
						cnt=0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003a16:	4b7a      	ldr	r3, [pc, #488]	; (8003c00 <touch_Adjust+0x4a0>)
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	3b14      	subs	r3, #20
 8003a1c:	b298      	uxth	r0, r3
 8003a1e:	4b78      	ldr	r3, [pc, #480]	; (8003c00 <touch_Adjust+0x4a0>)
 8003a20:	885b      	ldrh	r3, [r3, #2]
 8003a22:	3b14      	subs	r3, #20
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f7ff fd7e 	bl	800352c <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003a30:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003a34:	2114      	movs	r1, #20
 8003a36:	2014      	movs	r0, #20
 8003a38:	f7ff fd78 	bl	800352c <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9302      	str	r3, [sp, #8]
 8003a40:	2310      	movs	r3, #16
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003a4e:	4a6d      	ldr	r2, [pc, #436]	; (8003c04 <touch_Adjust+0x4a4>)
 8003a50:	2128      	movs	r1, #40	; 0x28
 8003a52:	2005      	movs	r0, #5
 8003a54:	f7fe ff18 	bl	8002888 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003a58:	2300      	movs	r3, #0
 8003a5a:	9302      	str	r3, [sp, #8]
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	9301      	str	r3, [sp, #4]
 8003a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003a6a:	4a67      	ldr	r2, [pc, #412]	; (8003c08 <touch_Adjust+0x4a8>)
 8003a6c:	213c      	movs	r1, #60	; 0x3c
 8003a6e:	2005      	movs	r0, #5
 8003a70:	f7fe ff0a 	bl	8002888 <lcd_ShowStr>
						HAL_Delay(1000);
 8003a74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a78:	f000 fb24 	bl	80040c4 <HAL_Delay>
 						continue;
 8003a7c:	e225      	b.n	8003eca <touch_Adjust+0x76a>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8003a7e:	883b      	ldrh	r3, [r7, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	893b      	ldrh	r3, [r7, #8]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bfb8      	it	lt
 8003a8a:	425b      	neglt	r3, r3
 8003a8c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8003a8e:	887b      	ldrh	r3, [r7, #2]
 8003a90:	461a      	mov	r2, r3
 8003a92:	897b      	ldrh	r3, [r7, #10]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bfb8      	it	lt
 8003a9a:	425b      	neglt	r3, r3
 8003a9c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	fb03 f303 	mul.w	r3, r3, r3
 8003aa4:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fb03 f303 	mul.w	r3, r3, r3
 8003aac:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003aae:	6a3a      	ldr	r2, [r7, #32]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fc fcd1 	bl	800045c <__aeabi_ui2d>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	ec43 2b10 	vmov	d0, r2, r3
 8003ac2:	f004 fb1f 	bl	8008104 <sqrt>
 8003ac6:	ec53 2b10 	vmov	r2, r3, d0
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	f7fc ffef 	bl	8000ab0 <__aeabi_d2uiz>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8003ad6:	88bb      	ldrh	r3, [r7, #4]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	89bb      	ldrh	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bfb8      	it	lt
 8003ae2:	425b      	neglt	r3, r3
 8003ae4:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	89fb      	ldrh	r3, [r7, #14]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bfb8      	it	lt
 8003af2:	425b      	neglt	r3, r3
 8003af4:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	fb03 f303 	mul.w	r3, r3, r3
 8003afc:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	fb03 f303 	mul.w	r3, r3, r3
 8003b04:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003b06:	6a3a      	ldr	r2, [r7, #32]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fc fca5 	bl	800045c <__aeabi_ui2d>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	ec43 2b10 	vmov	d0, r2, r3
 8003b1a:	f004 faf3 	bl	8008104 <sqrt>
 8003b1e:	ec53 2b10 	vmov	r2, r3, d0
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	f7fc ffc3 	bl	8000ab0 <__aeabi_d2uiz>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003b2e:	8b7b      	ldrh	r3, [r7, #26]
 8003b30:	ee07 3a90 	vmov	s15, r3
 8003b34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b38:	8b3b      	ldrh	r3, [r7, #24]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b46:	ee16 0a90 	vmov	r0, s13
 8003b4a:	f7fc fca9 	bl	80004a0 <__aeabi_f2d>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003b56:	a326      	add	r3, pc, #152	; (adr r3, 8003bf0 <touch_Adjust+0x490>)
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b60:	f7fc ff68 	bl	8000a34 <__aeabi_dcmplt>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <touch_Adjust+0x41e>
 8003b6a:	a323      	add	r3, pc, #140	; (adr r3, 8003bf8 <touch_Adjust+0x498>)
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b74:	f7fc ff7c 	bl	8000a70 <__aeabi_dcmpgt>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d046      	beq.n	8003c0c <touch_Adjust+0x4ac>
					{
						cnt=0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <touch_Adjust+0x4a0>)
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	3b14      	subs	r3, #20
 8003b8a:	b298      	uxth	r0, r3
 8003b8c:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <touch_Adjust+0x4a0>)
 8003b8e:	885b      	ldrh	r3, [r3, #2]
 8003b90:	3b14      	subs	r3, #20
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f7ff fcc7 	bl	800352c <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003b9e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003ba2:	2114      	movs	r1, #20
 8003ba4:	2014      	movs	r0, #20
 8003ba6:	f7ff fcc1 	bl	800352c <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003baa:	2300      	movs	r3, #0
 8003bac:	9302      	str	r3, [sp, #8]
 8003bae:	2310      	movs	r3, #16
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003bbc:	4a11      	ldr	r2, [pc, #68]	; (8003c04 <touch_Adjust+0x4a4>)
 8003bbe:	2128      	movs	r1, #40	; 0x28
 8003bc0:	2005      	movs	r0, #5
 8003bc2:	f7fe fe61 	bl	8002888 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	9302      	str	r3, [sp, #8]
 8003bca:	2310      	movs	r3, #16
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003bd8:	4a0b      	ldr	r2, [pc, #44]	; (8003c08 <touch_Adjust+0x4a8>)
 8003bda:	213c      	movs	r1, #60	; 0x3c
 8003bdc:	2005      	movs	r0, #5
 8003bde:	f7fe fe53 	bl	8002888 <lcd_ShowStr>
						HAL_Delay(1000);
 8003be2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003be6:	f000 fa6d 	bl	80040c4 <HAL_Delay>
						continue;
 8003bea:	e16e      	b.n	8003eca <touch_Adjust+0x76a>
 8003bec:	f3af 8000 	nop.w
 8003bf0:	66666666 	.word	0x66666666
 8003bf4:	3fee6666 	.word	0x3fee6666
 8003bf8:	cccccccd 	.word	0xcccccccd
 8003bfc:	3ff0cccc 	.word	0x3ff0cccc
 8003c00:	200003bc 	.word	0x200003bc
 8003c04:	080083b4 	.word	0x080083b4
 8003c08:	080083d4 	.word	0x080083d4
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8003c0c:	88bb      	ldrh	r3, [r7, #4]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	893b      	ldrh	r3, [r7, #8]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bfb8      	it	lt
 8003c18:	425b      	neglt	r3, r3
 8003c1a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	897b      	ldrh	r3, [r7, #10]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bfb8      	it	lt
 8003c28:	425b      	neglt	r3, r3
 8003c2a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	fb03 f303 	mul.w	r3, r3, r3
 8003c32:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	fb03 f303 	mul.w	r3, r3, r3
 8003c3a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003c3c:	6a3a      	ldr	r2, [r7, #32]
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fc fc0a 	bl	800045c <__aeabi_ui2d>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	ec43 2b10 	vmov	d0, r2, r3
 8003c50:	f004 fa58 	bl	8008104 <sqrt>
 8003c54:	ec53 2b10 	vmov	r2, r3, d0
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	f7fc ff28 	bl	8000ab0 <__aeabi_d2uiz>
 8003c60:	4603      	mov	r3, r0
 8003c62:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8003c64:	883b      	ldrh	r3, [r7, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	89bb      	ldrh	r3, [r7, #12]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bfb8      	it	lt
 8003c70:	425b      	neglt	r3, r3
 8003c72:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8003c74:	887b      	ldrh	r3, [r7, #2]
 8003c76:	461a      	mov	r2, r3
 8003c78:	89fb      	ldrh	r3, [r7, #14]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bfb8      	it	lt
 8003c80:	425b      	neglt	r3, r3
 8003c82:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	fb03 f303 	mul.w	r3, r3, r3
 8003c8a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	fb03 f303 	mul.w	r3, r3, r3
 8003c92:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003c94:	6a3a      	ldr	r2, [r7, #32]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	4413      	add	r3, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fc fbde 	bl	800045c <__aeabi_ui2d>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	ec43 2b10 	vmov	d0, r2, r3
 8003ca8:	f004 fa2c 	bl	8008104 <sqrt>
 8003cac:	ec53 2b10 	vmov	r2, r3, d0
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f7fc fefc 	bl	8000ab0 <__aeabi_d2uiz>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003cbc:	8b7b      	ldrh	r3, [r7, #26]
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cc6:	8b3b      	ldrh	r3, [r7, #24]
 8003cc8:	ee07 3a90 	vmov	s15, r3
 8003ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cd0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003cd4:	ee16 0a90 	vmov	r0, s13
 8003cd8:	f7fc fbe2 	bl	80004a0 <__aeabi_f2d>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003ce4:	a383      	add	r3, pc, #524	; (adr r3, 8003ef4 <touch_Adjust+0x794>)
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cee:	f7fc fea1 	bl	8000a34 <__aeabi_dcmplt>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d109      	bne.n	8003d0c <touch_Adjust+0x5ac>
 8003cf8:	a380      	add	r3, pc, #512	; (adr r3, 8003efc <touch_Adjust+0x79c>)
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d02:	f7fc feb5 	bl	8000a70 <__aeabi_dcmpgt>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d036      	beq.n	8003d7a <touch_Adjust+0x61a>
					{
						cnt=0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003d12:	4b71      	ldr	r3, [pc, #452]	; (8003ed8 <touch_Adjust+0x778>)
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	3b14      	subs	r3, #20
 8003d18:	b298      	uxth	r0, r3
 8003d1a:	4b6f      	ldr	r3, [pc, #444]	; (8003ed8 <touch_Adjust+0x778>)
 8003d1c:	885b      	ldrh	r3, [r3, #2]
 8003d1e:	3b14      	subs	r3, #20
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d26:	4619      	mov	r1, r3
 8003d28:	f7ff fc00 	bl	800352c <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003d2c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003d30:	2114      	movs	r1, #20
 8003d32:	2014      	movs	r0, #20
 8003d34:	f7ff fbfa 	bl	800352c <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9302      	str	r3, [sp, #8]
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d4a:	4a64      	ldr	r2, [pc, #400]	; (8003edc <touch_Adjust+0x77c>)
 8003d4c:	2128      	movs	r1, #40	; 0x28
 8003d4e:	2005      	movs	r0, #5
 8003d50:	f7fe fd9a 	bl	8002888 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003d54:	2300      	movs	r3, #0
 8003d56:	9302      	str	r3, [sp, #8]
 8003d58:	2310      	movs	r3, #16
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d66:	4a5e      	ldr	r2, [pc, #376]	; (8003ee0 <touch_Adjust+0x780>)
 8003d68:	213c      	movs	r1, #60	; 0x3c
 8003d6a:	2005      	movs	r0, #5
 8003d6c:	f7fe fd8c 	bl	8002888 <lcd_ShowStr>

						HAL_Delay(1000);
 8003d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d74:	f000 f9a6 	bl	80040c4 <HAL_Delay>
 							continue;
 8003d78:	e0a7      	b.n	8003eca <touch_Adjust+0x76a>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8003d7a:	4b57      	ldr	r3, [pc, #348]	; (8003ed8 <touch_Adjust+0x778>)
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	3b28      	subs	r3, #40	; 0x28
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d88:	88bb      	ldrh	r3, [r7, #4]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	883b      	ldrh	r3, [r7, #0]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	ee07 3a90 	vmov	s15, r3
 8003d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d9c:	4b51      	ldr	r3, [pc, #324]	; (8003ee4 <touch_Adjust+0x784>)
 8003d9e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8003da2:	4b4d      	ldr	r3, [pc, #308]	; (8003ed8 <touch_Adjust+0x778>)
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dae:	4b4d      	ldr	r3, [pc, #308]	; (8003ee4 <touch_Adjust+0x784>)
 8003db0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003db4:	88bb      	ldrh	r3, [r7, #4]
 8003db6:	461a      	mov	r2, r3
 8003db8:	883b      	ldrh	r3, [r7, #0]
 8003dba:	4413      	add	r3, r2
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dcc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003dd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dd8:	ee17 3a90 	vmov	r3, s15
 8003ddc:	b21a      	sxth	r2, r3
 8003dde:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <touch_Adjust+0x784>)
 8003de0:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8003de2:	4b3d      	ldr	r3, [pc, #244]	; (8003ed8 <touch_Adjust+0x778>)
 8003de4:	885b      	ldrh	r3, [r3, #2]
 8003de6:	3b28      	subs	r3, #40	; 0x28
 8003de8:	ee07 3a90 	vmov	s15, r3
 8003dec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003df0:	897b      	ldrh	r3, [r7, #10]
 8003df2:	461a      	mov	r2, r3
 8003df4:	887b      	ldrh	r3, [r7, #2]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	ee07 3a90 	vmov	s15, r3
 8003dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e04:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <touch_Adjust+0x784>)
 8003e06:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8003e0a:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <touch_Adjust+0x778>)
 8003e0c:	885b      	ldrh	r3, [r3, #2]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <touch_Adjust+0x784>)
 8003e18:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003e1c:	897b      	ldrh	r3, [r7, #10]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	887b      	ldrh	r3, [r7, #2]
 8003e22:	4413      	add	r3, r2
 8003e24:	ee07 3a90 	vmov	s15, r3
 8003e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e40:	ee17 3a90 	vmov	r3, s15
 8003e44:	b21a      	sxth	r2, r3
 8003e46:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <touch_Adjust+0x784>)
 8003e48:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003e4a:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <touch_Adjust+0x778>)
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	3b14      	subs	r3, #20
 8003e50:	b298      	uxth	r0, r3
 8003e52:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <touch_Adjust+0x778>)
 8003e54:	885b      	ldrh	r3, [r3, #2]
 8003e56:	3b14      	subs	r3, #20
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f7ff fb64 	bl	800352c <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8003e64:	2300      	movs	r3, #0
 8003e66:	9302      	str	r3, [sp, #8]
 8003e68:	2310      	movs	r3, #16
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e76:	4a1c      	ldr	r2, [pc, #112]	; (8003ee8 <touch_Adjust+0x788>)
 8003e78:	2128      	movs	r1, #40	; 0x28
 8003e7a:	2005      	movs	r0, #5
 8003e7c:	f7fe fd04 	bl	8002888 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8003e80:	2300      	movs	r3, #0
 8003e82:	9302      	str	r3, [sp, #8]
 8003e84:	2310      	movs	r3, #16
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e92:	4a16      	ldr	r2, [pc, #88]	; (8003eec <touch_Adjust+0x78c>)
 8003e94:	213c      	movs	r1, #60	; 0x3c
 8003e96:	2005      	movs	r0, #5
 8003e98:	f7fe fcf6 	bl	8002888 <lcd_ShowStr>
					HAL_Delay(1000);
 8003e9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ea0:	f000 f910 	bl	80040c4 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	9302      	str	r3, [sp, #8]
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	9301      	str	r3, [sp, #4]
 8003eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003eb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ef0 <touch_Adjust+0x790>)
 8003eb8:	2128      	movs	r1, #40	; 0x28
 8003eba:	2005      	movs	r0, #5
 8003ebc:	f7fe fce4 	bl	8002888 <lcd_ShowStr>
					TP_Save_Adjdata();
 8003ec0:	f7ff fc22 	bl	8003708 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8003ec4:	f7ff fc30 	bl	8003728 <TP_Get_Adjdata>
					return;
 8003ec8:	e000      	b.n	8003ecc <touch_Adjust+0x76c>
		HAL_Delay(50);
 8003eca:	e495      	b.n	80037f8 <touch_Adjust+0x98>
			}
		}
 	}
}
 8003ecc:	3728      	adds	r7, #40	; 0x28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	f3af 8000 	nop.w
 8003ed8:	200003bc 	.word	0x200003bc
 8003edc:	080083b4 	.word	0x080083b4
 8003ee0:	080083d4 	.word	0x080083d4
 8003ee4:	20000018 	.word	0x20000018
 8003ee8:	080083f4 	.word	0x080083f4
 8003eec:	08008414 	.word	0x08008414
 8003ef0:	08008434 	.word	0x08008434
 8003ef4:	66666666 	.word	0x66666666
 8003ef8:	3fee6666 	.word	0x3fee6666
 8003efc:	cccccccd 	.word	0xcccccccd
 8003f00:	3ff0cccc 	.word	0x3ff0cccc

08003f04 <touch_init>:

void touch_init(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8003f08:	4904      	ldr	r1, [pc, #16]	; (8003f1c <touch_init+0x18>)
 8003f0a:	4805      	ldr	r0, [pc, #20]	; (8003f20 <touch_init+0x1c>)
 8003f0c:	f7ff fa8a 	bl	8003424 <TP_Read_XY>
	at24c_init();
 8003f10:	f7fd f88a 	bl	8001028 <at24c_init>
	TP_Get_Adjdata();
 8003f14:	f7ff fc08 	bl	8003728 <TP_Get_Adjdata>
}
 8003f18:	bf00      	nop
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	2000002e 	.word	0x2000002e
 8003f20:	20000024 	.word	0x20000024

08003f24 <touch_Scan>:

void touch_Scan(){
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8003f28:	4b02      	ldr	r3, [pc, #8]	; (8003f34 <touch_Scan+0x10>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	4798      	blx	r3
}
 8003f30:	bf00      	nop
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000018 	.word	0x20000018

08003f38 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8003f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f40:	4805      	ldr	r0, [pc, #20]	; (8003f58 <touch_IsTouched+0x20>)
 8003f42:	f001 f8dd 	bl	8005100 <HAL_GPIO_ReadPin>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40020800 	.word	0x40020800

08003f5c <touch_GetX>:

uint16_t touch_GetX(){
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <touch_GetX+0x14>)
 8003f62:	899b      	ldrh	r3, [r3, #12]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000018 	.word	0x20000018

08003f74 <touch_GetY>:

uint16_t touch_GetY(){
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <touch_GetY+0x14>)
 8003f7a:	8adb      	ldrh	r3, [r3, #22]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20000018 	.word	0x20000018

08003f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f90:	480d      	ldr	r0, [pc, #52]	; (8003fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f92:	490e      	ldr	r1, [pc, #56]	; (8003fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f94:	4a0e      	ldr	r2, [pc, #56]	; (8003fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f98:	e002      	b.n	8003fa0 <LoopCopyDataInit>

08003f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f9a:	58d4      	ldr	r4, [r2, r3]





  str r4, [r0, r3]
 8003f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f9e:	3304      	adds	r3, #4

08003fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fa4:	d3f9      	bcc.n	8003f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fa6:	4a0b      	ldr	r2, [pc, #44]	; (8003fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fa8:	4c0b      	ldr	r4, [pc, #44]	; (8003fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fac:	e001      	b.n	8003fb2 <LoopFillZerobss>

08003fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fb0:	3204      	adds	r2, #4

08003fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fb4:	d3fb      	bcc.n	8003fae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003fb6:	f7fe ff87 	bl	8002ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fba:	f004 f87f 	bl	80080bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fbe:	f7fe fd85 	bl	8002acc <main>
  bx  lr    
 8003fc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fcc:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8003fd0:	0800b3fc 	.word	0x0800b3fc
  ldr r2, =_sbss
 8003fd4:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8003fd8:	2000063c 	.word	0x2000063c

08003fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fdc:	e7fe      	b.n	8003fdc <ADC_IRQHandler>
	...

08003fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fe4:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <HAL_Init+0x40>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a0d      	ldr	r2, [pc, #52]	; (8004020 <HAL_Init+0x40>)
 8003fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_Init+0x40>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <HAL_Init+0x40>)
 8003ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ffc:	4b08      	ldr	r3, [pc, #32]	; (8004020 <HAL_Init+0x40>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a07      	ldr	r2, [pc, #28]	; (8004020 <HAL_Init+0x40>)
 8004002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004008:	2003      	movs	r0, #3
 800400a:	f000 fbb1 	bl	8004770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800400e:	200f      	movs	r0, #15
 8004010:	f000 f808 	bl	8004024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004014:	f7fe fef2 	bl	8002dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023c00 	.word	0x40023c00

08004024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800402c:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_InitTick+0x54>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <HAL_InitTick+0x58>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	4619      	mov	r1, r3
 8004036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800403a:	fbb3 f3f1 	udiv	r3, r3, r1
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fbc9 	bl	80047da <HAL_SYSTICK_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e00e      	b.n	8004070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b0f      	cmp	r3, #15
 8004056:	d80a      	bhi.n	800406e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004058:	2200      	movs	r2, #0
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	f04f 30ff 	mov.w	r0, #4294967295
 8004060:	f000 fb91 	bl	8004786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004064:	4a06      	ldr	r2, [pc, #24]	; (8004080 <HAL_InitTick+0x5c>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	e000      	b.n	8004070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000014 	.word	0x20000014
 800407c:	20000054 	.word	0x20000054
 8004080:	20000050 	.word	0x20000050

08004084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_IncTick+0x20>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_IncTick+0x24>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4413      	add	r3, r2
 8004094:	4a04      	ldr	r2, [pc, #16]	; (80040a8 <HAL_IncTick+0x24>)
 8004096:	6013      	str	r3, [r2, #0]
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000054 	.word	0x20000054
 80040a8:	20000500 	.word	0x20000500

080040ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  return uwTick;
 80040b0:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <HAL_GetTick+0x14>)
 80040b2:	681b      	ldr	r3, [r3, #0]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000500 	.word	0x20000500

080040c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040cc:	f7ff ffee 	bl	80040ac <HAL_GetTick>
 80040d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d005      	beq.n	80040ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <HAL_Delay+0x44>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040ea:	bf00      	nop
 80040ec:	f7ff ffde 	bl	80040ac <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d8f7      	bhi.n	80040ec <HAL_Delay+0x28>
  {
  }
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000054 	.word	0x20000054

0800410c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e033      	b.n	800418a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fc fee8 	bl	8000f00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b00      	cmp	r3, #0
 8004148:	d118      	bne.n	800417c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004152:	f023 0302 	bic.w	r3, r3, #2
 8004156:	f043 0202 	orr.w	r2, r3, #2
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f93a 	bl	80043d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f023 0303 	bic.w	r3, r3, #3
 8004172:	f043 0201 	orr.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	641a      	str	r2, [r3, #64]	; 0x40
 800417a:	e001      	b.n	8004180 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x1c>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e105      	b.n	80043bc <HAL_ADC_ConfigChannel+0x228>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b09      	cmp	r3, #9
 80041be:	d925      	bls.n	800420c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68d9      	ldr	r1, [r3, #12]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	3b1e      	subs	r3, #30
 80041d6:	2207      	movs	r2, #7
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43da      	mvns	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	400a      	ands	r2, r1
 80041e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68d9      	ldr	r1, [r3, #12]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	4618      	mov	r0, r3
 80041f8:	4603      	mov	r3, r0
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	4403      	add	r3, r0
 80041fe:	3b1e      	subs	r3, #30
 8004200:	409a      	lsls	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	60da      	str	r2, [r3, #12]
 800420a:	e022      	b.n	8004252 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6919      	ldr	r1, [r3, #16]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	4613      	mov	r3, r2
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	4413      	add	r3, r2
 8004220:	2207      	movs	r2, #7
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43da      	mvns	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	400a      	ands	r2, r1
 800422e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6919      	ldr	r1, [r3, #16]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	4618      	mov	r0, r3
 8004242:	4603      	mov	r3, r0
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4403      	add	r3, r0
 8004248:	409a      	lsls	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b06      	cmp	r3, #6
 8004258:	d824      	bhi.n	80042a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	3b05      	subs	r3, #5
 800426c:	221f      	movs	r2, #31
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43da      	mvns	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	400a      	ands	r2, r1
 800427a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	4618      	mov	r0, r3
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	3b05      	subs	r3, #5
 8004296:	fa00 f203 	lsl.w	r2, r0, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	635a      	str	r2, [r3, #52]	; 0x34
 80042a2:	e04c      	b.n	800433e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b0c      	cmp	r3, #12
 80042aa:	d824      	bhi.n	80042f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	3b23      	subs	r3, #35	; 0x23
 80042be:	221f      	movs	r2, #31
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43da      	mvns	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	400a      	ands	r2, r1
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	4618      	mov	r0, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	3b23      	subs	r3, #35	; 0x23
 80042e8:	fa00 f203 	lsl.w	r2, r0, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
 80042f4:	e023      	b.n	800433e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	3b41      	subs	r3, #65	; 0x41
 8004308:	221f      	movs	r2, #31
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43da      	mvns	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	400a      	ands	r2, r1
 8004316:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	4618      	mov	r0, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	3b41      	subs	r3, #65	; 0x41
 8004332:	fa00 f203 	lsl.w	r2, r0, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800433e:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <HAL_ADC_ConfigChannel+0x234>)
 8004340:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a21      	ldr	r2, [pc, #132]	; (80043cc <HAL_ADC_ConfigChannel+0x238>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d109      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x1cc>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b12      	cmp	r3, #18
 8004352:	d105      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a19      	ldr	r2, [pc, #100]	; (80043cc <HAL_ADC_ConfigChannel+0x238>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d123      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x21e>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b10      	cmp	r3, #16
 8004370:	d003      	beq.n	800437a <HAL_ADC_ConfigChannel+0x1e6>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b11      	cmp	r3, #17
 8004378:	d11b      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b10      	cmp	r3, #16
 800438c:	d111      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <HAL_ADC_ConfigChannel+0x23c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a10      	ldr	r2, [pc, #64]	; (80043d4 <HAL_ADC_ConfigChannel+0x240>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	0c9a      	lsrs	r2, r3, #18
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043a4:	e002      	b.n	80043ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f9      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40012300 	.word	0x40012300
 80043cc:	40012000 	.word	0x40012000
 80043d0:	20000014 	.word	0x20000014
 80043d4:	431bde83 	.word	0x431bde83

080043d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043e0:	4b79      	ldr	r3, [pc, #484]	; (80045c8 <ADC_Init+0x1f0>)
 80043e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800440c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	021a      	lsls	r2, r3, #8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6859      	ldr	r1, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6899      	ldr	r1, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	4a58      	ldr	r2, [pc, #352]	; (80045cc <ADC_Init+0x1f4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d022      	beq.n	80044b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800447e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6899      	ldr	r1, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6899      	ldr	r1, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	e00f      	b.n	80044d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0202 	bic.w	r2, r2, #2
 80044e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6899      	ldr	r1, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	7e1b      	ldrb	r3, [r3, #24]
 80044f0:	005a      	lsls	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01b      	beq.n	800453c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004512:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004522:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	3b01      	subs	r3, #1
 8004530:	035a      	lsls	r2, r3, #13
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
 800453a:	e007      	b.n	800454c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800454a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	3b01      	subs	r3, #1
 8004568:	051a      	lsls	r2, r3, #20
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6899      	ldr	r1, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800458e:	025a      	lsls	r2, r3, #9
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6899      	ldr	r1, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	029a      	lsls	r2, r3, #10
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	609a      	str	r2, [r3, #8]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	40012300 	.word	0x40012300
 80045cc:	0f000001 	.word	0x0f000001

080045d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <__NVIC_SetPriorityGrouping+0x44>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045ec:	4013      	ands	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004602:	4a04      	ldr	r2, [pc, #16]	; (8004614 <__NVIC_SetPriorityGrouping+0x44>)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	60d3      	str	r3, [r2, #12]
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	e000ed00 	.word	0xe000ed00

08004618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800461c:	4b04      	ldr	r3, [pc, #16]	; (8004630 <__NVIC_GetPriorityGrouping+0x18>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	f003 0307 	and.w	r3, r3, #7
}
 8004626:	4618      	mov	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	2b00      	cmp	r3, #0
 8004644:	db0b      	blt.n	800465e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	f003 021f 	and.w	r2, r3, #31
 800464c:	4907      	ldr	r1, [pc, #28]	; (800466c <__NVIC_EnableIRQ+0x38>)
 800464e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2001      	movs	r0, #1
 8004656:	fa00 f202 	lsl.w	r2, r0, r2
 800465a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	e000e100 	.word	0xe000e100

08004670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	6039      	str	r1, [r7, #0]
 800467a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004680:	2b00      	cmp	r3, #0
 8004682:	db0a      	blt.n	800469a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	b2da      	uxtb	r2, r3
 8004688:	490c      	ldr	r1, [pc, #48]	; (80046bc <__NVIC_SetPriority+0x4c>)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	0112      	lsls	r2, r2, #4
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	440b      	add	r3, r1
 8004694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004698:	e00a      	b.n	80046b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	b2da      	uxtb	r2, r3
 800469e:	4908      	ldr	r1, [pc, #32]	; (80046c0 <__NVIC_SetPriority+0x50>)
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	3b04      	subs	r3, #4
 80046a8:	0112      	lsls	r2, r2, #4
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	440b      	add	r3, r1
 80046ae:	761a      	strb	r2, [r3, #24]
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	e000e100 	.word	0xe000e100
 80046c0:	e000ed00 	.word	0xe000ed00

080046c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b089      	sub	sp, #36	; 0x24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f1c3 0307 	rsb	r3, r3, #7
 80046de:	2b04      	cmp	r3, #4
 80046e0:	bf28      	it	cs
 80046e2:	2304      	movcs	r3, #4
 80046e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3304      	adds	r3, #4
 80046ea:	2b06      	cmp	r3, #6
 80046ec:	d902      	bls.n	80046f4 <NVIC_EncodePriority+0x30>
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	3b03      	subs	r3, #3
 80046f2:	e000      	b.n	80046f6 <NVIC_EncodePriority+0x32>
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f8:	f04f 32ff 	mov.w	r2, #4294967295
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	43da      	mvns	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	401a      	ands	r2, r3
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800470c:	f04f 31ff 	mov.w	r1, #4294967295
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	fa01 f303 	lsl.w	r3, r1, r3
 8004716:	43d9      	mvns	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800471c:	4313      	orrs	r3, r2
         );
}
 800471e:	4618      	mov	r0, r3
 8004720:	3724      	adds	r7, #36	; 0x24
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3b01      	subs	r3, #1
 8004738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800473c:	d301      	bcc.n	8004742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800473e:	2301      	movs	r3, #1
 8004740:	e00f      	b.n	8004762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004742:	4a0a      	ldr	r2, [pc, #40]	; (800476c <SysTick_Config+0x40>)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3b01      	subs	r3, #1
 8004748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800474a:	210f      	movs	r1, #15
 800474c:	f04f 30ff 	mov.w	r0, #4294967295
 8004750:	f7ff ff8e 	bl	8004670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <SysTick_Config+0x40>)
 8004756:	2200      	movs	r2, #0
 8004758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800475a:	4b04      	ldr	r3, [pc, #16]	; (800476c <SysTick_Config+0x40>)
 800475c:	2207      	movs	r2, #7
 800475e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	e000e010 	.word	0xe000e010

08004770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff ff29 	bl	80045d0 <__NVIC_SetPriorityGrouping>
}
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004786:	b580      	push	{r7, lr}
 8004788:	b086      	sub	sp, #24
 800478a:	af00      	add	r7, sp, #0
 800478c:	4603      	mov	r3, r0
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004798:	f7ff ff3e 	bl	8004618 <__NVIC_GetPriorityGrouping>
 800479c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	6978      	ldr	r0, [r7, #20]
 80047a4:	f7ff ff8e 	bl	80046c4 <NVIC_EncodePriority>
 80047a8:	4602      	mov	r2, r0
 80047aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ae:	4611      	mov	r1, r2
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff ff5d 	bl	8004670 <__NVIC_SetPriority>
}
 80047b6:	bf00      	nop
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	4603      	mov	r3, r0
 80047c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff ff31 	bl	8004634 <__NVIC_EnableIRQ>
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff ffa2 	bl	800472c <SysTick_Config>
 80047e8:	4603      	mov	r3, r0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004800:	f7ff fc54 	bl	80040ac <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e099      	b.n	8004944 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004830:	e00f      	b.n	8004852 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004832:	f7ff fc3b 	bl	80040ac <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b05      	cmp	r3, #5
 800483e:	d908      	bls.n	8004852 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2203      	movs	r2, #3
 800484a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e078      	b.n	8004944 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e8      	bne.n	8004832 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4b38      	ldr	r3, [pc, #224]	; (800494c <HAL_DMA_Init+0x158>)
 800486c:	4013      	ands	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800487e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800488a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004896:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d107      	bne.n	80048bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	4313      	orrs	r3, r2
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f023 0307 	bic.w	r3, r3, #7
 80048d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d117      	bne.n	8004916 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00e      	beq.n	8004916 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f9e9 	bl	8004cd0 <DMA_CheckFifoParam>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2240      	movs	r2, #64	; 0x40
 8004908:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004912:	2301      	movs	r3, #1
 8004914:	e016      	b.n	8004944 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f9a0 	bl	8004c64 <DMA_CalcBaseAndBitshift>
 8004924:	4603      	mov	r3, r0
 8004926:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	223f      	movs	r2, #63	; 0x3f
 800492e:	409a      	lsls	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	f010803f 	.word	0xf010803f

08004950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800495c:	4b8e      	ldr	r3, [pc, #568]	; (8004b98 <HAL_DMA_IRQHandler+0x248>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a8e      	ldr	r2, [pc, #568]	; (8004b9c <HAL_DMA_IRQHandler+0x24c>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	0a9b      	lsrs	r3, r3, #10
 8004968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497a:	2208      	movs	r2, #8
 800497c:	409a      	lsls	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01a      	beq.n	80049bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d013      	beq.n	80049bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0204 	bic.w	r2, r2, #4
 80049a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a8:	2208      	movs	r2, #8
 80049aa:	409a      	lsls	r2, r3
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b4:	f043 0201 	orr.w	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c0:	2201      	movs	r2, #1
 80049c2:	409a      	lsls	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d012      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	2201      	movs	r2, #1
 80049e0:	409a      	lsls	r2, r3
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	f043 0202 	orr.w	r2, r3, #2
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f6:	2204      	movs	r2, #4
 80049f8:	409a      	lsls	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d012      	beq.n	8004a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a14:	2204      	movs	r2, #4
 8004a16:	409a      	lsls	r2, r3
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	f043 0204 	orr.w	r2, r3, #4
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2c:	2210      	movs	r2, #16
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d043      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d03c      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d018      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d108      	bne.n	8004a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d024      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
 8004a7e:	e01f      	b.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01b      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
 8004a90:	e016      	b.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d107      	bne.n	8004ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0208 	bic.w	r2, r2, #8
 8004aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 808f 	beq.w	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8087 	beq.w	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d136      	bne.n	8004b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0216 	bic.w	r2, r2, #22
 8004b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695a      	ldr	r2, [r3, #20]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d103      	bne.n	8004b2a <HAL_DMA_IRQHandler+0x1da>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0208 	bic.w	r2, r2, #8
 8004b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3e:	223f      	movs	r2, #63	; 0x3f
 8004b40:	409a      	lsls	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d07e      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
        }
        return;
 8004b66:	e079      	b.n	8004c5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01d      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10d      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d031      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	4798      	blx	r3
 8004b94:	e02c      	b.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
 8004b96:	bf00      	nop
 8004b98:	20000014 	.word	0x20000014
 8004b9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d023      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
 8004bb0:	e01e      	b.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10f      	bne.n	8004be0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0210 	bic.w	r2, r2, #16
 8004bce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d032      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d022      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2205      	movs	r2, #5
 8004c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d307      	bcc.n	8004c38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f2      	bne.n	8004c1c <HAL_DMA_IRQHandler+0x2cc>
 8004c36:	e000      	b.n	8004c3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
 8004c5a:	e000      	b.n	8004c5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c5c:	bf00      	nop
    }
  }
}
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	3b10      	subs	r3, #16
 8004c74:	4a14      	ldr	r2, [pc, #80]	; (8004cc8 <DMA_CalcBaseAndBitshift+0x64>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	091b      	lsrs	r3, r3, #4
 8004c7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c7e:	4a13      	ldr	r2, [pc, #76]	; (8004ccc <DMA_CalcBaseAndBitshift+0x68>)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d909      	bls.n	8004ca6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c9a:	f023 0303 	bic.w	r3, r3, #3
 8004c9e:	1d1a      	adds	r2, r3, #4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ca4:	e007      	b.n	8004cb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	aaaaaaab 	.word	0xaaaaaaab
 8004ccc:	0800b3e4 	.word	0x0800b3e4

08004cd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d11f      	bne.n	8004d2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d856      	bhi.n	8004d9e <DMA_CheckFifoParam+0xce>
 8004cf0:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <DMA_CheckFifoParam+0x28>)
 8004cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf6:	bf00      	nop
 8004cf8:	08004d09 	.word	0x08004d09
 8004cfc:	08004d1b 	.word	0x08004d1b
 8004d00:	08004d09 	.word	0x08004d09
 8004d04:	08004d9f 	.word	0x08004d9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d046      	beq.n	8004da2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d18:	e043      	b.n	8004da2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d22:	d140      	bne.n	8004da6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d28:	e03d      	b.n	8004da6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d32:	d121      	bne.n	8004d78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d837      	bhi.n	8004daa <DMA_CheckFifoParam+0xda>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <DMA_CheckFifoParam+0x70>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d51 	.word	0x08004d51
 8004d44:	08004d57 	.word	0x08004d57
 8004d48:	08004d51 	.word	0x08004d51
 8004d4c:	08004d69 	.word	0x08004d69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	73fb      	strb	r3, [r7, #15]
      break;
 8004d54:	e030      	b.n	8004db8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d025      	beq.n	8004dae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d66:	e022      	b.n	8004dae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d70:	d11f      	bne.n	8004db2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d76:	e01c      	b.n	8004db2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d903      	bls.n	8004d86 <DMA_CheckFifoParam+0xb6>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d003      	beq.n	8004d8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d84:	e018      	b.n	8004db8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	73fb      	strb	r3, [r7, #15]
      break;
 8004d8a:	e015      	b.n	8004db8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00e      	beq.n	8004db6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d9c:	e00b      	b.n	8004db6 <DMA_CheckFifoParam+0xe6>
      break;
 8004d9e:	bf00      	nop
 8004da0:	e00a      	b.n	8004db8 <DMA_CheckFifoParam+0xe8>
      break;
 8004da2:	bf00      	nop
 8004da4:	e008      	b.n	8004db8 <DMA_CheckFifoParam+0xe8>
      break;
 8004da6:	bf00      	nop
 8004da8:	e006      	b.n	8004db8 <DMA_CheckFifoParam+0xe8>
      break;
 8004daa:	bf00      	nop
 8004dac:	e004      	b.n	8004db8 <DMA_CheckFifoParam+0xe8>
      break;
 8004dae:	bf00      	nop
 8004db0:	e002      	b.n	8004db8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <DMA_CheckFifoParam+0xe8>
      break;
 8004db6:	bf00      	nop
    }
  } 
  
  return status; 
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop

08004dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b089      	sub	sp, #36	; 0x24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	e16b      	b.n	80050bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004de4:	2201      	movs	r2, #1
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4013      	ands	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	f040 815a 	bne.w	80050b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d005      	beq.n	8004e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d130      	bne.n	8004e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	2203      	movs	r2, #3
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e50:	2201      	movs	r2, #1
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	f003 0201 	and.w	r2, r3, #1
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d017      	beq.n	8004eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	2203      	movs	r2, #3
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d123      	bne.n	8004f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	08da      	lsrs	r2, r3, #3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3208      	adds	r2, #8
 8004ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	220f      	movs	r2, #15
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	08da      	lsrs	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3208      	adds	r2, #8
 8004f06:	69b9      	ldr	r1, [r7, #24]
 8004f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	2203      	movs	r2, #3
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4013      	ands	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 0203 	and.w	r2, r3, #3
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80b4 	beq.w	80050b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	4b60      	ldr	r3, [pc, #384]	; (80050d4 <HAL_GPIO_Init+0x30c>)
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	4a5f      	ldr	r2, [pc, #380]	; (80050d4 <HAL_GPIO_Init+0x30c>)
 8004f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f5e:	4b5d      	ldr	r3, [pc, #372]	; (80050d4 <HAL_GPIO_Init+0x30c>)
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f6a:	4a5b      	ldr	r2, [pc, #364]	; (80050d8 <HAL_GPIO_Init+0x310>)
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	089b      	lsrs	r3, r3, #2
 8004f70:	3302      	adds	r3, #2
 8004f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	220f      	movs	r2, #15
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a52      	ldr	r2, [pc, #328]	; (80050dc <HAL_GPIO_Init+0x314>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d02b      	beq.n	8004fee <HAL_GPIO_Init+0x226>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a51      	ldr	r2, [pc, #324]	; (80050e0 <HAL_GPIO_Init+0x318>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d025      	beq.n	8004fea <HAL_GPIO_Init+0x222>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a50      	ldr	r2, [pc, #320]	; (80050e4 <HAL_GPIO_Init+0x31c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01f      	beq.n	8004fe6 <HAL_GPIO_Init+0x21e>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a4f      	ldr	r2, [pc, #316]	; (80050e8 <HAL_GPIO_Init+0x320>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d019      	beq.n	8004fe2 <HAL_GPIO_Init+0x21a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a4e      	ldr	r2, [pc, #312]	; (80050ec <HAL_GPIO_Init+0x324>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_GPIO_Init+0x216>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a4d      	ldr	r2, [pc, #308]	; (80050f0 <HAL_GPIO_Init+0x328>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00d      	beq.n	8004fda <HAL_GPIO_Init+0x212>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a4c      	ldr	r2, [pc, #304]	; (80050f4 <HAL_GPIO_Init+0x32c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <HAL_GPIO_Init+0x20e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a4b      	ldr	r2, [pc, #300]	; (80050f8 <HAL_GPIO_Init+0x330>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_GPIO_Init+0x20a>
 8004fce:	2307      	movs	r3, #7
 8004fd0:	e00e      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	e00c      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fd6:	2306      	movs	r3, #6
 8004fd8:	e00a      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fda:	2305      	movs	r3, #5
 8004fdc:	e008      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fde:	2304      	movs	r3, #4
 8004fe0:	e006      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e004      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e002      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	f002 0203 	and.w	r2, r2, #3
 8004ff6:	0092      	lsls	r2, r2, #2
 8004ff8:	4093      	lsls	r3, r2
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005000:	4935      	ldr	r1, [pc, #212]	; (80050d8 <HAL_GPIO_Init+0x310>)
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	089b      	lsrs	r3, r3, #2
 8005006:	3302      	adds	r3, #2
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800500e:	4b3b      	ldr	r3, [pc, #236]	; (80050fc <HAL_GPIO_Init+0x334>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	43db      	mvns	r3, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4013      	ands	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005032:	4a32      	ldr	r2, [pc, #200]	; (80050fc <HAL_GPIO_Init+0x334>)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005038:	4b30      	ldr	r3, [pc, #192]	; (80050fc <HAL_GPIO_Init+0x334>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800505c:	4a27      	ldr	r2, [pc, #156]	; (80050fc <HAL_GPIO_Init+0x334>)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005062:	4b26      	ldr	r3, [pc, #152]	; (80050fc <HAL_GPIO_Init+0x334>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	43db      	mvns	r3, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4013      	ands	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005086:	4a1d      	ldr	r2, [pc, #116]	; (80050fc <HAL_GPIO_Init+0x334>)
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800508c:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <HAL_GPIO_Init+0x334>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	43db      	mvns	r3, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4013      	ands	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050b0:	4a12      	ldr	r2, [pc, #72]	; (80050fc <HAL_GPIO_Init+0x334>)
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3301      	adds	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b0f      	cmp	r3, #15
 80050c0:	f67f ae90 	bls.w	8004de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	3724      	adds	r7, #36	; 0x24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40013800 	.word	0x40013800
 80050dc:	40020000 	.word	0x40020000
 80050e0:	40020400 	.word	0x40020400
 80050e4:	40020800 	.word	0x40020800
 80050e8:	40020c00 	.word	0x40020c00
 80050ec:	40021000 	.word	0x40021000
 80050f0:	40021400 	.word	0x40021400
 80050f4:	40021800 	.word	0x40021800
 80050f8:	40021c00 	.word	0x40021c00
 80050fc:	40013c00 	.word	0x40013c00

08005100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	887b      	ldrh	r3, [r7, #2]
 8005112:	4013      	ands	r3, r2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005118:	2301      	movs	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
 800511c:	e001      	b.n	8005122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800511e:	2300      	movs	r3, #0
 8005120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005122:	7bfb      	ldrb	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	807b      	strh	r3, [r7, #2]
 800513c:	4613      	mov	r3, r2
 800513e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005140:	787b      	ldrb	r3, [r7, #1]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005146:	887a      	ldrh	r2, [r7, #2]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800514c:	e003      	b.n	8005156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800514e:	887b      	ldrh	r3, [r7, #2]
 8005150:	041a      	lsls	r2, r3, #16
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	619a      	str	r2, [r3, #24]
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e12b      	b.n	80053ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fc fdcc 	bl	8001d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2224      	movs	r2, #36	; 0x24
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0201 	bic.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051c8:	f001 fbfc 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 80051cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4a81      	ldr	r2, [pc, #516]	; (80053d8 <HAL_I2C_Init+0x274>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d807      	bhi.n	80051e8 <HAL_I2C_Init+0x84>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a80      	ldr	r2, [pc, #512]	; (80053dc <HAL_I2C_Init+0x278>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	bf94      	ite	ls
 80051e0:	2301      	movls	r3, #1
 80051e2:	2300      	movhi	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	e006      	b.n	80051f6 <HAL_I2C_Init+0x92>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4a7d      	ldr	r2, [pc, #500]	; (80053e0 <HAL_I2C_Init+0x27c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	bf94      	ite	ls
 80051f0:	2301      	movls	r3, #1
 80051f2:	2300      	movhi	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e0e7      	b.n	80053ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a78      	ldr	r2, [pc, #480]	; (80053e4 <HAL_I2C_Init+0x280>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	0c9b      	lsrs	r3, r3, #18
 8005208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	4a6a      	ldr	r2, [pc, #424]	; (80053d8 <HAL_I2C_Init+0x274>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d802      	bhi.n	8005238 <HAL_I2C_Init+0xd4>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	3301      	adds	r3, #1
 8005236:	e009      	b.n	800524c <HAL_I2C_Init+0xe8>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800523e:	fb02 f303 	mul.w	r3, r2, r3
 8005242:	4a69      	ldr	r2, [pc, #420]	; (80053e8 <HAL_I2C_Init+0x284>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	099b      	lsrs	r3, r3, #6
 800524a:	3301      	adds	r3, #1
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	430b      	orrs	r3, r1
 8005252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800525e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	495c      	ldr	r1, [pc, #368]	; (80053d8 <HAL_I2C_Init+0x274>)
 8005268:	428b      	cmp	r3, r1
 800526a:	d819      	bhi.n	80052a0 <HAL_I2C_Init+0x13c>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1e59      	subs	r1, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	fbb1 f3f3 	udiv	r3, r1, r3
 800527a:	1c59      	adds	r1, r3, #1
 800527c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005280:	400b      	ands	r3, r1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_I2C_Init+0x138>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1e59      	subs	r1, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	fbb1 f3f3 	udiv	r3, r1, r3
 8005294:	3301      	adds	r3, #1
 8005296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800529a:	e051      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 800529c:	2304      	movs	r3, #4
 800529e:	e04f      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d111      	bne.n	80052cc <HAL_I2C_Init+0x168>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	1e58      	subs	r0, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6859      	ldr	r1, [r3, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	440b      	add	r3, r1
 80052b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ba:	3301      	adds	r3, #1
 80052bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e012      	b.n	80052f2 <HAL_I2C_Init+0x18e>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1e58      	subs	r0, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6859      	ldr	r1, [r3, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	0099      	lsls	r1, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e2:	3301      	adds	r3, #1
 80052e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_I2C_Init+0x196>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e022      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10e      	bne.n	8005320 <HAL_I2C_Init+0x1bc>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1e58      	subs	r0, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	440b      	add	r3, r1
 8005310:	fbb0 f3f3 	udiv	r3, r0, r3
 8005314:	3301      	adds	r3, #1
 8005316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800531a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531e:	e00f      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1e58      	subs	r0, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6859      	ldr	r1, [r3, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	0099      	lsls	r1, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	fbb0 f3f3 	udiv	r3, r0, r3
 8005336:	3301      	adds	r3, #1
 8005338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	6809      	ldr	r1, [r1, #0]
 8005344:	4313      	orrs	r3, r2
 8005346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69da      	ldr	r2, [r3, #28]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800536e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6911      	ldr	r1, [r2, #16]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68d2      	ldr	r2, [r2, #12]
 800537a:	4311      	orrs	r1, r2
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	430b      	orrs	r3, r1
 8005382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695a      	ldr	r2, [r3, #20]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	000186a0 	.word	0x000186a0
 80053dc:	001e847f 	.word	0x001e847f
 80053e0:	003d08ff 	.word	0x003d08ff
 80053e4:	431bde83 	.word	0x431bde83
 80053e8:	10624dd3 	.word	0x10624dd3

080053ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	4608      	mov	r0, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	4603      	mov	r3, r0
 80053fc:	817b      	strh	r3, [r7, #10]
 80053fe:	460b      	mov	r3, r1
 8005400:	813b      	strh	r3, [r7, #8]
 8005402:	4613      	mov	r3, r2
 8005404:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005406:	f7fe fe51 	bl	80040ac <HAL_GetTick>
 800540a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b20      	cmp	r3, #32
 8005416:	f040 80d9 	bne.w	80055cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	2319      	movs	r3, #25
 8005420:	2201      	movs	r2, #1
 8005422:	496d      	ldr	r1, [pc, #436]	; (80055d8 <HAL_I2C_Mem_Write+0x1ec>)
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 fc7f 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
 8005432:	e0cc      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_I2C_Mem_Write+0x56>
 800543e:	2302      	movs	r3, #2
 8005440:	e0c5      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b01      	cmp	r3, #1
 8005456:	d007      	beq.n	8005468 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005476:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2221      	movs	r2, #33	; 0x21
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2240      	movs	r2, #64	; 0x40
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a3a      	ldr	r2, [r7, #32]
 8005492:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005498:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4a4d      	ldr	r2, [pc, #308]	; (80055dc <HAL_I2C_Mem_Write+0x1f0>)
 80054a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054aa:	88f8      	ldrh	r0, [r7, #6]
 80054ac:	893a      	ldrh	r2, [r7, #8]
 80054ae:	8979      	ldrh	r1, [r7, #10]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	4603      	mov	r3, r0
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fab6 	bl	8005a2c <I2C_RequestMemoryWrite>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d052      	beq.n	800556c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e081      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fd00 	bl	8005ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00d      	beq.n	80054f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d107      	bne.n	80054f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e06b      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	781a      	ldrb	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b04      	cmp	r3, #4
 8005532:	d11b      	bne.n	800556c <HAL_I2C_Mem_Write+0x180>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d017      	beq.n	800556c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	781a      	ldrb	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1aa      	bne.n	80054ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 fcec 	bl	8005f56 <I2C_WaitOnBTFFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00d      	beq.n	80055a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	2b04      	cmp	r3, #4
 800558a:	d107      	bne.n	800559c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e016      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e000      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	00100002 	.word	0x00100002
 80055dc:	ffff0000 	.word	0xffff0000

080055e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08c      	sub	sp, #48	; 0x30
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	4608      	mov	r0, r1
 80055ea:	4611      	mov	r1, r2
 80055ec:	461a      	mov	r2, r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	817b      	strh	r3, [r7, #10]
 80055f2:	460b      	mov	r3, r1
 80055f4:	813b      	strh	r3, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055fa:	f7fe fd57 	bl	80040ac <HAL_GetTick>
 80055fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b20      	cmp	r3, #32
 800560a:	f040 8208 	bne.w	8005a1e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	2319      	movs	r3, #25
 8005614:	2201      	movs	r2, #1
 8005616:	497b      	ldr	r1, [pc, #492]	; (8005804 <HAL_I2C_Mem_Read+0x224>)
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 fb85 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005624:	2302      	movs	r3, #2
 8005626:	e1fb      	b.n	8005a20 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_I2C_Mem_Read+0x56>
 8005632:	2302      	movs	r3, #2
 8005634:	e1f4      	b.n	8005a20 <HAL_I2C_Mem_Read+0x440>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b01      	cmp	r3, #1
 800564a:	d007      	beq.n	800565c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0201 	orr.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800566a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2222      	movs	r2, #34	; 0x22
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2240      	movs	r2, #64	; 0x40
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800568c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4a5b      	ldr	r2, [pc, #364]	; (8005808 <HAL_I2C_Mem_Read+0x228>)
 800569c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800569e:	88f8      	ldrh	r0, [r7, #6]
 80056a0:	893a      	ldrh	r2, [r7, #8]
 80056a2:	8979      	ldrh	r1, [r7, #10]
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	4603      	mov	r3, r0
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 fa52 	bl	8005b58 <I2C_RequestMemoryRead>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e1b0      	b.n	8005a20 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d113      	bne.n	80056ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c6:	2300      	movs	r3, #0
 80056c8:	623b      	str	r3, [r7, #32]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	623b      	str	r3, [r7, #32]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	623b      	str	r3, [r7, #32]
 80056da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	e184      	b.n	80059f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d11b      	bne.n	800572e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	e164      	b.n	80059f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005732:	2b02      	cmp	r3, #2
 8005734:	d11b      	bne.n	800576e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005744:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005756:	2300      	movs	r3, #0
 8005758:	61bb      	str	r3, [r7, #24]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	e144      	b.n	80059f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005784:	e138      	b.n	80059f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578a:	2b03      	cmp	r3, #3
 800578c:	f200 80f1 	bhi.w	8005972 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005794:	2b01      	cmp	r3, #1
 8005796:	d123      	bne.n	80057e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fc1b 	bl	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e139      	b.n	8005a20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057de:	e10b      	b.n	80059f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d14e      	bne.n	8005886 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ee:	2200      	movs	r2, #0
 80057f0:	4906      	ldr	r1, [pc, #24]	; (800580c <HAL_I2C_Mem_Read+0x22c>)
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fa98 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e10e      	b.n	8005a20 <HAL_I2C_Mem_Read+0x440>
 8005802:	bf00      	nop
 8005804:	00100002 	.word	0x00100002
 8005808:	ffff0000 	.word	0xffff0000
 800580c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800581e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	b29a      	uxth	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005884:	e0b8      	b.n	80059f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	2200      	movs	r2, #0
 800588e:	4966      	ldr	r1, [pc, #408]	; (8005a28 <HAL_I2C_Mem_Read+0x448>)
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 fa49 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0bf      	b.n	8005a20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691a      	ldr	r2, [r3, #16]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	2200      	movs	r2, #0
 80058ea:	494f      	ldr	r1, [pc, #316]	; (8005a28 <HAL_I2C_Mem_Read+0x448>)
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fa1b 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e091      	b.n	8005a20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005970:	e042      	b.n	80059f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005974:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fb2e 	bl	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e04c      	b.n	8005a20 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d118      	bne.n	80059f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	3b01      	subs	r3, #1
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f47f aec2 	bne.w	8005786 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e000      	b.n	8005a20 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005a1e:	2302      	movs	r3, #2
  }
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3728      	adds	r7, #40	; 0x28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	00010004 	.word	0x00010004

08005a2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	817b      	strh	r3, [r7, #10]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	813b      	strh	r3, [r7, #8]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f960 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00d      	beq.n	8005a8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7c:	d103      	bne.n	8005a86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e05f      	b.n	8005b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a8a:	897b      	ldrh	r3, [r7, #10]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	6a3a      	ldr	r2, [r7, #32]
 8005a9e:	492d      	ldr	r1, [pc, #180]	; (8005b54 <I2C_RequestMemoryWrite+0x128>)
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f998 	bl	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e04c      	b.n	8005b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac8:	6a39      	ldr	r1, [r7, #32]
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fa02 	bl	8005ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00d      	beq.n	8005af2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d107      	bne.n	8005aee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e02b      	b.n	8005b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005af2:	88fb      	ldrh	r3, [r7, #6]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d105      	bne.n	8005b04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005af8:	893b      	ldrh	r3, [r7, #8]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	611a      	str	r2, [r3, #16]
 8005b02:	e021      	b.n	8005b48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b04:	893b      	ldrh	r3, [r7, #8]
 8005b06:	0a1b      	lsrs	r3, r3, #8
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b14:	6a39      	ldr	r1, [r7, #32]
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 f9dc 	bl	8005ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00d      	beq.n	8005b3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d107      	bne.n	8005b3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e005      	b.n	8005b4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b3e:	893b      	ldrh	r3, [r7, #8]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	00010002 	.word	0x00010002

08005b58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	4608      	mov	r0, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	461a      	mov	r2, r3
 8005b66:	4603      	mov	r3, r0
 8005b68:	817b      	strh	r3, [r7, #10]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	813b      	strh	r3, [r7, #8]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 f8c2 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00d      	beq.n	8005bc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb8:	d103      	bne.n	8005bc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e0aa      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bc6:	897b      	ldrh	r3, [r7, #10]
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	6a3a      	ldr	r2, [r7, #32]
 8005bda:	4952      	ldr	r1, [pc, #328]	; (8005d24 <I2C_RequestMemoryRead+0x1cc>)
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f8fa 	bl	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e097      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c04:	6a39      	ldr	r1, [r7, #32]
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 f964 	bl	8005ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00d      	beq.n	8005c2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d107      	bne.n	8005c2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e076      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d105      	bne.n	8005c40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c34:	893b      	ldrh	r3, [r7, #8]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	611a      	str	r2, [r3, #16]
 8005c3e:	e021      	b.n	8005c84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c40:	893b      	ldrh	r3, [r7, #8]
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c50:	6a39      	ldr	r1, [r7, #32]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f93e 	bl	8005ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00d      	beq.n	8005c7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d107      	bne.n	8005c76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e050      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c7a:	893b      	ldrh	r3, [r7, #8]
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c86:	6a39      	ldr	r1, [r7, #32]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f923 	bl	8005ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00d      	beq.n	8005cb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d107      	bne.n	8005cac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005caa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e035      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f82b 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00d      	beq.n	8005cf4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce6:	d103      	bne.n	8005cf0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e013      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cf4:	897b      	ldrh	r3, [r7, #10]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	f043 0301 	orr.w	r3, r3, #1
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	6a3a      	ldr	r2, [r7, #32]
 8005d08:	4906      	ldr	r1, [pc, #24]	; (8005d24 <I2C_RequestMemoryRead+0x1cc>)
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f863 	bl	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	00010002 	.word	0x00010002

08005d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	4613      	mov	r3, r2
 8005d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d38:	e025      	b.n	8005d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d40:	d021      	beq.n	8005d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d42:	f7fe f9b3 	bl	80040ac <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d302      	bcc.n	8005d58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d116      	bne.n	8005d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	f043 0220 	orr.w	r2, r3, #32
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e023      	b.n	8005dce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	0c1b      	lsrs	r3, r3, #16
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d10d      	bne.n	8005dac <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	43da      	mvns	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bf0c      	ite	eq
 8005da2:	2301      	moveq	r3, #1
 8005da4:	2300      	movne	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	e00c      	b.n	8005dc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	43da      	mvns	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4013      	ands	r3, r2
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bf0c      	ite	eq
 8005dbe:	2301      	moveq	r3, #1
 8005dc0:	2300      	movne	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d0b6      	beq.n	8005d3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	607a      	str	r2, [r7, #4]
 8005de2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005de4:	e051      	b.n	8005e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df4:	d123      	bne.n	8005e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f043 0204 	orr.w	r2, r3, #4
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e046      	b.n	8005ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e44:	d021      	beq.n	8005e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e46:	f7fe f931 	bl	80040ac <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d302      	bcc.n	8005e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d116      	bne.n	8005e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	f043 0220 	orr.w	r2, r3, #32
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e020      	b.n	8005ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	0c1b      	lsrs	r3, r3, #16
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d10c      	bne.n	8005eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	43da      	mvns	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	bf14      	ite	ne
 8005ea6:	2301      	movne	r3, #1
 8005ea8:	2300      	moveq	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	e00b      	b.n	8005ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	43da      	mvns	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bf14      	ite	ne
 8005ec0:	2301      	movne	r3, #1
 8005ec2:	2300      	moveq	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d18d      	bne.n	8005de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ee0:	e02d      	b.n	8005f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f8ce 	bl	8006084 <I2C_IsAcknowledgeFailed>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e02d      	b.n	8005f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef8:	d021      	beq.n	8005f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efa:	f7fe f8d7 	bl	80040ac <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d302      	bcc.n	8005f10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d116      	bne.n	8005f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f043 0220 	orr.w	r2, r3, #32
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e007      	b.n	8005f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f48:	2b80      	cmp	r3, #128	; 0x80
 8005f4a:	d1ca      	bne.n	8005ee2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f62:	e02d      	b.n	8005fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f88d 	bl	8006084 <I2C_IsAcknowledgeFailed>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e02d      	b.n	8005fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d021      	beq.n	8005fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7c:	f7fe f896 	bl	80040ac <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d116      	bne.n	8005fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	f043 0220 	orr.w	r2, r3, #32
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e007      	b.n	8005fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d1ca      	bne.n	8005f64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fe4:	e042      	b.n	800606c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d119      	bne.n	8006028 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0210 	mvn.w	r2, #16
 8005ffc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e029      	b.n	800607c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006028:	f7fe f840 	bl	80040ac <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	d302      	bcc.n	800603e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d116      	bne.n	800606c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	f043 0220 	orr.w	r2, r3, #32
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e007      	b.n	800607c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d1b5      	bne.n	8005fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800609a:	d11b      	bne.n	80060d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	f043 0204 	orr.w	r2, r3, #4
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e267      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d075      	beq.n	80061ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006102:	4b88      	ldr	r3, [pc, #544]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 030c 	and.w	r3, r3, #12
 800610a:	2b04      	cmp	r3, #4
 800610c:	d00c      	beq.n	8006128 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800610e:	4b85      	ldr	r3, [pc, #532]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006116:	2b08      	cmp	r3, #8
 8006118:	d112      	bne.n	8006140 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800611a:	4b82      	ldr	r3, [pc, #520]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006126:	d10b      	bne.n	8006140 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006128:	4b7e      	ldr	r3, [pc, #504]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d05b      	beq.n	80061ec <HAL_RCC_OscConfig+0x108>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d157      	bne.n	80061ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e242      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006148:	d106      	bne.n	8006158 <HAL_RCC_OscConfig+0x74>
 800614a:	4b76      	ldr	r3, [pc, #472]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a75      	ldr	r2, [pc, #468]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e01d      	b.n	8006194 <HAL_RCC_OscConfig+0xb0>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006160:	d10c      	bne.n	800617c <HAL_RCC_OscConfig+0x98>
 8006162:	4b70      	ldr	r3, [pc, #448]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a6f      	ldr	r2, [pc, #444]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	4b6d      	ldr	r3, [pc, #436]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a6c      	ldr	r2, [pc, #432]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	e00b      	b.n	8006194 <HAL_RCC_OscConfig+0xb0>
 800617c:	4b69      	ldr	r3, [pc, #420]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a68      	ldr	r2, [pc, #416]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	4b66      	ldr	r3, [pc, #408]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a65      	ldr	r2, [pc, #404]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 800618e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d013      	beq.n	80061c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619c:	f7fd ff86 	bl	80040ac <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061a4:	f7fd ff82 	bl	80040ac <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b64      	cmp	r3, #100	; 0x64
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e207      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061b6:	4b5b      	ldr	r3, [pc, #364]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0f0      	beq.n	80061a4 <HAL_RCC_OscConfig+0xc0>
 80061c2:	e014      	b.n	80061ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c4:	f7fd ff72 	bl	80040ac <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061cc:	f7fd ff6e 	bl	80040ac <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b64      	cmp	r3, #100	; 0x64
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e1f3      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061de:	4b51      	ldr	r3, [pc, #324]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f0      	bne.n	80061cc <HAL_RCC_OscConfig+0xe8>
 80061ea:	e000      	b.n	80061ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d063      	beq.n	80062c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061fa:	4b4a      	ldr	r3, [pc, #296]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006206:	4b47      	ldr	r3, [pc, #284]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800620e:	2b08      	cmp	r3, #8
 8006210:	d11c      	bne.n	800624c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006212:	4b44      	ldr	r3, [pc, #272]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d116      	bne.n	800624c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800621e:	4b41      	ldr	r3, [pc, #260]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <HAL_RCC_OscConfig+0x152>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d001      	beq.n	8006236 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e1c7      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006236:	4b3b      	ldr	r3, [pc, #236]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4937      	ldr	r1, [pc, #220]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006246:	4313      	orrs	r3, r2
 8006248:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800624a:	e03a      	b.n	80062c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d020      	beq.n	8006296 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006254:	4b34      	ldr	r3, [pc, #208]	; (8006328 <HAL_RCC_OscConfig+0x244>)
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625a:	f7fd ff27 	bl	80040ac <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006262:	f7fd ff23 	bl	80040ac <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e1a8      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006274:	4b2b      	ldr	r3, [pc, #172]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f0      	beq.n	8006262 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006280:	4b28      	ldr	r3, [pc, #160]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	4925      	ldr	r1, [pc, #148]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006290:	4313      	orrs	r3, r2
 8006292:	600b      	str	r3, [r1, #0]
 8006294:	e015      	b.n	80062c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006296:	4b24      	ldr	r3, [pc, #144]	; (8006328 <HAL_RCC_OscConfig+0x244>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629c:	f7fd ff06 	bl	80040ac <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062a4:	f7fd ff02 	bl	80040ac <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e187      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062b6:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f0      	bne.n	80062a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d036      	beq.n	800633c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d016      	beq.n	8006304 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062d6:	4b15      	ldr	r3, [pc, #84]	; (800632c <HAL_RCC_OscConfig+0x248>)
 80062d8:	2201      	movs	r2, #1
 80062da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062dc:	f7fd fee6 	bl	80040ac <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062e4:	f7fd fee2 	bl	80040ac <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e167      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 80062f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0f0      	beq.n	80062e4 <HAL_RCC_OscConfig+0x200>
 8006302:	e01b      	b.n	800633c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006304:	4b09      	ldr	r3, [pc, #36]	; (800632c <HAL_RCC_OscConfig+0x248>)
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800630a:	f7fd fecf 	bl	80040ac <HAL_GetTick>
 800630e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006310:	e00e      	b.n	8006330 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006312:	f7fd fecb 	bl	80040ac <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d907      	bls.n	8006330 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e150      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
 8006324:	40023800 	.word	0x40023800
 8006328:	42470000 	.word	0x42470000
 800632c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006330:	4b88      	ldr	r3, [pc, #544]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1ea      	bne.n	8006312 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8097 	beq.w	8006478 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800634a:	2300      	movs	r3, #0
 800634c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800634e:	4b81      	ldr	r3, [pc, #516]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10f      	bne.n	800637a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800635a:	2300      	movs	r3, #0
 800635c:	60bb      	str	r3, [r7, #8]
 800635e:	4b7d      	ldr	r3, [pc, #500]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	4a7c      	ldr	r2, [pc, #496]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006368:	6413      	str	r3, [r2, #64]	; 0x40
 800636a:	4b7a      	ldr	r3, [pc, #488]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006372:	60bb      	str	r3, [r7, #8]
 8006374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006376:	2301      	movs	r3, #1
 8006378:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800637a:	4b77      	ldr	r3, [pc, #476]	; (8006558 <HAL_RCC_OscConfig+0x474>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006382:	2b00      	cmp	r3, #0
 8006384:	d118      	bne.n	80063b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006386:	4b74      	ldr	r3, [pc, #464]	; (8006558 <HAL_RCC_OscConfig+0x474>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a73      	ldr	r2, [pc, #460]	; (8006558 <HAL_RCC_OscConfig+0x474>)
 800638c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006392:	f7fd fe8b 	bl	80040ac <HAL_GetTick>
 8006396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006398:	e008      	b.n	80063ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800639a:	f7fd fe87 	bl	80040ac <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e10c      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ac:	4b6a      	ldr	r3, [pc, #424]	; (8006558 <HAL_RCC_OscConfig+0x474>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0f0      	beq.n	800639a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d106      	bne.n	80063ce <HAL_RCC_OscConfig+0x2ea>
 80063c0:	4b64      	ldr	r3, [pc, #400]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c4:	4a63      	ldr	r2, [pc, #396]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063c6:	f043 0301 	orr.w	r3, r3, #1
 80063ca:	6713      	str	r3, [r2, #112]	; 0x70
 80063cc:	e01c      	b.n	8006408 <HAL_RCC_OscConfig+0x324>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	d10c      	bne.n	80063f0 <HAL_RCC_OscConfig+0x30c>
 80063d6:	4b5f      	ldr	r3, [pc, #380]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063da:	4a5e      	ldr	r2, [pc, #376]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063dc:	f043 0304 	orr.w	r3, r3, #4
 80063e0:	6713      	str	r3, [r2, #112]	; 0x70
 80063e2:	4b5c      	ldr	r3, [pc, #368]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e6:	4a5b      	ldr	r2, [pc, #364]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063e8:	f043 0301 	orr.w	r3, r3, #1
 80063ec:	6713      	str	r3, [r2, #112]	; 0x70
 80063ee:	e00b      	b.n	8006408 <HAL_RCC_OscConfig+0x324>
 80063f0:	4b58      	ldr	r3, [pc, #352]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f4:	4a57      	ldr	r2, [pc, #348]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	6713      	str	r3, [r2, #112]	; 0x70
 80063fc:	4b55      	ldr	r3, [pc, #340]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006400:	4a54      	ldr	r2, [pc, #336]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006402:	f023 0304 	bic.w	r3, r3, #4
 8006406:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d015      	beq.n	800643c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006410:	f7fd fe4c 	bl	80040ac <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006416:	e00a      	b.n	800642e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006418:	f7fd fe48 	bl	80040ac <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f241 3288 	movw	r2, #5000	; 0x1388
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e0cb      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800642e:	4b49      	ldr	r3, [pc, #292]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0ee      	beq.n	8006418 <HAL_RCC_OscConfig+0x334>
 800643a:	e014      	b.n	8006466 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800643c:	f7fd fe36 	bl	80040ac <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006442:	e00a      	b.n	800645a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006444:	f7fd fe32 	bl	80040ac <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006452:	4293      	cmp	r3, r2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e0b5      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800645a:	4b3e      	ldr	r3, [pc, #248]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 800645c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1ee      	bne.n	8006444 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006466:	7dfb      	ldrb	r3, [r7, #23]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d105      	bne.n	8006478 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800646c:	4b39      	ldr	r3, [pc, #228]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	4a38      	ldr	r2, [pc, #224]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006476:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 80a1 	beq.w	80065c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006482:	4b34      	ldr	r3, [pc, #208]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 030c 	and.w	r3, r3, #12
 800648a:	2b08      	cmp	r3, #8
 800648c:	d05c      	beq.n	8006548 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d141      	bne.n	800651a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006496:	4b31      	ldr	r3, [pc, #196]	; (800655c <HAL_RCC_OscConfig+0x478>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800649c:	f7fd fe06 	bl	80040ac <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a4:	f7fd fe02 	bl	80040ac <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e087      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064b6:	4b27      	ldr	r3, [pc, #156]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f0      	bne.n	80064a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69da      	ldr	r2, [r3, #28]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	019b      	lsls	r3, r3, #6
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	3b01      	subs	r3, #1
 80064dc:	041b      	lsls	r3, r3, #16
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	061b      	lsls	r3, r3, #24
 80064e6:	491b      	ldr	r1, [pc, #108]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064ec:	4b1b      	ldr	r3, [pc, #108]	; (800655c <HAL_RCC_OscConfig+0x478>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f2:	f7fd fddb 	bl	80040ac <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064fa:	f7fd fdd7 	bl	80040ac <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e05c      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800650c:	4b11      	ldr	r3, [pc, #68]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f0      	beq.n	80064fa <HAL_RCC_OscConfig+0x416>
 8006518:	e054      	b.n	80065c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651a:	4b10      	ldr	r3, [pc, #64]	; (800655c <HAL_RCC_OscConfig+0x478>)
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006520:	f7fd fdc4 	bl	80040ac <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006528:	f7fd fdc0 	bl	80040ac <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e045      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800653a:	4b06      	ldr	r3, [pc, #24]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x444>
 8006546:	e03d      	b.n	80065c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d107      	bne.n	8006560 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e038      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
 8006554:	40023800 	.word	0x40023800
 8006558:	40007000 	.word	0x40007000
 800655c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006560:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <HAL_RCC_OscConfig+0x4ec>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d028      	beq.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006578:	429a      	cmp	r2, r3
 800657a:	d121      	bne.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006586:	429a      	cmp	r2, r3
 8006588:	d11a      	bne.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006590:	4013      	ands	r3, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006596:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006598:	4293      	cmp	r3, r2
 800659a:	d111      	bne.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	3b01      	subs	r3, #1
 80065aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d107      	bne.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d001      	beq.n	80065c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e000      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40023800 	.word	0x40023800

080065d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e0cc      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065e8:	4b68      	ldr	r3, [pc, #416]	; (800678c <HAL_RCC_ClockConfig+0x1b8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d90c      	bls.n	8006610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f6:	4b65      	ldr	r3, [pc, #404]	; (800678c <HAL_RCC_ClockConfig+0x1b8>)
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fe:	4b63      	ldr	r3, [pc, #396]	; (800678c <HAL_RCC_ClockConfig+0x1b8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d001      	beq.n	8006610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e0b8      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d020      	beq.n	800665e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006628:	4b59      	ldr	r3, [pc, #356]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	4a58      	ldr	r2, [pc, #352]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006632:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006640:	4b53      	ldr	r3, [pc, #332]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	4a52      	ldr	r2, [pc, #328]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800664a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800664c:	4b50      	ldr	r3, [pc, #320]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	494d      	ldr	r1, [pc, #308]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800665a:	4313      	orrs	r3, r2
 800665c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b00      	cmp	r3, #0
 8006668:	d044      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d107      	bne.n	8006682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	4b47      	ldr	r3, [pc, #284]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d119      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e07f      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b02      	cmp	r3, #2
 8006688:	d003      	beq.n	8006692 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800668e:	2b03      	cmp	r3, #3
 8006690:	d107      	bne.n	80066a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006692:	4b3f      	ldr	r3, [pc, #252]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e06f      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066a2:	4b3b      	ldr	r3, [pc, #236]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e067      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066b2:	4b37      	ldr	r3, [pc, #220]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f023 0203 	bic.w	r2, r3, #3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4934      	ldr	r1, [pc, #208]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066c4:	f7fd fcf2 	bl	80040ac <HAL_GetTick>
 80066c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ca:	e00a      	b.n	80066e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066cc:	f7fd fcee 	bl	80040ac <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066da:	4293      	cmp	r3, r2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e04f      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066e2:	4b2b      	ldr	r3, [pc, #172]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 020c 	and.w	r2, r3, #12
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d1eb      	bne.n	80066cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066f4:	4b25      	ldr	r3, [pc, #148]	; (800678c <HAL_RCC_ClockConfig+0x1b8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d20c      	bcs.n	800671c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006702:	4b22      	ldr	r3, [pc, #136]	; (800678c <HAL_RCC_ClockConfig+0x1b8>)
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b20      	ldr	r3, [pc, #128]	; (800678c <HAL_RCC_ClockConfig+0x1b8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d001      	beq.n	800671c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e032      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006728:	4b19      	ldr	r3, [pc, #100]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	4916      	ldr	r1, [pc, #88]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	4313      	orrs	r3, r2
 8006738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006746:	4b12      	ldr	r3, [pc, #72]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	490e      	ldr	r1, [pc, #56]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006756:	4313      	orrs	r3, r2
 8006758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800675a:	f000 f821 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 800675e:	4602      	mov	r2, r0
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	091b      	lsrs	r3, r3, #4
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	490a      	ldr	r1, [pc, #40]	; (8006794 <HAL_RCC_ClockConfig+0x1c0>)
 800676c:	5ccb      	ldrb	r3, [r1, r3]
 800676e:	fa22 f303 	lsr.w	r3, r2, r3
 8006772:	4a09      	ldr	r2, [pc, #36]	; (8006798 <HAL_RCC_ClockConfig+0x1c4>)
 8006774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006776:	4b09      	ldr	r3, [pc, #36]	; (800679c <HAL_RCC_ClockConfig+0x1c8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f7fd fc52 	bl	8004024 <HAL_InitTick>

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	40023c00 	.word	0x40023c00
 8006790:	40023800 	.word	0x40023800
 8006794:	0800b3cc 	.word	0x0800b3cc
 8006798:	20000014 	.word	0x20000014
 800679c:	20000050 	.word	0x20000050

080067a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a4:	b094      	sub	sp, #80	; 0x50
 80067a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	647b      	str	r3, [r7, #68]	; 0x44
 80067ac:	2300      	movs	r3, #0
 80067ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b0:	2300      	movs	r3, #0
 80067b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067b8:	4b79      	ldr	r3, [pc, #484]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 030c 	and.w	r3, r3, #12
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d00d      	beq.n	80067e0 <HAL_RCC_GetSysClockFreq+0x40>
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	f200 80e1 	bhi.w	800698c <HAL_RCC_GetSysClockFreq+0x1ec>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <HAL_RCC_GetSysClockFreq+0x34>
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d003      	beq.n	80067da <HAL_RCC_GetSysClockFreq+0x3a>
 80067d2:	e0db      	b.n	800698c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067d4:	4b73      	ldr	r3, [pc, #460]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80067d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80067d8:	e0db      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067da:	4b73      	ldr	r3, [pc, #460]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80067dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067de:	e0d8      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067e0:	4b6f      	ldr	r3, [pc, #444]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067ea:	4b6d      	ldr	r3, [pc, #436]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d063      	beq.n	80068be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067f6:	4b6a      	ldr	r3, [pc, #424]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	099b      	lsrs	r3, r3, #6
 80067fc:	2200      	movs	r2, #0
 80067fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006800:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006808:	633b      	str	r3, [r7, #48]	; 0x30
 800680a:	2300      	movs	r3, #0
 800680c:	637b      	str	r3, [r7, #52]	; 0x34
 800680e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006812:	4622      	mov	r2, r4
 8006814:	462b      	mov	r3, r5
 8006816:	f04f 0000 	mov.w	r0, #0
 800681a:	f04f 0100 	mov.w	r1, #0
 800681e:	0159      	lsls	r1, r3, #5
 8006820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006824:	0150      	lsls	r0, r2, #5
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4621      	mov	r1, r4
 800682c:	1a51      	subs	r1, r2, r1
 800682e:	6139      	str	r1, [r7, #16]
 8006830:	4629      	mov	r1, r5
 8006832:	eb63 0301 	sbc.w	r3, r3, r1
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006844:	4659      	mov	r1, fp
 8006846:	018b      	lsls	r3, r1, #6
 8006848:	4651      	mov	r1, sl
 800684a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800684e:	4651      	mov	r1, sl
 8006850:	018a      	lsls	r2, r1, #6
 8006852:	4651      	mov	r1, sl
 8006854:	ebb2 0801 	subs.w	r8, r2, r1
 8006858:	4659      	mov	r1, fp
 800685a:	eb63 0901 	sbc.w	r9, r3, r1
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800686a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800686e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006872:	4690      	mov	r8, r2
 8006874:	4699      	mov	r9, r3
 8006876:	4623      	mov	r3, r4
 8006878:	eb18 0303 	adds.w	r3, r8, r3
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	462b      	mov	r3, r5
 8006880:	eb49 0303 	adc.w	r3, r9, r3
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006892:	4629      	mov	r1, r5
 8006894:	024b      	lsls	r3, r1, #9
 8006896:	4621      	mov	r1, r4
 8006898:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800689c:	4621      	mov	r1, r4
 800689e:	024a      	lsls	r2, r1, #9
 80068a0:	4610      	mov	r0, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068a6:	2200      	movs	r2, #0
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068b0:	f7fa f91e 	bl	8000af0 <__aeabi_uldivmod>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4613      	mov	r3, r2
 80068ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068bc:	e058      	b.n	8006970 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068be:	4b38      	ldr	r3, [pc, #224]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	099b      	lsrs	r3, r3, #6
 80068c4:	2200      	movs	r2, #0
 80068c6:	4618      	mov	r0, r3
 80068c8:	4611      	mov	r1, r2
 80068ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068ce:	623b      	str	r3, [r7, #32]
 80068d0:	2300      	movs	r3, #0
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
 80068d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	f04f 0000 	mov.w	r0, #0
 80068e0:	f04f 0100 	mov.w	r1, #0
 80068e4:	0159      	lsls	r1, r3, #5
 80068e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068ea:	0150      	lsls	r0, r2, #5
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4641      	mov	r1, r8
 80068f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80068f6:	4649      	mov	r1, r9
 80068f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006908:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800690c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006910:	ebb2 040a 	subs.w	r4, r2, sl
 8006914:	eb63 050b 	sbc.w	r5, r3, fp
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	00eb      	lsls	r3, r5, #3
 8006922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006926:	00e2      	lsls	r2, r4, #3
 8006928:	4614      	mov	r4, r2
 800692a:	461d      	mov	r5, r3
 800692c:	4643      	mov	r3, r8
 800692e:	18e3      	adds	r3, r4, r3
 8006930:	603b      	str	r3, [r7, #0]
 8006932:	464b      	mov	r3, r9
 8006934:	eb45 0303 	adc.w	r3, r5, r3
 8006938:	607b      	str	r3, [r7, #4]
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006946:	4629      	mov	r1, r5
 8006948:	028b      	lsls	r3, r1, #10
 800694a:	4621      	mov	r1, r4
 800694c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006950:	4621      	mov	r1, r4
 8006952:	028a      	lsls	r2, r1, #10
 8006954:	4610      	mov	r0, r2
 8006956:	4619      	mov	r1, r3
 8006958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800695a:	2200      	movs	r2, #0
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	61fa      	str	r2, [r7, #28]
 8006960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006964:	f7fa f8c4 	bl	8000af0 <__aeabi_uldivmod>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4613      	mov	r3, r2
 800696e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	3301      	adds	r3, #1
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006980:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006984:	fbb2 f3f3 	udiv	r3, r2, r3
 8006988:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800698a:	e002      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800698e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006994:	4618      	mov	r0, r3
 8006996:	3750      	adds	r7, #80	; 0x50
 8006998:	46bd      	mov	sp, r7
 800699a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800699e:	bf00      	nop
 80069a0:	40023800 	.word	0x40023800
 80069a4:	00f42400 	.word	0x00f42400
 80069a8:	007a1200 	.word	0x007a1200

080069ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b0:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80069b2:	681b      	ldr	r3, [r3, #0]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	20000014 	.word	0x20000014

080069c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069c8:	f7ff fff0 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069cc:	4602      	mov	r2, r0
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	0a9b      	lsrs	r3, r3, #10
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	4903      	ldr	r1, [pc, #12]	; (80069e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069da:	5ccb      	ldrb	r3, [r1, r3]
 80069dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40023800 	.word	0x40023800
 80069e8:	0800b3dc 	.word	0x0800b3dc

080069ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e07b      	b.n	8006af6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d108      	bne.n	8006a18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a0e:	d009      	beq.n	8006a24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	61da      	str	r2, [r3, #28]
 8006a16:	e005      	b.n	8006a24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fc f994 	bl	8002d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	431a      	orrs	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a94:	431a      	orrs	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa8:	ea42 0103 	orr.w	r1, r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	0c1b      	lsrs	r3, r3, #16
 8006ac2:	f003 0104 	and.w	r1, r3, #4
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	f003 0210 	and.w	r2, r3, #16
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ae4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b088      	sub	sp, #32
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	603b      	str	r3, [r7, #0]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_SPI_Transmit+0x22>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e126      	b.n	8006d6e <HAL_SPI_Transmit+0x270>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b28:	f7fd fac0 	bl	80040ac <HAL_GetTick>
 8006b2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b2e:	88fb      	ldrh	r3, [r7, #6]
 8006b30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d002      	beq.n	8006b44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b3e:	2302      	movs	r3, #2
 8006b40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b42:	e10b      	b.n	8006d5c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <HAL_SPI_Transmit+0x52>
 8006b4a:	88fb      	ldrh	r3, [r7, #6]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d102      	bne.n	8006b56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b54:	e102      	b.n	8006d5c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2203      	movs	r2, #3
 8006b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	88fa      	ldrh	r2, [r7, #6]
 8006b6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	88fa      	ldrh	r2, [r7, #6]
 8006b74:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b9c:	d10f      	bne.n	8006bbe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	d007      	beq.n	8006bdc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be4:	d14b      	bne.n	8006c7e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <HAL_SPI_Transmit+0xf6>
 8006bee:	8afb      	ldrh	r3, [r7, #22]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d13e      	bne.n	8006c72 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf8:	881a      	ldrh	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	1c9a      	adds	r2, r3, #2
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c18:	e02b      	b.n	8006c72 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d112      	bne.n	8006c4e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2c:	881a      	ldrh	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	1c9a      	adds	r2, r3, #2
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c4c:	e011      	b.n	8006c72 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c4e:	f7fd fa2d 	bl	80040ac <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d803      	bhi.n	8006c66 <HAL_SPI_Transmit+0x168>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c64:	d102      	bne.n	8006c6c <HAL_SPI_Transmit+0x16e>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d102      	bne.n	8006c72 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c70:	e074      	b.n	8006d5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1ce      	bne.n	8006c1a <HAL_SPI_Transmit+0x11c>
 8006c7c:	e04c      	b.n	8006d18 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <HAL_SPI_Transmit+0x18e>
 8006c86:	8afb      	ldrh	r3, [r7, #22]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d140      	bne.n	8006d0e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	330c      	adds	r3, #12
 8006c96:	7812      	ldrb	r2, [r2, #0]
 8006c98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006cb2:	e02c      	b.n	8006d0e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d113      	bne.n	8006cea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	7812      	ldrb	r2, [r2, #0]
 8006cce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ce8:	e011      	b.n	8006d0e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cea:	f7fd f9df 	bl	80040ac <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d803      	bhi.n	8006d02 <HAL_SPI_Transmit+0x204>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d00:	d102      	bne.n	8006d08 <HAL_SPI_Transmit+0x20a>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d0c:	e026      	b.n	8006d5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1cd      	bne.n	8006cb4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 f8b3 	bl	8006e88 <SPI_EndRxTxTransaction>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d36:	2300      	movs	r3, #0
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	613b      	str	r3, [r7, #16]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	77fb      	strb	r3, [r7, #31]
 8006d58:	e000      	b.n	8006d5c <HAL_SPI_Transmit+0x25e>
  }

error:
 8006d5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b088      	sub	sp, #32
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	4613      	mov	r3, r2
 8006d86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d88:	f7fd f990 	bl	80040ac <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d90:	1a9b      	subs	r3, r3, r2
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	4413      	add	r3, r2
 8006d96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d98:	f7fd f988 	bl	80040ac <HAL_GetTick>
 8006d9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d9e:	4b39      	ldr	r3, [pc, #228]	; (8006e84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	015b      	lsls	r3, r3, #5
 8006da4:	0d1b      	lsrs	r3, r3, #20
 8006da6:	69fa      	ldr	r2, [r7, #28]
 8006da8:	fb02 f303 	mul.w	r3, r2, r3
 8006dac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dae:	e054      	b.n	8006e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db6:	d050      	beq.n	8006e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006db8:	f7fd f978 	bl	80040ac <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	69fa      	ldr	r2, [r7, #28]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d902      	bls.n	8006dce <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d13d      	bne.n	8006e4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ddc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006de6:	d111      	bne.n	8006e0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df0:	d004      	beq.n	8006dfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dfa:	d107      	bne.n	8006e0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e14:	d10f      	bne.n	8006e36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e017      	b.n	8006e7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	4013      	ands	r3, r2
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	bf0c      	ite	eq
 8006e6a:	2301      	moveq	r3, #1
 8006e6c:	2300      	movne	r3, #0
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	461a      	mov	r2, r3
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d19b      	bne.n	8006db0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3720      	adds	r7, #32
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20000014 	.word	0x20000014

08006e88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e94:	4b1b      	ldr	r3, [pc, #108]	; (8006f04 <SPI_EndRxTxTransaction+0x7c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1b      	ldr	r2, [pc, #108]	; (8006f08 <SPI_EndRxTxTransaction+0x80>)
 8006e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9e:	0d5b      	lsrs	r3, r3, #21
 8006ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ea4:	fb02 f303 	mul.w	r3, r2, r3
 8006ea8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eb2:	d112      	bne.n	8006eda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2180      	movs	r1, #128	; 0x80
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff ff5a 	bl	8006d78 <SPI_WaitFlagStateUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d016      	beq.n	8006ef8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ece:	f043 0220 	orr.w	r2, r3, #32
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e00f      	b.n	8006efa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00a      	beq.n	8006ef6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef0:	2b80      	cmp	r3, #128	; 0x80
 8006ef2:	d0f2      	beq.n	8006eda <SPI_EndRxTxTransaction+0x52>
 8006ef4:	e000      	b.n	8006ef8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ef6:	bf00      	nop
  }

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000014 	.word	0x20000014
 8006f08:	165e9f81 	.word	0x165e9f81

08006f0c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e034      	b.n	8006f8c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d106      	bne.n	8006f3c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f7fa fa0a 	bl	8001350 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3308      	adds	r3, #8
 8006f44:	4619      	mov	r1, r3
 8006f46:	4610      	mov	r0, r2
 8006f48:	f000 ffda 	bl	8007f00 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	461a      	mov	r2, r3
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	f001 f824 	bl	8007fa4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6858      	ldr	r0, [r3, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	f001 f859 	bl	8008020 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	6892      	ldr	r2, [r2, #8]
 8006f76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	6892      	ldr	r2, [r2, #8]
 8006f82:	f041 0101 	orr.w	r1, r1, #1
 8006f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e041      	b.n	800702a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fc f880 	bl	80030c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f000 fc1a 	bl	800780c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b01      	cmp	r3, #1
 8007046:	d001      	beq.n	800704c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e046      	b.n	80070da <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a23      	ldr	r2, [pc, #140]	; (80070e8 <HAL_TIM_Base_Start+0xb4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d022      	beq.n	80070a4 <HAL_TIM_Base_Start+0x70>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007066:	d01d      	beq.n	80070a4 <HAL_TIM_Base_Start+0x70>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a1f      	ldr	r2, [pc, #124]	; (80070ec <HAL_TIM_Base_Start+0xb8>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d018      	beq.n	80070a4 <HAL_TIM_Base_Start+0x70>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a1e      	ldr	r2, [pc, #120]	; (80070f0 <HAL_TIM_Base_Start+0xbc>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d013      	beq.n	80070a4 <HAL_TIM_Base_Start+0x70>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a1c      	ldr	r2, [pc, #112]	; (80070f4 <HAL_TIM_Base_Start+0xc0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00e      	beq.n	80070a4 <HAL_TIM_Base_Start+0x70>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a1b      	ldr	r2, [pc, #108]	; (80070f8 <HAL_TIM_Base_Start+0xc4>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d009      	beq.n	80070a4 <HAL_TIM_Base_Start+0x70>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a19      	ldr	r2, [pc, #100]	; (80070fc <HAL_TIM_Base_Start+0xc8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d004      	beq.n	80070a4 <HAL_TIM_Base_Start+0x70>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a18      	ldr	r2, [pc, #96]	; (8007100 <HAL_TIM_Base_Start+0xcc>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d111      	bne.n	80070c8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2b06      	cmp	r3, #6
 80070b4:	d010      	beq.n	80070d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0201 	orr.w	r2, r2, #1
 80070c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c6:	e007      	b.n	80070d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0201 	orr.w	r2, r2, #1
 80070d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	40010000 	.word	0x40010000
 80070ec:	40000400 	.word	0x40000400
 80070f0:	40000800 	.word	0x40000800
 80070f4:	40000c00 	.word	0x40000c00
 80070f8:	40010400 	.word	0x40010400
 80070fc:	40014000 	.word	0x40014000
 8007100:	40001800 	.word	0x40001800

08007104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b01      	cmp	r3, #1
 8007116:	d001      	beq.n	800711c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e04e      	b.n	80071ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0201 	orr.w	r2, r2, #1
 8007132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a23      	ldr	r2, [pc, #140]	; (80071c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d022      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007146:	d01d      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a1f      	ldr	r2, [pc, #124]	; (80071cc <HAL_TIM_Base_Start_IT+0xc8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d018      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a1e      	ldr	r2, [pc, #120]	; (80071d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d013      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a1c      	ldr	r2, [pc, #112]	; (80071d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00e      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a1b      	ldr	r2, [pc, #108]	; (80071d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d009      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a19      	ldr	r2, [pc, #100]	; (80071dc <HAL_TIM_Base_Start_IT+0xd8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d004      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a18      	ldr	r2, [pc, #96]	; (80071e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d111      	bne.n	80071a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0307 	and.w	r3, r3, #7
 800718e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b06      	cmp	r3, #6
 8007194:	d010      	beq.n	80071b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f042 0201 	orr.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a6:	e007      	b.n	80071b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40010000 	.word	0x40010000
 80071cc:	40000400 	.word	0x40000400
 80071d0:	40000800 	.word	0x40000800
 80071d4:	40000c00 	.word	0x40000c00
 80071d8:	40010400 	.word	0x40010400
 80071dc:	40014000 	.word	0x40014000
 80071e0:	40001800 	.word	0x40001800

080071e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e041      	b.n	800727a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d106      	bne.n	8007210 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f839 	bl	8007282 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3304      	adds	r3, #4
 8007220:	4619      	mov	r1, r3
 8007222:	4610      	mov	r0, r2
 8007224:	f000 faf2 	bl	800780c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800728a:	bf00      	nop
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d122      	bne.n	80072f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d11b      	bne.n	80072f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f06f 0202 	mvn.w	r2, #2
 80072c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	f003 0303 	and.w	r3, r3, #3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fa78 	bl	80077ce <HAL_TIM_IC_CaptureCallback>
 80072de:	e005      	b.n	80072ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fa6a 	bl	80077ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fa7b 	bl	80077e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	d122      	bne.n	8007346 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	2b04      	cmp	r3, #4
 800730c:	d11b      	bne.n	8007346 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f06f 0204 	mvn.w	r2, #4
 8007316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fa4e 	bl	80077ce <HAL_TIM_IC_CaptureCallback>
 8007332:	e005      	b.n	8007340 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fa40 	bl	80077ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa51 	bl	80077e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	f003 0308 	and.w	r3, r3, #8
 8007350:	2b08      	cmp	r3, #8
 8007352:	d122      	bne.n	800739a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f003 0308 	and.w	r3, r3, #8
 800735e:	2b08      	cmp	r3, #8
 8007360:	d11b      	bne.n	800739a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f06f 0208 	mvn.w	r2, #8
 800736a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2204      	movs	r2, #4
 8007370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fa24 	bl	80077ce <HAL_TIM_IC_CaptureCallback>
 8007386:	e005      	b.n	8007394 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fa16 	bl	80077ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fa27 	bl	80077e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	f003 0310 	and.w	r3, r3, #16
 80073a4:	2b10      	cmp	r3, #16
 80073a6:	d122      	bne.n	80073ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f003 0310 	and.w	r3, r3, #16
 80073b2:	2b10      	cmp	r3, #16
 80073b4:	d11b      	bne.n	80073ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f06f 0210 	mvn.w	r2, #16
 80073be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2208      	movs	r2, #8
 80073c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f9fa 	bl	80077ce <HAL_TIM_IC_CaptureCallback>
 80073da:	e005      	b.n	80073e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f9ec 	bl	80077ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f9fd 	bl	80077e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d10e      	bne.n	800741a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b01      	cmp	r3, #1
 8007408:	d107      	bne.n	800741a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f06f 0201 	mvn.w	r2, #1
 8007412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7fb fc2f 	bl	8002c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007424:	2b80      	cmp	r3, #128	; 0x80
 8007426:	d10e      	bne.n	8007446 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007432:	2b80      	cmp	r3, #128	; 0x80
 8007434:	d107      	bne.n	8007446 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800743e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fd53 	bl	8007eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007450:	2b40      	cmp	r3, #64	; 0x40
 8007452:	d10e      	bne.n	8007472 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745e:	2b40      	cmp	r3, #64	; 0x40
 8007460:	d107      	bne.n	8007472 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800746a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f9c2 	bl	80077f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b20      	cmp	r3, #32
 800747e:	d10e      	bne.n	800749e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b20      	cmp	r3, #32
 800748c:	d107      	bne.n	800749e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f06f 0220 	mvn.w	r2, #32
 8007496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fd1d 	bl	8007ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d101      	bne.n	80074c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e0ae      	b.n	8007624 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b0c      	cmp	r3, #12
 80074d2:	f200 809f 	bhi.w	8007614 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074d6:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	08007511 	.word	0x08007511
 80074e0:	08007615 	.word	0x08007615
 80074e4:	08007615 	.word	0x08007615
 80074e8:	08007615 	.word	0x08007615
 80074ec:	08007551 	.word	0x08007551
 80074f0:	08007615 	.word	0x08007615
 80074f4:	08007615 	.word	0x08007615
 80074f8:	08007615 	.word	0x08007615
 80074fc:	08007593 	.word	0x08007593
 8007500:	08007615 	.word	0x08007615
 8007504:	08007615 	.word	0x08007615
 8007508:	08007615 	.word	0x08007615
 800750c:	080075d3 	.word	0x080075d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fa18 	bl	800794c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0208 	orr.w	r2, r2, #8
 800752a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0204 	bic.w	r2, r2, #4
 800753a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6999      	ldr	r1, [r3, #24]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	619a      	str	r2, [r3, #24]
      break;
 800754e:	e064      	b.n	800761a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	4618      	mov	r0, r3
 8007558:	f000 fa68 	bl	8007a2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800756a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800757a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6999      	ldr	r1, [r3, #24]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	021a      	lsls	r2, r3, #8
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	619a      	str	r2, [r3, #24]
      break;
 8007590:	e043      	b.n	800761a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68b9      	ldr	r1, [r7, #8]
 8007598:	4618      	mov	r0, r3
 800759a:	f000 fabd 	bl	8007b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69da      	ldr	r2, [r3, #28]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f042 0208 	orr.w	r2, r2, #8
 80075ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69da      	ldr	r2, [r3, #28]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0204 	bic.w	r2, r2, #4
 80075bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69d9      	ldr	r1, [r3, #28]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	691a      	ldr	r2, [r3, #16]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	61da      	str	r2, [r3, #28]
      break;
 80075d0:	e023      	b.n	800761a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fb11 	bl	8007c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69da      	ldr	r2, [r3, #28]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69da      	ldr	r2, [r3, #28]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69d9      	ldr	r1, [r3, #28]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	021a      	lsls	r2, r3, #8
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	61da      	str	r2, [r3, #28]
      break;
 8007612:	e002      	b.n	800761a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	75fb      	strb	r3, [r7, #23]
      break;
 8007618:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007622:	7dfb      	ldrb	r3, [r7, #23]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_TIM_ConfigClockSource+0x1c>
 8007644:	2302      	movs	r3, #2
 8007646:	e0b4      	b.n	80077b2 <HAL_TIM_ConfigClockSource+0x186>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800766e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007680:	d03e      	beq.n	8007700 <HAL_TIM_ConfigClockSource+0xd4>
 8007682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007686:	f200 8087 	bhi.w	8007798 <HAL_TIM_ConfigClockSource+0x16c>
 800768a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800768e:	f000 8086 	beq.w	800779e <HAL_TIM_ConfigClockSource+0x172>
 8007692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007696:	d87f      	bhi.n	8007798 <HAL_TIM_ConfigClockSource+0x16c>
 8007698:	2b70      	cmp	r3, #112	; 0x70
 800769a:	d01a      	beq.n	80076d2 <HAL_TIM_ConfigClockSource+0xa6>
 800769c:	2b70      	cmp	r3, #112	; 0x70
 800769e:	d87b      	bhi.n	8007798 <HAL_TIM_ConfigClockSource+0x16c>
 80076a0:	2b60      	cmp	r3, #96	; 0x60
 80076a2:	d050      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x11a>
 80076a4:	2b60      	cmp	r3, #96	; 0x60
 80076a6:	d877      	bhi.n	8007798 <HAL_TIM_ConfigClockSource+0x16c>
 80076a8:	2b50      	cmp	r3, #80	; 0x50
 80076aa:	d03c      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0xfa>
 80076ac:	2b50      	cmp	r3, #80	; 0x50
 80076ae:	d873      	bhi.n	8007798 <HAL_TIM_ConfigClockSource+0x16c>
 80076b0:	2b40      	cmp	r3, #64	; 0x40
 80076b2:	d058      	beq.n	8007766 <HAL_TIM_ConfigClockSource+0x13a>
 80076b4:	2b40      	cmp	r3, #64	; 0x40
 80076b6:	d86f      	bhi.n	8007798 <HAL_TIM_ConfigClockSource+0x16c>
 80076b8:	2b30      	cmp	r3, #48	; 0x30
 80076ba:	d064      	beq.n	8007786 <HAL_TIM_ConfigClockSource+0x15a>
 80076bc:	2b30      	cmp	r3, #48	; 0x30
 80076be:	d86b      	bhi.n	8007798 <HAL_TIM_ConfigClockSource+0x16c>
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	d060      	beq.n	8007786 <HAL_TIM_ConfigClockSource+0x15a>
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d867      	bhi.n	8007798 <HAL_TIM_ConfigClockSource+0x16c>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d05c      	beq.n	8007786 <HAL_TIM_ConfigClockSource+0x15a>
 80076cc:	2b10      	cmp	r3, #16
 80076ce:	d05a      	beq.n	8007786 <HAL_TIM_ConfigClockSource+0x15a>
 80076d0:	e062      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6818      	ldr	r0, [r3, #0]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	6899      	ldr	r1, [r3, #8]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f000 fb5d 	bl	8007da0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	609a      	str	r2, [r3, #8]
      break;
 80076fe:	e04f      	b.n	80077a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	6899      	ldr	r1, [r3, #8]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f000 fb46 	bl	8007da0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007722:	609a      	str	r2, [r3, #8]
      break;
 8007724:	e03c      	b.n	80077a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	6859      	ldr	r1, [r3, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	461a      	mov	r2, r3
 8007734:	f000 faba 	bl	8007cac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2150      	movs	r1, #80	; 0x50
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fb13 	bl	8007d6a <TIM_ITRx_SetConfig>
      break;
 8007744:	e02c      	b.n	80077a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	6859      	ldr	r1, [r3, #4]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	461a      	mov	r2, r3
 8007754:	f000 fad9 	bl	8007d0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2160      	movs	r1, #96	; 0x60
 800775e:	4618      	mov	r0, r3
 8007760:	f000 fb03 	bl	8007d6a <TIM_ITRx_SetConfig>
      break;
 8007764:	e01c      	b.n	80077a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	6859      	ldr	r1, [r3, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	461a      	mov	r2, r3
 8007774:	f000 fa9a 	bl	8007cac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2140      	movs	r1, #64	; 0x40
 800777e:	4618      	mov	r0, r3
 8007780:	f000 faf3 	bl	8007d6a <TIM_ITRx_SetConfig>
      break;
 8007784:	e00c      	b.n	80077a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4619      	mov	r1, r3
 8007790:	4610      	mov	r0, r2
 8007792:	f000 faea 	bl	8007d6a <TIM_ITRx_SetConfig>
      break;
 8007796:	e003      	b.n	80077a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	73fb      	strb	r3, [r7, #15]
      break;
 800779c:	e000      	b.n	80077a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800779e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077c2:	bf00      	nop
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077ea:	bf00      	nop
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
	...

0800780c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a40      	ldr	r2, [pc, #256]	; (8007920 <TIM_Base_SetConfig+0x114>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d013      	beq.n	800784c <TIM_Base_SetConfig+0x40>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800782a:	d00f      	beq.n	800784c <TIM_Base_SetConfig+0x40>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a3d      	ldr	r2, [pc, #244]	; (8007924 <TIM_Base_SetConfig+0x118>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00b      	beq.n	800784c <TIM_Base_SetConfig+0x40>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a3c      	ldr	r2, [pc, #240]	; (8007928 <TIM_Base_SetConfig+0x11c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d007      	beq.n	800784c <TIM_Base_SetConfig+0x40>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a3b      	ldr	r2, [pc, #236]	; (800792c <TIM_Base_SetConfig+0x120>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d003      	beq.n	800784c <TIM_Base_SetConfig+0x40>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a3a      	ldr	r2, [pc, #232]	; (8007930 <TIM_Base_SetConfig+0x124>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d108      	bne.n	800785e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a2f      	ldr	r2, [pc, #188]	; (8007920 <TIM_Base_SetConfig+0x114>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d02b      	beq.n	80078be <TIM_Base_SetConfig+0xb2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800786c:	d027      	beq.n	80078be <TIM_Base_SetConfig+0xb2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a2c      	ldr	r2, [pc, #176]	; (8007924 <TIM_Base_SetConfig+0x118>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d023      	beq.n	80078be <TIM_Base_SetConfig+0xb2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a2b      	ldr	r2, [pc, #172]	; (8007928 <TIM_Base_SetConfig+0x11c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d01f      	beq.n	80078be <TIM_Base_SetConfig+0xb2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a2a      	ldr	r2, [pc, #168]	; (800792c <TIM_Base_SetConfig+0x120>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d01b      	beq.n	80078be <TIM_Base_SetConfig+0xb2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a29      	ldr	r2, [pc, #164]	; (8007930 <TIM_Base_SetConfig+0x124>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d017      	beq.n	80078be <TIM_Base_SetConfig+0xb2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a28      	ldr	r2, [pc, #160]	; (8007934 <TIM_Base_SetConfig+0x128>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d013      	beq.n	80078be <TIM_Base_SetConfig+0xb2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a27      	ldr	r2, [pc, #156]	; (8007938 <TIM_Base_SetConfig+0x12c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00f      	beq.n	80078be <TIM_Base_SetConfig+0xb2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a26      	ldr	r2, [pc, #152]	; (800793c <TIM_Base_SetConfig+0x130>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00b      	beq.n	80078be <TIM_Base_SetConfig+0xb2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a25      	ldr	r2, [pc, #148]	; (8007940 <TIM_Base_SetConfig+0x134>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d007      	beq.n	80078be <TIM_Base_SetConfig+0xb2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a24      	ldr	r2, [pc, #144]	; (8007944 <TIM_Base_SetConfig+0x138>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d003      	beq.n	80078be <TIM_Base_SetConfig+0xb2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a23      	ldr	r2, [pc, #140]	; (8007948 <TIM_Base_SetConfig+0x13c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d108      	bne.n	80078d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	689a      	ldr	r2, [r3, #8]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a0a      	ldr	r2, [pc, #40]	; (8007920 <TIM_Base_SetConfig+0x114>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d003      	beq.n	8007904 <TIM_Base_SetConfig+0xf8>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a0c      	ldr	r2, [pc, #48]	; (8007930 <TIM_Base_SetConfig+0x124>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d103      	bne.n	800790c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	691a      	ldr	r2, [r3, #16]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	615a      	str	r2, [r3, #20]
}
 8007912:	bf00      	nop
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	40010000 	.word	0x40010000
 8007924:	40000400 	.word	0x40000400
 8007928:	40000800 	.word	0x40000800
 800792c:	40000c00 	.word	0x40000c00
 8007930:	40010400 	.word	0x40010400
 8007934:	40014000 	.word	0x40014000
 8007938:	40014400 	.word	0x40014400
 800793c:	40014800 	.word	0x40014800
 8007940:	40001800 	.word	0x40001800
 8007944:	40001c00 	.word	0x40001c00
 8007948:	40002000 	.word	0x40002000

0800794c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f023 0201 	bic.w	r2, r3, #1
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0303 	bic.w	r3, r3, #3
 8007982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f023 0302 	bic.w	r3, r3, #2
 8007994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	4313      	orrs	r3, r2
 800799e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a20      	ldr	r2, [pc, #128]	; (8007a24 <TIM_OC1_SetConfig+0xd8>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d003      	beq.n	80079b0 <TIM_OC1_SetConfig+0x64>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a1f      	ldr	r2, [pc, #124]	; (8007a28 <TIM_OC1_SetConfig+0xdc>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d10c      	bne.n	80079ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f023 0308 	bic.w	r3, r3, #8
 80079b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f023 0304 	bic.w	r3, r3, #4
 80079c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a15      	ldr	r2, [pc, #84]	; (8007a24 <TIM_OC1_SetConfig+0xd8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d003      	beq.n	80079da <TIM_OC1_SetConfig+0x8e>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a14      	ldr	r2, [pc, #80]	; (8007a28 <TIM_OC1_SetConfig+0xdc>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d111      	bne.n	80079fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	621a      	str	r2, [r3, #32]
}
 8007a18:	bf00      	nop
 8007a1a:	371c      	adds	r7, #28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	40010000 	.word	0x40010000
 8007a28:	40010400 	.word	0x40010400

08007a2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	f023 0210 	bic.w	r2, r3, #16
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f023 0320 	bic.w	r3, r3, #32
 8007a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a22      	ldr	r2, [pc, #136]	; (8007b10 <TIM_OC2_SetConfig+0xe4>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d003      	beq.n	8007a94 <TIM_OC2_SetConfig+0x68>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a21      	ldr	r2, [pc, #132]	; (8007b14 <TIM_OC2_SetConfig+0xe8>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d10d      	bne.n	8007ab0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a17      	ldr	r2, [pc, #92]	; (8007b10 <TIM_OC2_SetConfig+0xe4>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d003      	beq.n	8007ac0 <TIM_OC2_SetConfig+0x94>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a16      	ldr	r2, [pc, #88]	; (8007b14 <TIM_OC2_SetConfig+0xe8>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d113      	bne.n	8007ae8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	621a      	str	r2, [r3, #32]
}
 8007b02:	bf00      	nop
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	40010000 	.word	0x40010000
 8007b14:	40010400 	.word	0x40010400

08007b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0303 	bic.w	r3, r3, #3
 8007b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a21      	ldr	r2, [pc, #132]	; (8007bf8 <TIM_OC3_SetConfig+0xe0>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d003      	beq.n	8007b7e <TIM_OC3_SetConfig+0x66>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a20      	ldr	r2, [pc, #128]	; (8007bfc <TIM_OC3_SetConfig+0xe4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d10d      	bne.n	8007b9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	021b      	lsls	r3, r3, #8
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a16      	ldr	r2, [pc, #88]	; (8007bf8 <TIM_OC3_SetConfig+0xe0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d003      	beq.n	8007baa <TIM_OC3_SetConfig+0x92>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a15      	ldr	r2, [pc, #84]	; (8007bfc <TIM_OC3_SetConfig+0xe4>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d113      	bne.n	8007bd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	621a      	str	r2, [r3, #32]
}
 8007bec:	bf00      	nop
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40010400 	.word	0x40010400

08007c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	031b      	lsls	r3, r3, #12
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a12      	ldr	r2, [pc, #72]	; (8007ca4 <TIM_OC4_SetConfig+0xa4>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d003      	beq.n	8007c68 <TIM_OC4_SetConfig+0x68>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a11      	ldr	r2, [pc, #68]	; (8007ca8 <TIM_OC4_SetConfig+0xa8>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d109      	bne.n	8007c7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	019b      	lsls	r3, r3, #6
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	621a      	str	r2, [r3, #32]
}
 8007c96:	bf00      	nop
 8007c98:	371c      	adds	r7, #28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	40010000 	.word	0x40010000
 8007ca8:	40010400 	.word	0x40010400

08007cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	f023 0201 	bic.w	r2, r3, #1
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f023 030a 	bic.w	r3, r3, #10
 8007ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	621a      	str	r2, [r3, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b087      	sub	sp, #28
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f023 0210 	bic.w	r2, r3, #16
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	031b      	lsls	r3, r3, #12
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	011b      	lsls	r3, r3, #4
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	621a      	str	r2, [r3, #32]
}
 8007d5e:	bf00      	nop
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b085      	sub	sp, #20
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	f043 0307 	orr.w	r3, r3, #7
 8007d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	609a      	str	r2, [r3, #8]
}
 8007d94:	bf00      	nop
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
 8007dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	021a      	lsls	r2, r3, #8
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	609a      	str	r2, [r3, #8]
}
 8007dd4:	bf00      	nop
 8007dd6:	371c      	adds	r7, #28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007df4:	2302      	movs	r3, #2
 8007df6:	e05a      	b.n	8007eae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2202      	movs	r2, #2
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a21      	ldr	r2, [pc, #132]	; (8007ebc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d022      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e44:	d01d      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1d      	ldr	r2, [pc, #116]	; (8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d018      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a1b      	ldr	r2, [pc, #108]	; (8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d013      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a1a      	ldr	r2, [pc, #104]	; (8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00e      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a18      	ldr	r2, [pc, #96]	; (8007ecc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d009      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a17      	ldr	r2, [pc, #92]	; (8007ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d004      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a15      	ldr	r2, [pc, #84]	; (8007ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d10c      	bne.n	8007e9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	40010000 	.word	0x40010000
 8007ec0:	40000400 	.word	0x40000400
 8007ec4:	40000800 	.word	0x40000800
 8007ec8:	40000c00 	.word	0x40000c00
 8007ecc:	40010400 	.word	0x40010400
 8007ed0:	40014000 	.word	0x40014000
 8007ed4:	40001800 	.word	0x40001800

08007ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f18:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	4b20      	ldr	r3, [pc, #128]	; (8007fa0 <FSMC_NORSRAM_Init+0xa0>)
 8007f1e:	4013      	ands	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f2a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007f30:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007f36:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007f3c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007f42:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007f48:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007f4e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007f54:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007f5a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007f60:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007f66:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007f6c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d103      	bne.n	8007f84 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f82:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68f9      	ldr	r1, [r7, #12]
 8007f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	fff00080 	.word	0xfff00080

08007fa4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fbe:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007fc6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007fd2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007fda:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007fe2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007fec:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	3b02      	subs	r3, #2
 8007ff4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007ff6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6979      	ldr	r1, [r7, #20]
 800800c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
	...

08008020 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008038:	d122      	bne.n	8008080 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008042:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	4b15      	ldr	r3, [pc, #84]	; (800809c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008048:	4013      	ands	r3, r2
 800804a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008056:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800805e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008066:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800806c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4313      	orrs	r3, r2
 8008072:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	6979      	ldr	r1, [r7, #20]
 800807a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800807e:	e005      	b.n	800808c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	cff00000 	.word	0xcff00000

080080a0 <memset>:
 80080a0:	4402      	add	r2, r0
 80080a2:	4603      	mov	r3, r0
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d100      	bne.n	80080aa <memset+0xa>
 80080a8:	4770      	bx	lr
 80080aa:	f803 1b01 	strb.w	r1, [r3], #1
 80080ae:	e7f9      	b.n	80080a4 <memset+0x4>

080080b0 <__errno>:
 80080b0:	4b01      	ldr	r3, [pc, #4]	; (80080b8 <__errno+0x8>)
 80080b2:	6818      	ldr	r0, [r3, #0]
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	200000a4 	.word	0x200000a4

080080bc <__libc_init_array>:
 80080bc:	b570      	push	{r4, r5, r6, lr}
 80080be:	4d0d      	ldr	r5, [pc, #52]	; (80080f4 <__libc_init_array+0x38>)
 80080c0:	4c0d      	ldr	r4, [pc, #52]	; (80080f8 <__libc_init_array+0x3c>)
 80080c2:	1b64      	subs	r4, r4, r5
 80080c4:	10a4      	asrs	r4, r4, #2
 80080c6:	2600      	movs	r6, #0
 80080c8:	42a6      	cmp	r6, r4
 80080ca:	d109      	bne.n	80080e0 <__libc_init_array+0x24>
 80080cc:	4d0b      	ldr	r5, [pc, #44]	; (80080fc <__libc_init_array+0x40>)
 80080ce:	4c0c      	ldr	r4, [pc, #48]	; (8008100 <__libc_init_array+0x44>)
 80080d0:	f000 f91e 	bl	8008310 <_init>
 80080d4:	1b64      	subs	r4, r4, r5
 80080d6:	10a4      	asrs	r4, r4, #2
 80080d8:	2600      	movs	r6, #0
 80080da:	42a6      	cmp	r6, r4
 80080dc:	d105      	bne.n	80080ea <__libc_init_array+0x2e>
 80080de:	bd70      	pop	{r4, r5, r6, pc}
 80080e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e4:	4798      	blx	r3
 80080e6:	3601      	adds	r6, #1
 80080e8:	e7ee      	b.n	80080c8 <__libc_init_array+0xc>
 80080ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ee:	4798      	blx	r3
 80080f0:	3601      	adds	r6, #1
 80080f2:	e7f2      	b.n	80080da <__libc_init_array+0x1e>
 80080f4:	0800b3f4 	.word	0x0800b3f4
 80080f8:	0800b3f4 	.word	0x0800b3f4
 80080fc:	0800b3f4 	.word	0x0800b3f4
 8008100:	0800b3f8 	.word	0x0800b3f8

08008104 <sqrt>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	ed2d 8b02 	vpush	{d8}
 800810a:	ec55 4b10 	vmov	r4, r5, d0
 800810e:	f000 f825 	bl	800815c <__ieee754_sqrt>
 8008112:	4622      	mov	r2, r4
 8008114:	462b      	mov	r3, r5
 8008116:	4620      	mov	r0, r4
 8008118:	4629      	mov	r1, r5
 800811a:	eeb0 8a40 	vmov.f32	s16, s0
 800811e:	eef0 8a60 	vmov.f32	s17, s1
 8008122:	f7f8 fcaf 	bl	8000a84 <__aeabi_dcmpun>
 8008126:	b990      	cbnz	r0, 800814e <sqrt+0x4a>
 8008128:	2200      	movs	r2, #0
 800812a:	2300      	movs	r3, #0
 800812c:	4620      	mov	r0, r4
 800812e:	4629      	mov	r1, r5
 8008130:	f7f8 fc80 	bl	8000a34 <__aeabi_dcmplt>
 8008134:	b158      	cbz	r0, 800814e <sqrt+0x4a>
 8008136:	f7ff ffbb 	bl	80080b0 <__errno>
 800813a:	2321      	movs	r3, #33	; 0x21
 800813c:	6003      	str	r3, [r0, #0]
 800813e:	2200      	movs	r2, #0
 8008140:	2300      	movs	r3, #0
 8008142:	4610      	mov	r0, r2
 8008144:	4619      	mov	r1, r3
 8008146:	f7f8 fb2d 	bl	80007a4 <__aeabi_ddiv>
 800814a:	ec41 0b18 	vmov	d8, r0, r1
 800814e:	eeb0 0a48 	vmov.f32	s0, s16
 8008152:	eef0 0a68 	vmov.f32	s1, s17
 8008156:	ecbd 8b02 	vpop	{d8}
 800815a:	bd38      	pop	{r3, r4, r5, pc}

0800815c <__ieee754_sqrt>:
 800815c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008160:	ec55 4b10 	vmov	r4, r5, d0
 8008164:	4e67      	ldr	r6, [pc, #412]	; (8008304 <__ieee754_sqrt+0x1a8>)
 8008166:	43ae      	bics	r6, r5
 8008168:	ee10 0a10 	vmov	r0, s0
 800816c:	ee10 2a10 	vmov	r2, s0
 8008170:	4629      	mov	r1, r5
 8008172:	462b      	mov	r3, r5
 8008174:	d10d      	bne.n	8008192 <__ieee754_sqrt+0x36>
 8008176:	f7f8 f9eb 	bl	8000550 <__aeabi_dmul>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4620      	mov	r0, r4
 8008180:	4629      	mov	r1, r5
 8008182:	f7f8 f82f 	bl	80001e4 <__adddf3>
 8008186:	4604      	mov	r4, r0
 8008188:	460d      	mov	r5, r1
 800818a:	ec45 4b10 	vmov	d0, r4, r5
 800818e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008192:	2d00      	cmp	r5, #0
 8008194:	dc0b      	bgt.n	80081ae <__ieee754_sqrt+0x52>
 8008196:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800819a:	4326      	orrs	r6, r4
 800819c:	d0f5      	beq.n	800818a <__ieee754_sqrt+0x2e>
 800819e:	b135      	cbz	r5, 80081ae <__ieee754_sqrt+0x52>
 80081a0:	f7f8 f81e 	bl	80001e0 <__aeabi_dsub>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	f7f8 fafc 	bl	80007a4 <__aeabi_ddiv>
 80081ac:	e7eb      	b.n	8008186 <__ieee754_sqrt+0x2a>
 80081ae:	1509      	asrs	r1, r1, #20
 80081b0:	f000 808d 	beq.w	80082ce <__ieee754_sqrt+0x172>
 80081b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081b8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80081bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081c0:	07c9      	lsls	r1, r1, #31
 80081c2:	bf5c      	itt	pl
 80081c4:	005b      	lslpl	r3, r3, #1
 80081c6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80081ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80081ce:	bf58      	it	pl
 80081d0:	0052      	lslpl	r2, r2, #1
 80081d2:	2500      	movs	r5, #0
 80081d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80081d8:	1076      	asrs	r6, r6, #1
 80081da:	0052      	lsls	r2, r2, #1
 80081dc:	f04f 0e16 	mov.w	lr, #22
 80081e0:	46ac      	mov	ip, r5
 80081e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081e6:	eb0c 0001 	add.w	r0, ip, r1
 80081ea:	4298      	cmp	r0, r3
 80081ec:	bfde      	ittt	le
 80081ee:	1a1b      	suble	r3, r3, r0
 80081f0:	eb00 0c01 	addle.w	ip, r0, r1
 80081f4:	186d      	addle	r5, r5, r1
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	f1be 0e01 	subs.w	lr, lr, #1
 80081fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008200:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008204:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008208:	d1ed      	bne.n	80081e6 <__ieee754_sqrt+0x8a>
 800820a:	4674      	mov	r4, lr
 800820c:	2720      	movs	r7, #32
 800820e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008212:	4563      	cmp	r3, ip
 8008214:	eb01 000e 	add.w	r0, r1, lr
 8008218:	dc02      	bgt.n	8008220 <__ieee754_sqrt+0xc4>
 800821a:	d113      	bne.n	8008244 <__ieee754_sqrt+0xe8>
 800821c:	4290      	cmp	r0, r2
 800821e:	d811      	bhi.n	8008244 <__ieee754_sqrt+0xe8>
 8008220:	2800      	cmp	r0, #0
 8008222:	eb00 0e01 	add.w	lr, r0, r1
 8008226:	da57      	bge.n	80082d8 <__ieee754_sqrt+0x17c>
 8008228:	f1be 0f00 	cmp.w	lr, #0
 800822c:	db54      	blt.n	80082d8 <__ieee754_sqrt+0x17c>
 800822e:	f10c 0801 	add.w	r8, ip, #1
 8008232:	eba3 030c 	sub.w	r3, r3, ip
 8008236:	4290      	cmp	r0, r2
 8008238:	bf88      	it	hi
 800823a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800823e:	1a12      	subs	r2, r2, r0
 8008240:	440c      	add	r4, r1
 8008242:	46c4      	mov	ip, r8
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	3f01      	subs	r7, #1
 8008248:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800824c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008250:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008254:	d1dd      	bne.n	8008212 <__ieee754_sqrt+0xb6>
 8008256:	4313      	orrs	r3, r2
 8008258:	d01b      	beq.n	8008292 <__ieee754_sqrt+0x136>
 800825a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008308 <__ieee754_sqrt+0x1ac>
 800825e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800830c <__ieee754_sqrt+0x1b0>
 8008262:	e9da 0100 	ldrd	r0, r1, [sl]
 8008266:	e9db 2300 	ldrd	r2, r3, [fp]
 800826a:	f7f7 ffb9 	bl	80001e0 <__aeabi_dsub>
 800826e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	4640      	mov	r0, r8
 8008278:	4649      	mov	r1, r9
 800827a:	f7f8 fbe5 	bl	8000a48 <__aeabi_dcmple>
 800827e:	b140      	cbz	r0, 8008292 <__ieee754_sqrt+0x136>
 8008280:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008284:	e9da 0100 	ldrd	r0, r1, [sl]
 8008288:	e9db 2300 	ldrd	r2, r3, [fp]
 800828c:	d126      	bne.n	80082dc <__ieee754_sqrt+0x180>
 800828e:	3501      	adds	r5, #1
 8008290:	463c      	mov	r4, r7
 8008292:	106a      	asrs	r2, r5, #1
 8008294:	0863      	lsrs	r3, r4, #1
 8008296:	07e9      	lsls	r1, r5, #31
 8008298:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800829c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80082a0:	bf48      	it	mi
 80082a2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80082a6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80082aa:	461c      	mov	r4, r3
 80082ac:	e76d      	b.n	800818a <__ieee754_sqrt+0x2e>
 80082ae:	0ad3      	lsrs	r3, r2, #11
 80082b0:	3815      	subs	r0, #21
 80082b2:	0552      	lsls	r2, r2, #21
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d0fa      	beq.n	80082ae <__ieee754_sqrt+0x152>
 80082b8:	02dc      	lsls	r4, r3, #11
 80082ba:	d50a      	bpl.n	80082d2 <__ieee754_sqrt+0x176>
 80082bc:	f1c1 0420 	rsb	r4, r1, #32
 80082c0:	fa22 f404 	lsr.w	r4, r2, r4
 80082c4:	1e4d      	subs	r5, r1, #1
 80082c6:	408a      	lsls	r2, r1
 80082c8:	4323      	orrs	r3, r4
 80082ca:	1b41      	subs	r1, r0, r5
 80082cc:	e772      	b.n	80081b4 <__ieee754_sqrt+0x58>
 80082ce:	4608      	mov	r0, r1
 80082d0:	e7f0      	b.n	80082b4 <__ieee754_sqrt+0x158>
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	3101      	adds	r1, #1
 80082d6:	e7ef      	b.n	80082b8 <__ieee754_sqrt+0x15c>
 80082d8:	46e0      	mov	r8, ip
 80082da:	e7aa      	b.n	8008232 <__ieee754_sqrt+0xd6>
 80082dc:	f7f7 ff82 	bl	80001e4 <__adddf3>
 80082e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4640      	mov	r0, r8
 80082ea:	4649      	mov	r1, r9
 80082ec:	f7f8 fba2 	bl	8000a34 <__aeabi_dcmplt>
 80082f0:	b120      	cbz	r0, 80082fc <__ieee754_sqrt+0x1a0>
 80082f2:	1ca0      	adds	r0, r4, #2
 80082f4:	bf08      	it	eq
 80082f6:	3501      	addeq	r5, #1
 80082f8:	3402      	adds	r4, #2
 80082fa:	e7ca      	b.n	8008292 <__ieee754_sqrt+0x136>
 80082fc:	3401      	adds	r4, #1
 80082fe:	f024 0401 	bic.w	r4, r4, #1
 8008302:	e7c6      	b.n	8008292 <__ieee754_sqrt+0x136>
 8008304:	7ff00000 	.word	0x7ff00000
 8008308:	200000a8 	.word	0x200000a8
 800830c:	200000b0 	.word	0x200000b0

08008310 <_init>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	bf00      	nop
 8008314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008316:	bc08      	pop	{r3}
 8008318:	469e      	mov	lr, r3
 800831a:	4770      	bx	lr

0800831c <_fini>:
 800831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831e:	bf00      	nop
 8008320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008322:	bc08      	pop	{r3}
 8008324:	469e      	mov	lr, r3
 8008326:	4770      	bx	lr
