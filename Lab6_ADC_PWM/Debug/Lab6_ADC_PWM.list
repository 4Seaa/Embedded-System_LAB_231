
Lab6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006954  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ffc  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ad8  08009ad8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ad8  08009ad8  00019ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ae0  08009ae0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ae0  08009ae0  00019ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ae4  08009ae4  00019ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08009ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000002a0  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002bc  200002bc  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014f00  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b6e  00000000  00000000  00034f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013e8  00000000  00000000  00038b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f5a  00000000  00000000  00039ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025160  00000000  00000000  0003ae42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b75e  00000000  00000000  0005ffa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc42b  00000000  00000000  0007b700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005270  00000000  00000000  00157b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0015cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ac4 	.word	0x08006ac4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08006ac4 	.word	0x08006ac4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b970 	b.w	8000d0c <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9e08      	ldr	r6, [sp, #32]
 8000a4a:	460d      	mov	r5, r1
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	460f      	mov	r7, r1
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d14a      	bne.n	8000aea <__udivmoddi4+0xa6>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4694      	mov	ip, r2
 8000a58:	d965      	bls.n	8000b26 <__udivmoddi4+0xe2>
 8000a5a:	fab2 f382 	clz	r3, r2
 8000a5e:	b143      	cbz	r3, 8000a72 <__udivmoddi4+0x2e>
 8000a60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a64:	f1c3 0220 	rsb	r2, r3, #32
 8000a68:	409f      	lsls	r7, r3
 8000a6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a6e:	4317      	orrs	r7, r2
 8000a70:	409c      	lsls	r4, r3
 8000a72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a76:	fa1f f58c 	uxth.w	r5, ip
 8000a7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a7e:	0c22      	lsrs	r2, r4, #16
 8000a80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a88:	fb01 f005 	mul.w	r0, r1, r5
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	d90a      	bls.n	8000aa6 <__udivmoddi4+0x62>
 8000a90:	eb1c 0202 	adds.w	r2, ip, r2
 8000a94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a98:	f080 811c 	bcs.w	8000cd4 <__udivmoddi4+0x290>
 8000a9c:	4290      	cmp	r0, r2
 8000a9e:	f240 8119 	bls.w	8000cd4 <__udivmoddi4+0x290>
 8000aa2:	3902      	subs	r1, #2
 8000aa4:	4462      	add	r2, ip
 8000aa6:	1a12      	subs	r2, r2, r0
 8000aa8:	b2a4      	uxth	r4, r4
 8000aaa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ab2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ab6:	fb00 f505 	mul.w	r5, r0, r5
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	d90a      	bls.n	8000ad4 <__udivmoddi4+0x90>
 8000abe:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ac6:	f080 8107 	bcs.w	8000cd8 <__udivmoddi4+0x294>
 8000aca:	42a5      	cmp	r5, r4
 8000acc:	f240 8104 	bls.w	8000cd8 <__udivmoddi4+0x294>
 8000ad0:	4464      	add	r4, ip
 8000ad2:	3802      	subs	r0, #2
 8000ad4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad8:	1b64      	subs	r4, r4, r5
 8000ada:	2100      	movs	r1, #0
 8000adc:	b11e      	cbz	r6, 8000ae6 <__udivmoddi4+0xa2>
 8000ade:	40dc      	lsrs	r4, r3
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0xbc>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	f000 80ed 	beq.w	8000cce <__udivmoddi4+0x28a>
 8000af4:	2100      	movs	r1, #0
 8000af6:	e9c6 0500 	strd	r0, r5, [r6]
 8000afa:	4608      	mov	r0, r1
 8000afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b00:	fab3 f183 	clz	r1, r3
 8000b04:	2900      	cmp	r1, #0
 8000b06:	d149      	bne.n	8000b9c <__udivmoddi4+0x158>
 8000b08:	42ab      	cmp	r3, r5
 8000b0a:	d302      	bcc.n	8000b12 <__udivmoddi4+0xce>
 8000b0c:	4282      	cmp	r2, r0
 8000b0e:	f200 80f8 	bhi.w	8000d02 <__udivmoddi4+0x2be>
 8000b12:	1a84      	subs	r4, r0, r2
 8000b14:	eb65 0203 	sbc.w	r2, r5, r3
 8000b18:	2001      	movs	r0, #1
 8000b1a:	4617      	mov	r7, r2
 8000b1c:	2e00      	cmp	r6, #0
 8000b1e:	d0e2      	beq.n	8000ae6 <__udivmoddi4+0xa2>
 8000b20:	e9c6 4700 	strd	r4, r7, [r6]
 8000b24:	e7df      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000b26:	b902      	cbnz	r2, 8000b2a <__udivmoddi4+0xe6>
 8000b28:	deff      	udf	#255	; 0xff
 8000b2a:	fab2 f382 	clz	r3, r2
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f040 8090 	bne.w	8000c54 <__udivmoddi4+0x210>
 8000b34:	1a8a      	subs	r2, r1, r2
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b44:	fb07 2015 	mls	r0, r7, r5, r2
 8000b48:	0c22      	lsrs	r2, r4, #16
 8000b4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b4e:	fb0e f005 	mul.w	r0, lr, r5
 8000b52:	4290      	cmp	r0, r2
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x124>
 8000b56:	eb1c 0202 	adds.w	r2, ip, r2
 8000b5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x122>
 8000b60:	4290      	cmp	r0, r2
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2b8>
 8000b66:	4645      	mov	r5, r8
 8000b68:	1a12      	subs	r2, r2, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b70:	fb07 2210 	mls	r2, r7, r0, r2
 8000b74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x14e>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x14c>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2c2>
 8000b90:	4610      	mov	r0, r2
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b9a:	e79f      	b.n	8000adc <__udivmoddi4+0x98>
 8000b9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ba0:	408b      	lsls	r3, r1
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa05 f401 	lsl.w	r4, r5, r1
 8000bae:	fa20 f307 	lsr.w	r3, r0, r7
 8000bb2:	40fd      	lsrs	r5, r7
 8000bb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb8:	4323      	orrs	r3, r4
 8000bba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bbe:	fa1f fe8c 	uxth.w	lr, ip
 8000bc2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bc6:	0c1c      	lsrs	r4, r3, #16
 8000bc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bcc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bd0:	42a5      	cmp	r5, r4
 8000bd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b0>
 8000bdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2b4>
 8000be8:	42a5      	cmp	r5, r4
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2b4>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4464      	add	r4, ip
 8000bf4:	1b64      	subs	r4, r4, r5
 8000bf6:	b29d      	uxth	r5, r3
 8000bf8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bfc:	fb09 4413 	mls	r4, r9, r3, r4
 8000c00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1da>
 8000c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2ac>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2ac>
 8000c1a:	3b02      	subs	r3, #2
 8000c1c:	4464      	add	r4, ip
 8000c1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c22:	fba3 9502 	umull	r9, r5, r3, r2
 8000c26:	eba4 040e 	sub.w	r4, r4, lr
 8000c2a:	42ac      	cmp	r4, r5
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46ae      	mov	lr, r5
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x29c>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x298>
 8000c34:	b156      	cbz	r6, 8000c4c <__udivmoddi4+0x208>
 8000c36:	ebb0 0208 	subs.w	r2, r0, r8
 8000c3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c42:	40ca      	lsrs	r2, r1
 8000c44:	40cc      	lsrs	r4, r1
 8000c46:	4317      	orrs	r7, r2
 8000c48:	e9c6 7400 	strd	r7, r4, [r6]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c54:	f1c3 0120 	rsb	r1, r3, #32
 8000c58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c60:	fa25 f101 	lsr.w	r1, r5, r1
 8000c64:	409d      	lsls	r5, r3
 8000c66:	432a      	orrs	r2, r5
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c74:	fb07 1510 	mls	r5, r7, r0, r1
 8000c78:	0c11      	lsrs	r1, r2, #16
 8000c7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c82:	428d      	cmp	r5, r1
 8000c84:	fa04 f403 	lsl.w	r4, r4, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x258>
 8000c8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000c94:	428d      	cmp	r5, r1
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	1b49      	subs	r1, r1, r5
 8000c9e:	b292      	uxth	r2, r2
 8000ca0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ca4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cac:	fb05 f10e 	mul.w	r1, r5, lr
 8000cb0:	4291      	cmp	r1, r2
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x282>
 8000cb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2a8>
 8000cbe:	4291      	cmp	r1, r2
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2a8>
 8000cc2:	3d02      	subs	r5, #2
 8000cc4:	4462      	add	r2, ip
 8000cc6:	1a52      	subs	r2, r2, r1
 8000cc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0xfc>
 8000cce:	4631      	mov	r1, r6
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	e708      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000cd4:	4639      	mov	r1, r7
 8000cd6:	e6e6      	b.n	8000aa6 <__udivmoddi4+0x62>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	e6fb      	b.n	8000ad4 <__udivmoddi4+0x90>
 8000cdc:	4548      	cmp	r0, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f0>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f0>
 8000cec:	4645      	mov	r5, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x282>
 8000cf0:	462b      	mov	r3, r5
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1da>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x258>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b0>
 8000cfc:	3d02      	subs	r5, #2
 8000cfe:	4462      	add	r2, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x124>
 8000d02:	4608      	mov	r0, r1
 8000d04:	e70a      	b.n	8000b1c <__udivmoddi4+0xd8>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x14e>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d16:	463b      	mov	r3, r7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d22:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d24:	4a3d      	ldr	r2, [pc, #244]	; (8000e1c <MX_ADC1_Init+0x10c>)
 8000d26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d28:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d2e:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d34:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3a:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d40:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d48:	4b33      	ldr	r3, [pc, #204]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d4e:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d50:	4a33      	ldr	r2, [pc, #204]	; (8000e20 <MX_ADC1_Init+0x110>)
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d54:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d5c:	2205      	movs	r2, #5
 8000d5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d6e:	482a      	ldr	r0, [pc, #168]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d70:	f001 ff72 	bl	8002c58 <HAL_ADC_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d7a:	f001 fbc3 	bl	8002504 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4822      	ldr	r0, [pc, #136]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000d90:	f002 f8d4 	bl	8002f3c <HAL_ADC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d9a:	f001 fbb3 	bl	8002504 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d9e:	2309      	movs	r3, #9
 8000da0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	4619      	mov	r1, r3
 8000daa:	481b      	ldr	r0, [pc, #108]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000dac:	f002 f8c6 	bl	8002f3c <HAL_ADC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000db6:	f001 fba5 	bl	8002504 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dba:	230a      	movs	r3, #10
 8000dbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4814      	ldr	r0, [pc, #80]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000dc8:	f002 f8b8 	bl	8002f3c <HAL_ADC_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000dd2:	f001 fb97 	bl	8002504 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000dd6:	230b      	movs	r3, #11
 8000dd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	4619      	mov	r1, r3
 8000de2:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000de4:	f002 f8aa 	bl	8002f3c <HAL_ADC_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000dee:	f001 fb89 	bl	8002504 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000df2:	230c      	movs	r3, #12
 8000df4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000df6:	2305      	movs	r3, #5
 8000df8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <MX_ADC1_Init+0x108>)
 8000e00:	f002 f89c 	bl	8002f3c <HAL_ADC_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e0a:	f001 fb7b 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000038 	.word	0x20000038
 8000e1c:	40012000 	.word	0x40012000
 8000e20:	0f000001 	.word	0x0f000001

08000e24 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a3c      	ldr	r2, [pc, #240]	; (8000f34 <HAL_ADC_MspInit+0x110>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d171      	bne.n	8000f2a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b3b      	ldr	r3, [pc, #236]	; (8000f38 <HAL_ADC_MspInit+0x114>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a3a      	ldr	r2, [pc, #232]	; (8000f38 <HAL_ADC_MspInit+0x114>)
 8000e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <HAL_ADC_MspInit+0x114>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <HAL_ADC_MspInit+0x114>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a33      	ldr	r2, [pc, #204]	; (8000f38 <HAL_ADC_MspInit+0x114>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <HAL_ADC_MspInit+0x114>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <HAL_ADC_MspInit+0x114>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a2c      	ldr	r2, [pc, #176]	; (8000f38 <HAL_ADC_MspInit+0x114>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <HAL_ADC_MspInit+0x114>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4823      	ldr	r0, [pc, #140]	; (8000f3c <HAL_ADC_MspInit+0x118>)
 8000eae:	f002 ff67 	bl	8003d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481e      	ldr	r0, [pc, #120]	; (8000f40 <HAL_ADC_MspInit+0x11c>)
 8000ec6:	f002 ff5b 	bl	8003d80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <HAL_ADC_MspInit+0x120>)
 8000ecc:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <HAL_ADC_MspInit+0x124>)
 8000ece:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_ADC_MspInit+0x120>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <HAL_ADC_MspInit+0x120>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_ADC_MspInit+0x120>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_ADC_MspInit+0x120>)
 8000ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_ADC_MspInit+0x120>)
 8000eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ef0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_ADC_MspInit+0x120>)
 8000ef4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_ADC_MspInit+0x120>)
 8000efc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_ADC_MspInit+0x120>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_ADC_MspInit+0x120>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f0e:	480d      	ldr	r0, [pc, #52]	; (8000f44 <HAL_ADC_MspInit+0x120>)
 8000f10:	f002 fbc6 	bl	80036a0 <HAL_DMA_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000f1a:	f001 faf3 	bl	8002504 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_ADC_MspInit+0x120>)
 8000f22:	639a      	str	r2, [r3, #56]	; 0x38
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_ADC_MspInit+0x120>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40012000 	.word	0x40012000
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	40020400 	.word	0x40020400
 8000f44:	20000080 	.word	0x20000080
 8000f48:	40026410 	.word	0x40026410

08000f4c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2108      	movs	r1, #8
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <button_init+0x14>)
 8000f56:	f003 f8af 	bl	80040b8 <HAL_GPIO_WritePin>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40020c00 	.word	0x40020c00

08000f64 <button_Scan>:

void button_Scan(){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2108      	movs	r1, #8
 8000f6e:	482f      	ldr	r0, [pc, #188]	; (800102c <button_Scan+0xc8>)
 8000f70:	f003 f8a2 	bl	80040b8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2108      	movs	r1, #8
 8000f78:	482c      	ldr	r0, [pc, #176]	; (800102c <button_Scan+0xc8>)
 8000f7a:	f003 f89d 	bl	80040b8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000f7e:	230a      	movs	r3, #10
 8000f80:	2202      	movs	r2, #2
 8000f82:	492b      	ldr	r1, [pc, #172]	; (8001030 <button_Scan+0xcc>)
 8000f84:	482b      	ldr	r0, [pc, #172]	; (8001034 <button_Scan+0xd0>)
 8000f86:	f004 f83e 	bl	8005006 <HAL_SPI_Receive>
	  int button_index = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f92:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	e03f      	b.n	800101a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db06      	blt.n	8000fae <button_Scan+0x4a>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	dc03      	bgt.n	8000fae <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e018      	b.n	8000fe0 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	dd07      	ble.n	8000fc4 <button_Scan+0x60>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	dc04      	bgt.n	8000fc4 <button_Scan+0x60>
			  button_index = 7 - i;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f1c3 0307 	rsb	r3, r3, #7
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	e00d      	b.n	8000fe0 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b07      	cmp	r3, #7
 8000fc8:	dd06      	ble.n	8000fd8 <button_Scan+0x74>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0b      	cmp	r3, #11
 8000fce:	dc03      	bgt.n	8000fd8 <button_Scan+0x74>
			  button_index = i + 4;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	e003      	b.n	8000fe0 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f1c3 0317 	rsb	r3, r3, #23
 8000fde:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <button_Scan+0xcc>)
 8000fe2:	881a      	ldrh	r2, [r3, #0]
 8000fe4:	897b      	ldrh	r3, [r7, #10]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d005      	beq.n	8000ffa <button_Scan+0x96>
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <button_Scan+0xd4>)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ff8:	e009      	b.n	800100e <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <button_Scan+0xd4>)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001002:	3301      	adds	r3, #1
 8001004:	b299      	uxth	r1, r3
 8001006:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <button_Scan+0xd4>)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800100e:	897b      	ldrh	r3, [r7, #10]
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3301      	adds	r3, #1
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	ddbc      	ble.n	8000f9a <button_Scan+0x36>
	  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40020c00 	.word	0x40020c00
 8001030:	20000100 	.word	0x20000100
 8001034:	200001d0 	.word	0x200001d0
 8001038:	200000e0 	.word	0x200000e0

0800103c <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001040:	2100      	movs	r1, #0
 8001042:	4802      	ldr	r0, [pc, #8]	; (800104c <buzzer_init+0x10>)
 8001044:	f004 fd20 	bl	8005a88 <HAL_TIM_PWM_Start>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000270 	.word	0x20000270

08001050 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <buzzer_SetVolume+0x28>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <buzzer_SetVolume+0x28>)
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <buzzer_SetVolume+0x2c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000102 	.word	0x20000102
 800107c:	20000270 	.word	0x20000270

08001080 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_DMA_Init+0x3c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <MX_DMA_Init+0x3c>)
 8001090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_DMA_Init+0x3c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	2038      	movs	r0, #56	; 0x38
 80010a8:	f002 fac3 	bl	8003632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010ac:	2038      	movs	r0, #56	; 0x38
 80010ae:	f002 fadc 	bl	800366a <HAL_NVIC_EnableIRQ>

}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800

080010c0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08e      	sub	sp, #56	; 0x38
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
 80010e8:	615a      	str	r2, [r3, #20]
 80010ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <MX_FSMC_Init+0xec>)
 80010ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80010f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <MX_FSMC_Init+0xec>)
 80010f6:	4a2e      	ldr	r2, [pc, #184]	; (80011b0 <MX_FSMC_Init+0xf0>)
 80010f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <MX_FSMC_Init+0xec>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001100:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <MX_FSMC_Init+0xec>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <MX_FSMC_Init+0xec>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <MX_FSMC_Init+0xec>)
 800110e:	2210      	movs	r2, #16
 8001110:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <MX_FSMC_Init+0xec>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <MX_FSMC_Init+0xec>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <MX_FSMC_Init+0xec>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_FSMC_Init+0xec>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <MX_FSMC_Init+0xec>)
 800112c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <MX_FSMC_Init+0xec>)
 8001134:	2200      	movs	r2, #0
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <MX_FSMC_Init+0xec>)
 800113a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800113e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_FSMC_Init+0xec>)
 8001142:	2200      	movs	r2, #0
 8001144:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_FSMC_Init+0xec>)
 8001148:	2200      	movs	r2, #0
 800114a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_FSMC_Init+0xec>)
 800114e:	2200      	movs	r2, #0
 8001150:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001152:	230f      	movs	r3, #15
 8001154:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001156:	230f      	movs	r3, #15
 8001158:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800115a:	233c      	movs	r3, #60	; 0x3c
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001162:	2310      	movs	r3, #16
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001166:	2311      	movs	r3, #17
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800116a:	2300      	movs	r3, #0
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800116e:	2308      	movs	r3, #8
 8001170:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001172:	230f      	movs	r3, #15
 8001174:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001176:	2309      	movs	r3, #9
 8001178:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800117e:	2310      	movs	r3, #16
 8001180:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001182:	2311      	movs	r3, #17
 8001184:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800118a:	463a      	mov	r2, r7
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <MX_FSMC_Init+0xec>)
 8001194:	f004 fb1a 	bl	80057cc <HAL_SRAM_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800119e:	f001 f9b1 	bl	8002504 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80011a2:	bf00      	nop
 80011a4:	3738      	adds	r7, #56	; 0x38
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000104 	.word	0x20000104
 80011b0:	a0000104 	.word	0xa0000104

080011b4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_FSMC_MspInit+0x88>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d131      	bne.n	8001234 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_FSMC_MspInit+0x88>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_FSMC_MspInit+0x8c>)
 80011dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_FSMC_MspInit+0x8c>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6393      	str	r3, [r2, #56]	; 0x38
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_FSMC_MspInit+0x8c>)
 80011e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80011f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80011f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001204:	230c      	movs	r3, #12
 8001206:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4619      	mov	r1, r3
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <HAL_FSMC_MspInit+0x90>)
 800120e:	f002 fdb7 	bl	8003d80 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001212:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001216:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001224:	230c      	movs	r3, #12
 8001226:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4806      	ldr	r0, [pc, #24]	; (8001248 <HAL_FSMC_MspInit+0x94>)
 800122e:	f002 fda7 	bl	8003d80 <HAL_GPIO_Init>
 8001232:	e000      	b.n	8001236 <HAL_FSMC_MspInit+0x82>
    return;
 8001234:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000154 	.word	0x20000154
 8001240:	40023800 	.word	0x40023800
 8001244:	40021000 	.word	0x40021000
 8001248:	40020c00 	.word	0x40020c00

0800124c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001254:	f7ff ffae 	bl	80011b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08e      	sub	sp, #56	; 0x38
 8001264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
 800127a:	4b76      	ldr	r3, [pc, #472]	; (8001454 <MX_GPIO_Init+0x1f4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a75      	ldr	r2, [pc, #468]	; (8001454 <MX_GPIO_Init+0x1f4>)
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b73      	ldr	r3, [pc, #460]	; (8001454 <MX_GPIO_Init+0x1f4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	623b      	str	r3, [r7, #32]
 8001290:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	4b6f      	ldr	r3, [pc, #444]	; (8001454 <MX_GPIO_Init+0x1f4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a6e      	ldr	r2, [pc, #440]	; (8001454 <MX_GPIO_Init+0x1f4>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b6c      	ldr	r3, [pc, #432]	; (8001454 <MX_GPIO_Init+0x1f4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	4b68      	ldr	r3, [pc, #416]	; (8001454 <MX_GPIO_Init+0x1f4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a67      	ldr	r2, [pc, #412]	; (8001454 <MX_GPIO_Init+0x1f4>)
 80012b8:	f043 0320 	orr.w	r3, r3, #32
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b65      	ldr	r3, [pc, #404]	; (8001454 <MX_GPIO_Init+0x1f4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	4b61      	ldr	r3, [pc, #388]	; (8001454 <MX_GPIO_Init+0x1f4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a60      	ldr	r2, [pc, #384]	; (8001454 <MX_GPIO_Init+0x1f4>)
 80012d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b5e      	ldr	r3, [pc, #376]	; (8001454 <MX_GPIO_Init+0x1f4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b5a      	ldr	r3, [pc, #360]	; (8001454 <MX_GPIO_Init+0x1f4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a59      	ldr	r2, [pc, #356]	; (8001454 <MX_GPIO_Init+0x1f4>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b57      	ldr	r3, [pc, #348]	; (8001454 <MX_GPIO_Init+0x1f4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b53      	ldr	r3, [pc, #332]	; (8001454 <MX_GPIO_Init+0x1f4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a52      	ldr	r2, [pc, #328]	; (8001454 <MX_GPIO_Init+0x1f4>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b50      	ldr	r3, [pc, #320]	; (8001454 <MX_GPIO_Init+0x1f4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b4c      	ldr	r3, [pc, #304]	; (8001454 <MX_GPIO_Init+0x1f4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a4b      	ldr	r2, [pc, #300]	; (8001454 <MX_GPIO_Init+0x1f4>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b49      	ldr	r3, [pc, #292]	; (8001454 <MX_GPIO_Init+0x1f4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b45      	ldr	r3, [pc, #276]	; (8001454 <MX_GPIO_Init+0x1f4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a44      	ldr	r2, [pc, #272]	; (8001454 <MX_GPIO_Init+0x1f4>)
 8001344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b42      	ldr	r3, [pc, #264]	; (8001454 <MX_GPIO_Init+0x1f4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2170      	movs	r1, #112	; 0x70
 800135a:	483f      	ldr	r0, [pc, #252]	; (8001458 <MX_GPIO_Init+0x1f8>)
 800135c:	f002 feac 	bl	80040b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001366:	483d      	ldr	r0, [pc, #244]	; (800145c <MX_GPIO_Init+0x1fc>)
 8001368:	f002 fea6 	bl	80040b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	483b      	ldr	r0, [pc, #236]	; (8001460 <MX_GPIO_Init+0x200>)
 8001372:	f002 fea1 	bl	80040b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137c:	4839      	ldr	r0, [pc, #228]	; (8001464 <MX_GPIO_Init+0x204>)
 800137e:	f002 fe9b 	bl	80040b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2108      	movs	r1, #8
 8001386:	4838      	ldr	r0, [pc, #224]	; (8001468 <MX_GPIO_Init+0x208>)
 8001388:	f002 fe96 	bl	80040b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800138c:	2370      	movs	r3, #112	; 0x70
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	482d      	ldr	r0, [pc, #180]	; (8001458 <MX_GPIO_Init+0x1f8>)
 80013a4:	f002 fcec 	bl	8003d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80013a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	4826      	ldr	r0, [pc, #152]	; (800145c <MX_GPIO_Init+0x1fc>)
 80013c2:	f002 fcdd 	bl	8003d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80013c6:	23c0      	movs	r3, #192	; 0xc0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	4619      	mov	r1, r3
 80013d8:	4822      	ldr	r0, [pc, #136]	; (8001464 <MX_GPIO_Init+0x204>)
 80013da:	f002 fcd1 	bl	8003d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80013de:	2330      	movs	r3, #48	; 0x30
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	481a      	ldr	r0, [pc, #104]	; (800145c <MX_GPIO_Init+0x1fc>)
 80013f2:	f002 fcc5 	bl	8003d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80013f6:	2340      	movs	r3, #64	; 0x40
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	4619      	mov	r1, r3
 800140c:	4814      	ldr	r0, [pc, #80]	; (8001460 <MX_GPIO_Init+0x200>)
 800140e:	f002 fcb7 	bl	8003d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	4619      	mov	r1, r3
 800142a:	480e      	ldr	r0, [pc, #56]	; (8001464 <MX_GPIO_Init+0x204>)
 800142c:	f002 fca8 	bl	8003d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001430:	2308      	movs	r3, #8
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <MX_GPIO_Init+0x208>)
 8001448:	f002 fc9a 	bl	8003d80 <HAL_GPIO_Init>

}
 800144c:	bf00      	nop
 800144e:	3738      	adds	r7, #56	; 0x38
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	40021000 	.word	0x40021000
 800145c:	40020800 	.word	0x40020800
 8001460:	40021800 	.word	0x40021800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020c00 	.word	0x40020c00

0800146c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MX_I2C1_Init+0x50>)
 8001472:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <MX_I2C1_Init+0x54>)
 8001474:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_I2C1_Init+0x50>)
 8001478:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_I2C1_Init+0x58>)
 800147a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_I2C1_Init+0x50>)
 800148a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <MX_I2C1_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_I2C1_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_I2C1_Init+0x50>)
 80014aa:	f002 fe1f 	bl	80040ec <HAL_I2C_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014b4:	f001 f826 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000158 	.word	0x20000158
 80014c0:	40005400 	.word	0x40005400
 80014c4:	000186a0 	.word	0x000186a0

080014c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a19      	ldr	r2, [pc, #100]	; (800154c <HAL_I2C_MspInit+0x84>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12b      	bne.n	8001542 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_I2C_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_I2C_MspInit+0x88>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_I2C_MspInit+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001506:	23c0      	movs	r3, #192	; 0xc0
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150a:	2312      	movs	r3, #18
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001516:	2304      	movs	r3, #4
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 8001522:	f002 fc2d 	bl	8003d80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_I2C_MspInit+0x88>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_I2C_MspInit+0x88>)
 8001530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_I2C_MspInit+0x88>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40005400 	.word	0x40005400
 8001550:	40023800 	.word	0x40023800
 8001554:	40020400 	.word	0x40020400

08001558 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <LCD_WR_REG+0x1c>)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	8013      	strh	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	600ffffe 	.word	0x600ffffe

08001578 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001582:	4a04      	ldr	r2, [pc, #16]	; (8001594 <LCD_WR_DATA+0x1c>)
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	8053      	strh	r3, [r2, #2]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	600ffffe 	.word	0x600ffffe

08001598 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <LCD_RD_DATA+0x20>)
 80015a0:	885b      	ldrh	r3, [r3, #2]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	b29b      	uxth	r3, r3
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	600ffffe 	.word	0x600ffffe

080015bc <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4604      	mov	r4, r0
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4623      	mov	r3, r4
 80015cc:	80fb      	strh	r3, [r7, #6]
 80015ce:	4603      	mov	r3, r0
 80015d0:	80bb      	strh	r3, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	807b      	strh	r3, [r7, #2]
 80015d6:	4613      	mov	r3, r2
 80015d8:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80015da:	202a      	movs	r0, #42	; 0x2a
 80015dc:	f7ff ffbc 	bl	8001558 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ffc6 	bl	8001578 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ffc0 	bl	8001578 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ffba 	bl	8001578 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001604:	887b      	ldrh	r3, [r7, #2]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	b29b      	uxth	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ffb4 	bl	8001578 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001610:	202b      	movs	r0, #43	; 0x2b
 8001612:	f7ff ffa1 	bl	8001558 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001616:	88bb      	ldrh	r3, [r7, #4]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	b29b      	uxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ffab 	bl	8001578 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001622:	88bb      	ldrh	r3, [r7, #4]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	b29b      	uxth	r3, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ffa5 	bl	8001578 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800162e:	883b      	ldrh	r3, [r7, #0]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b29b      	uxth	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff9f 	bl	8001578 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800163a:	883b      	ldrh	r3, [r7, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff99 	bl	8001578 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001646:	202c      	movs	r0, #44	; 0x2c
 8001648:	f7ff ff86 	bl	8001558 <LCD_WR_REG>
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bd90      	pop	{r4, r7, pc}

08001654 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <lcd_Clear+0x60>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	3b01      	subs	r3, #1
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <lcd_Clear+0x60>)
 8001668:	885b      	ldrh	r3, [r3, #2]
 800166a:	3b01      	subs	r3, #1
 800166c:	b29b      	uxth	r3, r3
 800166e:	2100      	movs	r1, #0
 8001670:	2000      	movs	r0, #0
 8001672:	f7ff ffa3 	bl	80015bc <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001676:	2300      	movs	r3, #0
 8001678:	81fb      	strh	r3, [r7, #14]
 800167a:	e011      	b.n	80016a0 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 800167c:	2300      	movs	r3, #0
 800167e:	81bb      	strh	r3, [r7, #12]
 8001680:	e006      	b.n	8001690 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff77 	bl	8001578 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800168a:	89bb      	ldrh	r3, [r7, #12]
 800168c:	3301      	adds	r3, #1
 800168e:	81bb      	strh	r3, [r7, #12]
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <lcd_Clear+0x60>)
 8001692:	885b      	ldrh	r3, [r3, #2]
 8001694:	89ba      	ldrh	r2, [r7, #12]
 8001696:	429a      	cmp	r2, r3
 8001698:	d3f3      	bcc.n	8001682 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	3301      	adds	r3, #1
 800169e:	81fb      	strh	r3, [r7, #14]
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <lcd_Clear+0x60>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	89fa      	ldrh	r2, [r7, #14]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d3e8      	bcc.n	800167c <lcd_Clear+0x28>
		}
	}
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200001ac 	.word	0x200001ac

080016b8 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
 80016c2:	460b      	mov	r3, r1
 80016c4:	80bb      	strh	r3, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80016ca:	88bb      	ldrh	r3, [r7, #4]
 80016cc:	88fa      	ldrh	r2, [r7, #6]
 80016ce:	88b9      	ldrh	r1, [r7, #4]
 80016d0:	88f8      	ldrh	r0, [r7, #6]
 80016d2:	f7ff ff73 	bl	80015bc <lcd_AddressSet>
	LCD_WR_DATA(color);
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff4d 	bl	8001578 <LCD_WR_DATA>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4604      	mov	r4, r0
 80016f0:	4608      	mov	r0, r1
 80016f2:	4611      	mov	r1, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	80fb      	strh	r3, [r7, #6]
 80016fa:	4603      	mov	r3, r0
 80016fc:	80bb      	strh	r3, [r7, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	70fb      	strb	r3, [r7, #3]
 8001702:	4613      	mov	r3, r2
 8001704:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001706:	2300      	movs	r3, #0
 8001708:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800170e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	bf14      	ite	ne
 800172a:	2301      	movne	r3, #1
 800172c:	2300      	moveq	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4413      	add	r3, r2
 8001732:	b29a      	uxth	r2, r3
 8001734:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001738:	b29b      	uxth	r3, r3
 800173a:	fb12 f303 	smulbb	r3, r2, r3
 800173e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	3b20      	subs	r3, #32
 8001744:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	b29a      	uxth	r2, r3
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	4413      	add	r3, r2
 800174e:	b29b      	uxth	r3, r3
 8001750:	3b01      	subs	r3, #1
 8001752:	b29c      	uxth	r4, r3
 8001754:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001758:	b29a      	uxth	r2, r3
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	b29b      	uxth	r3, r3
 8001760:	3b01      	subs	r3, #1
 8001762:	b29b      	uxth	r3, r3
 8001764:	88b9      	ldrh	r1, [r7, #4]
 8001766:	88f8      	ldrh	r0, [r7, #6]
 8001768:	4622      	mov	r2, r4
 800176a:	f7ff ff27 	bl	80015bc <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800176e:	2300      	movs	r3, #0
 8001770:	827b      	strh	r3, [r7, #18]
 8001772:	e07a      	b.n	800186a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001774:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001778:	2b0c      	cmp	r3, #12
 800177a:	d028      	beq.n	80017ce <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 800177c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001780:	2b10      	cmp	r3, #16
 8001782:	d108      	bne.n	8001796 <lcd_ShowChar+0xae>
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	8a7b      	ldrh	r3, [r7, #18]
 8001788:	493c      	ldr	r1, [pc, #240]	; (800187c <lcd_ShowChar+0x194>)
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	440a      	add	r2, r1
 800178e:	4413      	add	r3, r2
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	75fb      	strb	r3, [r7, #23]
 8001794:	e01b      	b.n	80017ce <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001796:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800179a:	2b18      	cmp	r3, #24
 800179c:	d10b      	bne.n	80017b6 <lcd_ShowChar+0xce>
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	8a79      	ldrh	r1, [r7, #18]
 80017a2:	4837      	ldr	r0, [pc, #220]	; (8001880 <lcd_ShowChar+0x198>)
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	4403      	add	r3, r0
 80017ae:	440b      	add	r3, r1
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	75fb      	strb	r3, [r7, #23]
 80017b4:	e00b      	b.n	80017ce <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80017b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	d15a      	bne.n	8001874 <lcd_ShowChar+0x18c>
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	8a7b      	ldrh	r3, [r7, #18]
 80017c2:	4930      	ldr	r1, [pc, #192]	; (8001884 <lcd_ShowChar+0x19c>)
 80017c4:	0192      	lsls	r2, r2, #6
 80017c6:	440a      	add	r2, r1
 80017c8:	4413      	add	r3, r2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	75bb      	strb	r3, [r7, #22]
 80017d2:	e044      	b.n	800185e <lcd_ShowChar+0x176>
		{
			if(!mode)
 80017d4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d120      	bne.n	800181e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80017dc:	7dfa      	ldrb	r2, [r7, #23]
 80017de:	7dbb      	ldrb	r3, [r7, #22]
 80017e0:	fa42 f303 	asr.w	r3, r2, r3
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <lcd_ShowChar+0x10e>
 80017ec:	883b      	ldrh	r3, [r7, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fec2 	bl	8001578 <LCD_WR_DATA>
 80017f4:	e003      	b.n	80017fe <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80017f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff febd 	bl	8001578 <LCD_WR_DATA>
				m++;
 80017fe:	7d7b      	ldrb	r3, [r7, #21]
 8001800:	3301      	adds	r3, #1
 8001802:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001804:	7d7b      	ldrb	r3, [r7, #21]
 8001806:	7bfa      	ldrb	r2, [r7, #15]
 8001808:	fbb3 f1f2 	udiv	r1, r3, r2
 800180c:	fb01 f202 	mul.w	r2, r1, r2
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d11f      	bne.n	8001858 <lcd_ShowChar+0x170>
				{
					m=0;
 8001818:	2300      	movs	r3, #0
 800181a:	757b      	strb	r3, [r7, #21]
					break;
 800181c:	e022      	b.n	8001864 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800181e:	7dfa      	ldrb	r2, [r7, #23]
 8001820:	7dbb      	ldrb	r3, [r7, #22]
 8001822:	fa42 f303 	asr.w	r3, r2, r3
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <lcd_ShowChar+0x152>
 800182e:	883a      	ldrh	r2, [r7, #0]
 8001830:	88b9      	ldrh	r1, [r7, #4]
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff3f 	bl	80016b8 <lcd_DrawPoint>
				x++;
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	3301      	adds	r3, #1
 800183e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001840:	88fa      	ldrh	r2, [r7, #6]
 8001842:	8a3b      	ldrh	r3, [r7, #16]
 8001844:	1ad2      	subs	r2, r2, r3
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	429a      	cmp	r2, r3
 800184a:	d105      	bne.n	8001858 <lcd_ShowChar+0x170>
				{
					x=x0;
 800184c:	8a3b      	ldrh	r3, [r7, #16]
 800184e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001850:	88bb      	ldrh	r3, [r7, #4]
 8001852:	3301      	adds	r3, #1
 8001854:	80bb      	strh	r3, [r7, #4]
					break;
 8001856:	e005      	b.n	8001864 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001858:	7dbb      	ldrb	r3, [r7, #22]
 800185a:	3301      	adds	r3, #1
 800185c:	75bb      	strb	r3, [r7, #22]
 800185e:	7dbb      	ldrb	r3, [r7, #22]
 8001860:	2b07      	cmp	r3, #7
 8001862:	d9b7      	bls.n	80017d4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001864:	8a7b      	ldrh	r3, [r7, #18]
 8001866:	3301      	adds	r3, #1
 8001868:	827b      	strh	r3, [r7, #18]
 800186a:	8a7a      	ldrh	r2, [r7, #18]
 800186c:	89bb      	ldrh	r3, [r7, #12]
 800186e:	429a      	cmp	r2, r3
 8001870:	d380      	bcc.n	8001774 <lcd_ShowChar+0x8c>
 8001872:	e000      	b.n	8001876 <lcd_ShowChar+0x18e>
		else return;
 8001874:	bf00      	nop
				}
			}
		}
	}
}
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	08006b38 	.word	0x08006b38
 8001880:	08007128 	.word	0x08007128
 8001884:	080082f8 	.word	0x080082f8

08001888 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	4613      	mov	r3, r2
 8001896:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001898:	2301      	movs	r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800189c:	e004      	b.n	80018a8 <mypow+0x20>
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	79bb      	ldrb	r3, [r7, #6]
 80018aa:	1e5a      	subs	r2, r3, #1
 80018ac:	71ba      	strb	r2, [r7, #6]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f5      	bne.n	800189e <mypow+0x16>
	return result;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af04      	add	r7, sp, #16
 80018c6:	4604      	mov	r4, r0
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	4623      	mov	r3, r4
 80018d0:	80fb      	strh	r3, [r7, #6]
 80018d2:	4603      	mov	r3, r0
 80018d4:	80bb      	strh	r3, [r7, #4]
 80018d6:	460b      	mov	r3, r1
 80018d8:	807b      	strh	r3, [r7, #2]
 80018da:	4613      	mov	r3, r2
 80018dc:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80018de:	2300      	movs	r3, #0
 80018e0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80018e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	e059      	b.n	80019a4 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80018f0:	887c      	ldrh	r4, [r7, #2]
 80018f2:	787a      	ldrb	r2, [r7, #1]
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	4619      	mov	r1, r3
 8001900:	200a      	movs	r0, #10
 8001902:	f7ff ffc1 	bl	8001888 <mypow>
 8001906:	4603      	mov	r3, r0
 8001908:	fbb4 f1f3 	udiv	r1, r4, r3
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <lcd_ShowIntNum+0xf8>)
 800190e:	fba3 2301 	umull	r2, r3, r3, r1
 8001912:	08da      	lsrs	r2, r3, #3
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	1aca      	subs	r2, r1, r3
 800191e:	4613      	mov	r3, r2
 8001920:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001922:	7bbb      	ldrb	r3, [r7, #14]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d121      	bne.n	800196c <lcd_ShowIntNum+0xac>
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	787b      	ldrb	r3, [r7, #1]
 800192c:	3b01      	subs	r3, #1
 800192e:	429a      	cmp	r2, r3
 8001930:	da1c      	bge.n	800196c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001932:	7b3b      	ldrb	r3, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d117      	bne.n	8001968 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	b29a      	uxth	r2, r3
 800193c:	7b7b      	ldrb	r3, [r7, #13]
 800193e:	b29b      	uxth	r3, r3
 8001940:	fb12 f303 	smulbb	r3, r2, r3
 8001944:	b29a      	uxth	r2, r3
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	4413      	add	r3, r2
 800194a:	b298      	uxth	r0, r3
 800194c:	8c3a      	ldrh	r2, [r7, #32]
 800194e:	88b9      	ldrh	r1, [r7, #4]
 8001950:	2300      	movs	r3, #0
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	4613      	mov	r3, r2
 8001960:	2220      	movs	r2, #32
 8001962:	f7ff fec1 	bl	80016e8 <lcd_ShowChar>
				continue;
 8001966:	e01a      	b.n	800199e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001968:	2301      	movs	r3, #1
 800196a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	b29a      	uxth	r2, r3
 8001970:	7b7b      	ldrb	r3, [r7, #13]
 8001972:	b29b      	uxth	r3, r3
 8001974:	fb12 f303 	smulbb	r3, r2, r3
 8001978:	b29a      	uxth	r2, r3
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	4413      	add	r3, r2
 800197e:	b298      	uxth	r0, r3
 8001980:	7b3b      	ldrb	r3, [r7, #12]
 8001982:	3330      	adds	r3, #48	; 0x30
 8001984:	b2da      	uxtb	r2, r3
 8001986:	8c3c      	ldrh	r4, [r7, #32]
 8001988:	88b9      	ldrh	r1, [r7, #4]
 800198a:	2300      	movs	r3, #0
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4623      	mov	r3, r4
 800199a:	f7ff fea5 	bl	80016e8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	3301      	adds	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	787b      	ldrb	r3, [r7, #1]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3a1      	bcc.n	80018f0 <lcd_ShowIntNum+0x30>
	}
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	cccccccd 	.word	0xcccccccd

080019bc <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b08b      	sub	sp, #44	; 0x2c
 80019c0:	af04      	add	r7, sp, #16
 80019c2:	4604      	mov	r4, r0
 80019c4:	4608      	mov	r0, r1
 80019c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80019ca:	4611      	mov	r1, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	81fb      	strh	r3, [r7, #14]
 80019d2:	4603      	mov	r3, r0
 80019d4:	81bb      	strh	r3, [r7, #12]
 80019d6:	460b      	mov	r3, r1
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	4613      	mov	r3, r2
 80019dc:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 80019de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 80019e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ea:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001ac4 <lcd_ShowFloatNum+0x108>
 80019ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f6:	ee17 3a90 	vmov	r3, s15
 80019fa:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	75fb      	strb	r3, [r7, #23]
 8001a00:	e057      	b.n	8001ab2 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001a02:	8abc      	ldrh	r4, [r7, #20]
 8001a04:	79fa      	ldrb	r2, [r7, #7]
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4619      	mov	r1, r3
 8001a12:	200a      	movs	r0, #10
 8001a14:	f7ff ff38 	bl	8001888 <mypow>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	fbb4 f1f3 	udiv	r1, r4, r3
 8001a1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <lcd_ShowFloatNum+0x10c>)
 8001a20:	fba3 2301 	umull	r2, r3, r3, r1
 8001a24:	08da      	lsrs	r2, r3, #3
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	1aca      	subs	r2, r1, r3
 8001a30:	4613      	mov	r3, r2
 8001a32:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001a34:	7dfa      	ldrb	r2, [r7, #23]
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	3b02      	subs	r3, #2
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d11d      	bne.n	8001a7a <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	3b02      	subs	r3, #2
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	7dbb      	ldrb	r3, [r7, #22]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	fb12 f303 	smulbb	r3, r2, r3
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	89fb      	ldrh	r3, [r7, #14]
 8001a50:	4413      	add	r3, r2
 8001a52:	b298      	uxth	r0, r3
 8001a54:	88ba      	ldrh	r2, [r7, #4]
 8001a56:	89b9      	ldrh	r1, [r7, #12]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9302      	str	r3, [sp, #8]
 8001a5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	4613      	mov	r3, r2
 8001a68:	222e      	movs	r2, #46	; 0x2e
 8001a6a:	f7ff fe3d 	bl	80016e8 <lcd_ShowChar>
			t++;
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	3301      	adds	r3, #1
 8001a72:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	3301      	adds	r3, #1
 8001a78:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001a7a:	7dfb      	ldrb	r3, [r7, #23]
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	7dbb      	ldrb	r3, [r7, #22]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	fb12 f303 	smulbb	r3, r2, r3
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	89fb      	ldrh	r3, [r7, #14]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b298      	uxth	r0, r3
 8001a8e:	7cfb      	ldrb	r3, [r7, #19]
 8001a90:	3330      	adds	r3, #48	; 0x30
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	88bc      	ldrh	r4, [r7, #4]
 8001a96:	89b9      	ldrh	r1, [r7, #12]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9302      	str	r3, [sp, #8]
 8001a9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	4623      	mov	r3, r4
 8001aa8:	f7ff fe1e 	bl	80016e8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
 8001ab2:	7dfa      	ldrb	r2, [r7, #23]
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d3a3      	bcc.n	8001a02 <lcd_ShowFloatNum+0x46>
	}
}
 8001aba:	bf00      	nop
 8001abc:	bf00      	nop
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	42c80000 	.word	0x42c80000
 8001ac8:	cccccccd 	.word	0xcccccccd

08001acc <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <lcd_SetDir+0x44>)
 8001ae8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001aec:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <lcd_SetDir+0x44>)
 8001af0:	22f0      	movs	r2, #240	; 0xf0
 8001af2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001af4:	e006      	b.n	8001b04 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <lcd_SetDir+0x44>)
 8001af8:	22f0      	movs	r2, #240	; 0xf0
 8001afa:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <lcd_SetDir+0x44>)
 8001afe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b02:	805a      	strh	r2, [r3, #2]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	200001ac 	.word	0x200001ac

08001b14 <lcd_init>:


void lcd_init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1e:	48aa      	ldr	r0, [pc, #680]	; (8001dc8 <lcd_init+0x2b4>)
 8001b20:	f002 faca 	bl	80040b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001b24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b28:	f001 f872 	bl	8002c10 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b32:	48a5      	ldr	r0, [pc, #660]	; (8001dc8 <lcd_init+0x2b4>)
 8001b34:	f002 fac0 	bl	80040b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001b38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b3c:	f001 f868 	bl	8002c10 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff ffc3 	bl	8001acc <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001b46:	20d3      	movs	r0, #211	; 0xd3
 8001b48:	f7ff fd06 	bl	8001558 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001b4c:	f7ff fd24 	bl	8001598 <LCD_RD_DATA>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b9d      	ldr	r3, [pc, #628]	; (8001dcc <lcd_init+0x2b8>)
 8001b56:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001b58:	f7ff fd1e 	bl	8001598 <LCD_RD_DATA>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b9a      	ldr	r3, [pc, #616]	; (8001dcc <lcd_init+0x2b8>)
 8001b62:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001b64:	f7ff fd18 	bl	8001598 <LCD_RD_DATA>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b97      	ldr	r3, [pc, #604]	; (8001dcc <lcd_init+0x2b8>)
 8001b6e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001b70:	4b96      	ldr	r3, [pc, #600]	; (8001dcc <lcd_init+0x2b8>)
 8001b72:	889b      	ldrh	r3, [r3, #4]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4b94      	ldr	r3, [pc, #592]	; (8001dcc <lcd_init+0x2b8>)
 8001b7a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001b7c:	f7ff fd0c 	bl	8001598 <LCD_RD_DATA>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b91      	ldr	r3, [pc, #580]	; (8001dcc <lcd_init+0x2b8>)
 8001b86:	889b      	ldrh	r3, [r3, #4]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	4b8f      	ldr	r3, [pc, #572]	; (8001dcc <lcd_init+0x2b8>)
 8001b8e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001b90:	20cf      	movs	r0, #207	; 0xcf
 8001b92:	f7ff fce1 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7ff fcee 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001b9c:	20c1      	movs	r0, #193	; 0xc1
 8001b9e:	f7ff fceb 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001ba2:	2030      	movs	r0, #48	; 0x30
 8001ba4:	f7ff fce8 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001ba8:	20ed      	movs	r0, #237	; 0xed
 8001baa:	f7ff fcd5 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001bae:	2064      	movs	r0, #100	; 0x64
 8001bb0:	f7ff fce2 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f7ff fcdf 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001bba:	2012      	movs	r0, #18
 8001bbc:	f7ff fcdc 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001bc0:	2081      	movs	r0, #129	; 0x81
 8001bc2:	f7ff fcd9 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001bc6:	20e8      	movs	r0, #232	; 0xe8
 8001bc8:	f7ff fcc6 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001bcc:	2085      	movs	r0, #133	; 0x85
 8001bce:	f7ff fcd3 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001bd2:	2010      	movs	r0, #16
 8001bd4:	f7ff fcd0 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001bd8:	207a      	movs	r0, #122	; 0x7a
 8001bda:	f7ff fccd 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001bde:	20cb      	movs	r0, #203	; 0xcb
 8001be0:	f7ff fcba 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001be4:	2039      	movs	r0, #57	; 0x39
 8001be6:	f7ff fcc7 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001bea:	202c      	movs	r0, #44	; 0x2c
 8001bec:	f7ff fcc4 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff fcc1 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001bf6:	2034      	movs	r0, #52	; 0x34
 8001bf8:	f7ff fcbe 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	f7ff fcbb 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001c02:	20f7      	movs	r0, #247	; 0xf7
 8001c04:	f7ff fca8 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001c08:	2020      	movs	r0, #32
 8001c0a:	f7ff fcb5 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001c0e:	20ea      	movs	r0, #234	; 0xea
 8001c10:	f7ff fca2 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff fcaf 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7ff fcac 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001c20:	20c0      	movs	r0, #192	; 0xc0
 8001c22:	f7ff fc99 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001c26:	201b      	movs	r0, #27
 8001c28:	f7ff fca6 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001c2c:	20c1      	movs	r0, #193	; 0xc1
 8001c2e:	f7ff fc93 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001c32:	2001      	movs	r0, #1
 8001c34:	f7ff fca0 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001c38:	20c5      	movs	r0, #197	; 0xc5
 8001c3a:	f7ff fc8d 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001c3e:	2030      	movs	r0, #48	; 0x30
 8001c40:	f7ff fc9a 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001c44:	2030      	movs	r0, #48	; 0x30
 8001c46:	f7ff fc97 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001c4a:	20c7      	movs	r0, #199	; 0xc7
 8001c4c:	f7ff fc84 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001c50:	20b7      	movs	r0, #183	; 0xb7
 8001c52:	f7ff fc91 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001c56:	2036      	movs	r0, #54	; 0x36
 8001c58:	f7ff fc7e 	bl	8001558 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001c5c:	2008      	movs	r0, #8
 8001c5e:	f7ff fc8b 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001c62:	203a      	movs	r0, #58	; 0x3a
 8001c64:	f7ff fc78 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001c68:	2055      	movs	r0, #85	; 0x55
 8001c6a:	f7ff fc85 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001c6e:	20b1      	movs	r0, #177	; 0xb1
 8001c70:	f7ff fc72 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff fc7f 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001c7a:	201a      	movs	r0, #26
 8001c7c:	f7ff fc7c 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001c80:	20b6      	movs	r0, #182	; 0xb6
 8001c82:	f7ff fc69 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001c86:	200a      	movs	r0, #10
 8001c88:	f7ff fc76 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001c8c:	20a2      	movs	r0, #162	; 0xa2
 8001c8e:	f7ff fc73 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001c92:	20f2      	movs	r0, #242	; 0xf2
 8001c94:	f7ff fc60 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff fc6d 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001c9e:	2026      	movs	r0, #38	; 0x26
 8001ca0:	f7ff fc5a 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff fc67 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001caa:	20e0      	movs	r0, #224	; 0xe0
 8001cac:	f7ff fc54 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001cb0:	200f      	movs	r0, #15
 8001cb2:	f7ff fc61 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001cb6:	202a      	movs	r0, #42	; 0x2a
 8001cb8:	f7ff fc5e 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001cbc:	2028      	movs	r0, #40	; 0x28
 8001cbe:	f7ff fc5b 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001cc2:	2008      	movs	r0, #8
 8001cc4:	f7ff fc58 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001cc8:	200e      	movs	r0, #14
 8001cca:	f7ff fc55 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001cce:	2008      	movs	r0, #8
 8001cd0:	f7ff fc52 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001cd4:	2054      	movs	r0, #84	; 0x54
 8001cd6:	f7ff fc4f 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001cda:	20a9      	movs	r0, #169	; 0xa9
 8001cdc:	f7ff fc4c 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001ce0:	2043      	movs	r0, #67	; 0x43
 8001ce2:	f7ff fc49 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001ce6:	200a      	movs	r0, #10
 8001ce8:	f7ff fc46 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001cec:	200f      	movs	r0, #15
 8001cee:	f7ff fc43 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f7ff fc40 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff fc3d 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff fc3a 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d04:	2000      	movs	r0, #0
 8001d06:	f7ff fc37 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001d0a:	20e1      	movs	r0, #225	; 0xe1
 8001d0c:	f7ff fc24 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7ff fc31 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001d16:	2015      	movs	r0, #21
 8001d18:	f7ff fc2e 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001d1c:	2017      	movs	r0, #23
 8001d1e:	f7ff fc2b 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001d22:	2007      	movs	r0, #7
 8001d24:	f7ff fc28 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001d28:	2011      	movs	r0, #17
 8001d2a:	f7ff fc25 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001d2e:	2006      	movs	r0, #6
 8001d30:	f7ff fc22 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001d34:	202b      	movs	r0, #43	; 0x2b
 8001d36:	f7ff fc1f 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001d3a:	2056      	movs	r0, #86	; 0x56
 8001d3c:	f7ff fc1c 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001d40:	203c      	movs	r0, #60	; 0x3c
 8001d42:	f7ff fc19 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001d46:	2005      	movs	r0, #5
 8001d48:	f7ff fc16 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d4c:	2010      	movs	r0, #16
 8001d4e:	f7ff fc13 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001d52:	200f      	movs	r0, #15
 8001d54:	f7ff fc10 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001d58:	203f      	movs	r0, #63	; 0x3f
 8001d5a:	f7ff fc0d 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001d5e:	203f      	movs	r0, #63	; 0x3f
 8001d60:	f7ff fc0a 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001d64:	200f      	movs	r0, #15
 8001d66:	f7ff fc07 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001d6a:	202b      	movs	r0, #43	; 0x2b
 8001d6c:	f7ff fbf4 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff fc01 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f7ff fbfe 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff fbfb 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001d82:	203f      	movs	r0, #63	; 0x3f
 8001d84:	f7ff fbf8 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001d88:	202a      	movs	r0, #42	; 0x2a
 8001d8a:	f7ff fbe5 	bl	8001558 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7ff fbf2 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff fbef 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff fbec 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001da0:	20ef      	movs	r0, #239	; 0xef
 8001da2:	f7ff fbe9 	bl	8001578 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001da6:	2011      	movs	r0, #17
 8001da8:	f7ff fbd6 	bl	8001558 <LCD_WR_REG>
	HAL_Delay(120);
 8001dac:	2078      	movs	r0, #120	; 0x78
 8001dae:	f000 ff2f 	bl	8002c10 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001db2:	2029      	movs	r0, #41	; 0x29
 8001db4:	f7ff fbd0 	bl	8001558 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dbe:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <lcd_init+0x2bc>)
 8001dc0:	f002 f97a 	bl	80040b8 <HAL_GPIO_WritePin>
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	200001ac 	.word	0x200001ac
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b08b      	sub	sp, #44	; 0x2c
 8001dd8:	af04      	add	r7, sp, #16
 8001dda:	60ba      	str	r2, [r7, #8]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	81fb      	strh	r3, [r7, #14]
 8001de2:	460b      	mov	r3, r1
 8001de4:	81bb      	strh	r3, [r7, #12]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001df2:	e048      	b.n	8001e86 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d145      	bne.n	8001e86 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001dfa:	89fa      	ldrh	r2, [r7, #14]
 8001dfc:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <lcd_ShowStr+0xc4>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e06:	085b      	lsrs	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	1acb      	subs	r3, r1, r3
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dc3f      	bgt.n	8001e90 <lcd_ShowStr+0xbc>
 8001e10:	89ba      	ldrh	r2, [r7, #12]
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <lcd_ShowStr+0xc4>)
 8001e14:	885b      	ldrh	r3, [r3, #2]
 8001e16:	4619      	mov	r1, r3
 8001e18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e1c:	1acb      	subs	r3, r1, r3
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	dc36      	bgt.n	8001e90 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b80      	cmp	r3, #128	; 0x80
 8001e28:	d902      	bls.n	8001e30 <lcd_ShowStr+0x5c>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	75fb      	strb	r3, [r7, #23]
 8001e2e:	e02a      	b.n	8001e86 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b0d      	cmp	r3, #13
 8001e36:	d10b      	bne.n	8001e50 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001e38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	89bb      	ldrh	r3, [r7, #12]
 8001e40:	4413      	add	r3, r2
 8001e42:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001e44:	8abb      	ldrh	r3, [r7, #20]
 8001e46:	81fb      	strh	r3, [r7, #14]
					str++;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	e017      	b.n	8001e80 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	88fc      	ldrh	r4, [r7, #6]
 8001e56:	89b9      	ldrh	r1, [r7, #12]
 8001e58:	89f8      	ldrh	r0, [r7, #14]
 8001e5a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	f7ff fc3c 	bl	80016e8 <lcd_ShowChar>
					x+=sizey/2;
 8001e70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	3301      	adds	r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1b2      	bne.n	8001df4 <lcd_ShowStr+0x20>
 8001e8e:	e000      	b.n	8001e92 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001e90:	bf00      	nop
			}
		}
	}
}
 8001e92:	371c      	adds	r7, #28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd90      	pop	{r4, r7, pc}
 8001e98:	200001ac 	.word	0x200001ac

08001e9c <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af04      	add	r7, sp, #16
 8001ea2:	60ba      	str	r2, [r7, #8]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	81fb      	strh	r3, [r7, #14]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	81bb      	strh	r3, [r7, #12]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001eb2:	68b8      	ldr	r0, [r7, #8]
 8001eb4:	f7fe f988 	bl	80001c8 <strlen>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <lcd_StrCenter+0x60>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	8afb      	ldrh	r3, [r7, #22]
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	0fda      	lsrs	r2, r3, #31
 8001eca:	4413      	add	r3, r2
 8001ecc:	105b      	asrs	r3, r3, #1
 8001ece:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001ed0:	89fa      	ldrh	r2, [r7, #14]
 8001ed2:	8abb      	ldrh	r3, [r7, #20]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b298      	uxth	r0, r3
 8001ed8:	88fa      	ldrh	r2, [r7, #6]
 8001eda:	89b9      	ldrh	r1, [r7, #12]
 8001edc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ee0:	9302      	str	r3, [sp, #8]
 8001ee2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	8c3b      	ldrh	r3, [r7, #32]
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	4613      	mov	r3, r2
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	f7ff ff70 	bl	8001dd4 <lcd_ShowStr>
}
 8001ef4:	bf00      	nop
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200001ac 	.word	0x200001ac

08001f00 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001f04:	2201      	movs	r2, #1
 8001f06:	2140      	movs	r1, #64	; 0x40
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <led7_init+0x14>)
 8001f0a:	f002 f8d5 	bl	80040b8 <HAL_GPIO_WritePin>
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021800 	.word	0x40021800

08001f18 <led7_Scan>:

void led7_Scan(){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001f1c:	4b3f      	ldr	r3, [pc, #252]	; (800201c <led7_Scan+0x104>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	4b3d      	ldr	r3, [pc, #244]	; (800201c <led7_Scan+0x104>)
 8001f26:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001f28:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <led7_Scan+0x108>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a3d      	ldr	r2, [pc, #244]	; (8002024 <led7_Scan+0x10c>)
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	4b39      	ldr	r3, [pc, #228]	; (800201c <led7_Scan+0x104>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	4b36      	ldr	r3, [pc, #216]	; (800201c <led7_Scan+0x104>)
 8001f42:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001f44:	4b36      	ldr	r3, [pc, #216]	; (8002020 <led7_Scan+0x108>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d847      	bhi.n	8001fdc <led7_Scan+0xc4>
 8001f4c:	a201      	add	r2, pc, #4	; (adr r2, 8001f54 <led7_Scan+0x3c>)
 8001f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f52:	bf00      	nop
 8001f54:	08001f65 	.word	0x08001f65
 8001f58:	08001f83 	.word	0x08001f83
 8001f5c:	08001fa1 	.word	0x08001fa1
 8001f60:	08001fbf 	.word	0x08001fbf
	case 0:
		spi_buffer |= 0x00b0;
 8001f64:	4b2d      	ldr	r3, [pc, #180]	; (800201c <led7_Scan+0x104>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	4b2b      	ldr	r3, [pc, #172]	; (800201c <led7_Scan+0x104>)
 8001f70:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001f72:	4b2a      	ldr	r3, [pc, #168]	; (800201c <led7_Scan+0x104>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <led7_Scan+0x104>)
 8001f7e:	801a      	strh	r2, [r3, #0]
		break;
 8001f80:	e02d      	b.n	8001fde <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <led7_Scan+0x104>)
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <led7_Scan+0x104>)
 8001f8e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <led7_Scan+0x104>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	f023 0320 	bic.w	r3, r3, #32
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <led7_Scan+0x104>)
 8001f9c:	801a      	strh	r2, [r3, #0]
		break;
 8001f9e:	e01e      	b.n	8001fde <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <led7_Scan+0x104>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <led7_Scan+0x104>)
 8001fac:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001fae:	4b1b      	ldr	r3, [pc, #108]	; (800201c <led7_Scan+0x104>)
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	f023 0310 	bic.w	r3, r3, #16
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	4b18      	ldr	r3, [pc, #96]	; (800201c <led7_Scan+0x104>)
 8001fba:	801a      	strh	r2, [r3, #0]
		break;
 8001fbc:	e00f      	b.n	8001fde <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <led7_Scan+0x104>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <led7_Scan+0x104>)
 8001fca:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <led7_Scan+0x104>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <led7_Scan+0x104>)
 8001fd8:	801a      	strh	r2, [r3, #0]
		break;
 8001fda:	e000      	b.n	8001fde <led7_Scan+0xc6>
	default:
		break;
 8001fdc:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <led7_Scan+0x108>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	425a      	negs	r2, r3
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	f002 0203 	and.w	r2, r2, #3
 8001fee:	bf58      	it	pl
 8001ff0:	4253      	negpl	r3, r2
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <led7_Scan+0x108>)
 8001ff4:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2140      	movs	r1, #64	; 0x40
 8001ffa:	480b      	ldr	r0, [pc, #44]	; (8002028 <led7_Scan+0x110>)
 8001ffc:	f002 f85c 	bl	80040b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002000:	2301      	movs	r3, #1
 8002002:	2202      	movs	r2, #2
 8002004:	4905      	ldr	r1, [pc, #20]	; (800201c <led7_Scan+0x104>)
 8002006:	4809      	ldr	r0, [pc, #36]	; (800202c <led7_Scan+0x114>)
 8002008:	f002 fec1 	bl	8004d8e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800200c:	2201      	movs	r2, #1
 800200e:	2140      	movs	r1, #64	; 0x40
 8002010:	4805      	ldr	r0, [pc, #20]	; (8002028 <led7_Scan+0x110>)
 8002012:	f002 f851 	bl	80040b8 <HAL_GPIO_WritePin>
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000000e 	.word	0x2000000e
 8002020:	200001b4 	.word	0x200001b4
 8002024:	20000000 	.word	0x20000000
 8002028:	40021800 	.word	0x40021800
 800202c:	200001d0 	.word	0x200001d0

08002030 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	4613      	mov	r3, r2
 800203c:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0e      	blt.n	8002062 <led7_SetDigit+0x32>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b09      	cmp	r3, #9
 8002048:	dc0b      	bgt.n	8002062 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <led7_SetDigit+0x40>)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	781a      	ldrb	r2, [r3, #0]
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	b2d9      	uxtb	r1, r3
 8002058:	4a06      	ldr	r2, [pc, #24]	; (8002074 <led7_SetDigit+0x44>)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4413      	add	r3, r2
 800205e:	460a      	mov	r2, r1
 8002060:	701a      	strb	r2, [r3, #0]
	}
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000004 	.word	0x20000004
 8002074:	20000000 	.word	0x20000000

08002078 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800207c:	f000 fd56 	bl	8002b2c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002080:	f000 f824 	bl	80020cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002084:	f7ff f8ec 	bl	8001260 <MX_GPIO_Init>
	MX_DMA_Init();
 8002088:	f7fe fffa 	bl	8001080 <MX_DMA_Init>
	MX_SPI1_Init();
 800208c:	f000 fb1e 	bl	80026cc <MX_SPI1_Init>
	MX_FSMC_Init();
 8002090:	f7ff f816 	bl	80010c0 <MX_FSMC_Init>
	MX_I2C1_Init();
 8002094:	f7ff f9ea 	bl	800146c <MX_I2C1_Init>
	MX_TIM13_Init();
 8002098:	f000 fc5a 	bl	8002950 <MX_TIM13_Init>
	MX_TIM2_Init();
 800209c:	f000 fc0c 	bl	80028b8 <MX_TIM2_Init>
	MX_ADC1_Init();
 80020a0:	f7fe fe36 	bl	8000d10 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	system_init();
 80020a4:	f000 f87c 	bl	80021a0 <system_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	lcd_Clear(BLACK);
 80020a8:	2000      	movs	r0, #0
 80020aa:	f7ff fad3 	bl	8001654 <lcd_Clear>
	while (1) {
		while (!flag_timer2)
 80020ae:	bf00      	nop
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <main+0x50>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0fb      	beq.n	80020b0 <main+0x38>
			;
		flag_timer2 = 0;
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <main+0x50>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	801a      	strh	r2, [r3, #0]
		button_Scan();
 80020be:	f7fe ff51 	bl	8000f64 <button_Scan>
//		test_LedDebug();
		Adc();
 80020c2:	f000 f881 	bl	80021c8 <Adc>
		while (!flag_timer2)
 80020c6:	e7f2      	b.n	80020ae <main+0x36>
 80020c8:	200001ca 	.word	0x200001ca

080020cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b094      	sub	sp, #80	; 0x50
 80020d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80020d2:	f107 0320 	add.w	r3, r7, #32
 80020d6:	2230      	movs	r2, #48	; 0x30
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 fcc6 	bl	8006a6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	4b28      	ldr	r3, [pc, #160]	; (8002198 <SystemClock_Config+0xcc>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	4a27      	ldr	r2, [pc, #156]	; (8002198 <SystemClock_Config+0xcc>)
 80020fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <SystemClock_Config+0xcc>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800210c:	2300      	movs	r3, #0
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	4b22      	ldr	r3, [pc, #136]	; (800219c <SystemClock_Config+0xd0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a21      	ldr	r2, [pc, #132]	; (800219c <SystemClock_Config+0xd0>)
 8002116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <SystemClock_Config+0xd0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002128:	2302      	movs	r3, #2
 800212a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800212c:	2301      	movs	r3, #1
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002130:	2310      	movs	r3, #16
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002134:	2302      	movs	r3, #2
 8002136:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002138:	2300      	movs	r3, #0
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800213c:	2308      	movs	r3, #8
 800213e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8002140:	23a8      	movs	r3, #168	; 0xa8
 8002142:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002144:	2302      	movs	r3, #2
 8002146:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002148:	2304      	movs	r3, #4
 800214a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800214c:	f107 0320 	add.w	r3, r7, #32
 8002150:	4618      	mov	r0, r3
 8002152:	f002 f90f 	bl	8004374 <HAL_RCC_OscConfig>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <SystemClock_Config+0x94>
		Error_Handler();
 800215c:	f000 f9d2 	bl	8002504 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002160:	230f      	movs	r3, #15
 8002162:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002164:	2302      	movs	r3, #2
 8002166:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800216c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002170:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002172:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002176:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	2105      	movs	r1, #5
 800217e:	4618      	mov	r0, r3
 8002180:	f002 fb70 	bl	8004864 <HAL_RCC_ClockConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0xc2>
		Error_Handler();
 800218a:	f000 f9bb 	bl	8002504 <Error_Handler>
	}
}
 800218e:	bf00      	nop
 8002190:	3750      	adds	r7, #80	; 0x50
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000

080021a0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	timer_init();
 80021a4:	f000 fa42 	bl	800262c <timer_init>
	button_init();
 80021a8:	f7fe fed0 	bl	8000f4c <button_init>
	lcd_init();
 80021ac:	f7ff fcb2 	bl	8001b14 <lcd_init>
	sensor_init();
 80021b0:	f000 f9ae 	bl	8002510 <sensor_init>
	buzzer_init();
 80021b4:	f7fe ff42 	bl	800103c <buzzer_init>
	led7_init();
 80021b8:	f7ff fea2 	bl	8001f00 <led7_init>
	setTimer2(50);
 80021bc:	2032      	movs	r0, #50	; 0x32
 80021be:	f000 fa3f 	bl	8002640 <setTimer2>
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <Adc>:
		return 0;
}

uint8_t count_adc = 0;

void Adc() {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1) % 20;
 80021ce:	4b90      	ldr	r3, [pc, #576]	; (8002410 <Adc+0x248>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	4b8f      	ldr	r3, [pc, #572]	; (8002414 <Adc+0x24c>)
 80021d6:	fb83 1302 	smull	r1, r3, r3, r2
 80021da:	10d9      	asrs	r1, r3, #3
 80021dc:	17d3      	asrs	r3, r2, #31
 80021de:	1ac9      	subs	r1, r1, r3
 80021e0:	460b      	mov	r3, r1
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	1ad1      	subs	r1, r2, r3
 80021ea:	b2ca      	uxtb	r2, r1
 80021ec:	4b88      	ldr	r3, [pc, #544]	; (8002410 <Adc+0x248>)
 80021ee:	701a      	strb	r2, [r3, #0]
	if (count_adc == 0) {
 80021f0:	4b87      	ldr	r3, [pc, #540]	; (8002410 <Adc+0x248>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f040 8103 	bne.w	8002400 <Adc+0x238>
		sensor_Read();
 80021fa:	f000 f997 	bl	800252c <sensor_Read>
		lcd_ShowStr(10, 100, "Voltage:", RED, BLACK, 16, 0);
 80021fe:	2300      	movs	r3, #0
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	2310      	movs	r3, #16
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	2300      	movs	r3, #0
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800220e:	4a82      	ldr	r2, [pc, #520]	; (8002418 <Adc+0x250>)
 8002210:	2164      	movs	r1, #100	; 0x64
 8002212:	200a      	movs	r0, #10
 8002214:	f7ff fdde 	bl	8001dd4 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 100, sensor_GetVoltage(), 4, RED, BLACK, 16);
 8002218:	f000 f9ae 	bl	8002578 <sensor_GetVoltage>
 800221c:	eef0 7a40 	vmov.f32	s15, s0
 8002220:	2310      	movs	r3, #16
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	2300      	movs	r3, #0
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800222c:	2204      	movs	r2, #4
 800222e:	eeb0 0a67 	vmov.f32	s0, s15
 8002232:	2164      	movs	r1, #100	; 0x64
 8002234:	2082      	movs	r0, #130	; 0x82
 8002236:	f7ff fbc1 	bl	80019bc <lcd_ShowFloatNum>
		lcd_ShowStr(170, 100, "(mV)", RED, BLACK, 16, 0);
 800223a:	2300      	movs	r3, #0
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	2310      	movs	r3, #16
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	2300      	movs	r3, #0
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800224a:	4a74      	ldr	r2, [pc, #464]	; (800241c <Adc+0x254>)
 800224c:	2164      	movs	r1, #100	; 0x64
 800224e:	20aa      	movs	r0, #170	; 0xaa
 8002250:	f7ff fdc0 	bl	8001dd4 <lcd_ShowStr>
//		lcd_ShowStr(10, 120, "Current:", RED, BLACK, 16, 0);
//		lcd_ShowFloatNum(130, 120, sensor_GetCurrent(), 4, RED, BLACK, 16);
		lcd_ShowStr(10, 120, "Light:", RED, BLACK, 16, 0);
 8002254:	2300      	movs	r3, #0
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	2310      	movs	r3, #16
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2300      	movs	r3, #0
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002264:	4a6e      	ldr	r2, [pc, #440]	; (8002420 <Adc+0x258>)
 8002266:	2178      	movs	r1, #120	; 0x78
 8002268:	200a      	movs	r0, #10
 800226a:	f7ff fdb3 	bl	8001dd4 <lcd_ShowStr>
		lcd_ShowIntNum(130, 120, sensor_GetLight(), 4, RED, BLACK, 16);
 800226e:	f000 f96b 	bl	8002548 <sensor_GetLight>
 8002272:	4603      	mov	r3, r0
 8002274:	461a      	mov	r2, r3
 8002276:	2310      	movs	r3, #16
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	2300      	movs	r3, #0
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2304      	movs	r3, #4
 8002286:	2178      	movs	r1, #120	; 0x78
 8002288:	2082      	movs	r0, #130	; 0x82
 800228a:	f7ff fb19 	bl	80018c0 <lcd_ShowIntNum>
		if (sensor_GetLight() < 2048)
 800228e:	f000 f95b 	bl	8002548 <sensor_GetLight>
 8002292:	4603      	mov	r3, r0
 8002294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002298:	d20d      	bcs.n	80022b6 <Adc+0xee>
			lcd_ShowStr(170, 120, "Weak", RED, BLACK, 16, 0);
 800229a:	2300      	movs	r3, #0
 800229c:	9302      	str	r3, [sp, #8]
 800229e:	2310      	movs	r3, #16
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	2300      	movs	r3, #0
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022aa:	4a5e      	ldr	r2, [pc, #376]	; (8002424 <Adc+0x25c>)
 80022ac:	2178      	movs	r1, #120	; 0x78
 80022ae:	20aa      	movs	r0, #170	; 0xaa
 80022b0:	f7ff fd90 	bl	8001dd4 <lcd_ShowStr>
 80022b4:	e00c      	b.n	80022d0 <Adc+0x108>
		else
			lcd_ShowStr(170, 120, "Strong", RED, BLACK, 16, 0);
 80022b6:	2300      	movs	r3, #0
 80022b8:	9302      	str	r3, [sp, #8]
 80022ba:	2310      	movs	r3, #16
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	2300      	movs	r3, #0
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022c6:	4a58      	ldr	r2, [pc, #352]	; (8002428 <Adc+0x260>)
 80022c8:	2178      	movs	r1, #120	; 0x78
 80022ca:	20aa      	movs	r0, #170	; 0xaa
 80022cc:	f7ff fd82 	bl	8001dd4 <lcd_ShowStr>
//		lcd_ShowStr(10, 160, "Potentiometer:", RED, BLACK, 16, 0);
//		lcd_ShowIntNum(130, 160, sensor_GetPotentiometer(), 4, RED, BLACK, 16);
		lcd_ShowStr(10, 140, "Temperature:", RED, BLACK, 16, 0);
 80022d0:	2300      	movs	r3, #0
 80022d2:	9302      	str	r3, [sp, #8]
 80022d4:	2310      	movs	r3, #16
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	2300      	movs	r3, #0
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022e0:	4a52      	ldr	r2, [pc, #328]	; (800242c <Adc+0x264>)
 80022e2:	218c      	movs	r1, #140	; 0x8c
 80022e4:	200a      	movs	r0, #10
 80022e6:	f7ff fd75 	bl	8001dd4 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 140, sensor_GetTemperature(), 4, RED, BLACK, 16);
 80022ea:	f000 f981 	bl	80025f0 <sensor_GetTemperature>
 80022ee:	eef0 7a40 	vmov.f32	s15, s0
 80022f2:	2310      	movs	r3, #16
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	2300      	movs	r3, #0
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022fe:	2204      	movs	r2, #4
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	218c      	movs	r1, #140	; 0x8c
 8002306:	2082      	movs	r0, #130	; 0x82
 8002308:	f7ff fb58 	bl	80019bc <lcd_ShowFloatNum>
		lcd_ShowStr(170, 140, "(oC)", RED, BLACK, 16, 0);
 800230c:	2300      	movs	r3, #0
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	2310      	movs	r3, #16
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	2300      	movs	r3, #0
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800231c:	4a44      	ldr	r2, [pc, #272]	; (8002430 <Adc+0x268>)
 800231e:	218c      	movs	r1, #140	; 0x8c
 8002320:	20aa      	movs	r0, #170	; 0xaa
 8002322:	f7ff fd57 	bl	8001dd4 <lcd_ShowStr>
		lcd_ShowStr(10, 160, "Humidity:", RED, BLACK, 16, 0);
 8002326:	2300      	movs	r3, #0
 8002328:	9302      	str	r3, [sp, #8]
 800232a:	2310      	movs	r3, #16
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	2300      	movs	r3, #0
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002336:	4a3f      	ldr	r2, [pc, #252]	; (8002434 <Adc+0x26c>)
 8002338:	21a0      	movs	r1, #160	; 0xa0
 800233a:	200a      	movs	r0, #10
 800233c:	f7ff fd4a 	bl	8001dd4 <lcd_ShowStr>
		float temp = sensor_GetPotentiometer() * 0.024;
 8002340:	f000 f90e 	bl	8002560 <sensor_GetPotentiometer>
 8002344:	4603      	mov	r3, r0
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f898 	bl	800047c <__aeabi_i2d>
 800234c:	a32e      	add	r3, pc, #184	; (adr r3, 8002408 <Adc+0x240>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe f8fd 	bl	8000550 <__aeabi_dmul>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	f7fe fb09 	bl	8000974 <__aeabi_d2f>
 8002362:	4603      	mov	r3, r0
 8002364:	607b      	str	r3, [r7, #4]
		lcd_ShowFloatNum(130, 160, temp, 4, RED, BLACK, 16);
 8002366:	2310      	movs	r3, #16
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	2300      	movs	r3, #0
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002372:	2204      	movs	r2, #4
 8002374:	ed97 0a01 	vldr	s0, [r7, #4]
 8002378:	21a0      	movs	r1, #160	; 0xa0
 800237a:	2082      	movs	r0, #130	; 0x82
 800237c:	f7ff fb1e 	bl	80019bc <lcd_ShowFloatNum>
		lcd_ShowStr(170, 160, "%", RED, BLACK, 16, 0);
 8002380:	2300      	movs	r3, #0
 8002382:	9302      	str	r3, [sp, #8]
 8002384:	2310      	movs	r3, #16
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	2300      	movs	r3, #0
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002390:	4a29      	ldr	r2, [pc, #164]	; (8002438 <Adc+0x270>)
 8002392:	21a0      	movs	r1, #160	; 0xa0
 8002394:	20aa      	movs	r0, #170	; 0xaa
 8002396:	f7ff fd1d 	bl	8001dd4 <lcd_ShowStr>

		if (temp > 70) {
 800239a:	edd7 7a01 	vldr	s15, [r7, #4]
 800239e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800243c <Adc+0x274>
 80023a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023aa:	dd10      	ble.n	80023ce <Adc+0x206>
			buzzer_SetVolume(50);
 80023ac:	2032      	movs	r0, #50	; 0x32
 80023ae:	f7fe fe4f 	bl	8001050 <buzzer_SetVolume>
			lcd_StrCenter(0, 200, "Alert!", RED, BLACK, 32, 0);
 80023b2:	2300      	movs	r3, #0
 80023b4:	9302      	str	r3, [sp, #8]
 80023b6:	2320      	movs	r3, #32
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	2300      	movs	r3, #0
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023c2:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <Adc+0x278>)
 80023c4:	21c8      	movs	r1, #200	; 0xc8
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7ff fd68 	bl	8001e9c <lcd_StrCenter>
 80023cc:	e00e      	b.n	80023ec <Adc+0x224>
		} else {
			lcd_StrCenter(0, 200, "Alert!", BLACK, BLACK, 32, 0);
 80023ce:	2300      	movs	r3, #0
 80023d0:	9302      	str	r3, [sp, #8]
 80023d2:	2320      	movs	r3, #32
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	2300      	movs	r3, #0
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2300      	movs	r3, #0
 80023dc:	4a18      	ldr	r2, [pc, #96]	; (8002440 <Adc+0x278>)
 80023de:	21c8      	movs	r1, #200	; 0xc8
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7ff fd5b 	bl	8001e9c <lcd_StrCenter>
			buzzer_SetVolume(0);
 80023e6:	2000      	movs	r0, #0
 80023e8:	f7fe fe32 	bl	8001050 <buzzer_SetVolume>
		}
		counter = counter + 1;
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <Adc+0x27c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	4a14      	ldr	r2, [pc, #80]	; (8002444 <Adc+0x27c>)
 80023f4:	6013      	str	r3, [r2, #0]
		int2time(counter);
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <Adc+0x27c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f824 	bl	8002448 <int2time>
	}
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	bc6a7efa 	.word	0xbc6a7efa
 800240c:	3f989374 	.word	0x3f989374
 8002410:	200001bc 	.word	0x200001bc
 8002414:	66666667 	.word	0x66666667
 8002418:	08006adc 	.word	0x08006adc
 800241c:	08006ae8 	.word	0x08006ae8
 8002420:	08006af0 	.word	0x08006af0
 8002424:	08006af8 	.word	0x08006af8
 8002428:	08006b00 	.word	0x08006b00
 800242c:	08006b08 	.word	0x08006b08
 8002430:	08006b18 	.word	0x08006b18
 8002434:	08006b20 	.word	0x08006b20
 8002438:	08006b2c 	.word	0x08006b2c
 800243c:	428c0000 	.word	0x428c0000
 8002440:	08006b30 	.word	0x08006b30
 8002444:	200001b8 	.word	0x200001b8

08002448 <int2time>:
	led7_SetDigit(5, 1, 0);
	led7_SetDigit(4, 2, 0);
	led7_SetDigit(7, 3, 0);
}

void int2time(int n) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	led7_SetDigit(n / 1000, 0, 0);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a29      	ldr	r2, [pc, #164]	; (80024f8 <int2time+0xb0>)
 8002454:	fb82 1203 	smull	r1, r2, r2, r3
 8002458:	1192      	asrs	r2, r2, #6
 800245a:	17db      	asrs	r3, r3, #31
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fde4 	bl	8002030 <led7_SetDigit>
	n = n % 1000;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a23      	ldr	r2, [pc, #140]	; (80024f8 <int2time+0xb0>)
 800246c:	fb82 1203 	smull	r1, r2, r2, r3
 8002470:	1191      	asrs	r1, r2, #6
 8002472:	17da      	asrs	r2, r3, #31
 8002474:	1a8a      	subs	r2, r1, r2
 8002476:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800247a:	fb01 f202 	mul.w	r2, r1, r2
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	607b      	str	r3, [r7, #4]
	led7_SetDigit(n / 100, 1, 0);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <int2time+0xb4>)
 8002486:	fb82 1203 	smull	r1, r2, r2, r3
 800248a:	1152      	asrs	r2, r2, #5
 800248c:	17db      	asrs	r3, r3, #31
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2200      	movs	r2, #0
 8002492:	2101      	movs	r1, #1
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fdcb 	bl	8002030 <led7_SetDigit>
	n = n % 100;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a17      	ldr	r2, [pc, #92]	; (80024fc <int2time+0xb4>)
 800249e:	fb82 1203 	smull	r1, r2, r2, r3
 80024a2:	1151      	asrs	r1, r2, #5
 80024a4:	17da      	asrs	r2, r3, #31
 80024a6:	1a8a      	subs	r2, r1, r2
 80024a8:	2164      	movs	r1, #100	; 0x64
 80024aa:	fb01 f202 	mul.w	r2, r1, r2
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	607b      	str	r3, [r7, #4]
	led7_SetDigit(n / 10, 2, 0);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a12      	ldr	r2, [pc, #72]	; (8002500 <int2time+0xb8>)
 80024b6:	fb82 1203 	smull	r1, r2, r2, r3
 80024ba:	1092      	asrs	r2, r2, #2
 80024bc:	17db      	asrs	r3, r3, #31
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2200      	movs	r2, #0
 80024c2:	2102      	movs	r1, #2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fdb3 	bl	8002030 <led7_SetDigit>
	n = n % 10;
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <int2time+0xb8>)
 80024ce:	fb83 1302 	smull	r1, r3, r3, r2
 80024d2:	1099      	asrs	r1, r3, #2
 80024d4:	17d3      	asrs	r3, r2, #31
 80024d6:	1ac9      	subs	r1, r1, r3
 80024d8:	460b      	mov	r3, r1
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	607b      	str	r3, [r7, #4]
	led7_SetDigit(n, 3, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2103      	movs	r1, #3
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff fda1 	bl	8002030 <led7_SetDigit>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	10624dd3 	.word	0x10624dd3
 80024fc:	51eb851f 	.word	0x51eb851f
 8002500:	66666667 	.word	0x66666667

08002504 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002508:	b672      	cpsid	i
}
 800250a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800250c:	e7fe      	b.n	800250c <Error_Handler+0x8>
	...

08002510 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002514:	2205      	movs	r2, #5
 8002516:	4903      	ldr	r1, [pc, #12]	; (8002524 <sensor_init+0x14>)
 8002518:	4803      	ldr	r0, [pc, #12]	; (8002528 <sensor_init+0x18>)
 800251a:	f000 fbe1 	bl	8002ce0 <HAL_ADC_Start_DMA>
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200001c0 	.word	0x200001c0
 8002528:	20000038 	.word	0x20000038

0800252c <sensor_Read>:

void sensor_Read(){
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002530:	2205      	movs	r2, #5
 8002532:	4903      	ldr	r1, [pc, #12]	; (8002540 <sensor_Read+0x14>)
 8002534:	4803      	ldr	r0, [pc, #12]	; (8002544 <sensor_Read+0x18>)
 8002536:	f000 fbd3 	bl	8002ce0 <HAL_ADC_Start_DMA>
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200001c0 	.word	0x200001c0
 8002544:	20000038 	.word	0x20000038

08002548 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
	return adc_receive[2];
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <sensor_GetLight+0x14>)
 800254e:	889b      	ldrh	r3, [r3, #4]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	200001c0 	.word	0x200001c0

08002560 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <sensor_GetPotentiometer+0x14>)
 8002566:	88db      	ldrh	r3, [r3, #6]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	200001c0 	.word	0x200001c0

08002578 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <sensor_GetVoltage+0x70>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002588:	ee17 0a90 	vmov	r0, s15
 800258c:	f7fd ff88 	bl	80004a0 <__aeabi_f2d>
 8002590:	a311      	add	r3, pc, #68	; (adr r3, 80025d8 <sensor_GetVoltage+0x60>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f7fd ffdb 	bl	8000550 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <sensor_GetVoltage+0x74>)
 80025a8:	f7fd ffd2 	bl	8000550 <__aeabi_dmul>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	a30a      	add	r3, pc, #40	; (adr r3, 80025e0 <sensor_GetVoltage+0x68>)
 80025b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ba:	f7fe f8f3 	bl	80007a4 <__aeabi_ddiv>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	f7fe f9d5 	bl	8000974 <__aeabi_d2f>
 80025ca:	4603      	mov	r3, r0
 80025cc:	ee07 3a90 	vmov	s15, r3
}
 80025d0:	eeb0 0a67 	vmov.f32	s0, s15
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	66666666 	.word	0x66666666
 80025dc:	400a6666 	.word	0x400a6666
 80025e0:	cccccccd 	.word	0xcccccccd
 80025e4:	40b908ac 	.word	0x40b908ac
 80025e8:	200001c0 	.word	0x200001c0
 80025ec:	40280000 	.word	0x40280000

080025f0 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <sensor_GetTemperature+0x30>)
 80025f6:	891b      	ldrh	r3, [r3, #8]
 80025f8:	ee07 3a90 	vmov	s15, r3
 80025fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002600:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002624 <sensor_GetTemperature+0x34>
 8002604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002608:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002628 <sensor_GetTemperature+0x38>
 800260c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002610:	eef0 7a66 	vmov.f32	s15, s13
}
 8002614:	eeb0 0a67 	vmov.f32	s0, s15
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	200001c0 	.word	0x200001c0
 8002624:	43a50000 	.word	0x43a50000
 8002628:	457ff000 	.word	0x457ff000

0800262c <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <timer_init+0x10>)
 8002632:	f003 f95f 	bl	80058f4 <HAL_TIM_Base_Start_IT>
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000228 	.word	0x20000228

08002640 <setTimer2>:

void setTimer2(uint16_t duration){
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800264a:	4a08      	ldr	r2, [pc, #32]	; (800266c <setTimer2+0x2c>)
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <setTimer2+0x2c>)
 8002652:	881a      	ldrh	r2, [r3, #0]
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <setTimer2+0x30>)
 8002656:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <setTimer2+0x34>)
 800265a:	2200      	movs	r2, #0
 800265c:	801a      	strh	r2, [r3, #0]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	200001ce 	.word	0x200001ce
 8002670:	200001cc 	.word	0x200001cc
 8002674:	200001ca 	.word	0x200001ca

08002678 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002688:	d116      	bne.n	80026b8 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d010      	beq.n	80026b4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800269c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80026ae:	881a      	ldrh	r2, [r3, #0]
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026b2:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80026b4:	f7ff fc30 	bl	8001f18 <led7_Scan>
	}
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200001cc 	.word	0x200001cc
 80026c4:	200001ca 	.word	0x200001ca
 80026c8:	200001ce 	.word	0x200001ce

080026cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80026d0:	4b17      	ldr	r3, [pc, #92]	; (8002730 <MX_SPI1_Init+0x64>)
 80026d2:	4a18      	ldr	r2, [pc, #96]	; (8002734 <MX_SPI1_Init+0x68>)
 80026d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <MX_SPI1_Init+0x64>)
 80026d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026de:	4b14      	ldr	r3, [pc, #80]	; (8002730 <MX_SPI1_Init+0x64>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <MX_SPI1_Init+0x64>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <MX_SPI1_Init+0x64>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <MX_SPI1_Init+0x64>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <MX_SPI1_Init+0x64>)
 80026f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <MX_SPI1_Init+0x64>)
 8002700:	2200      	movs	r2, #0
 8002702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <MX_SPI1_Init+0x64>)
 8002706:	2200      	movs	r2, #0
 8002708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <MX_SPI1_Init+0x64>)
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <MX_SPI1_Init+0x64>)
 8002712:	2200      	movs	r2, #0
 8002714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <MX_SPI1_Init+0x64>)
 8002718:	220a      	movs	r2, #10
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800271c:	4804      	ldr	r0, [pc, #16]	; (8002730 <MX_SPI1_Init+0x64>)
 800271e:	f002 faad 	bl	8004c7c <HAL_SPI_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002728:	f7ff feec 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200001d0 	.word	0x200001d0
 8002734:	40013000 	.word	0x40013000

08002738 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a19      	ldr	r2, [pc, #100]	; (80027bc <HAL_SPI_MspInit+0x84>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d12b      	bne.n	80027b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_SPI_MspInit+0x88>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <HAL_SPI_MspInit+0x88>)
 8002764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_SPI_MspInit+0x88>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_SPI_MspInit+0x88>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <HAL_SPI_MspInit+0x88>)
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_SPI_MspInit+0x88>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002792:	2338      	movs	r3, #56	; 0x38
 8002794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027a2:	2305      	movs	r3, #5
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	4805      	ldr	r0, [pc, #20]	; (80027c4 <HAL_SPI_MspInit+0x8c>)
 80027ae:	f001 fae7 	bl	8003d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40013000 	.word	0x40013000
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020400 	.word	0x40020400

080027c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_MspInit+0x4c>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <HAL_MspInit+0x4c>)
 80027d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027dc:	6453      	str	r3, [r2, #68]	; 0x44
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_MspInit+0x4c>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_MspInit+0x4c>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a08      	ldr	r2, [pc, #32]	; (8002814 <HAL_MspInit+0x4c>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_MspInit+0x4c>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800281c:	e7fe      	b.n	800281c <NMI_Handler+0x4>

0800281e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002822:	e7fe      	b.n	8002822 <HardFault_Handler+0x4>

08002824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002828:	e7fe      	b.n	8002828 <MemManage_Handler+0x4>

0800282a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282e:	e7fe      	b.n	800282e <BusFault_Handler+0x4>

08002830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <UsageFault_Handler+0x4>

08002836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002864:	f000 f9b4 	bl	8002bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}

0800286c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <TIM2_IRQHandler+0x10>)
 8002872:	f003 f9d1 	bl	8005c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000228 	.word	0x20000228

08002880 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <DMA2_Stream0_IRQHandler+0x10>)
 8002886:	f001 f811 	bl	80038ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000080 	.word	0x20000080

08002894 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <SystemInit+0x20>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <SystemInit+0x20>)
 80028a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028be:	f107 0308 	add.w	r3, r7, #8
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028cc:	463b      	mov	r3, r7
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028d4:	4b1d      	ldr	r3, [pc, #116]	; (800294c <MX_TIM2_Init+0x94>)
 80028d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <MX_TIM2_Init+0x94>)
 80028de:	f240 3247 	movw	r2, #839	; 0x347
 80028e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <MX_TIM2_Init+0x94>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80028ea:	4b18      	ldr	r3, [pc, #96]	; (800294c <MX_TIM2_Init+0x94>)
 80028ec:	2263      	movs	r2, #99	; 0x63
 80028ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <MX_TIM2_Init+0x94>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <MX_TIM2_Init+0x94>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028fc:	4813      	ldr	r0, [pc, #76]	; (800294c <MX_TIM2_Init+0x94>)
 80028fe:	f002 ffa9 	bl	8005854 <HAL_TIM_Base_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002908:	f7ff fdfc 	bl	8002504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800290c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002912:	f107 0308 	add.w	r3, r7, #8
 8002916:	4619      	mov	r1, r3
 8002918:	480c      	ldr	r0, [pc, #48]	; (800294c <MX_TIM2_Init+0x94>)
 800291a:	f003 fb47 	bl	8005fac <HAL_TIM_ConfigClockSource>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002924:	f7ff fdee 	bl	8002504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002928:	2300      	movs	r3, #0
 800292a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800292c:	2300      	movs	r3, #0
 800292e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002930:	463b      	mov	r3, r7
 8002932:	4619      	mov	r1, r3
 8002934:	4805      	ldr	r0, [pc, #20]	; (800294c <MX_TIM2_Init+0x94>)
 8002936:	f003 ff39 	bl	80067ac <HAL_TIMEx_MasterConfigSynchronization>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002940:	f7ff fde0 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002944:	bf00      	nop
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000228 	.word	0x20000228

08002950 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
 8002964:	615a      	str	r2, [r3, #20]
 8002966:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002968:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <MX_TIM13_Init+0x94>)
 800296a:	4a1f      	ldr	r2, [pc, #124]	; (80029e8 <MX_TIM13_Init+0x98>)
 800296c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <MX_TIM13_Init+0x94>)
 8002970:	f240 3247 	movw	r2, #839	; 0x347
 8002974:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002976:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <MX_TIM13_Init+0x94>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <MX_TIM13_Init+0x94>)
 800297e:	2263      	movs	r2, #99	; 0x63
 8002980:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002982:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <MX_TIM13_Init+0x94>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <MX_TIM13_Init+0x94>)
 800298a:	2200      	movs	r2, #0
 800298c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800298e:	4815      	ldr	r0, [pc, #84]	; (80029e4 <MX_TIM13_Init+0x94>)
 8002990:	f002 ff60 	bl	8005854 <HAL_TIM_Base_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800299a:	f7ff fdb3 	bl	8002504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800299e:	4811      	ldr	r0, [pc, #68]	; (80029e4 <MX_TIM13_Init+0x94>)
 80029a0:	f003 f818 	bl	80059d4 <HAL_TIM_PWM_Init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80029aa:	f7ff fdab 	bl	8002504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ae:	2360      	movs	r3, #96	; 0x60
 80029b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	2200      	movs	r2, #0
 80029c2:	4619      	mov	r1, r3
 80029c4:	4807      	ldr	r0, [pc, #28]	; (80029e4 <MX_TIM13_Init+0x94>)
 80029c6:	f003 fa2f 	bl	8005e28 <HAL_TIM_PWM_ConfigChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80029d0:	f7ff fd98 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80029d4:	4803      	ldr	r0, [pc, #12]	; (80029e4 <MX_TIM13_Init+0x94>)
 80029d6:	f000 f845 	bl	8002a64 <HAL_TIM_MspPostInit>

}
 80029da:	bf00      	nop
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000270 	.word	0x20000270
 80029e8:	40001c00 	.word	0x40001c00

080029ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d116      	bne.n	8002a2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <HAL_TIM_Base_MspInit+0x70>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4a15      	ldr	r2, [pc, #84]	; (8002a5c <HAL_TIM_Base_MspInit+0x70>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0e:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_TIM_Base_MspInit+0x70>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	201c      	movs	r0, #28
 8002a20:	f000 fe07 	bl	8003632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a24:	201c      	movs	r0, #28
 8002a26:	f000 fe20 	bl	800366a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002a2a:	e012      	b.n	8002a52 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a0b      	ldr	r2, [pc, #44]	; (8002a60 <HAL_TIM_Base_MspInit+0x74>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d10d      	bne.n	8002a52 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <HAL_TIM_Base_MspInit+0x70>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <HAL_TIM_Base_MspInit+0x70>)
 8002a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a44:	6413      	str	r3, [r2, #64]	; 0x40
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_TIM_Base_MspInit+0x70>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40001c00 	.word	0x40001c00

08002a64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a12      	ldr	r2, [pc, #72]	; (8002acc <HAL_TIM_MspPostInit+0x68>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d11e      	bne.n	8002ac4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_TIM_MspPostInit+0x6c>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a10      	ldr	r2, [pc, #64]	; (8002ad0 <HAL_TIM_MspPostInit+0x6c>)
 8002a90:	f043 0320 	orr.w	r3, r3, #32
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_TIM_MspPostInit+0x6c>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002ab4:	2309      	movs	r3, #9
 8002ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ab8:	f107 030c 	add.w	r3, r7, #12
 8002abc:	4619      	mov	r1, r3
 8002abe:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <HAL_TIM_MspPostInit+0x70>)
 8002ac0:	f001 f95e 	bl	8003d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002ac4:	bf00      	nop
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40001c00 	.word	0x40001c00
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40021400 	.word	0x40021400

08002ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002adc:	480d      	ldr	r0, [pc, #52]	; (8002b14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ade:	490e      	ldr	r1, [pc, #56]	; (8002b18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ae0:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae4:	e002      	b.n	8002aec <LoopCopyDataInit>

08002ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aea:	3304      	adds	r3, #4

08002aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002af0:	d3f9      	bcc.n	8002ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002af2:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002af4:	4c0b      	ldr	r4, [pc, #44]	; (8002b24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af8:	e001      	b.n	8002afe <LoopFillZerobss>

08002afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002afc:	3204      	adds	r2, #4

08002afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b00:	d3fb      	bcc.n	8002afa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b02:	f7ff fec7 	bl	8002894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b06:	f003 ffb9 	bl	8006a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b0a:	f7ff fab5 	bl	8002078 <main>
  bx  lr    
 8002b0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b18:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002b1c:	08009ae8 	.word	0x08009ae8
  ldr r2, =_sbss
 8002b20:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002b24:	200002bc 	.word	0x200002bc

08002b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b28:	e7fe      	b.n	8002b28 <ADC_IRQHandler>
	...

08002b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b30:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <HAL_Init+0x40>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0d      	ldr	r2, [pc, #52]	; (8002b6c <HAL_Init+0x40>)
 8002b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_Init+0x40>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <HAL_Init+0x40>)
 8002b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <HAL_Init+0x40>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <HAL_Init+0x40>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b54:	2003      	movs	r0, #3
 8002b56:	f000 fd61 	bl	800361c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b5a:	200f      	movs	r0, #15
 8002b5c:	f000 f808 	bl	8002b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b60:	f7ff fe32 	bl	80027c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023c00 	.word	0x40023c00

08002b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_InitTick+0x54>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_InitTick+0x58>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fd79 	bl	8003686 <HAL_SYSTICK_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00e      	b.n	8002bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b0f      	cmp	r3, #15
 8002ba2:	d80a      	bhi.n	8002bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	f000 fd41 	bl	8003632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb0:	4a06      	ldr	r2, [pc, #24]	; (8002bcc <HAL_InitTick+0x5c>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000010 	.word	0x20000010
 8002bc8:	20000018 	.word	0x20000018
 8002bcc:	20000014 	.word	0x20000014

08002bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_IncTick+0x20>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_IncTick+0x24>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <HAL_IncTick+0x24>)
 8002be2:	6013      	str	r3, [r2, #0]
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000018 	.word	0x20000018
 8002bf4:	200002b8 	.word	0x200002b8

08002bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <HAL_GetTick+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	200002b8 	.word	0x200002b8

08002c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff ffee 	bl	8002bf8 <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d005      	beq.n	8002c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_Delay+0x44>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4413      	add	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c36:	bf00      	nop
 8002c38:	f7ff ffde 	bl	8002bf8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d8f7      	bhi.n	8002c38 <HAL_Delay+0x28>
  {
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000018 	.word	0x20000018

08002c58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e033      	b.n	8002cd6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fe f8d4 	bl	8000e24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d118      	bne.n	8002cc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c9e:	f023 0302 	bic.w	r3, r3, #2
 8002ca2:	f043 0202 	orr.w	r2, r3, #2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa68 	bl	8003180 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f023 0303 	bic.w	r3, r3, #3
 8002cbe:	f043 0201 	orr.w	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
 8002cc6:	e001      	b.n	8002ccc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_Start_DMA+0x1e>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e0e9      	b.n	8002ed2 <HAL_ADC_Start_DMA+0x1f2>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d018      	beq.n	8002d46 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d24:	4b6d      	ldr	r3, [pc, #436]	; (8002edc <HAL_ADC_Start_DMA+0x1fc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6d      	ldr	r2, [pc, #436]	; (8002ee0 <HAL_ADC_Start_DMA+0x200>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	0c9a      	lsrs	r2, r3, #18
 8002d30:	4613      	mov	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4413      	add	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d38:	e002      	b.n	8002d40 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f9      	bne.n	8002d3a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d54:	d107      	bne.n	8002d66 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d64:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	f040 80a1 	bne.w	8002eb8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002da0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db4:	d106      	bne.n	8002dc4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f023 0206 	bic.w	r2, r3, #6
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	645a      	str	r2, [r3, #68]	; 0x44
 8002dc2:	e002      	b.n	8002dca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dd2:	4b44      	ldr	r3, [pc, #272]	; (8002ee4 <HAL_ADC_Start_DMA+0x204>)
 8002dd4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	4a43      	ldr	r2, [pc, #268]	; (8002ee8 <HAL_ADC_Start_DMA+0x208>)
 8002ddc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	4a42      	ldr	r2, [pc, #264]	; (8002eec <HAL_ADC_Start_DMA+0x20c>)
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	4a41      	ldr	r2, [pc, #260]	; (8002ef0 <HAL_ADC_Start_DMA+0x210>)
 8002dec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002df6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002e06:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e16:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	334c      	adds	r3, #76	; 0x4c
 8002e22:	4619      	mov	r1, r3
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f000 fce8 	bl	80037fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d12a      	bne.n	8002e8e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2d      	ldr	r2, [pc, #180]	; (8002ef4 <HAL_ADC_Start_DMA+0x214>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d015      	beq.n	8002e6e <HAL_ADC_Start_DMA+0x18e>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2c      	ldr	r2, [pc, #176]	; (8002ef8 <HAL_ADC_Start_DMA+0x218>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d105      	bne.n	8002e58 <HAL_ADC_Start_DMA+0x178>
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_ADC_Start_DMA+0x204>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a27      	ldr	r2, [pc, #156]	; (8002efc <HAL_ADC_Start_DMA+0x21c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d136      	bne.n	8002ed0 <HAL_ADC_Start_DMA+0x1f0>
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_ADC_Start_DMA+0x204>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d130      	bne.n	8002ed0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d129      	bne.n	8002ed0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	e020      	b.n	8002ed0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <HAL_ADC_Start_DMA+0x214>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d11b      	bne.n	8002ed0 <HAL_ADC_Start_DMA+0x1f0>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d114      	bne.n	8002ed0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f043 0210 	orr.w	r2, r3, #16
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000010 	.word	0x20000010
 8002ee0:	431bde83 	.word	0x431bde83
 8002ee4:	40012300 	.word	0x40012300
 8002ee8:	08003379 	.word	0x08003379
 8002eec:	08003433 	.word	0x08003433
 8002ef0:	0800344f 	.word	0x0800344f
 8002ef4:	40012000 	.word	0x40012000
 8002ef8:	40012100 	.word	0x40012100
 8002efc:	40012200 	.word	0x40012200

08002f00 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x1c>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e105      	b.n	8003164 <HAL_ADC_ConfigChannel+0x228>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b09      	cmp	r3, #9
 8002f66:	d925      	bls.n	8002fb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68d9      	ldr	r1, [r3, #12]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3b1e      	subs	r3, #30
 8002f7e:	2207      	movs	r2, #7
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43da      	mvns	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68d9      	ldr	r1, [r3, #12]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4403      	add	r3, r0
 8002fa6:	3b1e      	subs	r3, #30
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	e022      	b.n	8002ffa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6919      	ldr	r1, [r3, #16]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	2207      	movs	r2, #7
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6919      	ldr	r1, [r3, #16]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	4618      	mov	r0, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4403      	add	r3, r0
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d824      	bhi.n	800304c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	3b05      	subs	r3, #5
 8003014:	221f      	movs	r2, #31
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43da      	mvns	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	400a      	ands	r2, r1
 8003022:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	4618      	mov	r0, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	3b05      	subs	r3, #5
 800303e:	fa00 f203 	lsl.w	r2, r0, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	635a      	str	r2, [r3, #52]	; 0x34
 800304a:	e04c      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	d824      	bhi.n	800309e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	3b23      	subs	r3, #35	; 0x23
 8003066:	221f      	movs	r2, #31
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43da      	mvns	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	400a      	ands	r2, r1
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	4618      	mov	r0, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	3b23      	subs	r3, #35	; 0x23
 8003090:	fa00 f203 	lsl.w	r2, r0, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
 800309c:	e023      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	3b41      	subs	r3, #65	; 0x41
 80030b0:	221f      	movs	r2, #31
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	400a      	ands	r2, r1
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	4618      	mov	r0, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	3b41      	subs	r3, #65	; 0x41
 80030da:	fa00 f203 	lsl.w	r2, r0, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <HAL_ADC_ConfigChannel+0x234>)
 80030e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a21      	ldr	r2, [pc, #132]	; (8003174 <HAL_ADC_ConfigChannel+0x238>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d109      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x1cc>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b12      	cmp	r3, #18
 80030fa:	d105      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a19      	ldr	r2, [pc, #100]	; (8003174 <HAL_ADC_ConfigChannel+0x238>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d123      	bne.n	800315a <HAL_ADC_ConfigChannel+0x21e>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b10      	cmp	r3, #16
 8003118:	d003      	beq.n	8003122 <HAL_ADC_ConfigChannel+0x1e6>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b11      	cmp	r3, #17
 8003120:	d11b      	bne.n	800315a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b10      	cmp	r3, #16
 8003134:	d111      	bne.n	800315a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <HAL_ADC_ConfigChannel+0x23c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a10      	ldr	r2, [pc, #64]	; (800317c <HAL_ADC_ConfigChannel+0x240>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	0c9a      	lsrs	r2, r3, #18
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800314c:	e002      	b.n	8003154 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3b01      	subs	r3, #1
 8003152:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f9      	bne.n	800314e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40012300 	.word	0x40012300
 8003174:	40012000 	.word	0x40012000
 8003178:	20000010 	.word	0x20000010
 800317c:	431bde83 	.word	0x431bde83

08003180 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003188:	4b79      	ldr	r3, [pc, #484]	; (8003370 <ADC_Init+0x1f0>)
 800318a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	021a      	lsls	r2, r3, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6899      	ldr	r1, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	4a58      	ldr	r2, [pc, #352]	; (8003374 <ADC_Init+0x1f4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d022      	beq.n	800325e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003226:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6899      	ldr	r1, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6899      	ldr	r1, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	e00f      	b.n	800327e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800326c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800327c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0202 	bic.w	r2, r2, #2
 800328c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6899      	ldr	r1, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7e1b      	ldrb	r3, [r3, #24]
 8003298:	005a      	lsls	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01b      	beq.n	80032e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6859      	ldr	r1, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	3b01      	subs	r3, #1
 80032d8:	035a      	lsls	r2, r3, #13
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	e007      	b.n	80032f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	3b01      	subs	r3, #1
 8003310:	051a      	lsls	r2, r3, #20
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6899      	ldr	r1, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003336:	025a      	lsls	r2, r3, #9
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6899      	ldr	r1, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	029a      	lsls	r2, r3, #10
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40012300 	.word	0x40012300
 8003374:	0f000001 	.word	0x0f000001

08003378 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800338e:	2b00      	cmp	r3, #0
 8003390:	d13c      	bne.n	800340c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d12b      	bne.n	8003404 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d127      	bne.n	8003404 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d006      	beq.n	80033d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d119      	bne.n	8003404 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0220 	bic.w	r2, r2, #32
 80033de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d105      	bne.n	8003404 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff fd7b 	bl	8002f00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800340a:	e00e      	b.n	800342a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7ff fd85 	bl	8002f28 <HAL_ADC_ErrorCallback>
}
 800341e:	e004      	b.n	800342a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
}
 800342a:	bf00      	nop
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff fd67 	bl	8002f14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2240      	movs	r2, #64	; 0x40
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	f043 0204 	orr.w	r2, r3, #4
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f7ff fd5a 	bl	8002f28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003474:	bf00      	nop
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <__NVIC_SetPriorityGrouping+0x44>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003498:	4013      	ands	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ae:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <__NVIC_SetPriorityGrouping+0x44>)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	60d3      	str	r3, [r2, #12]
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <__NVIC_GetPriorityGrouping+0x18>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	f003 0307 	and.w	r3, r3, #7
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	db0b      	blt.n	800350a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	f003 021f 	and.w	r2, r3, #31
 80034f8:	4907      	ldr	r1, [pc, #28]	; (8003518 <__NVIC_EnableIRQ+0x38>)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	2001      	movs	r0, #1
 8003502:	fa00 f202 	lsl.w	r2, r0, r2
 8003506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	e000e100 	.word	0xe000e100

0800351c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	6039      	str	r1, [r7, #0]
 8003526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352c:	2b00      	cmp	r3, #0
 800352e:	db0a      	blt.n	8003546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	b2da      	uxtb	r2, r3
 8003534:	490c      	ldr	r1, [pc, #48]	; (8003568 <__NVIC_SetPriority+0x4c>)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	0112      	lsls	r2, r2, #4
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	440b      	add	r3, r1
 8003540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003544:	e00a      	b.n	800355c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	b2da      	uxtb	r2, r3
 800354a:	4908      	ldr	r1, [pc, #32]	; (800356c <__NVIC_SetPriority+0x50>)
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	3b04      	subs	r3, #4
 8003554:	0112      	lsls	r2, r2, #4
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	440b      	add	r3, r1
 800355a:	761a      	strb	r2, [r3, #24]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000e100 	.word	0xe000e100
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003570:	b480      	push	{r7}
 8003572:	b089      	sub	sp, #36	; 0x24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f1c3 0307 	rsb	r3, r3, #7
 800358a:	2b04      	cmp	r3, #4
 800358c:	bf28      	it	cs
 800358e:	2304      	movcs	r3, #4
 8003590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3304      	adds	r3, #4
 8003596:	2b06      	cmp	r3, #6
 8003598:	d902      	bls.n	80035a0 <NVIC_EncodePriority+0x30>
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3b03      	subs	r3, #3
 800359e:	e000      	b.n	80035a2 <NVIC_EncodePriority+0x32>
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a4:	f04f 32ff 	mov.w	r2, #4294967295
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43da      	mvns	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	401a      	ands	r2, r3
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b8:	f04f 31ff 	mov.w	r1, #4294967295
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	43d9      	mvns	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c8:	4313      	orrs	r3, r2
         );
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3724      	adds	r7, #36	; 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035e8:	d301      	bcc.n	80035ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ea:	2301      	movs	r3, #1
 80035ec:	e00f      	b.n	800360e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ee:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <SysTick_Config+0x40>)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035f6:	210f      	movs	r1, #15
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
 80035fc:	f7ff ff8e 	bl	800351c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <SysTick_Config+0x40>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003606:	4b04      	ldr	r3, [pc, #16]	; (8003618 <SysTick_Config+0x40>)
 8003608:	2207      	movs	r2, #7
 800360a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	e000e010 	.word	0xe000e010

0800361c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff ff29 	bl	800347c <__NVIC_SetPriorityGrouping>
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003632:	b580      	push	{r7, lr}
 8003634:	b086      	sub	sp, #24
 8003636:	af00      	add	r7, sp, #0
 8003638:	4603      	mov	r3, r0
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003644:	f7ff ff3e 	bl	80034c4 <__NVIC_GetPriorityGrouping>
 8003648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	6978      	ldr	r0, [r7, #20]
 8003650:	f7ff ff8e 	bl	8003570 <NVIC_EncodePriority>
 8003654:	4602      	mov	r2, r0
 8003656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800365a:	4611      	mov	r1, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff ff5d 	bl	800351c <__NVIC_SetPriority>
}
 8003662:	bf00      	nop
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	4603      	mov	r3, r0
 8003672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff ff31 	bl	80034e0 <__NVIC_EnableIRQ>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff ffa2 	bl	80035d8 <SysTick_Config>
 8003694:	4603      	mov	r3, r0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036ac:	f7ff faa4 	bl	8002bf8 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e099      	b.n	80037f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036dc:	e00f      	b.n	80036fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036de:	f7ff fa8b 	bl	8002bf8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b05      	cmp	r3, #5
 80036ea:	d908      	bls.n	80036fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2203      	movs	r2, #3
 80036f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e078      	b.n	80037f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e8      	bne.n	80036de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4b38      	ldr	r3, [pc, #224]	; (80037f8 <HAL_DMA_Init+0x158>)
 8003718:	4013      	ands	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800372a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003736:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003742:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	2b04      	cmp	r3, #4
 8003756:	d107      	bne.n	8003768 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	4313      	orrs	r3, r2
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f023 0307 	bic.w	r3, r3, #7
 800377e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	2b04      	cmp	r3, #4
 8003790:	d117      	bne.n	80037c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00e      	beq.n	80037c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fa6f 	bl	8003c88 <DMA_CheckFifoParam>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2240      	movs	r2, #64	; 0x40
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037be:	2301      	movs	r3, #1
 80037c0:	e016      	b.n	80037f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fa26 	bl	8003c1c <DMA_CalcBaseAndBitshift>
 80037d0:	4603      	mov	r3, r0
 80037d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	223f      	movs	r2, #63	; 0x3f
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	f010803f 	.word	0xf010803f

080037fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_DMA_Start_IT+0x26>
 800381e:	2302      	movs	r3, #2
 8003820:	e040      	b.n	80038a4 <HAL_DMA_Start_IT+0xa8>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d12f      	bne.n	8003896 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2202      	movs	r2, #2
 800383a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f9b8 	bl	8003bc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	223f      	movs	r2, #63	; 0x3f
 8003856:	409a      	lsls	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0216 	orr.w	r2, r2, #22
 800386a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0208 	orr.w	r2, r2, #8
 8003882:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e005      	b.n	80038a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800389e:	2302      	movs	r3, #2
 80038a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038b8:	4b8e      	ldr	r3, [pc, #568]	; (8003af4 <HAL_DMA_IRQHandler+0x248>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a8e      	ldr	r2, [pc, #568]	; (8003af8 <HAL_DMA_IRQHandler+0x24c>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	0a9b      	lsrs	r3, r3, #10
 80038c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	2208      	movs	r2, #8
 80038d8:	409a      	lsls	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4013      	ands	r3, r2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01a      	beq.n	8003918 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0204 	bic.w	r2, r2, #4
 80038fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	2208      	movs	r2, #8
 8003906:	409a      	lsls	r2, r3
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f043 0201 	orr.w	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391c:	2201      	movs	r2, #1
 800391e:	409a      	lsls	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d012      	beq.n	800394e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	2201      	movs	r2, #1
 800393c:	409a      	lsls	r2, r3
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f043 0202 	orr.w	r2, r3, #2
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	2204      	movs	r2, #4
 8003954:	409a      	lsls	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4013      	ands	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d012      	beq.n	8003984 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00b      	beq.n	8003984 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	2204      	movs	r2, #4
 8003972:	409a      	lsls	r2, r3
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397c:	f043 0204 	orr.w	r2, r3, #4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	2210      	movs	r2, #16
 800398a:	409a      	lsls	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d043      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d03c      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a6:	2210      	movs	r2, #16
 80039a8:	409a      	lsls	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d018      	beq.n	80039ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d108      	bne.n	80039dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d024      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4798      	blx	r3
 80039da:	e01f      	b.n	8003a1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01b      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
 80039ec:	e016      	b.n	8003a1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0208 	bic.w	r2, r2, #8
 8003a0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	2220      	movs	r2, #32
 8003a22:	409a      	lsls	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 808f 	beq.w	8003b4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8087 	beq.w	8003b4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	2220      	movs	r2, #32
 8003a44:	409a      	lsls	r2, r3
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d136      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0216 	bic.w	r2, r2, #22
 8003a64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d103      	bne.n	8003a86 <HAL_DMA_IRQHandler+0x1da>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0208 	bic.w	r2, r2, #8
 8003a94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	223f      	movs	r2, #63	; 0x3f
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d07e      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
        }
        return;
 8003ac2:	e079      	b.n	8003bb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01d      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10d      	bne.n	8003afc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d031      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
 8003af0:	e02c      	b.n	8003b4c <HAL_DMA_IRQHandler+0x2a0>
 8003af2:	bf00      	nop
 8003af4:	20000010 	.word	0x20000010
 8003af8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d023      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
 8003b0c:	e01e      	b.n	8003b4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10f      	bne.n	8003b3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0210 	bic.w	r2, r2, #16
 8003b2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d032      	beq.n	8003bba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d022      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2205      	movs	r2, #5
 8003b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d307      	bcc.n	8003b94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f2      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x2cc>
 8003b92:	e000      	b.n	8003b96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
 8003bb6:	e000      	b.n	8003bba <HAL_DMA_IRQHandler+0x30e>
        return;
 8003bb8:	bf00      	nop
    }
  }
}
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b40      	cmp	r3, #64	; 0x40
 8003bec:	d108      	bne.n	8003c00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bfe:	e007      	b.n	8003c10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	60da      	str	r2, [r3, #12]
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	3b10      	subs	r3, #16
 8003c2c:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <DMA_CalcBaseAndBitshift+0x64>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c36:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <DMA_CalcBaseAndBitshift+0x68>)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d909      	bls.n	8003c5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	1d1a      	adds	r2, r3, #4
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c5c:	e007      	b.n	8003c6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c66:	f023 0303 	bic.w	r3, r3, #3
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	aaaaaaab 	.word	0xaaaaaaab
 8003c84:	08009ad0 	.word	0x08009ad0

08003c88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d11f      	bne.n	8003ce2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d856      	bhi.n	8003d56 <DMA_CheckFifoParam+0xce>
 8003ca8:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <DMA_CheckFifoParam+0x28>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003cd3 	.word	0x08003cd3
 8003cb8:	08003cc1 	.word	0x08003cc1
 8003cbc:	08003d57 	.word	0x08003d57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d046      	beq.n	8003d5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd0:	e043      	b.n	8003d5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cda:	d140      	bne.n	8003d5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce0:	e03d      	b.n	8003d5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cea:	d121      	bne.n	8003d30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d837      	bhi.n	8003d62 <DMA_CheckFifoParam+0xda>
 8003cf2:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <DMA_CheckFifoParam+0x70>)
 8003cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf8:	08003d09 	.word	0x08003d09
 8003cfc:	08003d0f 	.word	0x08003d0f
 8003d00:	08003d09 	.word	0x08003d09
 8003d04:	08003d21 	.word	0x08003d21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d0c:	e030      	b.n	8003d70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d025      	beq.n	8003d66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d1e:	e022      	b.n	8003d66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d28:	d11f      	bne.n	8003d6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d2e:	e01c      	b.n	8003d6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d903      	bls.n	8003d3e <DMA_CheckFifoParam+0xb6>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d003      	beq.n	8003d44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d3c:	e018      	b.n	8003d70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	73fb      	strb	r3, [r7, #15]
      break;
 8003d42:	e015      	b.n	8003d70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00e      	beq.n	8003d6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      break;
 8003d54:	e00b      	b.n	8003d6e <DMA_CheckFifoParam+0xe6>
      break;
 8003d56:	bf00      	nop
 8003d58:	e00a      	b.n	8003d70 <DMA_CheckFifoParam+0xe8>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e008      	b.n	8003d70 <DMA_CheckFifoParam+0xe8>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e006      	b.n	8003d70 <DMA_CheckFifoParam+0xe8>
      break;
 8003d62:	bf00      	nop
 8003d64:	e004      	b.n	8003d70 <DMA_CheckFifoParam+0xe8>
      break;
 8003d66:	bf00      	nop
 8003d68:	e002      	b.n	8003d70 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d6a:	bf00      	nop
 8003d6c:	e000      	b.n	8003d70 <DMA_CheckFifoParam+0xe8>
      break;
 8003d6e:	bf00      	nop
    }
  } 
  
  return status; 
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop

08003d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	; 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	e16b      	b.n	8004074 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	f040 815a 	bne.w	800406e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d005      	beq.n	8003dd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d130      	bne.n	8003e34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	2203      	movs	r2, #3
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e08:	2201      	movs	r2, #1
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 0201 	and.w	r2, r3, #1
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d017      	beq.n	8003e70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d123      	bne.n	8003ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	08da      	lsrs	r2, r3, #3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3208      	adds	r2, #8
 8003e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	220f      	movs	r2, #15
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	08da      	lsrs	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3208      	adds	r2, #8
 8003ebe:	69b9      	ldr	r1, [r7, #24]
 8003ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	2203      	movs	r2, #3
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0203 	and.w	r2, r3, #3
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80b4 	beq.w	800406e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	4b60      	ldr	r3, [pc, #384]	; (800408c <HAL_GPIO_Init+0x30c>)
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	4a5f      	ldr	r2, [pc, #380]	; (800408c <HAL_GPIO_Init+0x30c>)
 8003f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f14:	6453      	str	r3, [r2, #68]	; 0x44
 8003f16:	4b5d      	ldr	r3, [pc, #372]	; (800408c <HAL_GPIO_Init+0x30c>)
 8003f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f22:	4a5b      	ldr	r2, [pc, #364]	; (8004090 <HAL_GPIO_Init+0x310>)
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	089b      	lsrs	r3, r3, #2
 8003f28:	3302      	adds	r3, #2
 8003f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	220f      	movs	r2, #15
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4013      	ands	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a52      	ldr	r2, [pc, #328]	; (8004094 <HAL_GPIO_Init+0x314>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d02b      	beq.n	8003fa6 <HAL_GPIO_Init+0x226>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a51      	ldr	r2, [pc, #324]	; (8004098 <HAL_GPIO_Init+0x318>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d025      	beq.n	8003fa2 <HAL_GPIO_Init+0x222>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a50      	ldr	r2, [pc, #320]	; (800409c <HAL_GPIO_Init+0x31c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01f      	beq.n	8003f9e <HAL_GPIO_Init+0x21e>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a4f      	ldr	r2, [pc, #316]	; (80040a0 <HAL_GPIO_Init+0x320>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d019      	beq.n	8003f9a <HAL_GPIO_Init+0x21a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a4e      	ldr	r2, [pc, #312]	; (80040a4 <HAL_GPIO_Init+0x324>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d013      	beq.n	8003f96 <HAL_GPIO_Init+0x216>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a4d      	ldr	r2, [pc, #308]	; (80040a8 <HAL_GPIO_Init+0x328>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00d      	beq.n	8003f92 <HAL_GPIO_Init+0x212>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a4c      	ldr	r2, [pc, #304]	; (80040ac <HAL_GPIO_Init+0x32c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <HAL_GPIO_Init+0x20e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a4b      	ldr	r2, [pc, #300]	; (80040b0 <HAL_GPIO_Init+0x330>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d101      	bne.n	8003f8a <HAL_GPIO_Init+0x20a>
 8003f86:	2307      	movs	r3, #7
 8003f88:	e00e      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	e00c      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003f8e:	2306      	movs	r3, #6
 8003f90:	e00a      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003f92:	2305      	movs	r3, #5
 8003f94:	e008      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003f96:	2304      	movs	r3, #4
 8003f98:	e006      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e004      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e002      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <HAL_GPIO_Init+0x228>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	f002 0203 	and.w	r2, r2, #3
 8003fae:	0092      	lsls	r2, r2, #2
 8003fb0:	4093      	lsls	r3, r2
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fb8:	4935      	ldr	r1, [pc, #212]	; (8004090 <HAL_GPIO_Init+0x310>)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	089b      	lsrs	r3, r3, #2
 8003fbe:	3302      	adds	r3, #2
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fc6:	4b3b      	ldr	r3, [pc, #236]	; (80040b4 <HAL_GPIO_Init+0x334>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fea:	4a32      	ldr	r2, [pc, #200]	; (80040b4 <HAL_GPIO_Init+0x334>)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ff0:	4b30      	ldr	r3, [pc, #192]	; (80040b4 <HAL_GPIO_Init+0x334>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004014:	4a27      	ldr	r2, [pc, #156]	; (80040b4 <HAL_GPIO_Init+0x334>)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800401a:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <HAL_GPIO_Init+0x334>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	43db      	mvns	r3, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4013      	ands	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800403e:	4a1d      	ldr	r2, [pc, #116]	; (80040b4 <HAL_GPIO_Init+0x334>)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004044:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <HAL_GPIO_Init+0x334>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004068:	4a12      	ldr	r2, [pc, #72]	; (80040b4 <HAL_GPIO_Init+0x334>)
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	3301      	adds	r3, #1
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b0f      	cmp	r3, #15
 8004078:	f67f ae90 	bls.w	8003d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	3724      	adds	r7, #36	; 0x24
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40023800 	.word	0x40023800
 8004090:	40013800 	.word	0x40013800
 8004094:	40020000 	.word	0x40020000
 8004098:	40020400 	.word	0x40020400
 800409c:	40020800 	.word	0x40020800
 80040a0:	40020c00 	.word	0x40020c00
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40021400 	.word	0x40021400
 80040ac:	40021800 	.word	0x40021800
 80040b0:	40021c00 	.word	0x40021c00
 80040b4:	40013c00 	.word	0x40013c00

080040b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	807b      	strh	r3, [r7, #2]
 80040c4:	4613      	mov	r3, r2
 80040c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040c8:	787b      	ldrb	r3, [r7, #1]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ce:	887a      	ldrh	r2, [r7, #2]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040d4:	e003      	b.n	80040de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040d6:	887b      	ldrh	r3, [r7, #2]
 80040d8:	041a      	lsls	r2, r3, #16
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	619a      	str	r2, [r3, #24]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
	...

080040ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e12b      	b.n	8004356 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fd f9d8 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2224      	movs	r2, #36	; 0x24
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800413e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800414e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004150:	f000 fd80 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8004154:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4a81      	ldr	r2, [pc, #516]	; (8004360 <HAL_I2C_Init+0x274>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d807      	bhi.n	8004170 <HAL_I2C_Init+0x84>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a80      	ldr	r2, [pc, #512]	; (8004364 <HAL_I2C_Init+0x278>)
 8004164:	4293      	cmp	r3, r2
 8004166:	bf94      	ite	ls
 8004168:	2301      	movls	r3, #1
 800416a:	2300      	movhi	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e006      	b.n	800417e <HAL_I2C_Init+0x92>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4a7d      	ldr	r2, [pc, #500]	; (8004368 <HAL_I2C_Init+0x27c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	bf94      	ite	ls
 8004178:	2301      	movls	r3, #1
 800417a:	2300      	movhi	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e0e7      	b.n	8004356 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4a78      	ldr	r2, [pc, #480]	; (800436c <HAL_I2C_Init+0x280>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	0c9b      	lsrs	r3, r3, #18
 8004190:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	4a6a      	ldr	r2, [pc, #424]	; (8004360 <HAL_I2C_Init+0x274>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d802      	bhi.n	80041c0 <HAL_I2C_Init+0xd4>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	3301      	adds	r3, #1
 80041be:	e009      	b.n	80041d4 <HAL_I2C_Init+0xe8>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041c6:	fb02 f303 	mul.w	r3, r2, r3
 80041ca:	4a69      	ldr	r2, [pc, #420]	; (8004370 <HAL_I2C_Init+0x284>)
 80041cc:	fba2 2303 	umull	r2, r3, r2, r3
 80041d0:	099b      	lsrs	r3, r3, #6
 80041d2:	3301      	adds	r3, #1
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	430b      	orrs	r3, r1
 80041da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	495c      	ldr	r1, [pc, #368]	; (8004360 <HAL_I2C_Init+0x274>)
 80041f0:	428b      	cmp	r3, r1
 80041f2:	d819      	bhi.n	8004228 <HAL_I2C_Init+0x13c>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	1e59      	subs	r1, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004202:	1c59      	adds	r1, r3, #1
 8004204:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004208:	400b      	ands	r3, r1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_I2C_Init+0x138>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1e59      	subs	r1, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	fbb1 f3f3 	udiv	r3, r1, r3
 800421c:	3301      	adds	r3, #1
 800421e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004222:	e051      	b.n	80042c8 <HAL_I2C_Init+0x1dc>
 8004224:	2304      	movs	r3, #4
 8004226:	e04f      	b.n	80042c8 <HAL_I2C_Init+0x1dc>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d111      	bne.n	8004254 <HAL_I2C_Init+0x168>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	1e58      	subs	r0, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6859      	ldr	r1, [r3, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	440b      	add	r3, r1
 800423e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004242:	3301      	adds	r3, #1
 8004244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e012      	b.n	800427a <HAL_I2C_Init+0x18e>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1e58      	subs	r0, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6859      	ldr	r1, [r3, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	0099      	lsls	r1, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	fbb0 f3f3 	udiv	r3, r0, r3
 800426a:	3301      	adds	r3, #1
 800426c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf0c      	ite	eq
 8004274:	2301      	moveq	r3, #1
 8004276:	2300      	movne	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Init+0x196>
 800427e:	2301      	movs	r3, #1
 8004280:	e022      	b.n	80042c8 <HAL_I2C_Init+0x1dc>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10e      	bne.n	80042a8 <HAL_I2C_Init+0x1bc>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1e58      	subs	r0, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6859      	ldr	r1, [r3, #4]
 8004292:	460b      	mov	r3, r1
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	440b      	add	r3, r1
 8004298:	fbb0 f3f3 	udiv	r3, r0, r3
 800429c:	3301      	adds	r3, #1
 800429e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a6:	e00f      	b.n	80042c8 <HAL_I2C_Init+0x1dc>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	1e58      	subs	r0, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6859      	ldr	r1, [r3, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	0099      	lsls	r1, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80042be:	3301      	adds	r3, #1
 80042c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	6809      	ldr	r1, [r1, #0]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69da      	ldr	r2, [r3, #28]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6911      	ldr	r1, [r2, #16]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68d2      	ldr	r2, [r2, #12]
 8004302:	4311      	orrs	r1, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	430b      	orrs	r3, r1
 800430a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	000186a0 	.word	0x000186a0
 8004364:	001e847f 	.word	0x001e847f
 8004368:	003d08ff 	.word	0x003d08ff
 800436c:	431bde83 	.word	0x431bde83
 8004370:	10624dd3 	.word	0x10624dd3

08004374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e267      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d075      	beq.n	800447e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004392:	4b88      	ldr	r3, [pc, #544]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b04      	cmp	r3, #4
 800439c:	d00c      	beq.n	80043b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439e:	4b85      	ldr	r3, [pc, #532]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d112      	bne.n	80043d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043aa:	4b82      	ldr	r3, [pc, #520]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b6:	d10b      	bne.n	80043d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b8:	4b7e      	ldr	r3, [pc, #504]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d05b      	beq.n	800447c <HAL_RCC_OscConfig+0x108>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d157      	bne.n	800447c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e242      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d8:	d106      	bne.n	80043e8 <HAL_RCC_OscConfig+0x74>
 80043da:	4b76      	ldr	r3, [pc, #472]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a75      	ldr	r2, [pc, #468]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e01d      	b.n	8004424 <HAL_RCC_OscConfig+0xb0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0x98>
 80043f2:	4b70      	ldr	r3, [pc, #448]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a6f      	ldr	r2, [pc, #444]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4b6d      	ldr	r3, [pc, #436]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a6c      	ldr	r2, [pc, #432]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e00b      	b.n	8004424 <HAL_RCC_OscConfig+0xb0>
 800440c:	4b69      	ldr	r3, [pc, #420]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a68      	ldr	r2, [pc, #416]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b66      	ldr	r3, [pc, #408]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a65      	ldr	r2, [pc, #404]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 800441e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d013      	beq.n	8004454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fe fbe4 	bl	8002bf8 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004434:	f7fe fbe0 	bl	8002bf8 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	; 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e207      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004446:	4b5b      	ldr	r3, [pc, #364]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0xc0>
 8004452:	e014      	b.n	800447e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fe fbd0 	bl	8002bf8 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800445c:	f7fe fbcc 	bl	8002bf8 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	; 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e1f3      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446e:	4b51      	ldr	r3, [pc, #324]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0xe8>
 800447a:	e000      	b.n	800447e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d063      	beq.n	8004552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800448a:	4b4a      	ldr	r3, [pc, #296]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004496:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d11c      	bne.n	80044dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a2:	4b44      	ldr	r3, [pc, #272]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d116      	bne.n	80044dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ae:	4b41      	ldr	r3, [pc, #260]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_RCC_OscConfig+0x152>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d001      	beq.n	80044c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e1c7      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c6:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4937      	ldr	r1, [pc, #220]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044da:	e03a      	b.n	8004552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e4:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_RCC_OscConfig+0x244>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ea:	f7fe fb85 	bl	8002bf8 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f2:	f7fe fb81 	bl	8002bf8 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e1a8      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004504:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004510:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4925      	ldr	r1, [pc, #148]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]
 8004524:	e015      	b.n	8004552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004526:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <HAL_RCC_OscConfig+0x244>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fe fb64 	bl	8002bf8 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004534:	f7fe fb60 	bl	8002bf8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e187      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004546:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d036      	beq.n	80045cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004566:	4b15      	ldr	r3, [pc, #84]	; (80045bc <HAL_RCC_OscConfig+0x248>)
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456c:	f7fe fb44 	bl	8002bf8 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004574:	f7fe fb40 	bl	8002bf8 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e167      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x200>
 8004592:	e01b      	b.n	80045cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCC_OscConfig+0x248>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459a:	f7fe fb2d 	bl	8002bf8 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a0:	e00e      	b.n	80045c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a2:	f7fe fb29 	bl	8002bf8 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d907      	bls.n	80045c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e150      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
 80045b4:	40023800 	.word	0x40023800
 80045b8:	42470000 	.word	0x42470000
 80045bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c0:	4b88      	ldr	r3, [pc, #544]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80045c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1ea      	bne.n	80045a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8097 	beq.w	8004708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045da:	2300      	movs	r3, #0
 80045dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045de:	4b81      	ldr	r3, [pc, #516]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10f      	bne.n	800460a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	4b7d      	ldr	r3, [pc, #500]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	4a7c      	ldr	r2, [pc, #496]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80045f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f8:	6413      	str	r3, [r2, #64]	; 0x40
 80045fa:	4b7a      	ldr	r3, [pc, #488]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004606:	2301      	movs	r3, #1
 8004608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460a:	4b77      	ldr	r3, [pc, #476]	; (80047e8 <HAL_RCC_OscConfig+0x474>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d118      	bne.n	8004648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004616:	4b74      	ldr	r3, [pc, #464]	; (80047e8 <HAL_RCC_OscConfig+0x474>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a73      	ldr	r2, [pc, #460]	; (80047e8 <HAL_RCC_OscConfig+0x474>)
 800461c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004622:	f7fe fae9 	bl	8002bf8 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462a:	f7fe fae5 	bl	8002bf8 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e10c      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463c:	4b6a      	ldr	r3, [pc, #424]	; (80047e8 <HAL_RCC_OscConfig+0x474>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d106      	bne.n	800465e <HAL_RCC_OscConfig+0x2ea>
 8004650:	4b64      	ldr	r3, [pc, #400]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004654:	4a63      	ldr	r2, [pc, #396]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6713      	str	r3, [r2, #112]	; 0x70
 800465c:	e01c      	b.n	8004698 <HAL_RCC_OscConfig+0x324>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b05      	cmp	r3, #5
 8004664:	d10c      	bne.n	8004680 <HAL_RCC_OscConfig+0x30c>
 8004666:	4b5f      	ldr	r3, [pc, #380]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a5e      	ldr	r2, [pc, #376]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 800466c:	f043 0304 	orr.w	r3, r3, #4
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
 8004672:	4b5c      	ldr	r3, [pc, #368]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4a5b      	ldr	r2, [pc, #364]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	6713      	str	r3, [r2, #112]	; 0x70
 800467e:	e00b      	b.n	8004698 <HAL_RCC_OscConfig+0x324>
 8004680:	4b58      	ldr	r3, [pc, #352]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a57      	ldr	r2, [pc, #348]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
 800468c:	4b55      	ldr	r3, [pc, #340]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	4a54      	ldr	r2, [pc, #336]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004692:	f023 0304 	bic.w	r3, r3, #4
 8004696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d015      	beq.n	80046cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7fe faaa 	bl	8002bf8 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a6:	e00a      	b.n	80046be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a8:	f7fe faa6 	bl	8002bf8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e0cb      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046be:	4b49      	ldr	r3, [pc, #292]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0ee      	beq.n	80046a8 <HAL_RCC_OscConfig+0x334>
 80046ca:	e014      	b.n	80046f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046cc:	f7fe fa94 	bl	8002bf8 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d4:	f7fe fa90 	bl	8002bf8 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e0b5      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ea:	4b3e      	ldr	r3, [pc, #248]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1ee      	bne.n	80046d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d105      	bne.n	8004708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fc:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	4a38      	ldr	r2, [pc, #224]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004706:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80a1 	beq.w	8004854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004712:	4b34      	ldr	r3, [pc, #208]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b08      	cmp	r3, #8
 800471c:	d05c      	beq.n	80047d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d141      	bne.n	80047aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004726:	4b31      	ldr	r3, [pc, #196]	; (80047ec <HAL_RCC_OscConfig+0x478>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fe fa64 	bl	8002bf8 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004734:	f7fe fa60 	bl	8002bf8 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e087      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004746:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69da      	ldr	r2, [r3, #28]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	019b      	lsls	r3, r3, #6
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	3b01      	subs	r3, #1
 800476c:	041b      	lsls	r3, r3, #16
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	491b      	ldr	r1, [pc, #108]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477c:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_RCC_OscConfig+0x478>)
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004782:	f7fe fa39 	bl	8002bf8 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800478a:	f7fe fa35 	bl	8002bf8 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e05c      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479c:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x416>
 80047a8:	e054      	b.n	8004854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <HAL_RCC_OscConfig+0x478>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fe fa22 	bl	8002bf8 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fe fa1e 	bl	8002bf8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e045      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x444>
 80047d6:	e03d      	b.n	8004854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d107      	bne.n	80047f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e038      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
 80047e4:	40023800 	.word	0x40023800
 80047e8:	40007000 	.word	0x40007000
 80047ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047f0:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <HAL_RCC_OscConfig+0x4ec>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d028      	beq.n	8004850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004808:	429a      	cmp	r2, r3
 800480a:	d121      	bne.n	8004850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004816:	429a      	cmp	r2, r3
 8004818:	d11a      	bne.n	8004850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004820:	4013      	ands	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004828:	4293      	cmp	r3, r2
 800482a:	d111      	bne.n	8004850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	3b01      	subs	r3, #1
 800483a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d107      	bne.n	8004850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40023800 	.word	0x40023800

08004864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0cc      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004878:	4b68      	ldr	r3, [pc, #416]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d90c      	bls.n	80048a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b65      	ldr	r3, [pc, #404]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b63      	ldr	r3, [pc, #396]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0b8      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d020      	beq.n	80048ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b8:	4b59      	ldr	r3, [pc, #356]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4a58      	ldr	r2, [pc, #352]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d0:	4b53      	ldr	r3, [pc, #332]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	4a52      	ldr	r2, [pc, #328]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048dc:	4b50      	ldr	r3, [pc, #320]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	494d      	ldr	r1, [pc, #308]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d044      	beq.n	8004984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004902:	4b47      	ldr	r3, [pc, #284]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d119      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e07f      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d003      	beq.n	8004922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800491e:	2b03      	cmp	r3, #3
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004922:	4b3f      	ldr	r3, [pc, #252]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e06f      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004932:	4b3b      	ldr	r3, [pc, #236]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e067      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004942:	4b37      	ldr	r3, [pc, #220]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f023 0203 	bic.w	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4934      	ldr	r1, [pc, #208]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	4313      	orrs	r3, r2
 8004952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004954:	f7fe f950 	bl	8002bf8 <HAL_GetTick>
 8004958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495a:	e00a      	b.n	8004972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800495c:	f7fe f94c 	bl	8002bf8 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e04f      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004972:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 020c 	and.w	r2, r3, #12
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	429a      	cmp	r2, r3
 8004982:	d1eb      	bne.n	800495c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004984:	4b25      	ldr	r3, [pc, #148]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d20c      	bcs.n	80049ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499a:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e032      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b8:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4916      	ldr	r1, [pc, #88]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049d6:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	490e      	ldr	r1, [pc, #56]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ea:	f000 f821 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 80049ee:	4602      	mov	r2, r0
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	490a      	ldr	r1, [pc, #40]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 80049fc:	5ccb      	ldrb	r3, [r1, r3]
 80049fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a06:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe f8b0 	bl	8002b70 <HAL_InitTick>

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40023c00 	.word	0x40023c00
 8004a20:	40023800 	.word	0x40023800
 8004a24:	08009ab8 	.word	0x08009ab8
 8004a28:	20000010 	.word	0x20000010
 8004a2c:	20000014 	.word	0x20000014

08004a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a34:	b094      	sub	sp, #80	; 0x50
 8004a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a40:	2300      	movs	r3, #0
 8004a42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a48:	4b79      	ldr	r3, [pc, #484]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030c 	and.w	r3, r3, #12
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d00d      	beq.n	8004a70 <HAL_RCC_GetSysClockFreq+0x40>
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	f200 80e1 	bhi.w	8004c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0x34>
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d003      	beq.n	8004a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a62:	e0db      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a64:	4b73      	ldr	r3, [pc, #460]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a68:	e0db      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a6a:	4b73      	ldr	r3, [pc, #460]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a6e:	e0d8      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a70:	4b6f      	ldr	r3, [pc, #444]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a7a:	4b6d      	ldr	r3, [pc, #436]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d063      	beq.n	8004b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a86:	4b6a      	ldr	r3, [pc, #424]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	099b      	lsrs	r3, r3, #6
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a98:	633b      	str	r3, [r7, #48]	; 0x30
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	462b      	mov	r3, r5
 8004aa6:	f04f 0000 	mov.w	r0, #0
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	0159      	lsls	r1, r3, #5
 8004ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab4:	0150      	lsls	r0, r2, #5
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4621      	mov	r1, r4
 8004abc:	1a51      	subs	r1, r2, r1
 8004abe:	6139      	str	r1, [r7, #16]
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ad4:	4659      	mov	r1, fp
 8004ad6:	018b      	lsls	r3, r1, #6
 8004ad8:	4651      	mov	r1, sl
 8004ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ade:	4651      	mov	r1, sl
 8004ae0:	018a      	lsls	r2, r1, #6
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ae8:	4659      	mov	r1, fp
 8004aea:	eb63 0901 	sbc.w	r9, r3, r1
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b02:	4690      	mov	r8, r2
 8004b04:	4699      	mov	r9, r3
 8004b06:	4623      	mov	r3, r4
 8004b08:	eb18 0303 	adds.w	r3, r8, r3
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	462b      	mov	r3, r5
 8004b10:	eb49 0303 	adc.w	r3, r9, r3
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b22:	4629      	mov	r1, r5
 8004b24:	024b      	lsls	r3, r1, #9
 8004b26:	4621      	mov	r1, r4
 8004b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	024a      	lsls	r2, r1, #9
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b36:	2200      	movs	r2, #0
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b40:	f7fb ff68 	bl	8000a14 <__aeabi_uldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4613      	mov	r3, r2
 8004b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b4c:	e058      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b4e:	4b38      	ldr	r3, [pc, #224]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	099b      	lsrs	r3, r3, #6
 8004b54:	2200      	movs	r2, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	4611      	mov	r1, r2
 8004b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b5e:	623b      	str	r3, [r7, #32]
 8004b60:	2300      	movs	r3, #0
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
 8004b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b68:	4642      	mov	r2, r8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	f04f 0000 	mov.w	r0, #0
 8004b70:	f04f 0100 	mov.w	r1, #0
 8004b74:	0159      	lsls	r1, r3, #5
 8004b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b7a:	0150      	lsls	r0, r2, #5
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4641      	mov	r1, r8
 8004b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b86:	4649      	mov	r1, r9
 8004b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	00eb      	lsls	r3, r5, #3
 8004bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb6:	00e2      	lsls	r2, r4, #3
 8004bb8:	4614      	mov	r4, r2
 8004bba:	461d      	mov	r5, r3
 8004bbc:	4643      	mov	r3, r8
 8004bbe:	18e3      	adds	r3, r4, r3
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	eb45 0303 	adc.w	r3, r5, r3
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	028b      	lsls	r3, r1, #10
 8004bda:	4621      	mov	r1, r4
 8004bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004be0:	4621      	mov	r1, r4
 8004be2:	028a      	lsls	r2, r1, #10
 8004be4:	4610      	mov	r0, r2
 8004be6:	4619      	mov	r1, r3
 8004be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bea:	2200      	movs	r2, #0
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	61fa      	str	r2, [r7, #28]
 8004bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf4:	f7fb ff0e 	bl	8000a14 <__aeabi_uldivmod>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c1a:	e002      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3750      	adds	r7, #80	; 0x50
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800
 8004c34:	00f42400 	.word	0x00f42400
 8004c38:	007a1200 	.word	0x007a1200

08004c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c40:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c42:	681b      	ldr	r3, [r3, #0]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20000010 	.word	0x20000010

08004c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c58:	f7ff fff0 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	0a9b      	lsrs	r3, r3, #10
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4903      	ldr	r1, [pc, #12]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c6a:	5ccb      	ldrb	r3, [r1, r3]
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40023800 	.word	0x40023800
 8004c78:	08009ac8 	.word	0x08009ac8

08004c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e07b      	b.n	8004d86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d108      	bne.n	8004ca8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c9e:	d009      	beq.n	8004cb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	61da      	str	r2, [r3, #28]
 8004ca6:	e005      	b.n	8004cb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fd fd32 	bl	8002738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	ea42 0103 	orr.w	r1, r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	0c1b      	lsrs	r3, r3, #16
 8004d52:	f003 0104 	and.w	r1, r3, #4
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	f003 0210 	and.w	r2, r3, #16
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69da      	ldr	r2, [r3, #28]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b088      	sub	sp, #32
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	603b      	str	r3, [r7, #0]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_SPI_Transmit+0x22>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e126      	b.n	8004ffe <HAL_SPI_Transmit+0x270>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004db8:	f7fd ff1e 	bl	8002bf8 <HAL_GetTick>
 8004dbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004dce:	2302      	movs	r3, #2
 8004dd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dd2:	e10b      	b.n	8004fec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_SPI_Transmit+0x52>
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004de4:	e102      	b.n	8004fec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2203      	movs	r2, #3
 8004dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	88fa      	ldrh	r2, [r7, #6]
 8004dfe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2c:	d10f      	bne.n	8004e4e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d007      	beq.n	8004e6c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e74:	d14b      	bne.n	8004f0e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_SPI_Transmit+0xf6>
 8004e7e:	8afb      	ldrh	r3, [r7, #22]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d13e      	bne.n	8004f02 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	881a      	ldrh	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	1c9a      	adds	r2, r3, #2
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ea8:	e02b      	b.n	8004f02 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d112      	bne.n	8004ede <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	881a      	ldrh	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	1c9a      	adds	r2, r3, #2
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	86da      	strh	r2, [r3, #54]	; 0x36
 8004edc:	e011      	b.n	8004f02 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ede:	f7fd fe8b 	bl	8002bf8 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d803      	bhi.n	8004ef6 <HAL_SPI_Transmit+0x168>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef4:	d102      	bne.n	8004efc <HAL_SPI_Transmit+0x16e>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f00:	e074      	b.n	8004fec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1ce      	bne.n	8004eaa <HAL_SPI_Transmit+0x11c>
 8004f0c:	e04c      	b.n	8004fa8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_SPI_Transmit+0x18e>
 8004f16:	8afb      	ldrh	r3, [r7, #22]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d140      	bne.n	8004f9e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	330c      	adds	r3, #12
 8004f26:	7812      	ldrb	r2, [r2, #0]
 8004f28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f42:	e02c      	b.n	8004f9e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d113      	bne.n	8004f7a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	330c      	adds	r3, #12
 8004f5c:	7812      	ldrb	r2, [r2, #0]
 8004f5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f78:	e011      	b.n	8004f9e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f7a:	f7fd fe3d 	bl	8002bf8 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d803      	bhi.n	8004f92 <HAL_SPI_Transmit+0x204>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d102      	bne.n	8004f98 <HAL_SPI_Transmit+0x20a>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f9c:	e026      	b.n	8004fec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1cd      	bne.n	8004f44 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	6839      	ldr	r1, [r7, #0]
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fbcb 	bl	8005748 <SPI_EndRxTxTransaction>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e000      	b.n	8004fec <HAL_SPI_Transmit+0x25e>
  }

error:
 8004fea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ffc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b088      	sub	sp, #32
 800500a:	af02      	add	r7, sp, #8
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	4613      	mov	r3, r2
 8005014:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005022:	d112      	bne.n	800504a <HAL_SPI_Receive+0x44>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10e      	bne.n	800504a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2204      	movs	r2, #4
 8005030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005034:	88fa      	ldrh	r2, [r7, #6]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	4613      	mov	r3, r2
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f8f1 	bl	8005228 <HAL_SPI_TransmitReceive>
 8005046:	4603      	mov	r3, r0
 8005048:	e0ea      	b.n	8005220 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_SPI_Receive+0x52>
 8005054:	2302      	movs	r3, #2
 8005056:	e0e3      	b.n	8005220 <HAL_SPI_Receive+0x21a>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005060:	f7fd fdca 	bl	8002bf8 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b01      	cmp	r3, #1
 8005070:	d002      	beq.n	8005078 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005072:	2302      	movs	r3, #2
 8005074:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005076:	e0ca      	b.n	800520e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_SPI_Receive+0x7e>
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d102      	bne.n	800508a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005088:	e0c1      	b.n	800520e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2204      	movs	r2, #4
 800508e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	88fa      	ldrh	r2, [r7, #6]
 80050a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	88fa      	ldrh	r2, [r7, #6]
 80050a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d0:	d10f      	bne.n	80050f2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fc:	2b40      	cmp	r3, #64	; 0x40
 80050fe:	d007      	beq.n	8005110 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800510e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d162      	bne.n	80051de <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005118:	e02e      	b.n	8005178 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b01      	cmp	r3, #1
 8005126:	d115      	bne.n	8005154 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f103 020c 	add.w	r2, r3, #12
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	7812      	ldrb	r2, [r2, #0]
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005152:	e011      	b.n	8005178 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005154:	f7fd fd50 	bl	8002bf8 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d803      	bhi.n	800516c <HAL_SPI_Receive+0x166>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	d102      	bne.n	8005172 <HAL_SPI_Receive+0x16c>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005176:	e04a      	b.n	800520e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1cb      	bne.n	800511a <HAL_SPI_Receive+0x114>
 8005182:	e031      	b.n	80051e8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b01      	cmp	r3, #1
 8005190:	d113      	bne.n	80051ba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	b292      	uxth	r2, r2
 800519e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	1c9a      	adds	r2, r3, #2
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051b8:	e011      	b.n	80051de <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ba:	f7fd fd1d 	bl	8002bf8 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d803      	bhi.n	80051d2 <HAL_SPI_Receive+0x1cc>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d102      	bne.n	80051d8 <HAL_SPI_Receive+0x1d2>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d102      	bne.n	80051de <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80051dc:	e017      	b.n	800520e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1cd      	bne.n	8005184 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 fa45 	bl	800567c <SPI_EndRxTransaction>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	75fb      	strb	r3, [r7, #23]
 800520a:	e000      	b.n	800520e <HAL_SPI_Receive+0x208>
  }

error :
 800520c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800521e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08c      	sub	sp, #48	; 0x30
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005236:	2301      	movs	r3, #1
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_SPI_TransmitReceive+0x26>
 800524a:	2302      	movs	r3, #2
 800524c:	e18a      	b.n	8005564 <HAL_SPI_TransmitReceive+0x33c>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005256:	f7fd fccf 	bl	8002bf8 <HAL_GetTick>
 800525a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800526c:	887b      	ldrh	r3, [r7, #2]
 800526e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005270:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005274:	2b01      	cmp	r3, #1
 8005276:	d00f      	beq.n	8005298 <HAL_SPI_TransmitReceive+0x70>
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800527e:	d107      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d103      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x68>
 8005288:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800528c:	2b04      	cmp	r3, #4
 800528e:	d003      	beq.n	8005298 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005290:	2302      	movs	r3, #2
 8005292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005296:	e15b      	b.n	8005550 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_SPI_TransmitReceive+0x82>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <HAL_SPI_TransmitReceive+0x82>
 80052a4:	887b      	ldrh	r3, [r7, #2]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052b0:	e14e      	b.n	8005550 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d003      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2205      	movs	r2, #5
 80052c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	887a      	ldrh	r2, [r7, #2]
 80052d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	887a      	ldrh	r2, [r7, #2]
 80052dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	887a      	ldrh	r2, [r7, #2]
 80052e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	887a      	ldrh	r2, [r7, #2]
 80052ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	d007      	beq.n	800531a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005318:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005322:	d178      	bne.n	8005416 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <HAL_SPI_TransmitReceive+0x10a>
 800532c:	8b7b      	ldrh	r3, [r7, #26]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d166      	bne.n	8005400 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	881a      	ldrh	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	1c9a      	adds	r2, r3, #2
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005356:	e053      	b.n	8005400 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b02      	cmp	r3, #2
 8005364:	d11b      	bne.n	800539e <HAL_SPI_TransmitReceive+0x176>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d016      	beq.n	800539e <HAL_SPI_TransmitReceive+0x176>
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005372:	2b01      	cmp	r3, #1
 8005374:	d113      	bne.n	800539e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	881a      	ldrh	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	1c9a      	adds	r2, r3, #2
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d119      	bne.n	80053e0 <HAL_SPI_TransmitReceive+0x1b8>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d014      	beq.n	80053e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	b292      	uxth	r2, r2
 80053c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	1c9a      	adds	r2, r3, #2
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053dc:	2301      	movs	r3, #1
 80053de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053e0:	f7fd fc0a 	bl	8002bf8 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d807      	bhi.n	8005400 <HAL_SPI_TransmitReceive+0x1d8>
 80053f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	d003      	beq.n	8005400 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053fe:	e0a7      	b.n	8005550 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1a6      	bne.n	8005358 <HAL_SPI_TransmitReceive+0x130>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1a1      	bne.n	8005358 <HAL_SPI_TransmitReceive+0x130>
 8005414:	e07c      	b.n	8005510 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <HAL_SPI_TransmitReceive+0x1fc>
 800541e:	8b7b      	ldrh	r3, [r7, #26]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d16b      	bne.n	80054fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	7812      	ldrb	r2, [r2, #0]
 8005430:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800544a:	e057      	b.n	80054fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b02      	cmp	r3, #2
 8005458:	d11c      	bne.n	8005494 <HAL_SPI_TransmitReceive+0x26c>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d017      	beq.n	8005494 <HAL_SPI_TransmitReceive+0x26c>
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	2b01      	cmp	r3, #1
 8005468:	d114      	bne.n	8005494 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	7812      	ldrb	r2, [r2, #0]
 8005476:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d119      	bne.n	80054d6 <HAL_SPI_TransmitReceive+0x2ae>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d014      	beq.n	80054d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054d2:	2301      	movs	r3, #1
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054d6:	f7fd fb8f 	bl	8002bf8 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d803      	bhi.n	80054ee <HAL_SPI_TransmitReceive+0x2c6>
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d102      	bne.n	80054f4 <HAL_SPI_TransmitReceive+0x2cc>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d103      	bne.n	80054fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054fa:	e029      	b.n	8005550 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1a2      	bne.n	800544c <HAL_SPI_TransmitReceive+0x224>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d19d      	bne.n	800544c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f917 	bl	8005748 <SPI_EndRxTxTransaction>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d006      	beq.n	800552e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800552c:	e010      	b.n	8005550 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10b      	bne.n	800554e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	e000      	b.n	8005550 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800554e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005560:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005564:	4618      	mov	r0, r3
 8005566:	3730      	adds	r7, #48	; 0x30
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800557c:	f7fd fb3c 	bl	8002bf8 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	4413      	add	r3, r2
 800558a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800558c:	f7fd fb34 	bl	8002bf8 <HAL_GetTick>
 8005590:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005592:	4b39      	ldr	r3, [pc, #228]	; (8005678 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	015b      	lsls	r3, r3, #5
 8005598:	0d1b      	lsrs	r3, r3, #20
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	fb02 f303 	mul.w	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055a2:	e054      	b.n	800564e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055aa:	d050      	beq.n	800564e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055ac:	f7fd fb24 	bl	8002bf8 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d902      	bls.n	80055c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d13d      	bne.n	800563e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055da:	d111      	bne.n	8005600 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e4:	d004      	beq.n	80055f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ee:	d107      	bne.n	8005600 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005608:	d10f      	bne.n	800562a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005628:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e017      	b.n	800566e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	3b01      	subs	r3, #1
 800564c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4013      	ands	r3, r2
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	429a      	cmp	r2, r3
 800565c:	bf0c      	ite	eq
 800565e:	2301      	moveq	r3, #1
 8005660:	2300      	movne	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	429a      	cmp	r2, r3
 800566a:	d19b      	bne.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000010 	.word	0x20000010

0800567c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af02      	add	r7, sp, #8
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005690:	d111      	bne.n	80056b6 <SPI_EndRxTransaction+0x3a>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569a:	d004      	beq.n	80056a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a4:	d107      	bne.n	80056b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056be:	d12a      	bne.n	8005716 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c8:	d012      	beq.n	80056f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2200      	movs	r2, #0
 80056d2:	2180      	movs	r1, #128	; 0x80
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff ff49 	bl	800556c <SPI_WaitFlagStateUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d02d      	beq.n	800573c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e4:	f043 0220 	orr.w	r2, r3, #32
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e026      	b.n	800573e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2200      	movs	r2, #0
 80056f8:	2101      	movs	r1, #1
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff ff36 	bl	800556c <SPI_WaitFlagStateUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01a      	beq.n	800573c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570a:	f043 0220 	orr.w	r2, r3, #32
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e013      	b.n	800573e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2200      	movs	r2, #0
 800571e:	2101      	movs	r1, #1
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff ff23 	bl	800556c <SPI_WaitFlagStateUntilTimeout>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005730:	f043 0220 	orr.w	r2, r3, #32
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e000      	b.n	800573e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af02      	add	r7, sp, #8
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005754:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <SPI_EndRxTxTransaction+0x7c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1b      	ldr	r2, [pc, #108]	; (80057c8 <SPI_EndRxTxTransaction+0x80>)
 800575a:	fba2 2303 	umull	r2, r3, r2, r3
 800575e:	0d5b      	lsrs	r3, r3, #21
 8005760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005764:	fb02 f303 	mul.w	r3, r2, r3
 8005768:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005772:	d112      	bne.n	800579a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2200      	movs	r2, #0
 800577c:	2180      	movs	r1, #128	; 0x80
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff fef4 	bl	800556c <SPI_WaitFlagStateUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d016      	beq.n	80057b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578e:	f043 0220 	orr.w	r2, r3, #32
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e00f      	b.n	80057ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b0:	2b80      	cmp	r3, #128	; 0x80
 80057b2:	d0f2      	beq.n	800579a <SPI_EndRxTxTransaction+0x52>
 80057b4:	e000      	b.n	80057b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80057b6:	bf00      	nop
  }

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000010 	.word	0x20000010
 80057c8:	165e9f81 	.word	0x165e9f81

080057cc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e034      	b.n	800584c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7fb fd28 	bl	800124c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3308      	adds	r3, #8
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f001 f860 	bl	80068cc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	461a      	mov	r2, r3
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	f001 f8aa 	bl	8006970 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6858      	ldr	r0, [r3, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	f001 f8df 	bl	80069ec <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	6892      	ldr	r2, [r2, #8]
 8005836:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	6892      	ldr	r2, [r2, #8]
 8005842:	f041 0101 	orr.w	r1, r1, #1
 8005846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e041      	b.n	80058ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fd f8b6 	bl	80029ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3304      	adds	r3, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f000 fc7a 	bl	800618c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b01      	cmp	r3, #1
 8005906:	d001      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e04e      	b.n	80059aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a23      	ldr	r2, [pc, #140]	; (80059b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d022      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005936:	d01d      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1f      	ldr	r2, [pc, #124]	; (80059bc <HAL_TIM_Base_Start_IT+0xc8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d018      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1e      	ldr	r2, [pc, #120]	; (80059c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d013      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00e      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d009      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a19      	ldr	r2, [pc, #100]	; (80059cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d004      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a18      	ldr	r2, [pc, #96]	; (80059d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d111      	bne.n	8005998 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b06      	cmp	r3, #6
 8005984:	d010      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0201 	orr.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005996:	e007      	b.n	80059a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800
 80059c4:	40000c00 	.word	0x40000c00
 80059c8:	40010400 	.word	0x40010400
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40001800 	.word	0x40001800

080059d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e041      	b.n	8005a6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f839 	bl	8005a72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f000 fbba 	bl	800618c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d109      	bne.n	8005aac <HAL_TIM_PWM_Start+0x24>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	bf14      	ite	ne
 8005aa4:	2301      	movne	r3, #1
 8005aa6:	2300      	moveq	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	e022      	b.n	8005af2 <HAL_TIM_PWM_Start+0x6a>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d109      	bne.n	8005ac6 <HAL_TIM_PWM_Start+0x3e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	bf14      	ite	ne
 8005abe:	2301      	movne	r3, #1
 8005ac0:	2300      	moveq	r3, #0
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	e015      	b.n	8005af2 <HAL_TIM_PWM_Start+0x6a>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d109      	bne.n	8005ae0 <HAL_TIM_PWM_Start+0x58>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	bf14      	ite	ne
 8005ad8:	2301      	movne	r3, #1
 8005ada:	2300      	moveq	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	e008      	b.n	8005af2 <HAL_TIM_PWM_Start+0x6a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	bf14      	ite	ne
 8005aec:	2301      	movne	r3, #1
 8005aee:	2300      	moveq	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e07c      	b.n	8005bf4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d104      	bne.n	8005b0a <HAL_TIM_PWM_Start+0x82>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b08:	e013      	b.n	8005b32 <HAL_TIM_PWM_Start+0xaa>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d104      	bne.n	8005b1a <HAL_TIM_PWM_Start+0x92>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b18:	e00b      	b.n	8005b32 <HAL_TIM_PWM_Start+0xaa>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d104      	bne.n	8005b2a <HAL_TIM_PWM_Start+0xa2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b28:	e003      	b.n	8005b32 <HAL_TIM_PWM_Start+0xaa>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2201      	movs	r2, #1
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fe10 	bl	8006760 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a2d      	ldr	r2, [pc, #180]	; (8005bfc <HAL_TIM_PWM_Start+0x174>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <HAL_TIM_PWM_Start+0xcc>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2c      	ldr	r2, [pc, #176]	; (8005c00 <HAL_TIM_PWM_Start+0x178>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d101      	bne.n	8005b58 <HAL_TIM_PWM_Start+0xd0>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <HAL_TIM_PWM_Start+0xd2>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a22      	ldr	r2, [pc, #136]	; (8005bfc <HAL_TIM_PWM_Start+0x174>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d022      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x136>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b80:	d01d      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x136>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a1f      	ldr	r2, [pc, #124]	; (8005c04 <HAL_TIM_PWM_Start+0x17c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d018      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x136>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1d      	ldr	r2, [pc, #116]	; (8005c08 <HAL_TIM_PWM_Start+0x180>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x136>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1c      	ldr	r2, [pc, #112]	; (8005c0c <HAL_TIM_PWM_Start+0x184>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00e      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x136>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a16      	ldr	r2, [pc, #88]	; (8005c00 <HAL_TIM_PWM_Start+0x178>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d009      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x136>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a18      	ldr	r2, [pc, #96]	; (8005c10 <HAL_TIM_PWM_Start+0x188>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d004      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x136>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a16      	ldr	r2, [pc, #88]	; (8005c14 <HAL_TIM_PWM_Start+0x18c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d111      	bne.n	8005be2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d010      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be0:	e007      	b.n	8005bf2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40010400 	.word	0x40010400
 8005c04:	40000400 	.word	0x40000400
 8005c08:	40000800 	.word	0x40000800
 8005c0c:	40000c00 	.word	0x40000c00
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40001800 	.word	0x40001800

08005c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d122      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d11b      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0202 	mvn.w	r2, #2
 8005c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fa77 	bl	800614e <HAL_TIM_IC_CaptureCallback>
 8005c60:	e005      	b.n	8005c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fa69 	bl	800613a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fa7a 	bl	8006162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d122      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d11b      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f06f 0204 	mvn.w	r2, #4
 8005c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fa4d 	bl	800614e <HAL_TIM_IC_CaptureCallback>
 8005cb4:	e005      	b.n	8005cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fa3f 	bl	800613a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fa50 	bl	8006162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d122      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d11b      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f06f 0208 	mvn.w	r2, #8
 8005cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa23 	bl	800614e <HAL_TIM_IC_CaptureCallback>
 8005d08:	e005      	b.n	8005d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fa15 	bl	800613a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fa26 	bl	8006162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d122      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d11b      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0210 	mvn.w	r2, #16
 8005d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2208      	movs	r2, #8
 8005d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f9f9 	bl	800614e <HAL_TIM_IC_CaptureCallback>
 8005d5c:	e005      	b.n	8005d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f9eb 	bl	800613a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f9fc 	bl	8006162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d10e      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d107      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0201 	mvn.w	r2, #1
 8005d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fc fc6e 	bl	8002678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da6:	2b80      	cmp	r3, #128	; 0x80
 8005da8:	d10e      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db4:	2b80      	cmp	r3, #128	; 0x80
 8005db6:	d107      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fd78 	bl	80068b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd2:	2b40      	cmp	r3, #64	; 0x40
 8005dd4:	d10e      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b40      	cmp	r3, #64	; 0x40
 8005de2:	d107      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f9c1 	bl	8006176 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d10e      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d107      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0220 	mvn.w	r2, #32
 8005e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fd42 	bl	80068a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e0ae      	b.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b0c      	cmp	r3, #12
 8005e52:	f200 809f 	bhi.w	8005f94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e56:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5c:	08005e91 	.word	0x08005e91
 8005e60:	08005f95 	.word	0x08005f95
 8005e64:	08005f95 	.word	0x08005f95
 8005e68:	08005f95 	.word	0x08005f95
 8005e6c:	08005ed1 	.word	0x08005ed1
 8005e70:	08005f95 	.word	0x08005f95
 8005e74:	08005f95 	.word	0x08005f95
 8005e78:	08005f95 	.word	0x08005f95
 8005e7c:	08005f13 	.word	0x08005f13
 8005e80:	08005f95 	.word	0x08005f95
 8005e84:	08005f95 	.word	0x08005f95
 8005e88:	08005f95 	.word	0x08005f95
 8005e8c:	08005f53 	.word	0x08005f53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 fa18 	bl	80062cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0208 	orr.w	r2, r2, #8
 8005eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0204 	bic.w	r2, r2, #4
 8005eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6999      	ldr	r1, [r3, #24]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	691a      	ldr	r2, [r3, #16]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	619a      	str	r2, [r3, #24]
      break;
 8005ece:	e064      	b.n	8005f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fa68 	bl	80063ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6999      	ldr	r1, [r3, #24]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	021a      	lsls	r2, r3, #8
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	619a      	str	r2, [r3, #24]
      break;
 8005f10:	e043      	b.n	8005f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fabd 	bl	8006498 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69da      	ldr	r2, [r3, #28]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0208 	orr.w	r2, r2, #8
 8005f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0204 	bic.w	r2, r2, #4
 8005f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69d9      	ldr	r1, [r3, #28]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	61da      	str	r2, [r3, #28]
      break;
 8005f50:	e023      	b.n	8005f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fb11 	bl	8006580 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69d9      	ldr	r1, [r3, #28]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	021a      	lsls	r2, r3, #8
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	61da      	str	r2, [r3, #28]
      break;
 8005f92:	e002      	b.n	8005f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	75fb      	strb	r3, [r7, #23]
      break;
 8005f98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_TIM_ConfigClockSource+0x1c>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e0b4      	b.n	8006132 <HAL_TIM_ConfigClockSource+0x186>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006000:	d03e      	beq.n	8006080 <HAL_TIM_ConfigClockSource+0xd4>
 8006002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006006:	f200 8087 	bhi.w	8006118 <HAL_TIM_ConfigClockSource+0x16c>
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600e:	f000 8086 	beq.w	800611e <HAL_TIM_ConfigClockSource+0x172>
 8006012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006016:	d87f      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x16c>
 8006018:	2b70      	cmp	r3, #112	; 0x70
 800601a:	d01a      	beq.n	8006052 <HAL_TIM_ConfigClockSource+0xa6>
 800601c:	2b70      	cmp	r3, #112	; 0x70
 800601e:	d87b      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x16c>
 8006020:	2b60      	cmp	r3, #96	; 0x60
 8006022:	d050      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x11a>
 8006024:	2b60      	cmp	r3, #96	; 0x60
 8006026:	d877      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x16c>
 8006028:	2b50      	cmp	r3, #80	; 0x50
 800602a:	d03c      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0xfa>
 800602c:	2b50      	cmp	r3, #80	; 0x50
 800602e:	d873      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x16c>
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d058      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0x13a>
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d86f      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x16c>
 8006038:	2b30      	cmp	r3, #48	; 0x30
 800603a:	d064      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x15a>
 800603c:	2b30      	cmp	r3, #48	; 0x30
 800603e:	d86b      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x16c>
 8006040:	2b20      	cmp	r3, #32
 8006042:	d060      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x15a>
 8006044:	2b20      	cmp	r3, #32
 8006046:	d867      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x16c>
 8006048:	2b00      	cmp	r3, #0
 800604a:	d05c      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x15a>
 800604c:	2b10      	cmp	r3, #16
 800604e:	d05a      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x15a>
 8006050:	e062      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6899      	ldr	r1, [r3, #8]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f000 fb5d 	bl	8006720 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	609a      	str	r2, [r3, #8]
      break;
 800607e:	e04f      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	6899      	ldr	r1, [r3, #8]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f000 fb46 	bl	8006720 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060a2:	609a      	str	r2, [r3, #8]
      break;
 80060a4:	e03c      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6859      	ldr	r1, [r3, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f000 faba 	bl	800662c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2150      	movs	r1, #80	; 0x50
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fb13 	bl	80066ea <TIM_ITRx_SetConfig>
      break;
 80060c4:	e02c      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	6859      	ldr	r1, [r3, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f000 fad9 	bl	800668a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2160      	movs	r1, #96	; 0x60
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fb03 	bl	80066ea <TIM_ITRx_SetConfig>
      break;
 80060e4:	e01c      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6859      	ldr	r1, [r3, #4]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	461a      	mov	r2, r3
 80060f4:	f000 fa9a 	bl	800662c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2140      	movs	r1, #64	; 0x40
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 faf3 	bl	80066ea <TIM_ITRx_SetConfig>
      break;
 8006104:	e00c      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4619      	mov	r1, r3
 8006110:	4610      	mov	r0, r2
 8006112:	f000 faea 	bl	80066ea <TIM_ITRx_SetConfig>
      break;
 8006116:	e003      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
      break;
 800611c:	e000      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800611e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a40      	ldr	r2, [pc, #256]	; (80062a0 <TIM_Base_SetConfig+0x114>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d013      	beq.n	80061cc <TIM_Base_SetConfig+0x40>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061aa:	d00f      	beq.n	80061cc <TIM_Base_SetConfig+0x40>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a3d      	ldr	r2, [pc, #244]	; (80062a4 <TIM_Base_SetConfig+0x118>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00b      	beq.n	80061cc <TIM_Base_SetConfig+0x40>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a3c      	ldr	r2, [pc, #240]	; (80062a8 <TIM_Base_SetConfig+0x11c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d007      	beq.n	80061cc <TIM_Base_SetConfig+0x40>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a3b      	ldr	r2, [pc, #236]	; (80062ac <TIM_Base_SetConfig+0x120>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d003      	beq.n	80061cc <TIM_Base_SetConfig+0x40>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a3a      	ldr	r2, [pc, #232]	; (80062b0 <TIM_Base_SetConfig+0x124>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d108      	bne.n	80061de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a2f      	ldr	r2, [pc, #188]	; (80062a0 <TIM_Base_SetConfig+0x114>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d02b      	beq.n	800623e <TIM_Base_SetConfig+0xb2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ec:	d027      	beq.n	800623e <TIM_Base_SetConfig+0xb2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a2c      	ldr	r2, [pc, #176]	; (80062a4 <TIM_Base_SetConfig+0x118>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d023      	beq.n	800623e <TIM_Base_SetConfig+0xb2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a2b      	ldr	r2, [pc, #172]	; (80062a8 <TIM_Base_SetConfig+0x11c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d01f      	beq.n	800623e <TIM_Base_SetConfig+0xb2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a2a      	ldr	r2, [pc, #168]	; (80062ac <TIM_Base_SetConfig+0x120>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d01b      	beq.n	800623e <TIM_Base_SetConfig+0xb2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a29      	ldr	r2, [pc, #164]	; (80062b0 <TIM_Base_SetConfig+0x124>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d017      	beq.n	800623e <TIM_Base_SetConfig+0xb2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a28      	ldr	r2, [pc, #160]	; (80062b4 <TIM_Base_SetConfig+0x128>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d013      	beq.n	800623e <TIM_Base_SetConfig+0xb2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a27      	ldr	r2, [pc, #156]	; (80062b8 <TIM_Base_SetConfig+0x12c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00f      	beq.n	800623e <TIM_Base_SetConfig+0xb2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a26      	ldr	r2, [pc, #152]	; (80062bc <TIM_Base_SetConfig+0x130>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00b      	beq.n	800623e <TIM_Base_SetConfig+0xb2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a25      	ldr	r2, [pc, #148]	; (80062c0 <TIM_Base_SetConfig+0x134>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d007      	beq.n	800623e <TIM_Base_SetConfig+0xb2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a24      	ldr	r2, [pc, #144]	; (80062c4 <TIM_Base_SetConfig+0x138>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d003      	beq.n	800623e <TIM_Base_SetConfig+0xb2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a23      	ldr	r2, [pc, #140]	; (80062c8 <TIM_Base_SetConfig+0x13c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d108      	bne.n	8006250 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a0a      	ldr	r2, [pc, #40]	; (80062a0 <TIM_Base_SetConfig+0x114>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_Base_SetConfig+0xf8>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a0c      	ldr	r2, [pc, #48]	; (80062b0 <TIM_Base_SetConfig+0x124>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d103      	bne.n	800628c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	615a      	str	r2, [r3, #20]
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40010000 	.word	0x40010000
 80062a4:	40000400 	.word	0x40000400
 80062a8:	40000800 	.word	0x40000800
 80062ac:	40000c00 	.word	0x40000c00
 80062b0:	40010400 	.word	0x40010400
 80062b4:	40014000 	.word	0x40014000
 80062b8:	40014400 	.word	0x40014400
 80062bc:	40014800 	.word	0x40014800
 80062c0:	40001800 	.word	0x40001800
 80062c4:	40001c00 	.word	0x40001c00
 80062c8:	40002000 	.word	0x40002000

080062cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f023 0201 	bic.w	r2, r3, #1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f023 0302 	bic.w	r3, r3, #2
 8006314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a20      	ldr	r2, [pc, #128]	; (80063a4 <TIM_OC1_SetConfig+0xd8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d003      	beq.n	8006330 <TIM_OC1_SetConfig+0x64>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a1f      	ldr	r2, [pc, #124]	; (80063a8 <TIM_OC1_SetConfig+0xdc>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10c      	bne.n	800634a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f023 0308 	bic.w	r3, r3, #8
 8006336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f023 0304 	bic.w	r3, r3, #4
 8006348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a15      	ldr	r2, [pc, #84]	; (80063a4 <TIM_OC1_SetConfig+0xd8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d003      	beq.n	800635a <TIM_OC1_SetConfig+0x8e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a14      	ldr	r2, [pc, #80]	; (80063a8 <TIM_OC1_SetConfig+0xdc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d111      	bne.n	800637e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	621a      	str	r2, [r3, #32]
}
 8006398:	bf00      	nop
 800639a:	371c      	adds	r7, #28
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40010400 	.word	0x40010400

080063ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	f023 0210 	bic.w	r2, r3, #16
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 0320 	bic.w	r3, r3, #32
 80063f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a22      	ldr	r2, [pc, #136]	; (8006490 <TIM_OC2_SetConfig+0xe4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_OC2_SetConfig+0x68>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a21      	ldr	r2, [pc, #132]	; (8006494 <TIM_OC2_SetConfig+0xe8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d10d      	bne.n	8006430 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800641a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	011b      	lsls	r3, r3, #4
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a17      	ldr	r2, [pc, #92]	; (8006490 <TIM_OC2_SetConfig+0xe4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d003      	beq.n	8006440 <TIM_OC2_SetConfig+0x94>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a16      	ldr	r2, [pc, #88]	; (8006494 <TIM_OC2_SetConfig+0xe8>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d113      	bne.n	8006468 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006446:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800644e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	40010000 	.word	0x40010000
 8006494:	40010400 	.word	0x40010400

08006498 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0303 	bic.w	r3, r3, #3
 80064ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	021b      	lsls	r3, r3, #8
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a21      	ldr	r2, [pc, #132]	; (8006578 <TIM_OC3_SetConfig+0xe0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_OC3_SetConfig+0x66>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a20      	ldr	r2, [pc, #128]	; (800657c <TIM_OC3_SetConfig+0xe4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d10d      	bne.n	800651a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006504:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a16      	ldr	r2, [pc, #88]	; (8006578 <TIM_OC3_SetConfig+0xe0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d003      	beq.n	800652a <TIM_OC3_SetConfig+0x92>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a15      	ldr	r2, [pc, #84]	; (800657c <TIM_OC3_SetConfig+0xe4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d113      	bne.n	8006552 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4313      	orrs	r3, r2
 8006544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	621a      	str	r2, [r3, #32]
}
 800656c:	bf00      	nop
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	40010000 	.word	0x40010000
 800657c:	40010400 	.word	0x40010400

08006580 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	031b      	lsls	r3, r3, #12
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a12      	ldr	r2, [pc, #72]	; (8006624 <TIM_OC4_SetConfig+0xa4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_OC4_SetConfig+0x68>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a11      	ldr	r2, [pc, #68]	; (8006628 <TIM_OC4_SetConfig+0xa8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d109      	bne.n	80065fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	019b      	lsls	r3, r3, #6
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40010000 	.word	0x40010000
 8006628:	40010400 	.word	0x40010400

0800662c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	f023 0201 	bic.w	r2, r3, #1
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f023 030a 	bic.w	r3, r3, #10
 8006668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	bf00      	nop
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800668a:	b480      	push	{r7}
 800668c:	b087      	sub	sp, #28
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f023 0210 	bic.w	r2, r3, #16
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	031b      	lsls	r3, r3, #12
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	621a      	str	r2, [r3, #32]
}
 80066de:	bf00      	nop
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b085      	sub	sp, #20
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4313      	orrs	r3, r2
 8006708:	f043 0307 	orr.w	r3, r3, #7
 800670c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	609a      	str	r2, [r3, #8]
}
 8006714:	bf00      	nop
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800673a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	021a      	lsls	r2, r3, #8
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	431a      	orrs	r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	4313      	orrs	r3, r2
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	609a      	str	r2, [r3, #8]
}
 8006754:	bf00      	nop
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f003 031f 	and.w	r3, r3, #31
 8006772:	2201      	movs	r2, #1
 8006774:	fa02 f303 	lsl.w	r3, r2, r3
 8006778:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a1a      	ldr	r2, [r3, #32]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	43db      	mvns	r3, r3
 8006782:	401a      	ands	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a1a      	ldr	r2, [r3, #32]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f003 031f 	and.w	r3, r3, #31
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	fa01 f303 	lsl.w	r3, r1, r3
 8006798:	431a      	orrs	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	621a      	str	r2, [r3, #32]
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e05a      	b.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a21      	ldr	r2, [pc, #132]	; (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d022      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006810:	d01d      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a1d      	ldr	r2, [pc, #116]	; (800688c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d018      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a1b      	ldr	r2, [pc, #108]	; (8006890 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d013      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a1a      	ldr	r2, [pc, #104]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00e      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a18      	ldr	r2, [pc, #96]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d009      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a17      	ldr	r2, [pc, #92]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d004      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d10c      	bne.n	8006868 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	4313      	orrs	r3, r2
 800685e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	40010000 	.word	0x40010000
 800688c:	40000400 	.word	0x40000400
 8006890:	40000800 	.word	0x40000800
 8006894:	40000c00 	.word	0x40000c00
 8006898:	40010400 	.word	0x40010400
 800689c:	40014000 	.word	0x40014000
 80068a0:	40001800 	.word	0x40001800

080068a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4b20      	ldr	r3, [pc, #128]	; (800696c <FSMC_NORSRAM_Init+0xa0>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80068f6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80068fc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006902:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006908:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800690e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006914:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800691a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006920:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006926:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800692c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006932:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006938:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2b08      	cmp	r3, #8
 8006946:	d103      	bne.n	8006950 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800694e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	fff00080 	.word	0xfff00080

08006970 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006992:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800699e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80069a6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80069ae:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80069b8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	3b02      	subs	r3, #2
 80069c0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80069c2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80069c8:	4313      	orrs	r3, r2
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6979      	ldr	r1, [r7, #20]
 80069d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
	...

080069ec <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a04:	d122      	bne.n	8006a4c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006a22:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006a2a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006a32:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006a38:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6979      	ldr	r1, [r7, #20]
 8006a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006a4a:	e005      	b.n	8006a58 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	cff00000 	.word	0xcff00000

08006a6c <memset>:
 8006a6c:	4402      	add	r2, r0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d100      	bne.n	8006a76 <memset+0xa>
 8006a74:	4770      	bx	lr
 8006a76:	f803 1b01 	strb.w	r1, [r3], #1
 8006a7a:	e7f9      	b.n	8006a70 <memset+0x4>

08006a7c <__libc_init_array>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	4d0d      	ldr	r5, [pc, #52]	; (8006ab4 <__libc_init_array+0x38>)
 8006a80:	4c0d      	ldr	r4, [pc, #52]	; (8006ab8 <__libc_init_array+0x3c>)
 8006a82:	1b64      	subs	r4, r4, r5
 8006a84:	10a4      	asrs	r4, r4, #2
 8006a86:	2600      	movs	r6, #0
 8006a88:	42a6      	cmp	r6, r4
 8006a8a:	d109      	bne.n	8006aa0 <__libc_init_array+0x24>
 8006a8c:	4d0b      	ldr	r5, [pc, #44]	; (8006abc <__libc_init_array+0x40>)
 8006a8e:	4c0c      	ldr	r4, [pc, #48]	; (8006ac0 <__libc_init_array+0x44>)
 8006a90:	f000 f818 	bl	8006ac4 <_init>
 8006a94:	1b64      	subs	r4, r4, r5
 8006a96:	10a4      	asrs	r4, r4, #2
 8006a98:	2600      	movs	r6, #0
 8006a9a:	42a6      	cmp	r6, r4
 8006a9c:	d105      	bne.n	8006aaa <__libc_init_array+0x2e>
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa4:	4798      	blx	r3
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	e7ee      	b.n	8006a88 <__libc_init_array+0xc>
 8006aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aae:	4798      	blx	r3
 8006ab0:	3601      	adds	r6, #1
 8006ab2:	e7f2      	b.n	8006a9a <__libc_init_array+0x1e>
 8006ab4:	08009ae0 	.word	0x08009ae0
 8006ab8:	08009ae0 	.word	0x08009ae0
 8006abc:	08009ae0 	.word	0x08009ae0
 8006ac0:	08009ae4 	.word	0x08009ae4

08006ac4 <_init>:
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	bf00      	nop
 8006ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aca:	bc08      	pop	{r3}
 8006acc:	469e      	mov	lr, r3
 8006ace:	4770      	bx	lr

08006ad0 <_fini>:
 8006ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad2:	bf00      	nop
 8006ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad6:	bc08      	pop	{r3}
 8006ad8:	469e      	mov	lr, r3
 8006ada:	4770      	bx	lr
