
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aab8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000333c  0800ac48  0800ac48  0001ac48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df84  0800df84  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800df84  0800df84  0001df84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df8c  0800df8c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df8c  0800df8c  0001df8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df90  0800df90  0001df90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800df94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000004c0  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000069c  2000069c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019952  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000044b5  00000000  00000000  00039ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001740  00000000  00000000  0003e058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000120f  00000000  00000000  0003f798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027169  00000000  00000000  000409a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020cf4  00000000  00000000  00067b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e132c  00000000  00000000  00088804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000070c0  00000000  00000000  00169b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00170bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac30 	.word	0x0800ac30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800ac30 	.word	0x0800ac30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eb6:	4b3d      	ldr	r3, [pc, #244]	; (8000fac <MX_ADC1_Init+0x108>)
 8000eb8:	4a3d      	ldr	r2, [pc, #244]	; (8000fb0 <MX_ADC1_Init+0x10c>)
 8000eba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ebc:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <MX_ADC1_Init+0x108>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec2:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <MX_ADC1_Init+0x108>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ec8:	4b38      	ldr	r3, [pc, #224]	; (8000fac <MX_ADC1_Init+0x108>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <MX_ADC1_Init+0x108>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed4:	4b35      	ldr	r3, [pc, #212]	; (8000fac <MX_ADC1_Init+0x108>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000edc:	4b33      	ldr	r3, [pc, #204]	; (8000fac <MX_ADC1_Init+0x108>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee2:	4b32      	ldr	r3, [pc, #200]	; (8000fac <MX_ADC1_Init+0x108>)
 8000ee4:	4a33      	ldr	r2, [pc, #204]	; (8000fb4 <MX_ADC1_Init+0x110>)
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee8:	4b30      	ldr	r3, [pc, #192]	; (8000fac <MX_ADC1_Init+0x108>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000eee:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <MX_ADC1_Init+0x108>)
 8000ef0:	2205      	movs	r2, #5
 8000ef2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <MX_ADC1_Init+0x108>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000efc:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <MX_ADC1_Init+0x108>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f02:	482a      	ldr	r0, [pc, #168]	; (8000fac <MX_ADC1_Init+0x108>)
 8000f04:	f002 f84a 	bl	8002f9c <HAL_ADC_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f0e:	f001 fa57 	bl	80023c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f12:	2308      	movs	r3, #8
 8000f14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4619      	mov	r1, r3
 8000f22:	4822      	ldr	r0, [pc, #136]	; (8000fac <MX_ADC1_Init+0x108>)
 8000f24:	f002 f9ac 	bl	8003280 <HAL_ADC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f2e:	f001 fa47 	bl	80023c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f32:	2309      	movs	r3, #9
 8000f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	481b      	ldr	r0, [pc, #108]	; (8000fac <MX_ADC1_Init+0x108>)
 8000f40:	f002 f99e 	bl	8003280 <HAL_ADC_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f4a:	f001 fa39 	bl	80023c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f52:	2303      	movs	r3, #3
 8000f54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4814      	ldr	r0, [pc, #80]	; (8000fac <MX_ADC1_Init+0x108>)
 8000f5c:	f002 f990 	bl	8003280 <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f66:	f001 fa2b 	bl	80023c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f6a:	230b      	movs	r3, #11
 8000f6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	4619      	mov	r1, r3
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <MX_ADC1_Init+0x108>)
 8000f78:	f002 f982 	bl	8003280 <HAL_ADC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f82:	f001 fa1d 	bl	80023c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f86:	230c      	movs	r3, #12
 8000f88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8e:	463b      	mov	r3, r7
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <MX_ADC1_Init+0x108>)
 8000f94:	f002 f974 	bl	8003280 <HAL_ADC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f9e:	f001 fa0f 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001f8 	.word	0x200001f8
 8000fb0:	40012000 	.word	0x40012000
 8000fb4:	0f000001 	.word	0x0f000001

08000fb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a3c      	ldr	r2, [pc, #240]	; (80010c8 <HAL_ADC_MspInit+0x110>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d171      	bne.n	80010be <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <HAL_ADC_MspInit+0x114>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	4a3a      	ldr	r2, [pc, #232]	; (80010cc <HAL_ADC_MspInit+0x114>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fea:	4b38      	ldr	r3, [pc, #224]	; (80010cc <HAL_ADC_MspInit+0x114>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b34      	ldr	r3, [pc, #208]	; (80010cc <HAL_ADC_MspInit+0x114>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a33      	ldr	r2, [pc, #204]	; (80010cc <HAL_ADC_MspInit+0x114>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b31      	ldr	r3, [pc, #196]	; (80010cc <HAL_ADC_MspInit+0x114>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <HAL_ADC_MspInit+0x114>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a2c      	ldr	r2, [pc, #176]	; (80010cc <HAL_ADC_MspInit+0x114>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <HAL_ADC_MspInit+0x114>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800102e:	2307      	movs	r3, #7
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001032:	2303      	movs	r3, #3
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4823      	ldr	r0, [pc, #140]	; (80010d0 <HAL_ADC_MspInit+0x118>)
 8001042:	f003 f8d1 	bl	80041e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001046:	2303      	movs	r3, #3
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104a:	2303      	movs	r3, #3
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	481e      	ldr	r0, [pc, #120]	; (80010d4 <HAL_ADC_MspInit+0x11c>)
 800105a:	f003 f8c5 	bl	80041e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <HAL_ADC_MspInit+0x120>)
 8001060:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <HAL_ADC_MspInit+0x124>)
 8001062:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <HAL_ADC_MspInit+0x120>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_ADC_MspInit+0x120>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_ADC_MspInit+0x120>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_ADC_MspInit+0x120>)
 8001078:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_ADC_MspInit+0x120>)
 8001080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001084:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_ADC_MspInit+0x120>)
 8001088:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800108c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_ADC_MspInit+0x120>)
 8001090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001094:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_ADC_MspInit+0x120>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_ADC_MspInit+0x120>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <HAL_ADC_MspInit+0x120>)
 80010a4:	f002 fc9e 	bl	80039e4 <HAL_DMA_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80010ae:	f001 f987 	bl	80023c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_ADC_MspInit+0x120>)
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_ADC_MspInit+0x120>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40012000 	.word	0x40012000
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40020400 	.word	0x40020400
 80010d8:	20000240 	.word	0x20000240
 80010dc:	40026410 	.word	0x40026410

080010e0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2108      	movs	r1, #8
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <button_init+0x14>)
 80010ea:	f003 fa19 	bl	8004520 <HAL_GPIO_WritePin>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40020c00 	.word	0x40020c00

080010f8 <button_Scan>:

void button_Scan(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2108      	movs	r1, #8
 8001102:	482f      	ldr	r0, [pc, #188]	; (80011c0 <button_Scan+0xc8>)
 8001104:	f003 fa0c 	bl	8004520 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	2108      	movs	r1, #8
 800110c:	482c      	ldr	r0, [pc, #176]	; (80011c0 <button_Scan+0xc8>)
 800110e:	f003 fa07 	bl	8004520 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001112:	230a      	movs	r3, #10
 8001114:	2202      	movs	r2, #2
 8001116:	492b      	ldr	r1, [pc, #172]	; (80011c4 <button_Scan+0xcc>)
 8001118:	482b      	ldr	r0, [pc, #172]	; (80011c8 <button_Scan+0xd0>)
 800111a:	f004 f9d6 	bl	80054ca <HAL_SPI_Receive>
	  int button_index = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001126:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	e03f      	b.n	80011ae <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db06      	blt.n	8001142 <button_Scan+0x4a>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b03      	cmp	r3, #3
 8001138:	dc03      	bgt.n	8001142 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3304      	adds	r3, #4
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e018      	b.n	8001174 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b03      	cmp	r3, #3
 8001146:	dd07      	ble.n	8001158 <button_Scan+0x60>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b07      	cmp	r3, #7
 800114c:	dc04      	bgt.n	8001158 <button_Scan+0x60>
			  button_index = 7 - i;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f1c3 0307 	rsb	r3, r3, #7
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	e00d      	b.n	8001174 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b07      	cmp	r3, #7
 800115c:	dd06      	ble.n	800116c <button_Scan+0x74>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0b      	cmp	r3, #11
 8001162:	dc03      	bgt.n	800116c <button_Scan+0x74>
			  button_index = i + 4;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3304      	adds	r3, #4
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	e003      	b.n	8001174 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f1c3 0317 	rsb	r3, r3, #23
 8001172:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <button_Scan+0xcc>)
 8001176:	881a      	ldrh	r2, [r3, #0]
 8001178:	897b      	ldrh	r3, [r7, #10]
 800117a:	4013      	ands	r3, r2
 800117c:	b29b      	uxth	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <button_Scan+0x96>
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <button_Scan+0xd4>)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2100      	movs	r1, #0
 8001188:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800118c:	e009      	b.n	80011a2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <button_Scan+0xd4>)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001196:	3301      	adds	r3, #1
 8001198:	b299      	uxth	r1, r3
 800119a:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <button_Scan+0xd4>)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80011a2:	897b      	ldrh	r3, [r7, #10]
 80011a4:	085b      	lsrs	r3, r3, #1
 80011a6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3301      	adds	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	ddbc      	ble.n	800112e <button_Scan+0x36>
	  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	200002c0 	.word	0x200002c0
 80011c8:	2000038c 	.word	0x2000038c
 80011cc:	200002a0 	.word	0x200002a0

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_DMA_Init+0x3c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <MX_DMA_Init+0x3c>)
 80011e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_DMA_Init+0x3c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2038      	movs	r0, #56	; 0x38
 80011f8:	f002 fbbd 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011fc:	2038      	movs	r0, #56	; 0x38
 80011fe:	f002 fbd6 	bl	80039ae <HAL_NVIC_EnableIRQ>

}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	; 0x38
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]
 800123a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <MX_FSMC_Init+0xec>)
 800123e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001242:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <MX_FSMC_Init+0xec>)
 8001246:	4a2e      	ldr	r2, [pc, #184]	; (8001300 <MX_FSMC_Init+0xf0>)
 8001248:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800124a:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <MX_FSMC_Init+0xec>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001250:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <MX_FSMC_Init+0xec>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001256:	4b29      	ldr	r3, [pc, #164]	; (80012fc <MX_FSMC_Init+0xec>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <MX_FSMC_Init+0xec>)
 800125e:	2210      	movs	r2, #16
 8001260:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <MX_FSMC_Init+0xec>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <MX_FSMC_Init+0xec>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800126e:	4b23      	ldr	r3, [pc, #140]	; (80012fc <MX_FSMC_Init+0xec>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_FSMC_Init+0xec>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <MX_FSMC_Init+0xec>)
 800127c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_FSMC_Init+0xec>)
 8001284:	2200      	movs	r2, #0
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_FSMC_Init+0xec>)
 800128a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_FSMC_Init+0xec>)
 8001292:	2200      	movs	r2, #0
 8001294:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_FSMC_Init+0xec>)
 8001298:	2200      	movs	r2, #0
 800129a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_FSMC_Init+0xec>)
 800129e:	2200      	movs	r2, #0
 80012a0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80012a2:	230f      	movs	r3, #15
 80012a4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012a6:	230f      	movs	r3, #15
 80012a8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80012aa:	233c      	movs	r3, #60	; 0x3c
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80012b2:	2310      	movs	r3, #16
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80012b6:	2311      	movs	r3, #17
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012ba:	2300      	movs	r3, #0
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80012be:	2308      	movs	r3, #8
 80012c0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80012c2:	230f      	movs	r3, #15
 80012c4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80012c6:	2309      	movs	r3, #9
 80012c8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80012ce:	2310      	movs	r3, #16
 80012d0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80012d2:	2311      	movs	r3, #17
 80012d4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80012da:	463a      	mov	r2, r7
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_FSMC_Init+0xec>)
 80012e4:	f004 fcd4 	bl	8005c90 <HAL_SRAM_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80012ee:	f001 f867 	bl	80023c0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80012f2:	bf00      	nop
 80012f4:	3738      	adds	r7, #56	; 0x38
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200002c4 	.word	0x200002c4
 8001300:	a0000104 	.word	0xa0000104

08001304 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_FSMC_MspInit+0x88>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d131      	bne.n	8001384 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_FSMC_MspInit+0x88>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_FSMC_MspInit+0x8c>)
 800132c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132e:	4a18      	ldr	r2, [pc, #96]	; (8001390 <HAL_FSMC_MspInit+0x8c>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6393      	str	r3, [r2, #56]	; 0x38
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <HAL_FSMC_MspInit+0x8c>)
 8001338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001342:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001346:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001354:	230c      	movs	r3, #12
 8001356:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	4619      	mov	r1, r3
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <HAL_FSMC_MspInit+0x90>)
 800135e:	f002 ff43 	bl	80041e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001362:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001366:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001374:	230c      	movs	r3, #12
 8001376:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4619      	mov	r1, r3
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <HAL_FSMC_MspInit+0x94>)
 800137e:	f002 ff33 	bl	80041e8 <HAL_GPIO_Init>
 8001382:	e000      	b.n	8001386 <HAL_FSMC_MspInit+0x82>
    return;
 8001384:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000314 	.word	0x20000314
 8001390:	40023800 	.word	0x40023800
 8001394:	40021000 	.word	0x40021000
 8001398:	40020c00 	.word	0x40020c00

0800139c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013a4:	f7ff ffae 	bl	8001304 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	; 0x38
 80013b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
 80013ca:	4b8f      	ldr	r3, [pc, #572]	; (8001608 <MX_GPIO_Init+0x258>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a8e      	ldr	r2, [pc, #568]	; (8001608 <MX_GPIO_Init+0x258>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b8c      	ldr	r3, [pc, #560]	; (8001608 <MX_GPIO_Init+0x258>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	623b      	str	r3, [r7, #32]
 80013e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	4b88      	ldr	r3, [pc, #544]	; (8001608 <MX_GPIO_Init+0x258>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a87      	ldr	r2, [pc, #540]	; (8001608 <MX_GPIO_Init+0x258>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b85      	ldr	r3, [pc, #532]	; (8001608 <MX_GPIO_Init+0x258>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	4b81      	ldr	r3, [pc, #516]	; (8001608 <MX_GPIO_Init+0x258>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a80      	ldr	r2, [pc, #512]	; (8001608 <MX_GPIO_Init+0x258>)
 8001408:	f043 0320 	orr.w	r3, r3, #32
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b7e      	ldr	r3, [pc, #504]	; (8001608 <MX_GPIO_Init+0x258>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	4b7a      	ldr	r3, [pc, #488]	; (8001608 <MX_GPIO_Init+0x258>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a79      	ldr	r2, [pc, #484]	; (8001608 <MX_GPIO_Init+0x258>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b77      	ldr	r3, [pc, #476]	; (8001608 <MX_GPIO_Init+0x258>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b73      	ldr	r3, [pc, #460]	; (8001608 <MX_GPIO_Init+0x258>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a72      	ldr	r2, [pc, #456]	; (8001608 <MX_GPIO_Init+0x258>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b70      	ldr	r3, [pc, #448]	; (8001608 <MX_GPIO_Init+0x258>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b6c      	ldr	r3, [pc, #432]	; (8001608 <MX_GPIO_Init+0x258>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a6b      	ldr	r2, [pc, #428]	; (8001608 <MX_GPIO_Init+0x258>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b69      	ldr	r3, [pc, #420]	; (8001608 <MX_GPIO_Init+0x258>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b65      	ldr	r3, [pc, #404]	; (8001608 <MX_GPIO_Init+0x258>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a64      	ldr	r2, [pc, #400]	; (8001608 <MX_GPIO_Init+0x258>)
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b62      	ldr	r3, [pc, #392]	; (8001608 <MX_GPIO_Init+0x258>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b5e      	ldr	r3, [pc, #376]	; (8001608 <MX_GPIO_Init+0x258>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a5d      	ldr	r2, [pc, #372]	; (8001608 <MX_GPIO_Init+0x258>)
 8001494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b5b      	ldr	r3, [pc, #364]	; (8001608 <MX_GPIO_Init+0x258>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2170      	movs	r1, #112	; 0x70
 80014aa:	4858      	ldr	r0, [pc, #352]	; (800160c <MX_GPIO_Init+0x25c>)
 80014ac:	f003 f838 	bl	8004520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80014b6:	4856      	ldr	r0, [pc, #344]	; (8001610 <MX_GPIO_Init+0x260>)
 80014b8:	f003 f832 	bl	8004520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c2:	4854      	ldr	r0, [pc, #336]	; (8001614 <MX_GPIO_Init+0x264>)
 80014c4:	f003 f82c 	bl	8004520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80014ce:	4852      	ldr	r0, [pc, #328]	; (8001618 <MX_GPIO_Init+0x268>)
 80014d0:	f003 f826 	bl	8004520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014da:	4850      	ldr	r0, [pc, #320]	; (800161c <MX_GPIO_Init+0x26c>)
 80014dc:	f003 f820 	bl	8004520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2108      	movs	r1, #8
 80014e4:	484e      	ldr	r0, [pc, #312]	; (8001620 <MX_GPIO_Init+0x270>)
 80014e6:	f003 f81b 	bl	8004520 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80014ea:	2370      	movs	r3, #112	; 0x70
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	4842      	ldr	r0, [pc, #264]	; (800160c <MX_GPIO_Init+0x25c>)
 8001502:	f002 fe71 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8001506:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	483c      	ldr	r0, [pc, #240]	; (8001610 <MX_GPIO_Init+0x260>)
 8001520:	f002 fe62 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8001524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	4836      	ldr	r0, [pc, #216]	; (8001614 <MX_GPIO_Init+0x264>)
 800153a:	f002 fe55 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 800153e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	482f      	ldr	r0, [pc, #188]	; (8001614 <MX_GPIO_Init+0x264>)
 8001558:	f002 fe46 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800155c:	23c0      	movs	r3, #192	; 0xc0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	4619      	mov	r1, r3
 800156e:	482b      	ldr	r0, [pc, #172]	; (800161c <MX_GPIO_Init+0x26c>)
 8001570:	f002 fe3a 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001574:	2330      	movs	r3, #48	; 0x30
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	4822      	ldr	r0, [pc, #136]	; (8001610 <MX_GPIO_Init+0x260>)
 8001588:	f002 fe2e 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 800158c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	481c      	ldr	r0, [pc, #112]	; (8001618 <MX_GPIO_Init+0x268>)
 80015a6:	f002 fe1f 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 80015aa:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4814      	ldr	r0, [pc, #80]	; (8001610 <MX_GPIO_Init+0x260>)
 80015c0:	f002 fe12 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80015c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	480f      	ldr	r0, [pc, #60]	; (800161c <MX_GPIO_Init+0x26c>)
 80015de:	f002 fe03 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80015e2:	2308      	movs	r3, #8
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	4809      	ldr	r0, [pc, #36]	; (8001620 <MX_GPIO_Init+0x270>)
 80015fa:	f002 fdf5 	bl	80041e8 <HAL_GPIO_Init>

}
 80015fe:	bf00      	nop
 8001600:	3738      	adds	r7, #56	; 0x38
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40021000 	.word	0x40021000
 8001610:	40020800 	.word	0x40020800
 8001614:	40021400 	.word	0x40021400
 8001618:	40021800 	.word	0x40021800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020c00 	.word	0x40020c00

08001624 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_I2C1_Init+0x50>)
 800162a:	4a13      	ldr	r2, [pc, #76]	; (8001678 <MX_I2C1_Init+0x54>)
 800162c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_I2C1_Init+0x50>)
 8001630:	4a12      	ldr	r2, [pc, #72]	; (800167c <MX_I2C1_Init+0x58>)
 8001632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_I2C1_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_I2C1_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_I2C1_Init+0x50>)
 8001642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001646:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <MX_I2C1_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_I2C1_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <MX_I2C1_Init+0x50>)
 8001662:	f002 ff91 	bl	8004588 <HAL_I2C_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800166c:	f000 fea8 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000318 	.word	0x20000318
 8001678:	40005400 	.word	0x40005400
 800167c:	000186a0 	.word	0x000186a0

08001680 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a19      	ldr	r2, [pc, #100]	; (8001704 <HAL_I2C_MspInit+0x84>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d12b      	bne.n	80016fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016be:	23c0      	movs	r3, #192	; 0xc0
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c2:	2312      	movs	r3, #18
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ce:	2304      	movs	r3, #4
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <HAL_I2C_MspInit+0x8c>)
 80016da:	f002 fd85 	bl	80041e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40005400 	.word	0x40005400
 8001708:	40023800 	.word	0x40023800
 800170c:	40020400 	.word	0x40020400

08001710 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <LCD_WR_REG+0x1c>)
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	8013      	strh	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	600ffffe 	.word	0x600ffffe

08001730 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800173a:	4a04      	ldr	r2, [pc, #16]	; (800174c <LCD_WR_DATA+0x1c>)
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	8053      	strh	r3, [r2, #2]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	600ffffe 	.word	0x600ffffe

08001750 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <LCD_RD_DATA+0x20>)
 8001758:	885b      	ldrh	r3, [r3, #2]
 800175a:	b29b      	uxth	r3, r3
 800175c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	b29b      	uxth	r3, r3
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	600ffffe 	.word	0x600ffffe

08001774 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4623      	mov	r3, r4
 8001784:	80fb      	strh	r3, [r7, #6]
 8001786:	4603      	mov	r3, r0
 8001788:	80bb      	strh	r3, [r7, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	807b      	strh	r3, [r7, #2]
 800178e:	4613      	mov	r3, r2
 8001790:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001792:	202a      	movs	r0, #42	; 0x2a
 8001794:	f7ff ffbc 	bl	8001710 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	b29b      	uxth	r3, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ffc6 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ffc0 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ffba 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ffb4 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80017c8:	202b      	movs	r0, #43	; 0x2b
 80017ca:	f7ff ffa1 	bl	8001710 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80017ce:	88bb      	ldrh	r3, [r7, #4]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ffab 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80017da:	88bb      	ldrh	r3, [r7, #4]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ffa5 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80017e6:	883b      	ldrh	r3, [r7, #0]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff9f 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80017f2:	883b      	ldrh	r3, [r7, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff99 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80017fe:	202c      	movs	r0, #44	; 0x2c
 8001800:	f7ff ff86 	bl	8001710 <LCD_WR_REG>
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}

0800180c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <lcd_Clear+0x60>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	3b01      	subs	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <lcd_Clear+0x60>)
 8001820:	885b      	ldrh	r3, [r3, #2]
 8001822:	3b01      	subs	r3, #1
 8001824:	b29b      	uxth	r3, r3
 8001826:	2100      	movs	r1, #0
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff ffa3 	bl	8001774 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800182e:	2300      	movs	r3, #0
 8001830:	81fb      	strh	r3, [r7, #14]
 8001832:	e011      	b.n	8001858 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001834:	2300      	movs	r3, #0
 8001836:	81bb      	strh	r3, [r7, #12]
 8001838:	e006      	b.n	8001848 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff77 	bl	8001730 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001842:	89bb      	ldrh	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	81bb      	strh	r3, [r7, #12]
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <lcd_Clear+0x60>)
 800184a:	885b      	ldrh	r3, [r3, #2]
 800184c:	89ba      	ldrh	r2, [r7, #12]
 800184e:	429a      	cmp	r2, r3
 8001850:	d3f3      	bcc.n	800183a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	3301      	adds	r3, #1
 8001856:	81fb      	strh	r3, [r7, #14]
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <lcd_Clear+0x60>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	89fa      	ldrh	r2, [r7, #14]
 800185e:	429a      	cmp	r2, r3
 8001860:	d3e8      	bcc.n	8001834 <lcd_Clear+0x28>
		}
	}
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000036c 	.word	0x2000036c

08001870 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
 800187a:	460b      	mov	r3, r1
 800187c:	80bb      	strh	r3, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001882:	88bb      	ldrh	r3, [r7, #4]
 8001884:	88fa      	ldrh	r2, [r7, #6]
 8001886:	88b9      	ldrh	r1, [r7, #4]
 8001888:	88f8      	ldrh	r0, [r7, #6]
 800188a:	f7ff ff73 	bl	8001774 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff4d 	bl	8001730 <LCD_WR_DATA>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4604      	mov	r4, r0
 80018a8:	4608      	mov	r0, r1
 80018aa:	4611      	mov	r1, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	4623      	mov	r3, r4
 80018b0:	80fb      	strh	r3, [r7, #6]
 80018b2:	4603      	mov	r3, r0
 80018b4:	80bb      	strh	r3, [r7, #4]
 80018b6:	460b      	mov	r3, r1
 80018b8:	70fb      	strb	r3, [r7, #3]
 80018ba:	4613      	mov	r3, r2
 80018bc:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80018be:	2300      	movs	r3, #0
 80018c0:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80018c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018ca:	085b      	lsrs	r3, r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	08db      	lsrs	r3, r3, #3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	bf14      	ite	ne
 80018e2:	2301      	movne	r3, #1
 80018e4:	2300      	moveq	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	fb12 f303 	smulbb	r3, r2, r3
 80018f6:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	3b20      	subs	r3, #32
 80018fc:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	b29a      	uxth	r2, r3
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	4413      	add	r3, r2
 8001906:	b29b      	uxth	r3, r3
 8001908:	3b01      	subs	r3, #1
 800190a:	b29c      	uxth	r4, r3
 800190c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001910:	b29a      	uxth	r2, r3
 8001912:	88bb      	ldrh	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	b29b      	uxth	r3, r3
 8001918:	3b01      	subs	r3, #1
 800191a:	b29b      	uxth	r3, r3
 800191c:	88b9      	ldrh	r1, [r7, #4]
 800191e:	88f8      	ldrh	r0, [r7, #6]
 8001920:	4622      	mov	r2, r4
 8001922:	f7ff ff27 	bl	8001774 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001926:	2300      	movs	r3, #0
 8001928:	827b      	strh	r3, [r7, #18]
 800192a:	e07a      	b.n	8001a22 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 800192c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001930:	2b0c      	cmp	r3, #12
 8001932:	d028      	beq.n	8001986 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001934:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001938:	2b10      	cmp	r3, #16
 800193a:	d108      	bne.n	800194e <lcd_ShowChar+0xae>
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	8a7b      	ldrh	r3, [r7, #18]
 8001940:	493c      	ldr	r1, [pc, #240]	; (8001a34 <lcd_ShowChar+0x194>)
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	440a      	add	r2, r1
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	75fb      	strb	r3, [r7, #23]
 800194c:	e01b      	b.n	8001986 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800194e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001952:	2b18      	cmp	r3, #24
 8001954:	d10b      	bne.n	800196e <lcd_ShowChar+0xce>
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	8a79      	ldrh	r1, [r7, #18]
 800195a:	4837      	ldr	r0, [pc, #220]	; (8001a38 <lcd_ShowChar+0x198>)
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	4403      	add	r3, r0
 8001966:	440b      	add	r3, r1
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	75fb      	strb	r3, [r7, #23]
 800196c:	e00b      	b.n	8001986 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800196e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001972:	2b20      	cmp	r3, #32
 8001974:	d15a      	bne.n	8001a2c <lcd_ShowChar+0x18c>
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	8a7b      	ldrh	r3, [r7, #18]
 800197a:	4930      	ldr	r1, [pc, #192]	; (8001a3c <lcd_ShowChar+0x19c>)
 800197c:	0192      	lsls	r2, r2, #6
 800197e:	440a      	add	r2, r1
 8001980:	4413      	add	r3, r2
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001986:	2300      	movs	r3, #0
 8001988:	75bb      	strb	r3, [r7, #22]
 800198a:	e044      	b.n	8001a16 <lcd_ShowChar+0x176>
		{
			if(!mode)
 800198c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001990:	2b00      	cmp	r3, #0
 8001992:	d120      	bne.n	80019d6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001994:	7dfa      	ldrb	r2, [r7, #23]
 8001996:	7dbb      	ldrb	r3, [r7, #22]
 8001998:	fa42 f303 	asr.w	r3, r2, r3
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <lcd_ShowChar+0x10e>
 80019a4:	883b      	ldrh	r3, [r7, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fec2 	bl	8001730 <LCD_WR_DATA>
 80019ac:	e003      	b.n	80019b6 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80019ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff febd 	bl	8001730 <LCD_WR_DATA>
				m++;
 80019b6:	7d7b      	ldrb	r3, [r7, #21]
 80019b8:	3301      	adds	r3, #1
 80019ba:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80019c4:	fb01 f202 	mul.w	r2, r1, r2
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d11f      	bne.n	8001a10 <lcd_ShowChar+0x170>
				{
					m=0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	757b      	strb	r3, [r7, #21]
					break;
 80019d4:	e022      	b.n	8001a1c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80019d6:	7dfa      	ldrb	r2, [r7, #23]
 80019d8:	7dbb      	ldrb	r3, [r7, #22]
 80019da:	fa42 f303 	asr.w	r3, r2, r3
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <lcd_ShowChar+0x152>
 80019e6:	883a      	ldrh	r2, [r7, #0]
 80019e8:	88b9      	ldrh	r1, [r7, #4]
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff3f 	bl	8001870 <lcd_DrawPoint>
				x++;
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	3301      	adds	r3, #1
 80019f6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80019f8:	88fa      	ldrh	r2, [r7, #6]
 80019fa:	8a3b      	ldrh	r3, [r7, #16]
 80019fc:	1ad2      	subs	r2, r2, r3
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d105      	bne.n	8001a10 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001a04:	8a3b      	ldrh	r3, [r7, #16]
 8001a06:	80fb      	strh	r3, [r7, #6]
					y++;
 8001a08:	88bb      	ldrh	r3, [r7, #4]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	80bb      	strh	r3, [r7, #4]
					break;
 8001a0e:	e005      	b.n	8001a1c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001a10:	7dbb      	ldrb	r3, [r7, #22]
 8001a12:	3301      	adds	r3, #1
 8001a14:	75bb      	strb	r3, [r7, #22]
 8001a16:	7dbb      	ldrb	r3, [r7, #22]
 8001a18:	2b07      	cmp	r3, #7
 8001a1a:	d9b7      	bls.n	800198c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001a1c:	8a7b      	ldrh	r3, [r7, #18]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	827b      	strh	r3, [r7, #18]
 8001a22:	8a7a      	ldrh	r2, [r7, #18]
 8001a24:	89bb      	ldrh	r3, [r7, #12]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d380      	bcc.n	800192c <lcd_ShowChar+0x8c>
 8001a2a:	e000      	b.n	8001a2e <lcd_ShowChar+0x18e>
		else return;
 8001a2c:	bf00      	nop
				}
			}
		}
	}
}
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	0800ac74 	.word	0x0800ac74
 8001a38:	0800b264 	.word	0x0800b264
 8001a3c:	0800c434 	.word	0x0800c434

08001a40 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	460a      	mov	r2, r1
 8001a4a:	71fb      	strb	r3, [r7, #7]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001a50:	2301      	movs	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001a54:	e004      	b.n	8001a60 <mypow+0x20>
 8001a56:	79fa      	ldrb	r2, [r7, #7]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	1e5a      	subs	r2, r3, #1
 8001a64:	71ba      	strb	r2, [r7, #6]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f5      	bne.n	8001a56 <mypow+0x16>
	return result;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <lcd_ShowFloatNum>:
	}
}


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b08b      	sub	sp, #44	; 0x2c
 8001a7c:	af04      	add	r7, sp, #16
 8001a7e:	4604      	mov	r4, r0
 8001a80:	4608      	mov	r0, r1
 8001a82:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a86:	4611      	mov	r1, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	81fb      	strh	r3, [r7, #14]
 8001a8e:	4603      	mov	r3, r0
 8001a90:	81bb      	strh	r3, [r7, #12]
 8001a92:	460b      	mov	r3, r1
 8001a94:	71fb      	strb	r3, [r7, #7]
 8001a96:	4613      	mov	r3, r2
 8001a98:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001a9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a9e:	085b      	lsrs	r3, r3, #1
 8001aa0:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001aa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aa6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b80 <lcd_ShowFloatNum+0x108>
 8001aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab2:	ee17 3a90 	vmov	r3, s15
 8001ab6:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	75fb      	strb	r3, [r7, #23]
 8001abc:	e057      	b.n	8001b6e <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001abe:	8abc      	ldrh	r4, [r7, #20]
 8001ac0:	79fa      	ldrb	r2, [r7, #7]
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4619      	mov	r1, r3
 8001ace:	200a      	movs	r0, #10
 8001ad0:	f7ff ffb6 	bl	8001a40 <mypow>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	fbb4 f1f3 	udiv	r1, r4, r3
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <lcd_ShowFloatNum+0x10c>)
 8001adc:	fba3 2301 	umull	r2, r3, r3, r1
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	1aca      	subs	r2, r1, r3
 8001aec:	4613      	mov	r3, r2
 8001aee:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001af0:	7dfa      	ldrb	r2, [r7, #23]
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	3b02      	subs	r3, #2
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d11d      	bne.n	8001b36 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	3b02      	subs	r3, #2
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	7dbb      	ldrb	r3, [r7, #22]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	fb12 f303 	smulbb	r3, r2, r3
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	89fb      	ldrh	r3, [r7, #14]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b298      	uxth	r0, r3
 8001b10:	88ba      	ldrh	r2, [r7, #4]
 8001b12:	89b9      	ldrh	r1, [r7, #12]
 8001b14:	2300      	movs	r3, #0
 8001b16:	9302      	str	r3, [sp, #8]
 8001b18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	4613      	mov	r3, r2
 8001b24:	222e      	movs	r2, #46	; 0x2e
 8001b26:	f7ff febb 	bl	80018a0 <lcd_ShowChar>
			t++;
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	3301      	adds	r3, #1
 8001b34:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	7dbb      	ldrb	r3, [r7, #22]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	fb12 f303 	smulbb	r3, r2, r3
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	89fb      	ldrh	r3, [r7, #14]
 8001b46:	4413      	add	r3, r2
 8001b48:	b298      	uxth	r0, r3
 8001b4a:	7cfb      	ldrb	r3, [r7, #19]
 8001b4c:	3330      	adds	r3, #48	; 0x30
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	88bc      	ldrh	r4, [r7, #4]
 8001b52:	89b9      	ldrh	r1, [r7, #12]
 8001b54:	2300      	movs	r3, #0
 8001b56:	9302      	str	r3, [sp, #8]
 8001b58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	4623      	mov	r3, r4
 8001b64:	f7ff fe9c 	bl	80018a0 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	75fb      	strb	r3, [r7, #23]
 8001b6e:	7dfa      	ldrb	r2, [r7, #23]
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d3a3      	bcc.n	8001abe <lcd_ShowFloatNum+0x46>
	}
}
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	371c      	adds	r7, #28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}
 8001b80:	42c80000 	.word	0x42c80000
 8001b84:	cccccccd 	.word	0xcccccccd

08001b88 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <lcd_SetDir+0x44>)
 8001ba4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ba8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <lcd_SetDir+0x44>)
 8001bac:	22f0      	movs	r2, #240	; 0xf0
 8001bae:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001bb0:	e006      	b.n	8001bc0 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <lcd_SetDir+0x44>)
 8001bb4:	22f0      	movs	r2, #240	; 0xf0
 8001bb6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <lcd_SetDir+0x44>)
 8001bba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bbe:	805a      	strh	r2, [r3, #2]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	2000036c 	.word	0x2000036c

08001bd0 <lcd_init>:


void lcd_init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bda:	48aa      	ldr	r0, [pc, #680]	; (8001e84 <lcd_init+0x2b4>)
 8001bdc:	f002 fca0 	bl	8004520 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001be0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001be4:	f001 f9b6 	bl	8002f54 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bee:	48a5      	ldr	r0, [pc, #660]	; (8001e84 <lcd_init+0x2b4>)
 8001bf0:	f002 fc96 	bl	8004520 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bf8:	f001 f9ac 	bl	8002f54 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff ffc3 	bl	8001b88 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001c02:	20d3      	movs	r0, #211	; 0xd3
 8001c04:	f7ff fd84 	bl	8001710 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001c08:	f7ff fda2 	bl	8001750 <LCD_RD_DATA>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b9d      	ldr	r3, [pc, #628]	; (8001e88 <lcd_init+0x2b8>)
 8001c12:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c14:	f7ff fd9c 	bl	8001750 <LCD_RD_DATA>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b9a      	ldr	r3, [pc, #616]	; (8001e88 <lcd_init+0x2b8>)
 8001c1e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c20:	f7ff fd96 	bl	8001750 <LCD_RD_DATA>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b97      	ldr	r3, [pc, #604]	; (8001e88 <lcd_init+0x2b8>)
 8001c2a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001c2c:	4b96      	ldr	r3, [pc, #600]	; (8001e88 <lcd_init+0x2b8>)
 8001c2e:	889b      	ldrh	r3, [r3, #4]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	4b94      	ldr	r3, [pc, #592]	; (8001e88 <lcd_init+0x2b8>)
 8001c36:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001c38:	f7ff fd8a 	bl	8001750 <LCD_RD_DATA>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b91      	ldr	r3, [pc, #580]	; (8001e88 <lcd_init+0x2b8>)
 8001c42:	889b      	ldrh	r3, [r3, #4]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	4b8f      	ldr	r3, [pc, #572]	; (8001e88 <lcd_init+0x2b8>)
 8001c4a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001c4c:	20cf      	movs	r0, #207	; 0xcf
 8001c4e:	f7ff fd5f 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fd6c 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001c58:	20c1      	movs	r0, #193	; 0xc1
 8001c5a:	f7ff fd69 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001c5e:	2030      	movs	r0, #48	; 0x30
 8001c60:	f7ff fd66 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001c64:	20ed      	movs	r0, #237	; 0xed
 8001c66:	f7ff fd53 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001c6a:	2064      	movs	r0, #100	; 0x64
 8001c6c:	f7ff fd60 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001c70:	2003      	movs	r0, #3
 8001c72:	f7ff fd5d 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001c76:	2012      	movs	r0, #18
 8001c78:	f7ff fd5a 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001c7c:	2081      	movs	r0, #129	; 0x81
 8001c7e:	f7ff fd57 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001c82:	20e8      	movs	r0, #232	; 0xe8
 8001c84:	f7ff fd44 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001c88:	2085      	movs	r0, #133	; 0x85
 8001c8a:	f7ff fd51 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001c8e:	2010      	movs	r0, #16
 8001c90:	f7ff fd4e 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001c94:	207a      	movs	r0, #122	; 0x7a
 8001c96:	f7ff fd4b 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001c9a:	20cb      	movs	r0, #203	; 0xcb
 8001c9c:	f7ff fd38 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001ca0:	2039      	movs	r0, #57	; 0x39
 8001ca2:	f7ff fd45 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001ca6:	202c      	movs	r0, #44	; 0x2c
 8001ca8:	f7ff fd42 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff fd3f 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001cb2:	2034      	movs	r0, #52	; 0x34
 8001cb4:	f7ff fd3c 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001cb8:	2002      	movs	r0, #2
 8001cba:	f7ff fd39 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001cbe:	20f7      	movs	r0, #247	; 0xf7
 8001cc0:	f7ff fd26 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001cc4:	2020      	movs	r0, #32
 8001cc6:	f7ff fd33 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001cca:	20ea      	movs	r0, #234	; 0xea
 8001ccc:	f7ff fd20 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f7ff fd2d 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7ff fd2a 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001cdc:	20c0      	movs	r0, #192	; 0xc0
 8001cde:	f7ff fd17 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001ce2:	201b      	movs	r0, #27
 8001ce4:	f7ff fd24 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001ce8:	20c1      	movs	r0, #193	; 0xc1
 8001cea:	f7ff fd11 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f7ff fd1e 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001cf4:	20c5      	movs	r0, #197	; 0xc5
 8001cf6:	f7ff fd0b 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001cfa:	2030      	movs	r0, #48	; 0x30
 8001cfc:	f7ff fd18 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001d00:	2030      	movs	r0, #48	; 0x30
 8001d02:	f7ff fd15 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001d06:	20c7      	movs	r0, #199	; 0xc7
 8001d08:	f7ff fd02 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001d0c:	20b7      	movs	r0, #183	; 0xb7
 8001d0e:	f7ff fd0f 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001d12:	2036      	movs	r0, #54	; 0x36
 8001d14:	f7ff fcfc 	bl	8001710 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001d18:	2008      	movs	r0, #8
 8001d1a:	f7ff fd09 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001d1e:	203a      	movs	r0, #58	; 0x3a
 8001d20:	f7ff fcf6 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001d24:	2055      	movs	r0, #85	; 0x55
 8001d26:	f7ff fd03 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001d2a:	20b1      	movs	r0, #177	; 0xb1
 8001d2c:	f7ff fcf0 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7ff fcfd 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001d36:	201a      	movs	r0, #26
 8001d38:	f7ff fcfa 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001d3c:	20b6      	movs	r0, #182	; 0xb6
 8001d3e:	f7ff fce7 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001d42:	200a      	movs	r0, #10
 8001d44:	f7ff fcf4 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001d48:	20a2      	movs	r0, #162	; 0xa2
 8001d4a:	f7ff fcf1 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001d4e:	20f2      	movs	r0, #242	; 0xf2
 8001d50:	f7ff fcde 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff fceb 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001d5a:	2026      	movs	r0, #38	; 0x26
 8001d5c:	f7ff fcd8 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f7ff fce5 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001d66:	20e0      	movs	r0, #224	; 0xe0
 8001d68:	f7ff fcd2 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001d6c:	200f      	movs	r0, #15
 8001d6e:	f7ff fcdf 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001d72:	202a      	movs	r0, #42	; 0x2a
 8001d74:	f7ff fcdc 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001d78:	2028      	movs	r0, #40	; 0x28
 8001d7a:	f7ff fcd9 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001d7e:	2008      	movs	r0, #8
 8001d80:	f7ff fcd6 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001d84:	200e      	movs	r0, #14
 8001d86:	f7ff fcd3 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001d8a:	2008      	movs	r0, #8
 8001d8c:	f7ff fcd0 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001d90:	2054      	movs	r0, #84	; 0x54
 8001d92:	f7ff fccd 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001d96:	20a9      	movs	r0, #169	; 0xa9
 8001d98:	f7ff fcca 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001d9c:	2043      	movs	r0, #67	; 0x43
 8001d9e:	f7ff fcc7 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001da2:	200a      	movs	r0, #10
 8001da4:	f7ff fcc4 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001da8:	200f      	movs	r0, #15
 8001daa:	f7ff fcc1 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff fcbe 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff fcbb 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff fcb8 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff fcb5 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001dc6:	20e1      	movs	r0, #225	; 0xe1
 8001dc8:	f7ff fca2 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff fcaf 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001dd2:	2015      	movs	r0, #21
 8001dd4:	f7ff fcac 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001dd8:	2017      	movs	r0, #23
 8001dda:	f7ff fca9 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001dde:	2007      	movs	r0, #7
 8001de0:	f7ff fca6 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001de4:	2011      	movs	r0, #17
 8001de6:	f7ff fca3 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001dea:	2006      	movs	r0, #6
 8001dec:	f7ff fca0 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001df0:	202b      	movs	r0, #43	; 0x2b
 8001df2:	f7ff fc9d 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001df6:	2056      	movs	r0, #86	; 0x56
 8001df8:	f7ff fc9a 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001dfc:	203c      	movs	r0, #60	; 0x3c
 8001dfe:	f7ff fc97 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001e02:	2005      	movs	r0, #5
 8001e04:	f7ff fc94 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e08:	2010      	movs	r0, #16
 8001e0a:	f7ff fc91 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e0e:	200f      	movs	r0, #15
 8001e10:	f7ff fc8e 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e14:	203f      	movs	r0, #63	; 0x3f
 8001e16:	f7ff fc8b 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e1a:	203f      	movs	r0, #63	; 0x3f
 8001e1c:	f7ff fc88 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e20:	200f      	movs	r0, #15
 8001e22:	f7ff fc85 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001e26:	202b      	movs	r0, #43	; 0x2b
 8001e28:	f7ff fc72 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff fc7f 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff fc7c 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff fc79 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001e3e:	203f      	movs	r0, #63	; 0x3f
 8001e40:	f7ff fc76 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001e44:	202a      	movs	r0, #42	; 0x2a
 8001e46:	f7ff fc63 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f7ff fc70 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff fc6d 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff fc6a 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001e5c:	20ef      	movs	r0, #239	; 0xef
 8001e5e:	f7ff fc67 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001e62:	2011      	movs	r0, #17
 8001e64:	f7ff fc54 	bl	8001710 <LCD_WR_REG>
	HAL_Delay(120);
 8001e68:	2078      	movs	r0, #120	; 0x78
 8001e6a:	f001 f873 	bl	8002f54 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001e6e:	2029      	movs	r0, #41	; 0x29
 8001e70:	f7ff fc4e 	bl	8001710 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001e74:	2201      	movs	r2, #1
 8001e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e7a:	4804      	ldr	r0, [pc, #16]	; (8001e8c <lcd_init+0x2bc>)
 8001e7c:	f002 fb50 	bl	8004520 <HAL_GPIO_WritePin>
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40020800 	.word	0x40020800
 8001e88:	2000036c 	.word	0x2000036c
 8001e8c:	40020000 	.word	0x40020000

08001e90 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b08b      	sub	sp, #44	; 0x2c
 8001e94:	af04      	add	r7, sp, #16
 8001e96:	60ba      	str	r2, [r7, #8]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	81fb      	strh	r3, [r7, #14]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	81bb      	strh	r3, [r7, #12]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001ea6:	89fb      	ldrh	r3, [r7, #14]
 8001ea8:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001eae:	e048      	b.n	8001f42 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d145      	bne.n	8001f42 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001eb6:	89fa      	ldrh	r2, [r7, #14]
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <lcd_ShowStr+0xc4>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	1acb      	subs	r3, r1, r3
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	dc3f      	bgt.n	8001f4c <lcd_ShowStr+0xbc>
 8001ecc:	89ba      	ldrh	r2, [r7, #12]
 8001ece:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <lcd_ShowStr+0xc4>)
 8001ed0:	885b      	ldrh	r3, [r3, #2]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ed8:	1acb      	subs	r3, r1, r3
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dc36      	bgt.n	8001f4c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b80      	cmp	r3, #128	; 0x80
 8001ee4:	d902      	bls.n	8001eec <lcd_ShowStr+0x5c>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75fb      	strb	r3, [r7, #23]
 8001eea:	e02a      	b.n	8001f42 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b0d      	cmp	r3, #13
 8001ef2:	d10b      	bne.n	8001f0c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001ef4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	89bb      	ldrh	r3, [r7, #12]
 8001efc:	4413      	add	r3, r2
 8001efe:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001f00:	8abb      	ldrh	r3, [r7, #20]
 8001f02:	81fb      	strh	r3, [r7, #14]
					str++;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	3301      	adds	r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	e017      	b.n	8001f3c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	781a      	ldrb	r2, [r3, #0]
 8001f10:	88fc      	ldrh	r4, [r7, #6]
 8001f12:	89b9      	ldrh	r1, [r7, #12]
 8001f14:	89f8      	ldrh	r0, [r7, #14]
 8001f16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f1a:	9302      	str	r3, [sp, #8]
 8001f1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	4623      	mov	r3, r4
 8001f28:	f7ff fcba 	bl	80018a0 <lcd_ShowChar>
					x+=sizey/2;
 8001f2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f30:	085b      	lsrs	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	89fb      	ldrh	r3, [r7, #14]
 8001f38:	4413      	add	r3, r2
 8001f3a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1b2      	bne.n	8001eb0 <lcd_ShowStr+0x20>
 8001f4a:	e000      	b.n	8001f4e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f4c:	bf00      	nop
			}
		}
	}
}
 8001f4e:	371c      	adds	r7, #28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd90      	pop	{r4, r7, pc}
 8001f54:	2000036c 	.word	0x2000036c

08001f58 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001f5c:	4b3f      	ldr	r3, [pc, #252]	; (800205c <led7_Scan+0x104>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b3d      	ldr	r3, [pc, #244]	; (800205c <led7_Scan+0x104>)
 8001f66:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001f68:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <led7_Scan+0x108>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a3d      	ldr	r2, [pc, #244]	; (8002064 <led7_Scan+0x10c>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	b21a      	sxth	r2, r3
 8001f74:	4b39      	ldr	r3, [pc, #228]	; (800205c <led7_Scan+0x104>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b36      	ldr	r3, [pc, #216]	; (800205c <led7_Scan+0x104>)
 8001f82:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <led7_Scan+0x108>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d847      	bhi.n	800201c <led7_Scan+0xc4>
 8001f8c:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <led7_Scan+0x3c>)
 8001f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f92:	bf00      	nop
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fc3 	.word	0x08001fc3
 8001f9c:	08001fe1 	.word	0x08001fe1
 8001fa0:	08001fff 	.word	0x08001fff
	case 0:
		spi_buffer |= 0x00b0;
 8001fa4:	4b2d      	ldr	r3, [pc, #180]	; (800205c <led7_Scan+0x104>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	4b2b      	ldr	r3, [pc, #172]	; (800205c <led7_Scan+0x104>)
 8001fb0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	; (800205c <led7_Scan+0x104>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <led7_Scan+0x104>)
 8001fbe:	801a      	strh	r2, [r3, #0]
		break;
 8001fc0:	e02d      	b.n	800201e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001fc2:	4b26      	ldr	r3, [pc, #152]	; (800205c <led7_Scan+0x104>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <led7_Scan+0x104>)
 8001fce:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001fd0:	4b22      	ldr	r3, [pc, #136]	; (800205c <led7_Scan+0x104>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	f023 0320 	bic.w	r3, r3, #32
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <led7_Scan+0x104>)
 8001fdc:	801a      	strh	r2, [r3, #0]
		break;
 8001fde:	e01e      	b.n	800201e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	; (800205c <led7_Scan+0x104>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <led7_Scan+0x104>)
 8001fec:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <led7_Scan+0x104>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	f023 0310 	bic.w	r3, r3, #16
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <led7_Scan+0x104>)
 8001ffa:	801a      	strh	r2, [r3, #0]
		break;
 8001ffc:	e00f      	b.n	800201e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <led7_Scan+0x104>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <led7_Scan+0x104>)
 800200a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <led7_Scan+0x104>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002014:	b29a      	uxth	r2, r3
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <led7_Scan+0x104>)
 8002018:	801a      	strh	r2, [r3, #0]
		break;
 800201a:	e000      	b.n	800201e <led7_Scan+0xc6>
	default:
		break;
 800201c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <led7_Scan+0x108>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	425a      	negs	r2, r3
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	f002 0203 	and.w	r2, r2, #3
 800202e:	bf58      	it	pl
 8002030:	4253      	negpl	r3, r2
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <led7_Scan+0x108>)
 8002034:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2140      	movs	r1, #64	; 0x40
 800203a:	480b      	ldr	r0, [pc, #44]	; (8002068 <led7_Scan+0x110>)
 800203c:	f002 fa70 	bl	8004520 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002040:	2301      	movs	r3, #1
 8002042:	2202      	movs	r2, #2
 8002044:	4905      	ldr	r1, [pc, #20]	; (800205c <led7_Scan+0x104>)
 8002046:	4809      	ldr	r0, [pc, #36]	; (800206c <led7_Scan+0x114>)
 8002048:	f003 f903 	bl	8005252 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800204c:	2201      	movs	r2, #1
 800204e:	2140      	movs	r1, #64	; 0x40
 8002050:	4805      	ldr	r0, [pc, #20]	; (8002068 <led7_Scan+0x110>)
 8002052:	f002 fa65 	bl	8004520 <HAL_GPIO_WritePin>
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000004 	.word	0x20000004
 8002060:	20000374 	.word	0x20000374
 8002064:	20000000 	.word	0x20000000
 8002068:	40021800 	.word	0x40021800
 800206c:	2000038c 	.word	0x2000038c

08002070 <lightProcess>:
 */
#include "light_control.h"

uint8_t light_status = 0;

void lightProcess(){
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <lightProcess+0x58>)
 8002076:	8b5b      	ldrh	r3, [r3, #26]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d113      	bne.n	80020a4 <lightProcess+0x34>
		light_status = 1 - light_status;
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <lightProcess+0x5c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	f1c3 0301 	rsb	r3, r3, #1
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <lightProcess+0x5c>)
 8002088:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <lightProcess+0x5c>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d104      	bne.n	800209c <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 8002092:	2101      	movs	r1, #1
 8002094:	480e      	ldr	r0, [pc, #56]	; (80020d0 <lightProcess+0x60>)
 8002096:	f000 fd75 	bl	8002b84 <uart_EspSendBytes>
 800209a:	e003      	b.n	80020a4 <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 800209c:	2101      	movs	r1, #1
 800209e:	480d      	ldr	r0, [pc, #52]	; (80020d4 <lightProcess+0x64>)
 80020a0:	f000 fd70 	bl	8002b84 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <lightProcess+0x5c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 80020ac:	2201      	movs	r2, #1
 80020ae:	2120      	movs	r1, #32
 80020b0:	4809      	ldr	r0, [pc, #36]	; (80020d8 <lightProcess+0x68>)
 80020b2:	f002 fa35 	bl	8004520 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 80020b6:	e004      	b.n	80020c2 <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2120      	movs	r1, #32
 80020bc:	4806      	ldr	r0, [pc, #24]	; (80020d8 <lightProcess+0x68>)
 80020be:	f002 fa2f 	bl	8004520 <HAL_GPIO_WritePin>
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200002a0 	.word	0x200002a0
 80020cc:	20000378 	.word	0x20000378
 80020d0:	0800ac48 	.word	0x0800ac48
 80020d4:	0800ac4c 	.word	0x0800ac4c
 80020d8:	40021000 	.word	0x40021000

080020dc <test_Esp>:

void test_Esp(){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af04      	add	r7, sp, #16
	if(uart_EspCheck() == 0) uart_EspSendBytes("o", 1);
 80020e2:	f000 fdab 	bl	8002c3c <uart_EspCheck>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d104      	bne.n	80020f6 <test_Esp+0x1a>
 80020ec:	2101      	movs	r1, #1
 80020ee:	480a      	ldr	r0, [pc, #40]	; (8002118 <test_Esp+0x3c>)
 80020f0:	f000 fd48 	bl	8002b84 <uart_EspSendBytes>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 80020f4:	e00c      	b.n	8002110 <test_Esp+0x34>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 80020f6:	2300      	movs	r3, #0
 80020f8:	9302      	str	r3, [sp, #8]
 80020fa:	2318      	movs	r3, #24
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	2300      	movs	r3, #0
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <test_Esp+0x40>)
 8002108:	2132      	movs	r1, #50	; 0x32
 800210a:	200a      	movs	r0, #10
 800210c:	f7ff fec0 	bl	8001e90 <lcd_ShowStr>
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	0800ac50 	.word	0x0800ac50
 800211c:	0800ac54 	.word	0x0800ac54

08002120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002124:	f000 fea4 	bl	8002e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002128:	f000 f830 	bl	800218c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800212c:	f7ff f940 	bl	80013b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002130:	f000 fbec 	bl	800290c <MX_TIM2_Init>
  MX_SPI1_Init();
 8002134:	f000 f9ca 	bl	80024cc <MX_SPI1_Init>
  MX_FSMC_Init();
 8002138:	f7ff f86a 	bl	8001210 <MX_FSMC_Init>
  MX_I2C1_Init();
 800213c:	f7ff fa72 	bl	8001624 <MX_I2C1_Init>
  MX_TIM13_Init();
 8002140:	f000 fc30 	bl	80029a4 <MX_TIM13_Init>
  MX_DMA_Init();
 8002144:	f7ff f844 	bl	80011d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8002148:	f7fe feac 	bl	8000ea4 <MX_ADC1_Init>
  MX_TIM1_Init();
 800214c:	f000 fb8e 	bl	800286c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002150:	f000 fdae 	bl	8002cb0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002154:	f000 fd82 	bl	8002c5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002158:	f000 f882 	bl	8002260 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff fb55 	bl	800180c <lcd_Clear>
 while (1)
  {
	  // 50ms task
	  if(flag_timer2 == 1){
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <main+0x68>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d1fb      	bne.n	8002162 <main+0x42>
		  flag_timer2 = 0;
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <main+0x68>)
 800216c:	2200      	movs	r2, #0
 800216e:	801a      	strh	r2, [r3, #0]
		  button_Scan();
 8002170:	f7fe ffc2 	bl	80010f8 <button_Scan>
		  test_Esp();
 8002174:	f7ff ffb2 	bl	80020dc <test_Esp>
		  lightProcess();
 8002178:	f7ff ff7a 	bl	8002070 <lightProcess>
		  test_LedDebug();
 800217c:	f000 f880 	bl	8002280 <test_LedDebug>
		  pubTempAda();
 8002180:	f000 f8a2 	bl	80022c8 <pubTempAda>
	  if(flag_timer2 == 1){
 8002184:	e7ed      	b.n	8002162 <main+0x42>
 8002186:	bf00      	nop
 8002188:	20000386 	.word	0x20000386

0800218c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b094      	sub	sp, #80	; 0x50
 8002190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002192:	f107 0320 	add.w	r3, r7, #32
 8002196:	2230      	movs	r2, #48	; 0x30
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f006 fc41 	bl	8008a22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <SystemClock_Config+0xcc>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	4a27      	ldr	r2, [pc, #156]	; (8002258 <SystemClock_Config+0xcc>)
 80021ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021be:	6413      	str	r3, [r2, #64]	; 0x40
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <SystemClock_Config+0xcc>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021cc:	2300      	movs	r3, #0
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <SystemClock_Config+0xd0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a21      	ldr	r2, [pc, #132]	; (800225c <SystemClock_Config+0xd0>)
 80021d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b1f      	ldr	r3, [pc, #124]	; (800225c <SystemClock_Config+0xd0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021e8:	2302      	movs	r3, #2
 80021ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021ec:	2301      	movs	r3, #1
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021f0:	2310      	movs	r3, #16
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f4:	2302      	movs	r3, #2
 80021f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021f8:	2300      	movs	r3, #0
 80021fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021fc:	2308      	movs	r3, #8
 80021fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002200:	23a8      	movs	r3, #168	; 0xa8
 8002202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002204:	2302      	movs	r3, #2
 8002206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002208:	2304      	movs	r3, #4
 800220a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800220c:	f107 0320 	add.w	r3, r7, #32
 8002210:	4618      	mov	r0, r3
 8002212:	f002 fafd 	bl	8004810 <HAL_RCC_OscConfig>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800221c:	f000 f8d0 	bl	80023c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002220:	230f      	movs	r3, #15
 8002222:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002224:	2302      	movs	r3, #2
 8002226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800222c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002232:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002236:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	2105      	movs	r1, #5
 800223e:	4618      	mov	r0, r3
 8002240:	f002 fd5e 	bl	8004d00 <HAL_RCC_ClockConfig>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800224a:	f000 f8b9 	bl	80023c0 <Error_Handler>
  }
}
 800224e:	bf00      	nop
 8002250:	3750      	adds	r7, #80	; 0x50
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40007000 	.word	0x40007000

08002260 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	  timer_init();
 8002264:	f000 f8de 	bl	8002424 <timer_init>
	  button_init();
 8002268:	f7fe ff3a 	bl	80010e0 <button_init>
	  lcd_init();
 800226c:	f7ff fcb0 	bl	8001bd0 <lcd_init>
	  uart_init_esp();
 8002270:	f000 fc72 	bl	8002b58 <uart_init_esp>
	  setTimer2(50);
 8002274:	2032      	movs	r0, #50	; 0x32
 8002276:	f000 f8e3 	bl	8002440 <setTimer2>
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8002284:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <test_LedDebug+0x3c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <test_LedDebug+0x40>)
 800228c:	fb83 1302 	smull	r1, r3, r3, r2
 8002290:	10d9      	asrs	r1, r3, #3
 8002292:	17d3      	asrs	r3, r2, #31
 8002294:	1ac9      	subs	r1, r1, r3
 8002296:	460b      	mov	r3, r1
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	1ad1      	subs	r1, r2, r3
 80022a0:	b2ca      	uxtb	r2, r1
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <test_LedDebug+0x3c>)
 80022a4:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <test_LedDebug+0x3c>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80022ae:	2110      	movs	r1, #16
 80022b0:	4804      	ldr	r0, [pc, #16]	; (80022c4 <test_LedDebug+0x44>)
 80022b2:	f002 f94e 	bl	8004552 <HAL_GPIO_TogglePin>
	}
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000379 	.word	0x20000379
 80022c0:	66666667 	.word	0x66666667
 80022c4:	40021000 	.word	0x40021000

080022c8 <pubTempAda>:

uint8_t count_Ada = 0;

void pubTempAda(){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08c      	sub	sp, #48	; 0x30
 80022cc:	af04      	add	r7, sp, #16
	count_Ada = (count_Ada + 1)%100;
 80022ce:	4b37      	ldr	r3, [pc, #220]	; (80023ac <pubTempAda+0xe4>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	3301      	adds	r3, #1
 80022d4:	4a36      	ldr	r2, [pc, #216]	; (80023b0 <pubTempAda+0xe8>)
 80022d6:	fb82 1203 	smull	r1, r2, r2, r3
 80022da:	1151      	asrs	r1, r2, #5
 80022dc:	17da      	asrs	r2, r3, #31
 80022de:	1a8a      	subs	r2, r1, r2
 80022e0:	2164      	movs	r1, #100	; 0x64
 80022e2:	fb01 f202 	mul.w	r2, r1, r2
 80022e6:	1a9a      	subs	r2, r3, r2
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	4b30      	ldr	r3, [pc, #192]	; (80023ac <pubTempAda+0xe4>)
 80022ec:	701a      	strb	r2, [r3, #0]
	if(count_Ada == 0){
 80022ee:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <pubTempAda+0xe4>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d156      	bne.n	80023a4 <pubTempAda+0xdc>
		sensor_Read();
 80022f6:	f000 f869 	bl	80023cc <sensor_Read>

		float temp = sensor_GetTemperature();
 80022fa:	f000 f875 	bl	80023e8 <sensor_GetTemperature>
 80022fe:	ed87 0a07 	vstr	s0, [r7, #28]
		char temp_str[10];
		sprintf(temp_str, "%.2f", temp); // convert temp to string
 8002302:	69f8      	ldr	r0, [r7, #28]
 8002304:	f7fe f920 	bl	8000548 <__aeabi_f2d>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	f107 0010 	add.w	r0, r7, #16
 8002310:	4928      	ldr	r1, [pc, #160]	; (80023b4 <pubTempAda+0xec>)
 8002312:	f006 fb23 	bl	800895c <siprintf>
		char msg_str[15];
		strcpy(msg_str, "!TEMP:"); // add format
 8002316:	463b      	mov	r3, r7
 8002318:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <pubTempAda+0xf0>)
 800231a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800231e:	6018      	str	r0, [r3, #0]
 8002320:	3304      	adds	r3, #4
 8002322:	8019      	strh	r1, [r3, #0]
 8002324:	3302      	adds	r3, #2
 8002326:	0c0a      	lsrs	r2, r1, #16
 8002328:	701a      	strb	r2, [r3, #0]
		strcat(msg_str, temp_str);
 800232a:	f107 0210 	add.w	r2, r7, #16
 800232e:	463b      	mov	r3, r7
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f006 fb7d 	bl	8008a32 <strcat>
		strcat(msg_str, "#");
 8002338:	463b      	mov	r3, r7
 800233a:	4618      	mov	r0, r3
 800233c:	f7fd ff98 	bl	8000270 <strlen>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	463b      	mov	r3, r7
 8002346:	4413      	add	r3, r2
 8002348:	491c      	ldr	r1, [pc, #112]	; (80023bc <pubTempAda+0xf4>)
 800234a:	461a      	mov	r2, r3
 800234c:	460b      	mov	r3, r1
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	8013      	strh	r3, [r2, #0]
		uart_EspSendBytes(msg_str, strlen(msg_str)); // send message string
 8002352:	463b      	mov	r3, r7
 8002354:	4618      	mov	r0, r3
 8002356:	f7fd ff8b 	bl	8000270 <strlen>
 800235a:	4603      	mov	r3, r0
 800235c:	b29a      	uxth	r2, r3
 800235e:	463b      	mov	r3, r7
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fc0e 	bl	8002b84 <uart_EspSendBytes>

		lcd_ShowFloatNum(10, 80, sensor_GetTemperature(), 4, GREEN, BLACK, 16);
 8002368:	f000 f83e 	bl	80023e8 <sensor_GetTemperature>
 800236c:	eef0 7a40 	vmov.f32	s15, s0
 8002370:	2310      	movs	r3, #16
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	2300      	movs	r3, #0
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800237c:	2204      	movs	r2, #4
 800237e:	eeb0 0a67 	vmov.f32	s0, s15
 8002382:	2150      	movs	r1, #80	; 0x50
 8002384:	200a      	movs	r0, #10
 8002386:	f7ff fb77 	bl	8001a78 <lcd_ShowFloatNum>
		lcd_ShowStr(10, 110, msg_str, GREEN, BLACK, 24, 0);
 800238a:	463a      	mov	r2, r7
 800238c:	2300      	movs	r3, #0
 800238e:	9302      	str	r3, [sp, #8]
 8002390:	2318      	movs	r3, #24
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	2300      	movs	r3, #0
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800239c:	216e      	movs	r1, #110	; 0x6e
 800239e:	200a      	movs	r0, #10
 80023a0:	f7ff fd76 	bl	8001e90 <lcd_ShowStr>
	}
}
 80023a4:	bf00      	nop
 80023a6:	3720      	adds	r7, #32
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	2000037a 	.word	0x2000037a
 80023b0:	51eb851f 	.word	0x51eb851f
 80023b4:	0800ac60 	.word	0x0800ac60
 80023b8:	0800ac68 	.word	0x0800ac68
 80023bc:	0800ac70 	.word	0x0800ac70

080023c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c4:	b672      	cpsid	i
}
 80023c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <Error_Handler+0x8>
	...

080023cc <sensor_Read>:

void sensor_init(){
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}

void sensor_Read(){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80023d0:	2205      	movs	r2, #5
 80023d2:	4903      	ldr	r1, [pc, #12]	; (80023e0 <sensor_Read+0x14>)
 80023d4:	4803      	ldr	r0, [pc, #12]	; (80023e4 <sensor_Read+0x18>)
 80023d6:	f000 fe25 	bl	8003024 <HAL_ADC_Start_DMA>
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000037c 	.word	0x2000037c
 80023e4:	200001f8 	.word	0x200001f8

080023e8 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <sensor_GetTemperature+0x30>)
 80023ee:	891b      	ldrh	r3, [r3, #8]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800241c <sensor_GetTemperature+0x34>
 80023fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002400:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002420 <sensor_GetTemperature+0x38>
 8002404:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002408:	eef0 7a66 	vmov.f32	s15, s13
}
 800240c:	eeb0 0a67 	vmov.f32	s0, s15
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	2000037c 	.word	0x2000037c
 800241c:	43a50000 	.word	0x43a50000
 8002420:	457ff000 	.word	0x457ff000

08002424 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002428:	4803      	ldr	r0, [pc, #12]	; (8002438 <timer_init+0x14>)
 800242a:	f003 fd2d 	bl	8005e88 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 800242e:	4803      	ldr	r0, [pc, #12]	; (800243c <timer_init+0x18>)
 8002430:	f003 fcc2 	bl	8005db8 <HAL_TIM_Base_Start>
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000430 	.word	0x20000430
 800243c:	200003e8 	.word	0x200003e8

08002440 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <setTimer2+0x2c>)
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <setTimer2+0x2c>)
 8002452:	881a      	ldrh	r2, [r3, #0]
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <setTimer2+0x30>)
 8002456:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <setTimer2+0x34>)
 800245a:	2200      	movs	r2, #0
 800245c:	801a      	strh	r2, [r3, #0]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	2000038a 	.word	0x2000038a
 8002470:	20000388 	.word	0x20000388
 8002474:	20000386 	.word	0x20000386

08002478 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002488:	d116      	bne.n	80024b8 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800249c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80024ae:	881a      	ldrh	r2, [r3, #0]
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80024b2:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80024b4:	f7ff fd50 	bl	8001f58 <led7_Scan>
	}
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000388 	.word	0x20000388
 80024c4:	20000386 	.word	0x20000386
 80024c8:	2000038a 	.word	0x2000038a

080024cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024d0:	4b17      	ldr	r3, [pc, #92]	; (8002530 <MX_SPI1_Init+0x64>)
 80024d2:	4a18      	ldr	r2, [pc, #96]	; (8002534 <MX_SPI1_Init+0x68>)
 80024d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <MX_SPI1_Init+0x64>)
 80024d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <MX_SPI1_Init+0x64>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <MX_SPI1_Init+0x64>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <MX_SPI1_Init+0x64>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <MX_SPI1_Init+0x64>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <MX_SPI1_Init+0x64>)
 80024f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <MX_SPI1_Init+0x64>)
 8002500:	2200      	movs	r2, #0
 8002502:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <MX_SPI1_Init+0x64>)
 8002506:	2200      	movs	r2, #0
 8002508:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <MX_SPI1_Init+0x64>)
 800250c:	2200      	movs	r2, #0
 800250e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <MX_SPI1_Init+0x64>)
 8002512:	2200      	movs	r2, #0
 8002514:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <MX_SPI1_Init+0x64>)
 8002518:	220a      	movs	r2, #10
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800251c:	4804      	ldr	r0, [pc, #16]	; (8002530 <MX_SPI1_Init+0x64>)
 800251e:	f002 fe0f 	bl	8005140 <HAL_SPI_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002528:	f7ff ff4a 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}
 8002530:	2000038c 	.word	0x2000038c
 8002534:	40013000 	.word	0x40013000

08002538 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a19      	ldr	r2, [pc, #100]	; (80025bc <HAL_SPI_MspInit+0x84>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d12b      	bne.n	80025b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <HAL_SPI_MspInit+0x88>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <HAL_SPI_MspInit+0x88>)
 8002564:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002568:	6453      	str	r3, [r2, #68]	; 0x44
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_SPI_MspInit+0x88>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_SPI_MspInit+0x88>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <HAL_SPI_MspInit+0x88>)
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_SPI_MspInit+0x88>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002592:	2338      	movs	r3, #56	; 0x38
 8002594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259e:	2303      	movs	r3, #3
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025a2:	2305      	movs	r3, #5
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	4805      	ldr	r0, [pc, #20]	; (80025c4 <HAL_SPI_MspInit+0x8c>)
 80025ae:	f001 fe1b 	bl	80041e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025b2:	bf00      	nop
 80025b4:	3728      	adds	r7, #40	; 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40013000 	.word	0x40013000
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020400 	.word	0x40020400

080025c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <HAL_MspInit+0x4c>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_MspInit+0x4c>)
 80025d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_MspInit+0x4c>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_MspInit+0x4c>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <HAL_MspInit+0x4c>)
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_MspInit+0x4c>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800

08002618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800261c:	e7fe      	b.n	800261c <NMI_Handler+0x4>

0800261e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002622:	e7fe      	b.n	8002622 <HardFault_Handler+0x4>

08002624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <MemManage_Handler+0x4>

0800262a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <BusFault_Handler+0x4>

08002630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <UsageFault_Handler+0x4>

08002636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002664:	f000 fc56 	bl	8002f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}

0800266c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <TIM2_IRQHandler+0x10>)
 8002672:	f003 fcd2 	bl	800601a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000430 	.word	0x20000430

08002680 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <USART1_IRQHandler+0x10>)
 8002686:	f004 fc0d 	bl	8006ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	200004c4 	.word	0x200004c4

08002694 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <USART2_IRQHandler+0x10>)
 800269a:	f004 fc03 	bl	8006ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000508 	.word	0x20000508

080026a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <DMA2_Stream0_IRQHandler+0x10>)
 80026ae:	f001 fb31 	bl	8003d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000240 	.word	0x20000240

080026bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
	return 1;
 80026c0:	2301      	movs	r3, #1
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <_kill>:

int _kill(int pid, int sig)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026d6:	f006 fa05 	bl	8008ae4 <__errno>
 80026da:	4603      	mov	r3, r0
 80026dc:	2216      	movs	r2, #22
 80026de:	601a      	str	r2, [r3, #0]
	return -1;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_exit>:

void _exit (int status)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026f4:	f04f 31ff 	mov.w	r1, #4294967295
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ffe7 	bl	80026cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80026fe:	e7fe      	b.n	80026fe <_exit+0x12>

08002700 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e00a      	b.n	8002728 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002712:	f3af 8000 	nop.w
 8002716:	4601      	mov	r1, r0
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	60ba      	str	r2, [r7, #8]
 800271e:	b2ca      	uxtb	r2, r1
 8002720:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3301      	adds	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	429a      	cmp	r2, r3
 800272e:	dbf0      	blt.n	8002712 <_read+0x12>
	}

return len;
 8002730:	687b      	ldr	r3, [r7, #4]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e009      	b.n	8002760 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	60ba      	str	r2, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	dbf1      	blt.n	800274c <_write+0x12>
	}
	return len;
 8002768:	687b      	ldr	r3, [r7, #4]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <_close>:

int _close(int file)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
	return -1;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800279a:	605a      	str	r2, [r3, #4]
	return 0;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <_isatty>:

int _isatty(int file)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
	return 1;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
	return 0;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e4:	4a14      	ldr	r2, [pc, #80]	; (8002838 <_sbrk+0x5c>)
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <_sbrk+0x60>)
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <_sbrk+0x64>)
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <_sbrk+0x68>)
 80027fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <_sbrk+0x64>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	429a      	cmp	r2, r3
 800280a:	d207      	bcs.n	800281c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800280c:	f006 f96a 	bl	8008ae4 <__errno>
 8002810:	4603      	mov	r3, r0
 8002812:	220c      	movs	r2, #12
 8002814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295
 800281a:	e009      	b.n	8002830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <_sbrk+0x64>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <_sbrk+0x64>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <_sbrk+0x64>)
 800282c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20020000 	.word	0x20020000
 800283c:	00000400 	.word	0x00000400
 8002840:	200003e4 	.word	0x200003e4
 8002844:	200006a0 	.word	0x200006a0

08002848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <SystemInit+0x20>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	4a05      	ldr	r2, [pc, #20]	; (8002868 <SystemInit+0x20>)
 8002854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002872:	f107 0308 	add.w	r3, r7, #8
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002880:	463b      	mov	r3, r7
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002888:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <MX_TIM1_Init+0x98>)
 800288a:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <MX_TIM1_Init+0x9c>)
 800288c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <MX_TIM1_Init+0x98>)
 8002890:	2253      	movs	r2, #83	; 0x53
 8002892:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <MX_TIM1_Init+0x98>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800289a:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <MX_TIM1_Init+0x98>)
 800289c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <MX_TIM1_Init+0x98>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028a8:	4b16      	ldr	r3, [pc, #88]	; (8002904 <MX_TIM1_Init+0x98>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <MX_TIM1_Init+0x98>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028b4:	4813      	ldr	r0, [pc, #76]	; (8002904 <MX_TIM1_Init+0x98>)
 80028b6:	f003 fa2f 	bl	8005d18 <HAL_TIM_Base_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80028c0:	f7ff fd7e 	bl	80023c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028ca:	f107 0308 	add.w	r3, r7, #8
 80028ce:	4619      	mov	r1, r3
 80028d0:	480c      	ldr	r0, [pc, #48]	; (8002904 <MX_TIM1_Init+0x98>)
 80028d2:	f003 fd6d 	bl	80063b0 <HAL_TIM_ConfigClockSource>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80028dc:	f7ff fd70 	bl	80023c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028e8:	463b      	mov	r3, r7
 80028ea:	4619      	mov	r1, r3
 80028ec:	4805      	ldr	r0, [pc, #20]	; (8002904 <MX_TIM1_Init+0x98>)
 80028ee:	f004 f939 	bl	8006b64 <HAL_TIMEx_MasterConfigSynchronization>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80028f8:	f7ff fd62 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80028fc:	bf00      	nop
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200003e8 	.word	0x200003e8
 8002908:	40010000 	.word	0x40010000

0800290c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002912:	f107 0308 	add.w	r3, r7, #8
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002920:	463b      	mov	r3, r7
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <MX_TIM2_Init+0x94>)
 800292a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800292e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <MX_TIM2_Init+0x94>)
 8002932:	f240 3247 	movw	r2, #839	; 0x347
 8002936:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <MX_TIM2_Init+0x94>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <MX_TIM2_Init+0x94>)
 8002940:	2263      	movs	r2, #99	; 0x63
 8002942:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <MX_TIM2_Init+0x94>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <MX_TIM2_Init+0x94>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002950:	4813      	ldr	r0, [pc, #76]	; (80029a0 <MX_TIM2_Init+0x94>)
 8002952:	f003 f9e1 	bl	8005d18 <HAL_TIM_Base_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800295c:	f7ff fd30 	bl	80023c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002964:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	4619      	mov	r1, r3
 800296c:	480c      	ldr	r0, [pc, #48]	; (80029a0 <MX_TIM2_Init+0x94>)
 800296e:	f003 fd1f 	bl	80063b0 <HAL_TIM_ConfigClockSource>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002978:	f7ff fd22 	bl	80023c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800297c:	2300      	movs	r3, #0
 800297e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002984:	463b      	mov	r3, r7
 8002986:	4619      	mov	r1, r3
 8002988:	4805      	ldr	r0, [pc, #20]	; (80029a0 <MX_TIM2_Init+0x94>)
 800298a:	f004 f8eb 	bl	8006b64 <HAL_TIMEx_MasterConfigSynchronization>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002994:	f7ff fd14 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000430 	.word	0x20000430

080029a4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
 80029b8:	615a      	str	r2, [r3, #20]
 80029ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80029bc:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029be:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <MX_TIM13_Init+0x98>)
 80029c0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80029c2:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029c4:	f240 3247 	movw	r2, #839	; 0x347
 80029c8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029d2:	2263      	movs	r2, #99	; 0x63
 80029d4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029dc:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029de:	2200      	movs	r2, #0
 80029e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80029e2:	4815      	ldr	r0, [pc, #84]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029e4:	f003 f998 	bl	8005d18 <HAL_TIM_Base_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80029ee:	f7ff fce7 	bl	80023c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80029f2:	4811      	ldr	r0, [pc, #68]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029f4:	f003 fab8 	bl	8005f68 <HAL_TIM_PWM_Init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80029fe:	f7ff fcdf 	bl	80023c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a02:	2360      	movs	r3, #96	; 0x60
 8002a04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	2200      	movs	r2, #0
 8002a16:	4619      	mov	r1, r3
 8002a18:	4807      	ldr	r0, [pc, #28]	; (8002a38 <MX_TIM13_Init+0x94>)
 8002a1a:	f003 fc07 	bl	800622c <HAL_TIM_PWM_ConfigChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002a24:	f7ff fccc 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002a28:	4803      	ldr	r0, [pc, #12]	; (8002a38 <MX_TIM13_Init+0x94>)
 8002a2a:	f000 f85b 	bl	8002ae4 <HAL_TIM_MspPostInit>

}
 8002a2e:	bf00      	nop
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000478 	.word	0x20000478
 8002a3c:	40001c00 	.word	0x40001c00

08002a40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <HAL_TIM_Base_MspInit+0x98>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10e      	bne.n	8002a70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	4b21      	ldr	r3, [pc, #132]	; (8002adc <HAL_TIM_Base_MspInit+0x9c>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	4a20      	ldr	r2, [pc, #128]	; (8002adc <HAL_TIM_Base_MspInit+0x9c>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
 8002a62:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <HAL_TIM_Base_MspInit+0x9c>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002a6e:	e02e      	b.n	8002ace <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a78:	d116      	bne.n	8002aa8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	4b17      	ldr	r3, [pc, #92]	; (8002adc <HAL_TIM_Base_MspInit+0x9c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a16      	ldr	r2, [pc, #88]	; (8002adc <HAL_TIM_Base_MspInit+0x9c>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <HAL_TIM_Base_MspInit+0x9c>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	201c      	movs	r0, #28
 8002a9c:	f000 ff6b 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002aa0:	201c      	movs	r0, #28
 8002aa2:	f000 ff84 	bl	80039ae <HAL_NVIC_EnableIRQ>
}
 8002aa6:	e012      	b.n	8002ace <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <HAL_TIM_Base_MspInit+0xa0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10d      	bne.n	8002ace <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_TIM_Base_MspInit+0x9c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a08      	ldr	r2, [pc, #32]	; (8002adc <HAL_TIM_Base_MspInit+0x9c>)
 8002abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_TIM_Base_MspInit+0x9c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
}
 8002ace:	bf00      	nop
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40001c00 	.word	0x40001c00

08002ae4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f107 030c 	add.w	r3, r7, #12
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <HAL_TIM_MspPostInit+0x68>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d11e      	bne.n	8002b44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_TIM_MspPostInit+0x6c>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a10      	ldr	r2, [pc, #64]	; (8002b50 <HAL_TIM_MspPostInit+0x6c>)
 8002b10:	f043 0320 	orr.w	r3, r3, #32
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <HAL_TIM_MspPostInit+0x6c>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002b34:	2309      	movs	r3, #9
 8002b36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b38:	f107 030c 	add.w	r3, r7, #12
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4805      	ldr	r0, [pc, #20]	; (8002b54 <HAL_TIM_MspPostInit+0x70>)
 8002b40:	f001 fb52 	bl	80041e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002b44:	bf00      	nop
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40001c00 	.word	0x40001c00
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40021400 	.word	0x40021400

08002b58 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4906      	ldr	r1, [pc, #24]	; (8002b78 <uart_init_esp+0x20>)
 8002b60:	4806      	ldr	r0, [pc, #24]	; (8002b7c <uart_init_esp+0x24>)
 8002b62:	f004 f96e 	bl	8006e42 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8002b66:	2201      	movs	r2, #1
 8002b68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b6c:	4804      	ldr	r0, [pc, #16]	; (8002b80 <uart_init_esp+0x28>)
 8002b6e:	f001 fcd7 	bl	8004520 <HAL_GPIO_WritePin>
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200004c1 	.word	0x200004c1
 8002b7c:	20000508 	.word	0x20000508
 8002b80:	40021400 	.word	0x40021400

08002b84 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	230a      	movs	r3, #10
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4803      	ldr	r0, [pc, #12]	; (8002ba4 <uart_EspSendBytes+0x20>)
 8002b98:	f004 f8c1 	bl	8006d1e <HAL_UART_Transmit>
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000508 	.word	0x20000508

08002ba8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <HAL_UART_RxCpltCallback+0x74>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002bba:	230a      	movs	r3, #10
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4918      	ldr	r1, [pc, #96]	; (8002c20 <HAL_UART_RxCpltCallback+0x78>)
 8002bc0:	4818      	ldr	r0, [pc, #96]	; (8002c24 <HAL_UART_RxCpltCallback+0x7c>)
 8002bc2:	f004 f8ac 	bl	8006d1e <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4915      	ldr	r1, [pc, #84]	; (8002c20 <HAL_UART_RxCpltCallback+0x78>)
 8002bca:	4816      	ldr	r0, [pc, #88]	; (8002c24 <HAL_UART_RxCpltCallback+0x7c>)
 8002bcc:	f004 f939 	bl	8006e42 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <HAL_UART_RxCpltCallback+0x80>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d11b      	bne.n	8002c12 <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8002bda:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <HAL_UART_RxCpltCallback+0x84>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b4f      	cmp	r3, #79	; 0x4f
 8002be0:	d103      	bne.n	8002bea <HAL_UART_RxCpltCallback+0x42>
 8002be2:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_UART_RxCpltCallback+0x88>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e00e      	b.n	8002c08 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_UART_RxCpltCallback+0x84>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b61      	cmp	r3, #97	; 0x61
 8002bf0:	d103      	bne.n	8002bfa <HAL_UART_RxCpltCallback+0x52>
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_UART_RxCpltCallback+0x8c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	e006      	b.n	8002c08 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_UART_RxCpltCallback+0x84>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b41      	cmp	r3, #65	; 0x41
 8002c00:	d102      	bne.n	8002c08 <HAL_UART_RxCpltCallback+0x60>
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_UART_RxCpltCallback+0x8c>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4908      	ldr	r1, [pc, #32]	; (8002c2c <HAL_UART_RxCpltCallback+0x84>)
 8002c0c:	480a      	ldr	r0, [pc, #40]	; (8002c38 <HAL_UART_RxCpltCallback+0x90>)
 8002c0e:	f004 f918 	bl	8006e42 <HAL_UART_Receive_IT>
	}
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40011000 	.word	0x40011000
 8002c20:	200004c0 	.word	0x200004c0
 8002c24:	200004c4 	.word	0x200004c4
 8002c28:	40004400 	.word	0x40004400
 8002c2c:	200004c1 	.word	0x200004c1
 8002c30:	200004c2 	.word	0x200004c2
 8002c34:	20000378 	.word	0x20000378
 8002c38:	20000508 	.word	0x20000508

08002c3c <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <uart_EspCheck+0x1c>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <uart_EspCheck+0x10>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <uart_EspCheck+0x12>
	return 0;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	200004c2 	.word	0x200004c2

08002c5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <MX_USART1_UART_Init+0x50>)
 8002c64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c82:	220c      	movs	r2, #12
 8002c84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c92:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c94:	f003 fff6 	bl	8006c84 <HAL_UART_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c9e:	f7ff fb8f 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200004c4 	.word	0x200004c4
 8002cac:	40011000 	.word	0x40011000

08002cb0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <MX_USART2_UART_Init+0x50>)
 8002cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002ce8:	f003 ffcc 	bl	8006c84 <HAL_UART_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cf2:	f7ff fb65 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000508 	.word	0x20000508
 8002d00:	40004400 	.word	0x40004400

08002d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08c      	sub	sp, #48	; 0x30
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 031c 	add.w	r3, r7, #28
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a3a      	ldr	r2, [pc, #232]	; (8002e0c <HAL_UART_MspInit+0x108>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d135      	bne.n	8002d92 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <HAL_UART_MspInit+0x10c>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a38      	ldr	r2, [pc, #224]	; (8002e10 <HAL_UART_MspInit+0x10c>)
 8002d30:	f043 0310 	orr.w	r3, r3, #16
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <HAL_UART_MspInit+0x10c>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	61bb      	str	r3, [r7, #24]
 8002d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <HAL_UART_MspInit+0x10c>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a31      	ldr	r2, [pc, #196]	; (8002e10 <HAL_UART_MspInit+0x10c>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <HAL_UART_MspInit+0x10c>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d70:	2307      	movs	r3, #7
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f107 031c 	add.w	r3, r7, #28
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4826      	ldr	r0, [pc, #152]	; (8002e14 <HAL_UART_MspInit+0x110>)
 8002d7c:	f001 fa34 	bl	80041e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2100      	movs	r1, #0
 8002d84:	2025      	movs	r0, #37	; 0x25
 8002d86:	f000 fdf6 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d8a:	2025      	movs	r0, #37	; 0x25
 8002d8c:	f000 fe0f 	bl	80039ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d90:	e038      	b.n	8002e04 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a20      	ldr	r2, [pc, #128]	; (8002e18 <HAL_UART_MspInit+0x114>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d133      	bne.n	8002e04 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_UART_MspInit+0x10c>)
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	4a1a      	ldr	r2, [pc, #104]	; (8002e10 <HAL_UART_MspInit+0x10c>)
 8002da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002daa:	6413      	str	r3, [r2, #64]	; 0x40
 8002dac:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_UART_MspInit+0x10c>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <HAL_UART_MspInit+0x10c>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <HAL_UART_MspInit+0x10c>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <HAL_UART_MspInit+0x10c>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dd4:	230c      	movs	r3, #12
 8002dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de0:	2303      	movs	r3, #3
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002de4:	2307      	movs	r3, #7
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	f107 031c 	add.w	r3, r7, #28
 8002dec:	4619      	mov	r1, r3
 8002dee:	4809      	ldr	r0, [pc, #36]	; (8002e14 <HAL_UART_MspInit+0x110>)
 8002df0:	f001 f9fa 	bl	80041e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002df4:	2200      	movs	r2, #0
 8002df6:	2100      	movs	r1, #0
 8002df8:	2026      	movs	r0, #38	; 0x26
 8002dfa:	f000 fdbc 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002dfe:	2026      	movs	r0, #38	; 0x26
 8002e00:	f000 fdd5 	bl	80039ae <HAL_NVIC_EnableIRQ>
}
 8002e04:	bf00      	nop
 8002e06:	3730      	adds	r7, #48	; 0x30
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40011000 	.word	0x40011000
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020000 	.word	0x40020000
 8002e18:	40004400 	.word	0x40004400

08002e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e20:	480d      	ldr	r0, [pc, #52]	; (8002e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e22:	490e      	ldr	r1, [pc, #56]	; (8002e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e24:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e28:	e002      	b.n	8002e30 <LoopCopyDataInit>

08002e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2e:	3304      	adds	r3, #4

08002e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e34:	d3f9      	bcc.n	8002e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e36:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e38:	4c0b      	ldr	r4, [pc, #44]	; (8002e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e3c:	e001      	b.n	8002e42 <LoopFillZerobss>

08002e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e40:	3204      	adds	r2, #4

08002e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e44:	d3fb      	bcc.n	8002e3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e46:	f7ff fcff 	bl	8002848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e4a:	f005 fe51 	bl	8008af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4e:	f7ff f967 	bl	8002120 <main>
  bx  lr    
 8002e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e5c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002e60:	0800df94 	.word	0x0800df94
  ldr r2, =_sbss
 8002e64:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002e68:	2000069c 	.word	0x2000069c

08002e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e6c:	e7fe      	b.n	8002e6c <ADC_IRQHandler>
	...

08002e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_Init+0x40>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <HAL_Init+0x40>)
 8002e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_Init+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <HAL_Init+0x40>)
 8002e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <HAL_Init+0x40>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e98:	2003      	movs	r0, #3
 8002e9a:	f000 fd61 	bl	8003960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e9e:	200f      	movs	r0, #15
 8002ea0:	f000 f808 	bl	8002eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea4:	f7ff fb90 	bl	80025c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00

08002eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ebc:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_InitTick+0x54>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_InitTick+0x58>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fd79 	bl	80039ca <HAL_SYSTICK_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00e      	b.n	8002f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b0f      	cmp	r3, #15
 8002ee6:	d80a      	bhi.n	8002efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	f000 fd41 	bl	8003976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <HAL_InitTick+0x5c>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000008 	.word	0x20000008
 8002f0c:	20000010 	.word	0x20000010
 8002f10:	2000000c 	.word	0x2000000c

08002f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_IncTick+0x20>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_IncTick+0x24>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <HAL_IncTick+0x24>)
 8002f26:	6013      	str	r3, [r2, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000010 	.word	0x20000010
 8002f38:	2000054c 	.word	0x2000054c

08002f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_GetTick+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	2000054c 	.word	0x2000054c

08002f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff ffee 	bl	8002f3c <HAL_GetTick>
 8002f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d005      	beq.n	8002f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <HAL_Delay+0x44>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f7a:	bf00      	nop
 8002f7c:	f7ff ffde 	bl	8002f3c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d8f7      	bhi.n	8002f7c <HAL_Delay+0x28>
  {
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000010 	.word	0x20000010

08002f9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e033      	b.n	800301a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fd fffc 	bl	8000fb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d118      	bne.n	800300c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fe2:	f023 0302 	bic.w	r3, r3, #2
 8002fe6:	f043 0202 	orr.w	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa68 	bl	80034c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	f043 0201 	orr.w	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
 800300a:	e001      	b.n	8003010 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_ADC_Start_DMA+0x1e>
 800303e:	2302      	movs	r3, #2
 8003040:	e0e9      	b.n	8003216 <HAL_ADC_Start_DMA+0x1f2>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d018      	beq.n	800308a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003068:	4b6d      	ldr	r3, [pc, #436]	; (8003220 <HAL_ADC_Start_DMA+0x1fc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6d      	ldr	r2, [pc, #436]	; (8003224 <HAL_ADC_Start_DMA+0x200>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0c9a      	lsrs	r2, r3, #18
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800307c:	e002      	b.n	8003084 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	3b01      	subs	r3, #1
 8003082:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f9      	bne.n	800307e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003098:	d107      	bne.n	80030aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	f040 80a1 	bne.w	80031fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f8:	d106      	bne.n	8003108 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	f023 0206 	bic.w	r2, r3, #6
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	645a      	str	r2, [r3, #68]	; 0x44
 8003106:	e002      	b.n	800310e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003116:	4b44      	ldr	r3, [pc, #272]	; (8003228 <HAL_ADC_Start_DMA+0x204>)
 8003118:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	4a43      	ldr	r2, [pc, #268]	; (800322c <HAL_ADC_Start_DMA+0x208>)
 8003120:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	4a42      	ldr	r2, [pc, #264]	; (8003230 <HAL_ADC_Start_DMA+0x20c>)
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	4a41      	ldr	r2, [pc, #260]	; (8003234 <HAL_ADC_Start_DMA+0x210>)
 8003130:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800313a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800314a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	334c      	adds	r3, #76	; 0x4c
 8003166:	4619      	mov	r1, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f000 fce8 	bl	8003b40 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	2b00      	cmp	r3, #0
 800317a:	d12a      	bne.n	80031d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a2d      	ldr	r2, [pc, #180]	; (8003238 <HAL_ADC_Start_DMA+0x214>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d015      	beq.n	80031b2 <HAL_ADC_Start_DMA+0x18e>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a2c      	ldr	r2, [pc, #176]	; (800323c <HAL_ADC_Start_DMA+0x218>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d105      	bne.n	800319c <HAL_ADC_Start_DMA+0x178>
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <HAL_ADC_Start_DMA+0x204>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a27      	ldr	r2, [pc, #156]	; (8003240 <HAL_ADC_Start_DMA+0x21c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d136      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_ADC_Start_DMA+0x204>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d130      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d129      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	e020      	b.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a18      	ldr	r2, [pc, #96]	; (8003238 <HAL_ADC_Start_DMA+0x214>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d11b      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d114      	bne.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	e00b      	b.n	8003214 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f043 0210 	orr.w	r2, r3, #16
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	f043 0201 	orr.w	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000008 	.word	0x20000008
 8003224:	431bde83 	.word	0x431bde83
 8003228:	40012300 	.word	0x40012300
 800322c:	080036bd 	.word	0x080036bd
 8003230:	08003777 	.word	0x08003777
 8003234:	08003793 	.word	0x08003793
 8003238:	40012000 	.word	0x40012000
 800323c:	40012100 	.word	0x40012100
 8003240:	40012200 	.word	0x40012200

08003244 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x1c>
 8003298:	2302      	movs	r3, #2
 800329a:	e105      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x228>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b09      	cmp	r3, #9
 80032aa:	d925      	bls.n	80032f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68d9      	ldr	r1, [r3, #12]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	3b1e      	subs	r3, #30
 80032c2:	2207      	movs	r2, #7
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43da      	mvns	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	400a      	ands	r2, r1
 80032d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68d9      	ldr	r1, [r3, #12]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	4618      	mov	r0, r3
 80032e4:	4603      	mov	r3, r0
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4403      	add	r3, r0
 80032ea:	3b1e      	subs	r3, #30
 80032ec:	409a      	lsls	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	e022      	b.n	800333e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6919      	ldr	r1, [r3, #16]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	2207      	movs	r2, #7
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	400a      	ands	r2, r1
 800331a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6919      	ldr	r1, [r3, #16]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	4618      	mov	r0, r3
 800332e:	4603      	mov	r3, r0
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4403      	add	r3, r0
 8003334:	409a      	lsls	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b06      	cmp	r3, #6
 8003344:	d824      	bhi.n	8003390 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	3b05      	subs	r3, #5
 8003358:	221f      	movs	r2, #31
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	400a      	ands	r2, r1
 8003366:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	4618      	mov	r0, r3
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	3b05      	subs	r3, #5
 8003382:	fa00 f203 	lsl.w	r2, r0, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	635a      	str	r2, [r3, #52]	; 0x34
 800338e:	e04c      	b.n	800342a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	d824      	bhi.n	80033e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	3b23      	subs	r3, #35	; 0x23
 80033aa:	221f      	movs	r2, #31
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43da      	mvns	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	400a      	ands	r2, r1
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	4618      	mov	r0, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	3b23      	subs	r3, #35	; 0x23
 80033d4:	fa00 f203 	lsl.w	r2, r0, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
 80033e0:	e023      	b.n	800342a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	3b41      	subs	r3, #65	; 0x41
 80033f4:	221f      	movs	r2, #31
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43da      	mvns	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	400a      	ands	r2, r1
 8003402:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	4618      	mov	r0, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	3b41      	subs	r3, #65	; 0x41
 800341e:	fa00 f203 	lsl.w	r2, r0, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800342a:	4b22      	ldr	r3, [pc, #136]	; (80034b4 <HAL_ADC_ConfigChannel+0x234>)
 800342c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <HAL_ADC_ConfigChannel+0x238>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d109      	bne.n	800344c <HAL_ADC_ConfigChannel+0x1cc>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b12      	cmp	r3, #18
 800343e:	d105      	bne.n	800344c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a19      	ldr	r2, [pc, #100]	; (80034b8 <HAL_ADC_ConfigChannel+0x238>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d123      	bne.n	800349e <HAL_ADC_ConfigChannel+0x21e>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b10      	cmp	r3, #16
 800345c:	d003      	beq.n	8003466 <HAL_ADC_ConfigChannel+0x1e6>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b11      	cmp	r3, #17
 8003464:	d11b      	bne.n	800349e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b10      	cmp	r3, #16
 8003478:	d111      	bne.n	800349e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_ADC_ConfigChannel+0x23c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <HAL_ADC_ConfigChannel+0x240>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	0c9a      	lsrs	r2, r3, #18
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003490:	e002      	b.n	8003498 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	3b01      	subs	r3, #1
 8003496:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f9      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40012300 	.word	0x40012300
 80034b8:	40012000 	.word	0x40012000
 80034bc:	20000008 	.word	0x20000008
 80034c0:	431bde83 	.word	0x431bde83

080034c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034cc:	4b79      	ldr	r3, [pc, #484]	; (80036b4 <ADC_Init+0x1f0>)
 80034ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	021a      	lsls	r2, r3, #8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800351c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6859      	ldr	r1, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6899      	ldr	r1, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <ADC_Init+0x1f4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800356a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6899      	ldr	r1, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800358c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6899      	ldr	r1, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	e00f      	b.n	80035c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0202 	bic.w	r2, r2, #2
 80035d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6899      	ldr	r1, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	7e1b      	ldrb	r3, [r3, #24]
 80035dc:	005a      	lsls	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01b      	beq.n	8003628 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800360e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6859      	ldr	r1, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	3b01      	subs	r3, #1
 800361c:	035a      	lsls	r2, r3, #13
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	e007      	b.n	8003638 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003636:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	3b01      	subs	r3, #1
 8003654:	051a      	lsls	r2, r3, #20
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800366c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6899      	ldr	r1, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800367a:	025a      	lsls	r2, r3, #9
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6899      	ldr	r1, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	029a      	lsls	r2, r3, #10
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40012300 	.word	0x40012300
 80036b8:	0f000001 	.word	0x0f000001

080036bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d13c      	bne.n	8003750 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d12b      	bne.n	8003748 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d127      	bne.n	8003748 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003702:	2b00      	cmp	r3, #0
 8003704:	d006      	beq.n	8003714 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003710:	2b00      	cmp	r3, #0
 8003712:	d119      	bne.n	8003748 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0220 	bic.w	r2, r2, #32
 8003722:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f043 0201 	orr.w	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff fd7b 	bl	8003244 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800374e:	e00e      	b.n	800376e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff fd85 	bl	800326c <HAL_ADC_ErrorCallback>
}
 8003762:	e004      	b.n	800376e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7ff fd67 	bl	8003258 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2240      	movs	r2, #64	; 0x40
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f043 0204 	orr.w	r2, r3, #4
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f7ff fd5a 	bl	800326c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f2:	4a04      	ldr	r2, [pc, #16]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	60d3      	str	r3, [r2, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <__NVIC_GetPriorityGrouping+0x18>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 0307 	and.w	r3, r3, #7
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	db0b      	blt.n	800384e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4907      	ldr	r1, [pc, #28]	; (800385c <__NVIC_EnableIRQ+0x38>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2001      	movs	r0, #1
 8003846:	fa00 f202 	lsl.w	r2, r0, r2
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000e100 	.word	0xe000e100

08003860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	2b00      	cmp	r3, #0
 8003872:	db0a      	blt.n	800388a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	490c      	ldr	r1, [pc, #48]	; (80038ac <__NVIC_SetPriority+0x4c>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	0112      	lsls	r2, r2, #4
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	440b      	add	r3, r1
 8003884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003888:	e00a      	b.n	80038a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4908      	ldr	r1, [pc, #32]	; (80038b0 <__NVIC_SetPriority+0x50>)
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	3b04      	subs	r3, #4
 8003898:	0112      	lsls	r2, r2, #4
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	440b      	add	r3, r1
 800389e:	761a      	strb	r2, [r3, #24]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000e100 	.word	0xe000e100
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f1c3 0307 	rsb	r3, r3, #7
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	bf28      	it	cs
 80038d2:	2304      	movcs	r3, #4
 80038d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3304      	adds	r3, #4
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d902      	bls.n	80038e4 <NVIC_EncodePriority+0x30>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3b03      	subs	r3, #3
 80038e2:	e000      	b.n	80038e6 <NVIC_EncodePriority+0x32>
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43da      	mvns	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	401a      	ands	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	43d9      	mvns	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	4313      	orrs	r3, r2
         );
}
 800390e:	4618      	mov	r0, r3
 8003910:	3724      	adds	r7, #36	; 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800392c:	d301      	bcc.n	8003932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800392e:	2301      	movs	r3, #1
 8003930:	e00f      	b.n	8003952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <SysTick_Config+0x40>)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800393a:	210f      	movs	r1, #15
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	f7ff ff8e 	bl	8003860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <SysTick_Config+0x40>)
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394a:	4b04      	ldr	r3, [pc, #16]	; (800395c <SysTick_Config+0x40>)
 800394c:	2207      	movs	r2, #7
 800394e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	e000e010 	.word	0xe000e010

08003960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff29 	bl	80037c0 <__NVIC_SetPriorityGrouping>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	4603      	mov	r3, r0
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003988:	f7ff ff3e 	bl	8003808 <__NVIC_GetPriorityGrouping>
 800398c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	6978      	ldr	r0, [r7, #20]
 8003994:	f7ff ff8e 	bl	80038b4 <NVIC_EncodePriority>
 8003998:	4602      	mov	r2, r0
 800399a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff5d 	bl	8003860 <__NVIC_SetPriority>
}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	4603      	mov	r3, r0
 80039b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff31 	bl	8003824 <__NVIC_EnableIRQ>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ffa2 	bl	800391c <SysTick_Config>
 80039d8:	4603      	mov	r3, r0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039f0:	f7ff faa4 	bl	8002f3c <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e099      	b.n	8003b34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a20:	e00f      	b.n	8003a42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a22:	f7ff fa8b 	bl	8002f3c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d908      	bls.n	8003a42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e078      	b.n	8003b34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e8      	bne.n	8003a22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4b38      	ldr	r3, [pc, #224]	; (8003b3c <HAL_DMA_Init+0x158>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d107      	bne.n	8003aac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f023 0307 	bic.w	r3, r3, #7
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d117      	bne.n	8003b06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00e      	beq.n	8003b06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fb01 	bl	80040f0 <DMA_CheckFifoParam>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2240      	movs	r2, #64	; 0x40
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b02:	2301      	movs	r3, #1
 8003b04:	e016      	b.n	8003b34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fab8 	bl	8004084 <DMA_CalcBaseAndBitshift>
 8003b14:	4603      	mov	r3, r0
 8003b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1c:	223f      	movs	r2, #63	; 0x3f
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	f010803f 	.word	0xf010803f

08003b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_DMA_Start_IT+0x26>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e040      	b.n	8003be8 <HAL_DMA_Start_IT+0xa8>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d12f      	bne.n	8003bda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fa4a 	bl	8004028 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b98:	223f      	movs	r2, #63	; 0x3f
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0216 	orr.w	r2, r2, #22
 8003bae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0208 	orr.w	r2, r2, #8
 8003bc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e005      	b.n	8003be6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
 8003be4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bfe:	f7ff f99d 	bl	8002f3c <HAL_GetTick>
 8003c02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d008      	beq.n	8003c22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2280      	movs	r2, #128	; 0x80
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e052      	b.n	8003cc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0216 	bic.w	r2, r2, #22
 8003c30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d103      	bne.n	8003c52 <HAL_DMA_Abort+0x62>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0208 	bic.w	r2, r2, #8
 8003c60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c72:	e013      	b.n	8003c9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c74:	f7ff f962 	bl	8002f3c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d90c      	bls.n	8003c9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e015      	b.n	8003cc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e4      	bne.n	8003c74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	223f      	movs	r2, #63	; 0x3f
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d004      	beq.n	8003cee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2280      	movs	r2, #128	; 0x80
 8003ce8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e00c      	b.n	8003d08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2205      	movs	r2, #5
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d20:	4b8e      	ldr	r3, [pc, #568]	; (8003f5c <HAL_DMA_IRQHandler+0x248>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a8e      	ldr	r2, [pc, #568]	; (8003f60 <HAL_DMA_IRQHandler+0x24c>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	0a9b      	lsrs	r3, r3, #10
 8003d2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3e:	2208      	movs	r2, #8
 8003d40:	409a      	lsls	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d01a      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d013      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0204 	bic.w	r2, r2, #4
 8003d66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d84:	2201      	movs	r2, #1
 8003d86:	409a      	lsls	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d012      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da2:	2201      	movs	r2, #1
 8003da4:	409a      	lsls	r2, r3
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	f043 0202 	orr.w	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	2204      	movs	r2, #4
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d012      	beq.n	8003dec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00b      	beq.n	8003dec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	2204      	movs	r2, #4
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de4:	f043 0204 	orr.w	r2, r3, #4
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df0:	2210      	movs	r2, #16
 8003df2:	409a      	lsls	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d043      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d03c      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0e:	2210      	movs	r2, #16
 8003e10:	409a      	lsls	r2, r3
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d018      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d108      	bne.n	8003e44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d024      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
 8003e42:	e01f      	b.n	8003e84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01b      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
 8003e54:	e016      	b.n	8003e84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d107      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0208 	bic.w	r2, r2, #8
 8003e72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e88:	2220      	movs	r2, #32
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 808f 	beq.w	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8087 	beq.w	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	2220      	movs	r2, #32
 8003eac:	409a      	lsls	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b05      	cmp	r3, #5
 8003ebc:	d136      	bne.n	8003f2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0216 	bic.w	r2, r2, #22
 8003ecc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003edc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <HAL_DMA_IRQHandler+0x1da>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0208 	bic.w	r2, r2, #8
 8003efc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	223f      	movs	r2, #63	; 0x3f
 8003f04:	409a      	lsls	r2, r3
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d07e      	beq.n	8004020 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	4798      	blx	r3
        }
        return;
 8003f2a:	e079      	b.n	8004020 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01d      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10d      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d031      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
 8003f58:	e02c      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
 8003f5a:	bf00      	nop
 8003f5c:	20000008 	.word	0x20000008
 8003f60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d023      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
 8003f74:	e01e      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10f      	bne.n	8003fa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0210 	bic.w	r2, r2, #16
 8003f92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d032      	beq.n	8004022 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d022      	beq.n	800400e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2205      	movs	r2, #5
 8003fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d307      	bcc.n	8003ffc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f2      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0x2cc>
 8003ffa:	e000      	b.n	8003ffe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ffc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
 800401e:	e000      	b.n	8004022 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004020:	bf00      	nop
    }
  }
}
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004044:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d108      	bne.n	8004068 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004066:	e007      	b.n	8004078 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	60da      	str	r2, [r3, #12]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	3b10      	subs	r3, #16
 8004094:	4a14      	ldr	r2, [pc, #80]	; (80040e8 <DMA_CalcBaseAndBitshift+0x64>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800409e:	4a13      	ldr	r2, [pc, #76]	; (80040ec <DMA_CalcBaseAndBitshift+0x68>)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d909      	bls.n	80040c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ba:	f023 0303 	bic.w	r3, r3, #3
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	659a      	str	r2, [r3, #88]	; 0x58
 80040c4:	e007      	b.n	80040d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	aaaaaaab 	.word	0xaaaaaaab
 80040ec:	0800dc0c 	.word	0x0800dc0c

080040f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d11f      	bne.n	800414a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d856      	bhi.n	80041be <DMA_CheckFifoParam+0xce>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <DMA_CheckFifoParam+0x28>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	08004129 	.word	0x08004129
 800411c:	0800413b 	.word	0x0800413b
 8004120:	08004129 	.word	0x08004129
 8004124:	080041bf 	.word	0x080041bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d046      	beq.n	80041c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004138:	e043      	b.n	80041c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004142:	d140      	bne.n	80041c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004148:	e03d      	b.n	80041c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004152:	d121      	bne.n	8004198 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b03      	cmp	r3, #3
 8004158:	d837      	bhi.n	80041ca <DMA_CheckFifoParam+0xda>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <DMA_CheckFifoParam+0x70>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004171 	.word	0x08004171
 8004164:	08004177 	.word	0x08004177
 8004168:	08004171 	.word	0x08004171
 800416c:	08004189 	.word	0x08004189
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      break;
 8004174:	e030      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d025      	beq.n	80041ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004186:	e022      	b.n	80041ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004190:	d11f      	bne.n	80041d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004196:	e01c      	b.n	80041d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d903      	bls.n	80041a6 <DMA_CheckFifoParam+0xb6>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d003      	beq.n	80041ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041a4:	e018      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
      break;
 80041aa:	e015      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00e      	beq.n	80041d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
      break;
 80041bc:	e00b      	b.n	80041d6 <DMA_CheckFifoParam+0xe6>
      break;
 80041be:	bf00      	nop
 80041c0:	e00a      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041c2:	bf00      	nop
 80041c4:	e008      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041c6:	bf00      	nop
 80041c8:	e006      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041ca:	bf00      	nop
 80041cc:	e004      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041d6:	bf00      	nop
    }
  } 
  
  return status; 
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop

080041e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	; 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	e16b      	b.n	80044dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004204:	2201      	movs	r2, #1
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	429a      	cmp	r2, r3
 800421e:	f040 815a 	bne.w	80044d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b01      	cmp	r3, #1
 800422c:	d005      	beq.n	800423a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004236:	2b02      	cmp	r3, #2
 8004238:	d130      	bne.n	800429c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2203      	movs	r2, #3
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004270:	2201      	movs	r2, #1
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	43db      	mvns	r3, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 0201 	and.w	r2, r3, #1
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d017      	beq.n	80042d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	2203      	movs	r2, #3
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d123      	bne.n	800432c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	08da      	lsrs	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3208      	adds	r2, #8
 80042ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	220f      	movs	r2, #15
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	08da      	lsrs	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3208      	adds	r2, #8
 8004326:	69b9      	ldr	r1, [r7, #24]
 8004328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	2203      	movs	r2, #3
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 0203 	and.w	r2, r3, #3
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80b4 	beq.w	80044d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	4b60      	ldr	r3, [pc, #384]	; (80044f4 <HAL_GPIO_Init+0x30c>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	4a5f      	ldr	r2, [pc, #380]	; (80044f4 <HAL_GPIO_Init+0x30c>)
 8004378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800437c:	6453      	str	r3, [r2, #68]	; 0x44
 800437e:	4b5d      	ldr	r3, [pc, #372]	; (80044f4 <HAL_GPIO_Init+0x30c>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800438a:	4a5b      	ldr	r2, [pc, #364]	; (80044f8 <HAL_GPIO_Init+0x310>)
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	3302      	adds	r3, #2
 8004392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	220f      	movs	r2, #15
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a52      	ldr	r2, [pc, #328]	; (80044fc <HAL_GPIO_Init+0x314>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d02b      	beq.n	800440e <HAL_GPIO_Init+0x226>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a51      	ldr	r2, [pc, #324]	; (8004500 <HAL_GPIO_Init+0x318>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d025      	beq.n	800440a <HAL_GPIO_Init+0x222>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a50      	ldr	r2, [pc, #320]	; (8004504 <HAL_GPIO_Init+0x31c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01f      	beq.n	8004406 <HAL_GPIO_Init+0x21e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a4f      	ldr	r2, [pc, #316]	; (8004508 <HAL_GPIO_Init+0x320>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d019      	beq.n	8004402 <HAL_GPIO_Init+0x21a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a4e      	ldr	r2, [pc, #312]	; (800450c <HAL_GPIO_Init+0x324>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_GPIO_Init+0x216>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a4d      	ldr	r2, [pc, #308]	; (8004510 <HAL_GPIO_Init+0x328>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00d      	beq.n	80043fa <HAL_GPIO_Init+0x212>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a4c      	ldr	r2, [pc, #304]	; (8004514 <HAL_GPIO_Init+0x32c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d007      	beq.n	80043f6 <HAL_GPIO_Init+0x20e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a4b      	ldr	r2, [pc, #300]	; (8004518 <HAL_GPIO_Init+0x330>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d101      	bne.n	80043f2 <HAL_GPIO_Init+0x20a>
 80043ee:	2307      	movs	r3, #7
 80043f0:	e00e      	b.n	8004410 <HAL_GPIO_Init+0x228>
 80043f2:	2308      	movs	r3, #8
 80043f4:	e00c      	b.n	8004410 <HAL_GPIO_Init+0x228>
 80043f6:	2306      	movs	r3, #6
 80043f8:	e00a      	b.n	8004410 <HAL_GPIO_Init+0x228>
 80043fa:	2305      	movs	r3, #5
 80043fc:	e008      	b.n	8004410 <HAL_GPIO_Init+0x228>
 80043fe:	2304      	movs	r3, #4
 8004400:	e006      	b.n	8004410 <HAL_GPIO_Init+0x228>
 8004402:	2303      	movs	r3, #3
 8004404:	e004      	b.n	8004410 <HAL_GPIO_Init+0x228>
 8004406:	2302      	movs	r3, #2
 8004408:	e002      	b.n	8004410 <HAL_GPIO_Init+0x228>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <HAL_GPIO_Init+0x228>
 800440e:	2300      	movs	r3, #0
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	f002 0203 	and.w	r2, r2, #3
 8004416:	0092      	lsls	r2, r2, #2
 8004418:	4093      	lsls	r3, r2
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4313      	orrs	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004420:	4935      	ldr	r1, [pc, #212]	; (80044f8 <HAL_GPIO_Init+0x310>)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	3302      	adds	r3, #2
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800442e:	4b3b      	ldr	r3, [pc, #236]	; (800451c <HAL_GPIO_Init+0x334>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	43db      	mvns	r3, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4013      	ands	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004452:	4a32      	ldr	r2, [pc, #200]	; (800451c <HAL_GPIO_Init+0x334>)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004458:	4b30      	ldr	r3, [pc, #192]	; (800451c <HAL_GPIO_Init+0x334>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	43db      	mvns	r3, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800447c:	4a27      	ldr	r2, [pc, #156]	; (800451c <HAL_GPIO_Init+0x334>)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004482:	4b26      	ldr	r3, [pc, #152]	; (800451c <HAL_GPIO_Init+0x334>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044a6:	4a1d      	ldr	r2, [pc, #116]	; (800451c <HAL_GPIO_Init+0x334>)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <HAL_GPIO_Init+0x334>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d0:	4a12      	ldr	r2, [pc, #72]	; (800451c <HAL_GPIO_Init+0x334>)
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3301      	adds	r3, #1
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	f67f ae90 	bls.w	8004204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	3724      	adds	r7, #36	; 0x24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40013800 	.word	0x40013800
 80044fc:	40020000 	.word	0x40020000
 8004500:	40020400 	.word	0x40020400
 8004504:	40020800 	.word	0x40020800
 8004508:	40020c00 	.word	0x40020c00
 800450c:	40021000 	.word	0x40021000
 8004510:	40021400 	.word	0x40021400
 8004514:	40021800 	.word	0x40021800
 8004518:	40021c00 	.word	0x40021c00
 800451c:	40013c00 	.word	0x40013c00

08004520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	807b      	strh	r3, [r7, #2]
 800452c:	4613      	mov	r3, r2
 800452e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004530:	787b      	ldrb	r3, [r7, #1]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004536:	887a      	ldrh	r2, [r7, #2]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800453c:	e003      	b.n	8004546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800453e:	887b      	ldrh	r3, [r7, #2]
 8004540:	041a      	lsls	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	619a      	str	r2, [r3, #24]
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	460b      	mov	r3, r1
 800455c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004564:	887a      	ldrh	r2, [r7, #2]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4013      	ands	r3, r2
 800456a:	041a      	lsls	r2, r3, #16
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	43d9      	mvns	r1, r3
 8004570:	887b      	ldrh	r3, [r7, #2]
 8004572:	400b      	ands	r3, r1
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	619a      	str	r2, [r3, #24]
}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e12b      	b.n	80047f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fd f866 	bl	8001680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2224      	movs	r2, #36	; 0x24
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045ec:	f000 fd80 	bl	80050f0 <HAL_RCC_GetPCLK1Freq>
 80045f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4a81      	ldr	r2, [pc, #516]	; (80047fc <HAL_I2C_Init+0x274>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d807      	bhi.n	800460c <HAL_I2C_Init+0x84>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a80      	ldr	r2, [pc, #512]	; (8004800 <HAL_I2C_Init+0x278>)
 8004600:	4293      	cmp	r3, r2
 8004602:	bf94      	ite	ls
 8004604:	2301      	movls	r3, #1
 8004606:	2300      	movhi	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e006      	b.n	800461a <HAL_I2C_Init+0x92>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a7d      	ldr	r2, [pc, #500]	; (8004804 <HAL_I2C_Init+0x27c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	bf94      	ite	ls
 8004614:	2301      	movls	r3, #1
 8004616:	2300      	movhi	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0e7      	b.n	80047f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4a78      	ldr	r2, [pc, #480]	; (8004808 <HAL_I2C_Init+0x280>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	0c9b      	lsrs	r3, r3, #18
 800462c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4a6a      	ldr	r2, [pc, #424]	; (80047fc <HAL_I2C_Init+0x274>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d802      	bhi.n	800465c <HAL_I2C_Init+0xd4>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	3301      	adds	r3, #1
 800465a:	e009      	b.n	8004670 <HAL_I2C_Init+0xe8>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	4a69      	ldr	r2, [pc, #420]	; (800480c <HAL_I2C_Init+0x284>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	099b      	lsrs	r3, r3, #6
 800466e:	3301      	adds	r3, #1
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	430b      	orrs	r3, r1
 8004676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004682:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	495c      	ldr	r1, [pc, #368]	; (80047fc <HAL_I2C_Init+0x274>)
 800468c:	428b      	cmp	r3, r1
 800468e:	d819      	bhi.n	80046c4 <HAL_I2C_Init+0x13c>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1e59      	subs	r1, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	fbb1 f3f3 	udiv	r3, r1, r3
 800469e:	1c59      	adds	r1, r3, #1
 80046a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046a4:	400b      	ands	r3, r1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_I2C_Init+0x138>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1e59      	subs	r1, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80046b8:	3301      	adds	r3, #1
 80046ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046be:	e051      	b.n	8004764 <HAL_I2C_Init+0x1dc>
 80046c0:	2304      	movs	r3, #4
 80046c2:	e04f      	b.n	8004764 <HAL_I2C_Init+0x1dc>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d111      	bne.n	80046f0 <HAL_I2C_Init+0x168>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1e58      	subs	r0, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6859      	ldr	r1, [r3, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	440b      	add	r3, r1
 80046da:	fbb0 f3f3 	udiv	r3, r0, r3
 80046de:	3301      	adds	r3, #1
 80046e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e012      	b.n	8004716 <HAL_I2C_Init+0x18e>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1e58      	subs	r0, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	0099      	lsls	r1, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	fbb0 f3f3 	udiv	r3, r0, r3
 8004706:	3301      	adds	r3, #1
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_I2C_Init+0x196>
 800471a:	2301      	movs	r3, #1
 800471c:	e022      	b.n	8004764 <HAL_I2C_Init+0x1dc>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10e      	bne.n	8004744 <HAL_I2C_Init+0x1bc>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1e58      	subs	r0, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	460b      	mov	r3, r1
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	440b      	add	r3, r1
 8004734:	fbb0 f3f3 	udiv	r3, r0, r3
 8004738:	3301      	adds	r3, #1
 800473a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800473e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004742:	e00f      	b.n	8004764 <HAL_I2C_Init+0x1dc>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1e58      	subs	r0, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6859      	ldr	r1, [r3, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	0099      	lsls	r1, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	fbb0 f3f3 	udiv	r3, r0, r3
 800475a:	3301      	adds	r3, #1
 800475c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	6809      	ldr	r1, [r1, #0]
 8004768:	4313      	orrs	r3, r2
 800476a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6911      	ldr	r1, [r2, #16]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68d2      	ldr	r2, [r2, #12]
 800479e:	4311      	orrs	r1, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	430b      	orrs	r3, r1
 80047a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	000186a0 	.word	0x000186a0
 8004800:	001e847f 	.word	0x001e847f
 8004804:	003d08ff 	.word	0x003d08ff
 8004808:	431bde83 	.word	0x431bde83
 800480c:	10624dd3 	.word	0x10624dd3

08004810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e267      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d075      	beq.n	800491a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800482e:	4b88      	ldr	r3, [pc, #544]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b04      	cmp	r3, #4
 8004838:	d00c      	beq.n	8004854 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800483a:	4b85      	ldr	r3, [pc, #532]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004842:	2b08      	cmp	r3, #8
 8004844:	d112      	bne.n	800486c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004846:	4b82      	ldr	r3, [pc, #520]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004852:	d10b      	bne.n	800486c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004854:	4b7e      	ldr	r3, [pc, #504]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d05b      	beq.n	8004918 <HAL_RCC_OscConfig+0x108>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d157      	bne.n	8004918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e242      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004874:	d106      	bne.n	8004884 <HAL_RCC_OscConfig+0x74>
 8004876:	4b76      	ldr	r3, [pc, #472]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a75      	ldr	r2, [pc, #468]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 800487c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	e01d      	b.n	80048c0 <HAL_RCC_OscConfig+0xb0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800488c:	d10c      	bne.n	80048a8 <HAL_RCC_OscConfig+0x98>
 800488e:	4b70      	ldr	r3, [pc, #448]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a6f      	ldr	r2, [pc, #444]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	4b6d      	ldr	r3, [pc, #436]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a6c      	ldr	r2, [pc, #432]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80048a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	e00b      	b.n	80048c0 <HAL_RCC_OscConfig+0xb0>
 80048a8:	4b69      	ldr	r3, [pc, #420]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a68      	ldr	r2, [pc, #416]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80048ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	4b66      	ldr	r3, [pc, #408]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a65      	ldr	r2, [pc, #404]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80048ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d013      	beq.n	80048f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c8:	f7fe fb38 	bl	8002f3c <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048d0:	f7fe fb34 	bl	8002f3c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b64      	cmp	r3, #100	; 0x64
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e207      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e2:	4b5b      	ldr	r3, [pc, #364]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0xc0>
 80048ee:	e014      	b.n	800491a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f0:	f7fe fb24 	bl	8002f3c <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f8:	f7fe fb20 	bl	8002f3c <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b64      	cmp	r3, #100	; 0x64
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e1f3      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800490a:	4b51      	ldr	r3, [pc, #324]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0xe8>
 8004916:	e000      	b.n	800491a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d063      	beq.n	80049ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004926:	4b4a      	ldr	r3, [pc, #296]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004932:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800493a:	2b08      	cmp	r3, #8
 800493c:	d11c      	bne.n	8004978 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800493e:	4b44      	ldr	r3, [pc, #272]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d116      	bne.n	8004978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800494a:	4b41      	ldr	r3, [pc, #260]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <HAL_RCC_OscConfig+0x152>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d001      	beq.n	8004962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e1c7      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004962:	4b3b      	ldr	r3, [pc, #236]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4937      	ldr	r1, [pc, #220]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004972:	4313      	orrs	r3, r2
 8004974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004976:	e03a      	b.n	80049ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d020      	beq.n	80049c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004980:	4b34      	ldr	r3, [pc, #208]	; (8004a54 <HAL_RCC_OscConfig+0x244>)
 8004982:	2201      	movs	r2, #1
 8004984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004986:	f7fe fad9 	bl	8002f3c <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800498e:	f7fe fad5 	bl	8002f3c <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e1a8      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a0:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ac:	4b28      	ldr	r3, [pc, #160]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	4925      	ldr	r1, [pc, #148]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	600b      	str	r3, [r1, #0]
 80049c0:	e015      	b.n	80049ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <HAL_RCC_OscConfig+0x244>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fe fab8 	bl	8002f3c <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049d0:	f7fe fab4 	bl	8002f3c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e187      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049e2:	4b1b      	ldr	r3, [pc, #108]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d036      	beq.n	8004a68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <HAL_RCC_OscConfig+0x248>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fe fa98 	bl	8002f3c <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a10:	f7fe fa94 	bl	8002f3c <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e167      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x200>
 8004a2e:	e01b      	b.n	8004a68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <HAL_RCC_OscConfig+0x248>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a36:	f7fe fa81 	bl	8002f3c <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a3c:	e00e      	b.n	8004a5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a3e:	f7fe fa7d 	bl	8002f3c <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d907      	bls.n	8004a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e150      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
 8004a50:	40023800 	.word	0x40023800
 8004a54:	42470000 	.word	0x42470000
 8004a58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a5c:	4b88      	ldr	r3, [pc, #544]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1ea      	bne.n	8004a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8097 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a76:	2300      	movs	r3, #0
 8004a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a7a:	4b81      	ldr	r3, [pc, #516]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10f      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a86:	2300      	movs	r3, #0
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	4b7d      	ldr	r3, [pc, #500]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	4a7c      	ldr	r2, [pc, #496]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6413      	str	r3, [r2, #64]	; 0x40
 8004a96:	4b7a      	ldr	r3, [pc, #488]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	60bb      	str	r3, [r7, #8]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa6:	4b77      	ldr	r3, [pc, #476]	; (8004c84 <HAL_RCC_OscConfig+0x474>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d118      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ab2:	4b74      	ldr	r3, [pc, #464]	; (8004c84 <HAL_RCC_OscConfig+0x474>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a73      	ldr	r2, [pc, #460]	; (8004c84 <HAL_RCC_OscConfig+0x474>)
 8004ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004abe:	f7fe fa3d 	bl	8002f3c <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac6:	f7fe fa39 	bl	8002f3c <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e10c      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad8:	4b6a      	ldr	r3, [pc, #424]	; (8004c84 <HAL_RCC_OscConfig+0x474>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d106      	bne.n	8004afa <HAL_RCC_OscConfig+0x2ea>
 8004aec:	4b64      	ldr	r3, [pc, #400]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	4a63      	ldr	r2, [pc, #396]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	6713      	str	r3, [r2, #112]	; 0x70
 8004af8:	e01c      	b.n	8004b34 <HAL_RCC_OscConfig+0x324>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b05      	cmp	r3, #5
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCC_OscConfig+0x30c>
 8004b02:	4b5f      	ldr	r3, [pc, #380]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	4a5e      	ldr	r2, [pc, #376]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b08:	f043 0304 	orr.w	r3, r3, #4
 8004b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0e:	4b5c      	ldr	r3, [pc, #368]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	4a5b      	ldr	r2, [pc, #364]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1a:	e00b      	b.n	8004b34 <HAL_RCC_OscConfig+0x324>
 8004b1c:	4b58      	ldr	r3, [pc, #352]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	4a57      	ldr	r2, [pc, #348]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b22:	f023 0301 	bic.w	r3, r3, #1
 8004b26:	6713      	str	r3, [r2, #112]	; 0x70
 8004b28:	4b55      	ldr	r3, [pc, #340]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	4a54      	ldr	r2, [pc, #336]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b2e:	f023 0304 	bic.w	r3, r3, #4
 8004b32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d015      	beq.n	8004b68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3c:	f7fe f9fe 	bl	8002f3c <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b44:	f7fe f9fa 	bl	8002f3c <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e0cb      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5a:	4b49      	ldr	r3, [pc, #292]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0ee      	beq.n	8004b44 <HAL_RCC_OscConfig+0x334>
 8004b66:	e014      	b.n	8004b92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b68:	f7fe f9e8 	bl	8002f3c <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b70:	f7fe f9e4 	bl	8002f3c <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e0b5      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b86:	4b3e      	ldr	r3, [pc, #248]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1ee      	bne.n	8004b70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b92:	7dfb      	ldrb	r3, [r7, #23]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d105      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b98:	4b39      	ldr	r3, [pc, #228]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	4a38      	ldr	r2, [pc, #224]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80a1 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bae:	4b34      	ldr	r3, [pc, #208]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d05c      	beq.n	8004c74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d141      	bne.n	8004c46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc2:	4b31      	ldr	r3, [pc, #196]	; (8004c88 <HAL_RCC_OscConfig+0x478>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7fe f9b8 	bl	8002f3c <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fe f9b4 	bl	8002f3c <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e087      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be2:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69da      	ldr	r2, [r3, #28]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	019b      	lsls	r3, r3, #6
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	3b01      	subs	r3, #1
 8004c08:	041b      	lsls	r3, r3, #16
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	061b      	lsls	r3, r3, #24
 8004c12:	491b      	ldr	r1, [pc, #108]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c18:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <HAL_RCC_OscConfig+0x478>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1e:	f7fe f98d 	bl	8002f3c <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c26:	f7fe f989 	bl	8002f3c <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e05c      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c38:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f0      	beq.n	8004c26 <HAL_RCC_OscConfig+0x416>
 8004c44:	e054      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c46:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <HAL_RCC_OscConfig+0x478>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4c:	f7fe f976 	bl	8002f3c <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c54:	f7fe f972 	bl	8002f3c <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e045      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f0      	bne.n	8004c54 <HAL_RCC_OscConfig+0x444>
 8004c72:	e03d      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d107      	bne.n	8004c8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e038      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
 8004c80:	40023800 	.word	0x40023800
 8004c84:	40007000 	.word	0x40007000
 8004c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <HAL_RCC_OscConfig+0x4ec>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d028      	beq.n	8004cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d121      	bne.n	8004cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d11a      	bne.n	8004cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d111      	bne.n	8004cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d107      	bne.n	8004cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40023800 	.word	0x40023800

08004d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0cc      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d14:	4b68      	ldr	r3, [pc, #416]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d90c      	bls.n	8004d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b65      	ldr	r3, [pc, #404]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2a:	4b63      	ldr	r3, [pc, #396]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d001      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0b8      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d020      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d54:	4b59      	ldr	r3, [pc, #356]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	4a58      	ldr	r2, [pc, #352]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d6c:	4b53      	ldr	r3, [pc, #332]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	4a52      	ldr	r2, [pc, #328]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d78:	4b50      	ldr	r3, [pc, #320]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	494d      	ldr	r1, [pc, #308]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d044      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d107      	bne.n	8004dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9e:	4b47      	ldr	r3, [pc, #284]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d119      	bne.n	8004dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e07f      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d003      	beq.n	8004dbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d107      	bne.n	8004dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbe:	4b3f      	ldr	r3, [pc, #252]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e06f      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dce:	4b3b      	ldr	r3, [pc, #236]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e067      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dde:	4b37      	ldr	r3, [pc, #220]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f023 0203 	bic.w	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4934      	ldr	r1, [pc, #208]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004df0:	f7fe f8a4 	bl	8002f3c <HAL_GetTick>
 8004df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df8:	f7fe f8a0 	bl	8002f3c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e04f      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0e:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 020c 	and.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1eb      	bne.n	8004df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e20:	4b25      	ldr	r3, [pc, #148]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d20c      	bcs.n	8004e48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b22      	ldr	r3, [pc, #136]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e36:	4b20      	ldr	r3, [pc, #128]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d001      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e032      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d008      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e54:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4916      	ldr	r1, [pc, #88]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	490e      	ldr	r1, [pc, #56]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e86:	f000 f821 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	091b      	lsrs	r3, r3, #4
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	490a      	ldr	r1, [pc, #40]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e98:	5ccb      	ldrb	r3, [r1, r3]
 8004e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9e:	4a09      	ldr	r2, [pc, #36]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ea2:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe f804 	bl	8002eb4 <HAL_InitTick>

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40023c00 	.word	0x40023c00
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	0800dbf4 	.word	0x0800dbf4
 8004ec4:	20000008 	.word	0x20000008
 8004ec8:	2000000c 	.word	0x2000000c

08004ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed0:	b094      	sub	sp, #80	; 0x50
 8004ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed8:	2300      	movs	r3, #0
 8004eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004edc:	2300      	movs	r3, #0
 8004ede:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ee4:	4b79      	ldr	r3, [pc, #484]	; (80050cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 030c 	and.w	r3, r3, #12
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d00d      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0x40>
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	f200 80e1 	bhi.w	80050b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_RCC_GetSysClockFreq+0x34>
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d003      	beq.n	8004f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8004efe:	e0db      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f00:	4b73      	ldr	r3, [pc, #460]	; (80050d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f04:	e0db      	b.n	80050be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f06:	4b73      	ldr	r3, [pc, #460]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f0a:	e0d8      	b.n	80050be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f0c:	4b6f      	ldr	r3, [pc, #444]	; (80050cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f16:	4b6d      	ldr	r3, [pc, #436]	; (80050cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d063      	beq.n	8004fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f22:	4b6a      	ldr	r3, [pc, #424]	; (80050cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	2200      	movs	r2, #0
 8004f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f34:	633b      	str	r3, [r7, #48]	; 0x30
 8004f36:	2300      	movs	r3, #0
 8004f38:	637b      	str	r3, [r7, #52]	; 0x34
 8004f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f3e:	4622      	mov	r2, r4
 8004f40:	462b      	mov	r3, r5
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f04f 0100 	mov.w	r1, #0
 8004f4a:	0159      	lsls	r1, r3, #5
 8004f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f50:	0150      	lsls	r0, r2, #5
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4621      	mov	r1, r4
 8004f58:	1a51      	subs	r1, r2, r1
 8004f5a:	6139      	str	r1, [r7, #16]
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f70:	4659      	mov	r1, fp
 8004f72:	018b      	lsls	r3, r1, #6
 8004f74:	4651      	mov	r1, sl
 8004f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f7a:	4651      	mov	r1, sl
 8004f7c:	018a      	lsls	r2, r1, #6
 8004f7e:	4651      	mov	r1, sl
 8004f80:	ebb2 0801 	subs.w	r8, r2, r1
 8004f84:	4659      	mov	r1, fp
 8004f86:	eb63 0901 	sbc.w	r9, r3, r1
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f9e:	4690      	mov	r8, r2
 8004fa0:	4699      	mov	r9, r3
 8004fa2:	4623      	mov	r3, r4
 8004fa4:	eb18 0303 	adds.w	r3, r8, r3
 8004fa8:	60bb      	str	r3, [r7, #8]
 8004faa:	462b      	mov	r3, r5
 8004fac:	eb49 0303 	adc.w	r3, r9, r3
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	024b      	lsls	r3, r1, #9
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fc8:	4621      	mov	r1, r4
 8004fca:	024a      	lsls	r2, r1, #9
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fdc:	f7fb fde4 	bl	8000ba8 <__aeabi_uldivmod>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe8:	e058      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fea:	4b38      	ldr	r3, [pc, #224]	; (80050cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	099b      	lsrs	r3, r3, #6
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ffa:	623b      	str	r3, [r7, #32]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8005000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005004:	4642      	mov	r2, r8
 8005006:	464b      	mov	r3, r9
 8005008:	f04f 0000 	mov.w	r0, #0
 800500c:	f04f 0100 	mov.w	r1, #0
 8005010:	0159      	lsls	r1, r3, #5
 8005012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005016:	0150      	lsls	r0, r2, #5
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4641      	mov	r1, r8
 800501e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005022:	4649      	mov	r1, r9
 8005024:	eb63 0b01 	sbc.w	fp, r3, r1
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800503c:	ebb2 040a 	subs.w	r4, r2, sl
 8005040:	eb63 050b 	sbc.w	r5, r3, fp
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	00eb      	lsls	r3, r5, #3
 800504e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005052:	00e2      	lsls	r2, r4, #3
 8005054:	4614      	mov	r4, r2
 8005056:	461d      	mov	r5, r3
 8005058:	4643      	mov	r3, r8
 800505a:	18e3      	adds	r3, r4, r3
 800505c:	603b      	str	r3, [r7, #0]
 800505e:	464b      	mov	r3, r9
 8005060:	eb45 0303 	adc.w	r3, r5, r3
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005072:	4629      	mov	r1, r5
 8005074:	028b      	lsls	r3, r1, #10
 8005076:	4621      	mov	r1, r4
 8005078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800507c:	4621      	mov	r1, r4
 800507e:	028a      	lsls	r2, r1, #10
 8005080:	4610      	mov	r0, r2
 8005082:	4619      	mov	r1, r3
 8005084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005086:	2200      	movs	r2, #0
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	61fa      	str	r2, [r7, #28]
 800508c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005090:	f7fb fd8a 	bl	8000ba8 <__aeabi_uldivmod>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4613      	mov	r3, r2
 800509a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <HAL_RCC_GetSysClockFreq+0x200>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	3301      	adds	r3, #1
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80050ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050b6:	e002      	b.n	80050be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050b8:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80050ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3750      	adds	r7, #80	; 0x50
 80050c4:	46bd      	mov	sp, r7
 80050c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ca:	bf00      	nop
 80050cc:	40023800 	.word	0x40023800
 80050d0:	00f42400 	.word	0x00f42400
 80050d4:	007a1200 	.word	0x007a1200

080050d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050dc:	4b03      	ldr	r3, [pc, #12]	; (80050ec <HAL_RCC_GetHCLKFreq+0x14>)
 80050de:	681b      	ldr	r3, [r3, #0]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000008 	.word	0x20000008

080050f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050f4:	f7ff fff0 	bl	80050d8 <HAL_RCC_GetHCLKFreq>
 80050f8:	4602      	mov	r2, r0
 80050fa:	4b05      	ldr	r3, [pc, #20]	; (8005110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	0a9b      	lsrs	r3, r3, #10
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	4903      	ldr	r1, [pc, #12]	; (8005114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005106:	5ccb      	ldrb	r3, [r1, r3]
 8005108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800510c:	4618      	mov	r0, r3
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40023800 	.word	0x40023800
 8005114:	0800dc04 	.word	0x0800dc04

08005118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800511c:	f7ff ffdc 	bl	80050d8 <HAL_RCC_GetHCLKFreq>
 8005120:	4602      	mov	r2, r0
 8005122:	4b05      	ldr	r3, [pc, #20]	; (8005138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	0b5b      	lsrs	r3, r3, #13
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	4903      	ldr	r1, [pc, #12]	; (800513c <HAL_RCC_GetPCLK2Freq+0x24>)
 800512e:	5ccb      	ldrb	r3, [r1, r3]
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005134:	4618      	mov	r0, r3
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40023800 	.word	0x40023800
 800513c:	0800dc04 	.word	0x0800dc04

08005140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e07b      	b.n	800524a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	2b00      	cmp	r3, #0
 8005158:	d108      	bne.n	800516c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005162:	d009      	beq.n	8005178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	61da      	str	r2, [r3, #28]
 800516a:	e005      	b.n	8005178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fd f9d0 	bl	8002538 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fc:	ea42 0103 	orr.w	r1, r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005204:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	0c1b      	lsrs	r3, r3, #16
 8005216:	f003 0104 	and.w	r1, r3, #4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	f003 0210 	and.w	r2, r3, #16
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005238:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b088      	sub	sp, #32
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	4613      	mov	r3, r2
 8005260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_SPI_Transmit+0x22>
 8005270:	2302      	movs	r3, #2
 8005272:	e126      	b.n	80054c2 <HAL_SPI_Transmit+0x270>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800527c:	f7fd fe5e 	bl	8002f3c <HAL_GetTick>
 8005280:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d002      	beq.n	8005298 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005292:	2302      	movs	r3, #2
 8005294:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005296:	e10b      	b.n	80054b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_SPI_Transmit+0x52>
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052a8:	e102      	b.n	80054b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2203      	movs	r2, #3
 80052ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	88fa      	ldrh	r2, [r7, #6]
 80052c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	88fa      	ldrh	r2, [r7, #6]
 80052c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f0:	d10f      	bne.n	8005312 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005300:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005310:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d007      	beq.n	8005330 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800532e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005338:	d14b      	bne.n	80053d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_SPI_Transmit+0xf6>
 8005342:	8afb      	ldrh	r3, [r7, #22]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d13e      	bne.n	80053c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	881a      	ldrh	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	1c9a      	adds	r2, r3, #2
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800536c:	e02b      	b.n	80053c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b02      	cmp	r3, #2
 800537a:	d112      	bne.n	80053a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	881a      	ldrh	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	1c9a      	adds	r2, r3, #2
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	86da      	strh	r2, [r3, #54]	; 0x36
 80053a0:	e011      	b.n	80053c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a2:	f7fd fdcb 	bl	8002f3c <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d803      	bhi.n	80053ba <HAL_SPI_Transmit+0x168>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d102      	bne.n	80053c0 <HAL_SPI_Transmit+0x16e>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053c4:	e074      	b.n	80054b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1ce      	bne.n	800536e <HAL_SPI_Transmit+0x11c>
 80053d0:	e04c      	b.n	800546c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_SPI_Transmit+0x18e>
 80053da:	8afb      	ldrh	r3, [r7, #22]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d140      	bne.n	8005462 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	330c      	adds	r3, #12
 80053ea:	7812      	ldrb	r2, [r2, #0]
 80053ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005406:	e02c      	b.n	8005462 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b02      	cmp	r3, #2
 8005414:	d113      	bne.n	800543e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	330c      	adds	r3, #12
 8005420:	7812      	ldrb	r2, [r2, #0]
 8005422:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	86da      	strh	r2, [r3, #54]	; 0x36
 800543c:	e011      	b.n	8005462 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800543e:	f7fd fd7d 	bl	8002f3c <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d803      	bhi.n	8005456 <HAL_SPI_Transmit+0x204>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d102      	bne.n	800545c <HAL_SPI_Transmit+0x20a>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d102      	bne.n	8005462 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005460:	e026      	b.n	80054b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1cd      	bne.n	8005408 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	6839      	ldr	r1, [r7, #0]
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fbcb 	bl	8005c0c <SPI_EndRxTxTransaction>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10a      	bne.n	80054a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	77fb      	strb	r3, [r7, #31]
 80054ac:	e000      	b.n	80054b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80054ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3720      	adds	r7, #32
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b088      	sub	sp, #32
 80054ce:	af02      	add	r7, sp, #8
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	603b      	str	r3, [r7, #0]
 80054d6:	4613      	mov	r3, r2
 80054d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e6:	d112      	bne.n	800550e <HAL_SPI_Receive+0x44>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10e      	bne.n	800550e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2204      	movs	r2, #4
 80054f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054f8:	88fa      	ldrh	r2, [r7, #6]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	4613      	mov	r3, r2
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f8f1 	bl	80056ec <HAL_SPI_TransmitReceive>
 800550a:	4603      	mov	r3, r0
 800550c:	e0ea      	b.n	80056e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_SPI_Receive+0x52>
 8005518:	2302      	movs	r3, #2
 800551a:	e0e3      	b.n	80056e4 <HAL_SPI_Receive+0x21a>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005524:	f7fd fd0a 	bl	8002f3c <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	d002      	beq.n	800553c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005536:	2302      	movs	r3, #2
 8005538:	75fb      	strb	r3, [r7, #23]
    goto error;
 800553a:	e0ca      	b.n	80056d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_SPI_Receive+0x7e>
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800554c:	e0c1      	b.n	80056d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2204      	movs	r2, #4
 8005552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	88fa      	ldrh	r2, [r7, #6]
 8005566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	88fa      	ldrh	r2, [r7, #6]
 800556c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005594:	d10f      	bne.n	80055b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d007      	beq.n	80055d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d162      	bne.n	80056a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055dc:	e02e      	b.n	800563c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d115      	bne.n	8005618 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f103 020c 	add.w	r2, r3, #12
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	7812      	ldrb	r2, [r2, #0]
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005616:	e011      	b.n	800563c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005618:	f7fd fc90 	bl	8002f3c <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d803      	bhi.n	8005630 <HAL_SPI_Receive+0x166>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562e:	d102      	bne.n	8005636 <HAL_SPI_Receive+0x16c>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d102      	bne.n	800563c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	75fb      	strb	r3, [r7, #23]
          goto error;
 800563a:	e04a      	b.n	80056d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1cb      	bne.n	80055de <HAL_SPI_Receive+0x114>
 8005646:	e031      	b.n	80056ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b01      	cmp	r3, #1
 8005654:	d113      	bne.n	800567e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	b292      	uxth	r2, r2
 8005662:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	1c9a      	adds	r2, r3, #2
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800567c:	e011      	b.n	80056a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800567e:	f7fd fc5d 	bl	8002f3c <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d803      	bhi.n	8005696 <HAL_SPI_Receive+0x1cc>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d102      	bne.n	800569c <HAL_SPI_Receive+0x1d2>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056a0:	e017      	b.n	80056d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1cd      	bne.n	8005648 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fa45 	bl	8005b40 <SPI_EndRxTransaction>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	75fb      	strb	r3, [r7, #23]
 80056ce:	e000      	b.n	80056d2 <HAL_SPI_Receive+0x208>
  }

error :
 80056d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08c      	sub	sp, #48	; 0x30
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056fa:	2301      	movs	r3, #1
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_SPI_TransmitReceive+0x26>
 800570e:	2302      	movs	r3, #2
 8005710:	e18a      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x33c>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800571a:	f7fd fc0f 	bl	8002f3c <HAL_GetTick>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005730:	887b      	ldrh	r3, [r7, #2]
 8005732:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005738:	2b01      	cmp	r3, #1
 800573a:	d00f      	beq.n	800575c <HAL_SPI_TransmitReceive+0x70>
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005742:	d107      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d103      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x68>
 800574c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005750:	2b04      	cmp	r3, #4
 8005752:	d003      	beq.n	800575c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005754:	2302      	movs	r3, #2
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800575a:	e15b      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_SPI_TransmitReceive+0x82>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_SPI_TransmitReceive+0x82>
 8005768:	887b      	ldrh	r3, [r7, #2]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d103      	bne.n	8005776 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005774:	e14e      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b04      	cmp	r3, #4
 8005780:	d003      	beq.n	800578a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2205      	movs	r2, #5
 8005786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	887a      	ldrh	r2, [r7, #2]
 800579a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	887a      	ldrh	r2, [r7, #2]
 80057a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	887a      	ldrh	r2, [r7, #2]
 80057ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	887a      	ldrh	r2, [r7, #2]
 80057b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ca:	2b40      	cmp	r3, #64	; 0x40
 80057cc:	d007      	beq.n	80057de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e6:	d178      	bne.n	80058da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <HAL_SPI_TransmitReceive+0x10a>
 80057f0:	8b7b      	ldrh	r3, [r7, #26]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d166      	bne.n	80058c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	881a      	ldrh	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	1c9a      	adds	r2, r3, #2
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800581a:	e053      	b.n	80058c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b02      	cmp	r3, #2
 8005828:	d11b      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x176>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d016      	beq.n	8005862 <HAL_SPI_TransmitReceive+0x176>
 8005834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005836:	2b01      	cmp	r3, #1
 8005838:	d113      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	881a      	ldrh	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	1c9a      	adds	r2, r3, #2
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b01      	cmp	r3, #1
 800586e:	d119      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x1b8>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d014      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	b292      	uxth	r2, r2
 8005886:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	1c9a      	adds	r2, r3, #2
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058a0:	2301      	movs	r3, #1
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058a4:	f7fd fb4a 	bl	8002f3c <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d807      	bhi.n	80058c4 <HAL_SPI_TransmitReceive+0x1d8>
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d003      	beq.n	80058c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80058c2:	e0a7      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1a6      	bne.n	800581c <HAL_SPI_TransmitReceive+0x130>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1a1      	bne.n	800581c <HAL_SPI_TransmitReceive+0x130>
 80058d8:	e07c      	b.n	80059d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_SPI_TransmitReceive+0x1fc>
 80058e2:	8b7b      	ldrh	r3, [r7, #26]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d16b      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	330c      	adds	r3, #12
 80058f2:	7812      	ldrb	r2, [r2, #0]
 80058f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590e:	e057      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b02      	cmp	r3, #2
 800591c:	d11c      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x26c>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d017      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x26c>
 8005928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d114      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	330c      	adds	r3, #12
 8005938:	7812      	ldrb	r2, [r2, #0]
 800593a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b01      	cmp	r3, #1
 8005964:	d119      	bne.n	800599a <HAL_SPI_TransmitReceive+0x2ae>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d014      	beq.n	800599a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005996:	2301      	movs	r3, #1
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800599a:	f7fd facf 	bl	8002f3c <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d803      	bhi.n	80059b2 <HAL_SPI_TransmitReceive+0x2c6>
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d102      	bne.n	80059b8 <HAL_SPI_TransmitReceive+0x2cc>
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80059be:	e029      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1a2      	bne.n	8005910 <HAL_SPI_TransmitReceive+0x224>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d19d      	bne.n	8005910 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f917 	bl	8005c0c <SPI_EndRxTxTransaction>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d006      	beq.n	80059f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80059f0:	e010      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	e000      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005a12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3730      	adds	r7, #48	; 0x30
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a40:	f7fd fa7c 	bl	8002f3c <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a50:	f7fd fa74 	bl	8002f3c <HAL_GetTick>
 8005a54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a56:	4b39      	ldr	r3, [pc, #228]	; (8005b3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	015b      	lsls	r3, r3, #5
 8005a5c:	0d1b      	lsrs	r3, r3, #20
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	fb02 f303 	mul.w	r3, r2, r3
 8005a64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a66:	e054      	b.n	8005b12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d050      	beq.n	8005b12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a70:	f7fd fa64 	bl	8002f3c <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d902      	bls.n	8005a86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d13d      	bne.n	8005b02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a9e:	d111      	bne.n	8005ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa8:	d004      	beq.n	8005ab4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab2:	d107      	bne.n	8005ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005acc:	d10f      	bne.n	8005aee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e017      	b.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	bf0c      	ite	eq
 8005b22:	2301      	moveq	r3, #1
 8005b24:	2300      	movne	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d19b      	bne.n	8005a68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000008 	.word	0x20000008

08005b40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b54:	d111      	bne.n	8005b7a <SPI_EndRxTransaction+0x3a>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5e:	d004      	beq.n	8005b6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b68:	d107      	bne.n	8005b7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b82:	d12a      	bne.n	8005bda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b8c:	d012      	beq.n	8005bb4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2200      	movs	r2, #0
 8005b96:	2180      	movs	r1, #128	; 0x80
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7ff ff49 	bl	8005a30 <SPI_WaitFlagStateUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d02d      	beq.n	8005c00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba8:	f043 0220 	orr.w	r2, r3, #32
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e026      	b.n	8005c02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7ff ff36 	bl	8005a30 <SPI_WaitFlagStateUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d01a      	beq.n	8005c00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	f043 0220 	orr.w	r2, r3, #32
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e013      	b.n	8005c02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2200      	movs	r2, #0
 8005be2:	2101      	movs	r1, #1
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f7ff ff23 	bl	8005a30 <SPI_WaitFlagStateUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d007      	beq.n	8005c00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf4:	f043 0220 	orr.w	r2, r3, #32
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e000      	b.n	8005c02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c18:	4b1b      	ldr	r3, [pc, #108]	; (8005c88 <SPI_EndRxTxTransaction+0x7c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <SPI_EndRxTxTransaction+0x80>)
 8005c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c22:	0d5b      	lsrs	r3, r3, #21
 8005c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c28:	fb02 f303 	mul.w	r3, r2, r3
 8005c2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c36:	d112      	bne.n	8005c5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2180      	movs	r1, #128	; 0x80
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f7ff fef4 	bl	8005a30 <SPI_WaitFlagStateUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d016      	beq.n	8005c7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	f043 0220 	orr.w	r2, r3, #32
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e00f      	b.n	8005c7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c74:	2b80      	cmp	r3, #128	; 0x80
 8005c76:	d0f2      	beq.n	8005c5e <SPI_EndRxTxTransaction+0x52>
 8005c78:	e000      	b.n	8005c7c <SPI_EndRxTxTransaction+0x70>
        break;
 8005c7a:	bf00      	nop
  }

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000008 	.word	0x20000008
 8005c8c:	165e9f81 	.word	0x165e9f81

08005c90 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e034      	b.n	8005d10 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7fb fb6e 	bl	800139c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f002 f84e 	bl	8007d6c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	f002 f898 	bl	8007e10 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6858      	ldr	r0, [r3, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	f002 f8cd 	bl	8007e8c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	6892      	ldr	r2, [r2, #8]
 8005cfa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	6892      	ldr	r2, [r2, #8]
 8005d06:	f041 0101 	orr.w	r1, r1, #1
 8005d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e041      	b.n	8005dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fc fe7e 	bl	8002a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f000 fc1a 	bl	8006590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d001      	beq.n	8005dd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e046      	b.n	8005e5e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a23      	ldr	r2, [pc, #140]	; (8005e6c <HAL_TIM_Base_Start+0xb4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d022      	beq.n	8005e28 <HAL_TIM_Base_Start+0x70>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dea:	d01d      	beq.n	8005e28 <HAL_TIM_Base_Start+0x70>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1f      	ldr	r2, [pc, #124]	; (8005e70 <HAL_TIM_Base_Start+0xb8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d018      	beq.n	8005e28 <HAL_TIM_Base_Start+0x70>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1e      	ldr	r2, [pc, #120]	; (8005e74 <HAL_TIM_Base_Start+0xbc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d013      	beq.n	8005e28 <HAL_TIM_Base_Start+0x70>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a1c      	ldr	r2, [pc, #112]	; (8005e78 <HAL_TIM_Base_Start+0xc0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00e      	beq.n	8005e28 <HAL_TIM_Base_Start+0x70>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a1b      	ldr	r2, [pc, #108]	; (8005e7c <HAL_TIM_Base_Start+0xc4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d009      	beq.n	8005e28 <HAL_TIM_Base_Start+0x70>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a19      	ldr	r2, [pc, #100]	; (8005e80 <HAL_TIM_Base_Start+0xc8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d004      	beq.n	8005e28 <HAL_TIM_Base_Start+0x70>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a18      	ldr	r2, [pc, #96]	; (8005e84 <HAL_TIM_Base_Start+0xcc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d111      	bne.n	8005e4c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b06      	cmp	r3, #6
 8005e38:	d010      	beq.n	8005e5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0201 	orr.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4a:	e007      	b.n	8005e5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40010000 	.word	0x40010000
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800
 8005e78:	40000c00 	.word	0x40000c00
 8005e7c:	40010400 	.word	0x40010400
 8005e80:	40014000 	.word	0x40014000
 8005e84:	40001800 	.word	0x40001800

08005e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d001      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e04e      	b.n	8005f3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a23      	ldr	r2, [pc, #140]	; (8005f4c <HAL_TIM_Base_Start_IT+0xc4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d022      	beq.n	8005f08 <HAL_TIM_Base_Start_IT+0x80>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eca:	d01d      	beq.n	8005f08 <HAL_TIM_Base_Start_IT+0x80>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1f      	ldr	r2, [pc, #124]	; (8005f50 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d018      	beq.n	8005f08 <HAL_TIM_Base_Start_IT+0x80>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1e      	ldr	r2, [pc, #120]	; (8005f54 <HAL_TIM_Base_Start_IT+0xcc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d013      	beq.n	8005f08 <HAL_TIM_Base_Start_IT+0x80>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1c      	ldr	r2, [pc, #112]	; (8005f58 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00e      	beq.n	8005f08 <HAL_TIM_Base_Start_IT+0x80>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1b      	ldr	r2, [pc, #108]	; (8005f5c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d009      	beq.n	8005f08 <HAL_TIM_Base_Start_IT+0x80>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a19      	ldr	r2, [pc, #100]	; (8005f60 <HAL_TIM_Base_Start_IT+0xd8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d004      	beq.n	8005f08 <HAL_TIM_Base_Start_IT+0x80>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a18      	ldr	r2, [pc, #96]	; (8005f64 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d111      	bne.n	8005f2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b06      	cmp	r3, #6
 8005f18:	d010      	beq.n	8005f3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0201 	orr.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2a:	e007      	b.n	8005f3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40001800 	.word	0x40001800

08005f68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e041      	b.n	8005ffe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f839 	bl	8006006 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	f000 faf2 	bl	8006590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b02      	cmp	r3, #2
 800602e:	d122      	bne.n	8006076 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b02      	cmp	r3, #2
 800603c:	d11b      	bne.n	8006076 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f06f 0202 	mvn.w	r2, #2
 8006046:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fa78 	bl	8006552 <HAL_TIM_IC_CaptureCallback>
 8006062:	e005      	b.n	8006070 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fa6a 	bl	800653e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fa7b 	bl	8006566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b04      	cmp	r3, #4
 8006082:	d122      	bne.n	80060ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b04      	cmp	r3, #4
 8006090:	d11b      	bne.n	80060ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f06f 0204 	mvn.w	r2, #4
 800609a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fa4e 	bl	8006552 <HAL_TIM_IC_CaptureCallback>
 80060b6:	e005      	b.n	80060c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fa40 	bl	800653e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fa51 	bl	8006566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d122      	bne.n	800611e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d11b      	bne.n	800611e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f06f 0208 	mvn.w	r2, #8
 80060ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2204      	movs	r2, #4
 80060f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	f003 0303 	and.w	r3, r3, #3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fa24 	bl	8006552 <HAL_TIM_IC_CaptureCallback>
 800610a:	e005      	b.n	8006118 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fa16 	bl	800653e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fa27 	bl	8006566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b10      	cmp	r3, #16
 800612a:	d122      	bne.n	8006172 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f003 0310 	and.w	r3, r3, #16
 8006136:	2b10      	cmp	r3, #16
 8006138:	d11b      	bne.n	8006172 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f06f 0210 	mvn.w	r2, #16
 8006142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2208      	movs	r2, #8
 8006148:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f9fa 	bl	8006552 <HAL_TIM_IC_CaptureCallback>
 800615e:	e005      	b.n	800616c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f9ec 	bl	800653e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f9fd 	bl	8006566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b01      	cmp	r3, #1
 800617e:	d10e      	bne.n	800619e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b01      	cmp	r3, #1
 800618c:	d107      	bne.n	800619e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f06f 0201 	mvn.w	r2, #1
 8006196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7fc f96d 	bl	8002478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a8:	2b80      	cmp	r3, #128	; 0x80
 80061aa:	d10e      	bne.n	80061ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b6:	2b80      	cmp	r3, #128	; 0x80
 80061b8:	d107      	bne.n	80061ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fd53 	bl	8006c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	d10e      	bne.n	80061f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b40      	cmp	r3, #64	; 0x40
 80061e4:	d107      	bne.n	80061f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f9c2 	bl	800657a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b20      	cmp	r3, #32
 8006202:	d10e      	bne.n	8006222 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b20      	cmp	r3, #32
 8006210:	d107      	bne.n	8006222 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f06f 0220 	mvn.w	r2, #32
 800621a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fd1d 	bl	8006c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006246:	2302      	movs	r3, #2
 8006248:	e0ae      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b0c      	cmp	r3, #12
 8006256:	f200 809f 	bhi.w	8006398 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800625a:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	08006295 	.word	0x08006295
 8006264:	08006399 	.word	0x08006399
 8006268:	08006399 	.word	0x08006399
 800626c:	08006399 	.word	0x08006399
 8006270:	080062d5 	.word	0x080062d5
 8006274:	08006399 	.word	0x08006399
 8006278:	08006399 	.word	0x08006399
 800627c:	08006399 	.word	0x08006399
 8006280:	08006317 	.word	0x08006317
 8006284:	08006399 	.word	0x08006399
 8006288:	08006399 	.word	0x08006399
 800628c:	08006399 	.word	0x08006399
 8006290:	08006357 	.word	0x08006357
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68b9      	ldr	r1, [r7, #8]
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fa18 	bl	80066d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0208 	orr.w	r2, r2, #8
 80062ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0204 	bic.w	r2, r2, #4
 80062be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6999      	ldr	r1, [r3, #24]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	691a      	ldr	r2, [r3, #16]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	619a      	str	r2, [r3, #24]
      break;
 80062d2:	e064      	b.n	800639e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 fa68 	bl	80067b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699a      	ldr	r2, [r3, #24]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699a      	ldr	r2, [r3, #24]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6999      	ldr	r1, [r3, #24]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	021a      	lsls	r2, r3, #8
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	619a      	str	r2, [r3, #24]
      break;
 8006314:	e043      	b.n	800639e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68b9      	ldr	r1, [r7, #8]
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fabd 	bl	800689c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0208 	orr.w	r2, r2, #8
 8006330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69da      	ldr	r2, [r3, #28]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0204 	bic.w	r2, r2, #4
 8006340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69d9      	ldr	r1, [r3, #28]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	61da      	str	r2, [r3, #28]
      break;
 8006354:	e023      	b.n	800639e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fb11 	bl	8006984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69da      	ldr	r2, [r3, #28]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69d9      	ldr	r1, [r3, #28]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	021a      	lsls	r2, r3, #8
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	61da      	str	r2, [r3, #28]
      break;
 8006396:	e002      	b.n	800639e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	75fb      	strb	r3, [r7, #23]
      break;
 800639c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_TIM_ConfigClockSource+0x1c>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e0b4      	b.n	8006536 <HAL_TIM_ConfigClockSource+0x186>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006404:	d03e      	beq.n	8006484 <HAL_TIM_ConfigClockSource+0xd4>
 8006406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800640a:	f200 8087 	bhi.w	800651c <HAL_TIM_ConfigClockSource+0x16c>
 800640e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006412:	f000 8086 	beq.w	8006522 <HAL_TIM_ConfigClockSource+0x172>
 8006416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641a:	d87f      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 800641c:	2b70      	cmp	r3, #112	; 0x70
 800641e:	d01a      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0xa6>
 8006420:	2b70      	cmp	r3, #112	; 0x70
 8006422:	d87b      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 8006424:	2b60      	cmp	r3, #96	; 0x60
 8006426:	d050      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x11a>
 8006428:	2b60      	cmp	r3, #96	; 0x60
 800642a:	d877      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 800642c:	2b50      	cmp	r3, #80	; 0x50
 800642e:	d03c      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0xfa>
 8006430:	2b50      	cmp	r3, #80	; 0x50
 8006432:	d873      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d058      	beq.n	80064ea <HAL_TIM_ConfigClockSource+0x13a>
 8006438:	2b40      	cmp	r3, #64	; 0x40
 800643a:	d86f      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 800643c:	2b30      	cmp	r3, #48	; 0x30
 800643e:	d064      	beq.n	800650a <HAL_TIM_ConfigClockSource+0x15a>
 8006440:	2b30      	cmp	r3, #48	; 0x30
 8006442:	d86b      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 8006444:	2b20      	cmp	r3, #32
 8006446:	d060      	beq.n	800650a <HAL_TIM_ConfigClockSource+0x15a>
 8006448:	2b20      	cmp	r3, #32
 800644a:	d867      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d05c      	beq.n	800650a <HAL_TIM_ConfigClockSource+0x15a>
 8006450:	2b10      	cmp	r3, #16
 8006452:	d05a      	beq.n	800650a <HAL_TIM_ConfigClockSource+0x15a>
 8006454:	e062      	b.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6899      	ldr	r1, [r3, #8]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f000 fb5d 	bl	8006b24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006478:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	609a      	str	r2, [r3, #8]
      break;
 8006482:	e04f      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	6899      	ldr	r1, [r3, #8]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f000 fb46 	bl	8006b24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064a6:	609a      	str	r2, [r3, #8]
      break;
 80064a8:	e03c      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6818      	ldr	r0, [r3, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6859      	ldr	r1, [r3, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	461a      	mov	r2, r3
 80064b8:	f000 faba 	bl	8006a30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2150      	movs	r1, #80	; 0x50
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fb13 	bl	8006aee <TIM_ITRx_SetConfig>
      break;
 80064c8:	e02c      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	6859      	ldr	r1, [r3, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f000 fad9 	bl	8006a8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2160      	movs	r1, #96	; 0x60
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fb03 	bl	8006aee <TIM_ITRx_SetConfig>
      break;
 80064e8:	e01c      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	6859      	ldr	r1, [r3, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	461a      	mov	r2, r3
 80064f8:	f000 fa9a 	bl	8006a30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2140      	movs	r1, #64	; 0x40
 8006502:	4618      	mov	r0, r3
 8006504:	f000 faf3 	bl	8006aee <TIM_ITRx_SetConfig>
      break;
 8006508:	e00c      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f000 faea 	bl	8006aee <TIM_ITRx_SetConfig>
      break;
 800651a:	e003      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	73fb      	strb	r3, [r7, #15]
      break;
 8006520:	e000      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006522:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
	...

08006590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a40      	ldr	r2, [pc, #256]	; (80066a4 <TIM_Base_SetConfig+0x114>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d013      	beq.n	80065d0 <TIM_Base_SetConfig+0x40>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ae:	d00f      	beq.n	80065d0 <TIM_Base_SetConfig+0x40>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a3d      	ldr	r2, [pc, #244]	; (80066a8 <TIM_Base_SetConfig+0x118>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00b      	beq.n	80065d0 <TIM_Base_SetConfig+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a3c      	ldr	r2, [pc, #240]	; (80066ac <TIM_Base_SetConfig+0x11c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d007      	beq.n	80065d0 <TIM_Base_SetConfig+0x40>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a3b      	ldr	r2, [pc, #236]	; (80066b0 <TIM_Base_SetConfig+0x120>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <TIM_Base_SetConfig+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a3a      	ldr	r2, [pc, #232]	; (80066b4 <TIM_Base_SetConfig+0x124>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d108      	bne.n	80065e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a2f      	ldr	r2, [pc, #188]	; (80066a4 <TIM_Base_SetConfig+0x114>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d02b      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f0:	d027      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a2c      	ldr	r2, [pc, #176]	; (80066a8 <TIM_Base_SetConfig+0x118>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d023      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a2b      	ldr	r2, [pc, #172]	; (80066ac <TIM_Base_SetConfig+0x11c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d01f      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2a      	ldr	r2, [pc, #168]	; (80066b0 <TIM_Base_SetConfig+0x120>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01b      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a29      	ldr	r2, [pc, #164]	; (80066b4 <TIM_Base_SetConfig+0x124>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d017      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a28      	ldr	r2, [pc, #160]	; (80066b8 <TIM_Base_SetConfig+0x128>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a27      	ldr	r2, [pc, #156]	; (80066bc <TIM_Base_SetConfig+0x12c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00f      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a26      	ldr	r2, [pc, #152]	; (80066c0 <TIM_Base_SetConfig+0x130>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00b      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a25      	ldr	r2, [pc, #148]	; (80066c4 <TIM_Base_SetConfig+0x134>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d007      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a24      	ldr	r2, [pc, #144]	; (80066c8 <TIM_Base_SetConfig+0x138>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d003      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a23      	ldr	r2, [pc, #140]	; (80066cc <TIM_Base_SetConfig+0x13c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d108      	bne.n	8006654 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a0a      	ldr	r2, [pc, #40]	; (80066a4 <TIM_Base_SetConfig+0x114>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d003      	beq.n	8006688 <TIM_Base_SetConfig+0xf8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a0c      	ldr	r2, [pc, #48]	; (80066b4 <TIM_Base_SetConfig+0x124>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d103      	bne.n	8006690 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	691a      	ldr	r2, [r3, #16]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	615a      	str	r2, [r3, #20]
}
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40010000 	.word	0x40010000
 80066a8:	40000400 	.word	0x40000400
 80066ac:	40000800 	.word	0x40000800
 80066b0:	40000c00 	.word	0x40000c00
 80066b4:	40010400 	.word	0x40010400
 80066b8:	40014000 	.word	0x40014000
 80066bc:	40014400 	.word	0x40014400
 80066c0:	40014800 	.word	0x40014800
 80066c4:	40001800 	.word	0x40001800
 80066c8:	40001c00 	.word	0x40001c00
 80066cc:	40002000 	.word	0x40002000

080066d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	f023 0201 	bic.w	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f023 0303 	bic.w	r3, r3, #3
 8006706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f023 0302 	bic.w	r3, r3, #2
 8006718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4313      	orrs	r3, r2
 8006722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a20      	ldr	r2, [pc, #128]	; (80067a8 <TIM_OC1_SetConfig+0xd8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d003      	beq.n	8006734 <TIM_OC1_SetConfig+0x64>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a1f      	ldr	r2, [pc, #124]	; (80067ac <TIM_OC1_SetConfig+0xdc>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d10c      	bne.n	800674e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f023 0308 	bic.w	r3, r3, #8
 800673a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f023 0304 	bic.w	r3, r3, #4
 800674c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <TIM_OC1_SetConfig+0xd8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d003      	beq.n	800675e <TIM_OC1_SetConfig+0x8e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a14      	ldr	r2, [pc, #80]	; (80067ac <TIM_OC1_SetConfig+0xdc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d111      	bne.n	8006782 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800676c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	621a      	str	r2, [r3, #32]
}
 800679c:	bf00      	nop
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	40010000 	.word	0x40010000
 80067ac:	40010400 	.word	0x40010400

080067b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f023 0210 	bic.w	r2, r3, #16
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	021b      	lsls	r3, r3, #8
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f023 0320 	bic.w	r3, r3, #32
 80067fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a22      	ldr	r2, [pc, #136]	; (8006894 <TIM_OC2_SetConfig+0xe4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d003      	beq.n	8006818 <TIM_OC2_SetConfig+0x68>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a21      	ldr	r2, [pc, #132]	; (8006898 <TIM_OC2_SetConfig+0xe8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d10d      	bne.n	8006834 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800681e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006832:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a17      	ldr	r2, [pc, #92]	; (8006894 <TIM_OC2_SetConfig+0xe4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d003      	beq.n	8006844 <TIM_OC2_SetConfig+0x94>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a16      	ldr	r2, [pc, #88]	; (8006898 <TIM_OC2_SetConfig+0xe8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d113      	bne.n	800686c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800684a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40010000 	.word	0x40010000
 8006898:	40010400 	.word	0x40010400

0800689c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0303 	bic.w	r3, r3, #3
 80068d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a21      	ldr	r2, [pc, #132]	; (800697c <TIM_OC3_SetConfig+0xe0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <TIM_OC3_SetConfig+0x66>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a20      	ldr	r2, [pc, #128]	; (8006980 <TIM_OC3_SetConfig+0xe4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10d      	bne.n	800691e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800691c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a16      	ldr	r2, [pc, #88]	; (800697c <TIM_OC3_SetConfig+0xe0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d003      	beq.n	800692e <TIM_OC3_SetConfig+0x92>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a15      	ldr	r2, [pc, #84]	; (8006980 <TIM_OC3_SetConfig+0xe4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d113      	bne.n	8006956 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800693c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	621a      	str	r2, [r3, #32]
}
 8006970:	bf00      	nop
 8006972:	371c      	adds	r7, #28
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	40010000 	.word	0x40010000
 8006980:	40010400 	.word	0x40010400

08006984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	021b      	lsls	r3, r3, #8
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	031b      	lsls	r3, r3, #12
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a12      	ldr	r2, [pc, #72]	; (8006a28 <TIM_OC4_SetConfig+0xa4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d003      	beq.n	80069ec <TIM_OC4_SetConfig+0x68>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a11      	ldr	r2, [pc, #68]	; (8006a2c <TIM_OC4_SetConfig+0xa8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d109      	bne.n	8006a00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	019b      	lsls	r3, r3, #6
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	621a      	str	r2, [r3, #32]
}
 8006a1a:	bf00      	nop
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	40010000 	.word	0x40010000
 8006a2c:	40010400 	.word	0x40010400

08006a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f023 0201 	bic.w	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f023 030a 	bic.w	r3, r3, #10
 8006a6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	621a      	str	r2, [r3, #32]
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b087      	sub	sp, #28
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f023 0210 	bic.w	r2, r3, #16
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ab8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	031b      	lsls	r3, r3, #12
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006aca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	621a      	str	r2, [r3, #32]
}
 8006ae2:	bf00      	nop
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b085      	sub	sp, #20
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	f043 0307 	orr.w	r3, r3, #7
 8006b10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	609a      	str	r2, [r3, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	021a      	lsls	r2, r3, #8
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	609a      	str	r2, [r3, #8]
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e05a      	b.n	8006c32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a21      	ldr	r2, [pc, #132]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d022      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc8:	d01d      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d018      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1b      	ldr	r2, [pc, #108]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1a      	ldr	r2, [pc, #104]	; (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00e      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a18      	ldr	r2, [pc, #96]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a17      	ldr	r2, [pc, #92]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d10c      	bne.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	40010000 	.word	0x40010000
 8006c44:	40000400 	.word	0x40000400
 8006c48:	40000800 	.word	0x40000800
 8006c4c:	40000c00 	.word	0x40000c00
 8006c50:	40010400 	.word	0x40010400
 8006c54:	40014000 	.word	0x40014000
 8006c58:	40001800 	.word	0x40001800

08006c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e03f      	b.n	8006d16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d106      	bne.n	8006cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fc f82a 	bl	8002d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2224      	movs	r2, #36	; 0x24
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fddb 	bl	8007884 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	695a      	ldr	r2, [r3, #20]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b08a      	sub	sp, #40	; 0x28
 8006d22:	af02      	add	r7, sp, #8
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	603b      	str	r3, [r7, #0]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d17c      	bne.n	8006e38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <HAL_UART_Transmit+0x2c>
 8006d44:	88fb      	ldrh	r3, [r7, #6]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e075      	b.n	8006e3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_UART_Transmit+0x3e>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e06e      	b.n	8006e3a <HAL_UART_Transmit+0x11c>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2221      	movs	r2, #33	; 0x21
 8006d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d72:	f7fc f8e3 	bl	8002f3c <HAL_GetTick>
 8006d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	88fa      	ldrh	r2, [r7, #6]
 8006d7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	88fa      	ldrh	r2, [r7, #6]
 8006d82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d8c:	d108      	bne.n	8006da0 <HAL_UART_Transmit+0x82>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	e003      	b.n	8006da8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006db0:	e02a      	b.n	8006e08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2200      	movs	r2, #0
 8006dba:	2180      	movs	r1, #128	; 0x80
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 fb1f 	bl	8007400 <UART_WaitOnFlagUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e036      	b.n	8006e3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10b      	bne.n	8006dea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006de0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	3302      	adds	r3, #2
 8006de6:	61bb      	str	r3, [r7, #24]
 8006de8:	e007      	b.n	8006dfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	781a      	ldrb	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	3301      	adds	r3, #1
 8006df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1cf      	bne.n	8006db2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2140      	movs	r1, #64	; 0x40
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 faef 	bl	8007400 <UART_WaitOnFlagUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e006      	b.n	8006e3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	e000      	b.n	8006e3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006e38:	2302      	movs	r3, #2
  }
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3720      	adds	r7, #32
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d11d      	bne.n	8006e98 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <HAL_UART_Receive_IT+0x26>
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e016      	b.n	8006e9a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <HAL_UART_Receive_IT+0x38>
 8006e76:	2302      	movs	r3, #2
 8006e78:	e00f      	b.n	8006e9a <HAL_UART_Receive_IT+0x58>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e88:	88fb      	ldrh	r3, [r7, #6]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	68b9      	ldr	r1, [r7, #8]
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 fb24 	bl	80074dc <UART_Start_Receive_IT>
 8006e94:	4603      	mov	r3, r0
 8006e96:	e000      	b.n	8006e9a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006e98:	2302      	movs	r3, #2
  }
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b0ba      	sub	sp, #232	; 0xe8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10f      	bne.n	8006f0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eee:	f003 0320 	and.w	r3, r3, #32
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <HAL_UART_IRQHandler+0x66>
 8006ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fc03 	bl	800770e <UART_Receive_IT>
      return;
 8006f08:	e256      	b.n	80073b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 80de 	beq.w	80070d0 <HAL_UART_IRQHandler+0x22c>
 8006f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d106      	bne.n	8006f2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 80d1 	beq.w	80070d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <HAL_UART_IRQHandler+0xae>
 8006f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f043 0201 	orr.w	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <HAL_UART_IRQHandler+0xd2>
 8006f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	f043 0202 	orr.w	r2, r3, #2
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <HAL_UART_IRQHandler+0xf6>
 8006f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	f043 0204 	orr.w	r2, r3, #4
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d011      	beq.n	8006fca <HAL_UART_IRQHandler+0x126>
 8006fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d105      	bne.n	8006fbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d005      	beq.n	8006fca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	f043 0208 	orr.w	r2, r3, #8
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 81ed 	beq.w	80073ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d008      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x14e>
 8006fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fb8e 	bl	800770e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffc:	2b40      	cmp	r3, #64	; 0x40
 8006ffe:	bf0c      	ite	eq
 8007000:	2301      	moveq	r3, #1
 8007002:	2300      	movne	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d103      	bne.n	800701e <HAL_UART_IRQHandler+0x17a>
 8007016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800701a:	2b00      	cmp	r3, #0
 800701c:	d04f      	beq.n	80070be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fa96 	bl	8007550 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702e:	2b40      	cmp	r3, #64	; 0x40
 8007030:	d141      	bne.n	80070b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3314      	adds	r3, #20
 8007038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800704c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3314      	adds	r3, #20
 800705a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800705e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800706a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1d9      	bne.n	8007032 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	2b00      	cmp	r3, #0
 8007084:	d013      	beq.n	80070ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	4a7d      	ldr	r2, [pc, #500]	; (8007280 <HAL_UART_IRQHandler+0x3dc>)
 800708c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	4618      	mov	r0, r3
 8007094:	f7fc fe1c 	bl	8003cd0 <HAL_DMA_Abort_IT>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d016      	beq.n	80070cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070a8:	4610      	mov	r0, r2
 80070aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ac:	e00e      	b.n	80070cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f990 	bl	80073d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b4:	e00a      	b.n	80070cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f98c 	bl	80073d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070bc:	e006      	b.n	80070cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f988 	bl	80073d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80070ca:	e170      	b.n	80073ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070cc:	bf00      	nop
    return;
 80070ce:	e16e      	b.n	80073ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	f040 814a 	bne.w	800736e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070de:	f003 0310 	and.w	r3, r3, #16
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 8143 	beq.w	800736e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 813c 	beq.w	800736e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070f6:	2300      	movs	r3, #0
 80070f8:	60bb      	str	r3, [r7, #8]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	60bb      	str	r3, [r7, #8]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007116:	2b40      	cmp	r3, #64	; 0x40
 8007118:	f040 80b4 	bne.w	8007284 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007128:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 8140 	beq.w	80073b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800713a:	429a      	cmp	r2, r3
 800713c:	f080 8139 	bcs.w	80073b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007146:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007152:	f000 8088 	beq.w	8007266 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	330c      	adds	r3, #12
 800715c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800716c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007182:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800718e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800719a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1d9      	bne.n	8007156 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3314      	adds	r3, #20
 80071a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071b4:	f023 0301 	bic.w	r3, r3, #1
 80071b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3314      	adds	r3, #20
 80071c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80071ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e1      	bne.n	80071a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3314      	adds	r3, #20
 80071e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3314      	adds	r3, #20
 80071fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007202:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007204:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007208:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e3      	bne.n	80071de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	330c      	adds	r3, #12
 800722a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007236:	f023 0310 	bic.w	r3, r3, #16
 800723a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	330c      	adds	r3, #12
 8007244:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007248:	65ba      	str	r2, [r7, #88]	; 0x58
 800724a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800724e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e3      	bne.n	8007224 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	4618      	mov	r0, r3
 8007262:	f7fc fcc5 	bl	8003bf0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800726e:	b29b      	uxth	r3, r3
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	b29b      	uxth	r3, r3
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f8b6 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800727c:	e099      	b.n	80073b2 <HAL_UART_IRQHandler+0x50e>
 800727e:	bf00      	nop
 8007280:	08007617 	.word	0x08007617
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800728c:	b29b      	uxth	r3, r3
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007298:	b29b      	uxth	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 808b 	beq.w	80073b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80072a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8086 	beq.w	80073b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	330c      	adds	r3, #12
 80072ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80072ce:	647a      	str	r2, [r7, #68]	; 0x44
 80072d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e3      	bne.n	80072aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3314      	adds	r3, #20
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	623b      	str	r3, [r7, #32]
   return(result);
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3314      	adds	r3, #20
 8007302:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007306:	633a      	str	r2, [r7, #48]	; 0x30
 8007308:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800730c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e3      	bne.n	80072e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2220      	movs	r2, #32
 800731e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	330c      	adds	r3, #12
 800732e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	60fb      	str	r3, [r7, #12]
   return(result);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f023 0310 	bic.w	r3, r3, #16
 800733e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	330c      	adds	r3, #12
 8007348:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800734c:	61fa      	str	r2, [r7, #28]
 800734e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	69b9      	ldr	r1, [r7, #24]
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	617b      	str	r3, [r7, #20]
   return(result);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e3      	bne.n	8007328 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f83e 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800736c:	e023      	b.n	80073b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800736e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007376:	2b00      	cmp	r3, #0
 8007378:	d009      	beq.n	800738e <HAL_UART_IRQHandler+0x4ea>
 800737a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f959 	bl	800763e <UART_Transmit_IT>
    return;
 800738c:	e014      	b.n	80073b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800738e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00e      	beq.n	80073b8 <HAL_UART_IRQHandler+0x514>
 800739a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800739e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d008      	beq.n	80073b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f999 	bl	80076de <UART_EndTransmit_IT>
    return;
 80073ac:	e004      	b.n	80073b8 <HAL_UART_IRQHandler+0x514>
    return;
 80073ae:	bf00      	nop
 80073b0:	e002      	b.n	80073b8 <HAL_UART_IRQHandler+0x514>
      return;
 80073b2:	bf00      	nop
 80073b4:	e000      	b.n	80073b8 <HAL_UART_IRQHandler+0x514>
      return;
 80073b6:	bf00      	nop
  }
}
 80073b8:	37e8      	adds	r7, #232	; 0xe8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop

080073c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b090      	sub	sp, #64	; 0x40
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	4613      	mov	r3, r2
 800740e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007410:	e050      	b.n	80074b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d04c      	beq.n	80074b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800741a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800741c:	2b00      	cmp	r3, #0
 800741e:	d007      	beq.n	8007430 <UART_WaitOnFlagUntilTimeout+0x30>
 8007420:	f7fb fd8c 	bl	8002f3c <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800742c:	429a      	cmp	r2, r3
 800742e:	d241      	bcs.n	80074b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	330c      	adds	r3, #12
 8007436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	e853 3f00 	ldrex	r3, [r3]
 800743e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	330c      	adds	r3, #12
 800744e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007450:	637a      	str	r2, [r7, #52]	; 0x34
 8007452:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e5      	bne.n	8007430 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3314      	adds	r3, #20
 800746a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	613b      	str	r3, [r7, #16]
   return(result);
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f023 0301 	bic.w	r3, r3, #1
 800747a:	63bb      	str	r3, [r7, #56]	; 0x38
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3314      	adds	r3, #20
 8007482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007484:	623a      	str	r2, [r7, #32]
 8007486:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	69f9      	ldr	r1, [r7, #28]
 800748a:	6a3a      	ldr	r2, [r7, #32]
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	61bb      	str	r3, [r7, #24]
   return(result);
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e5      	bne.n	8007464 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2220      	movs	r2, #32
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e00f      	b.n	80074d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	4013      	ands	r3, r2
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	bf0c      	ite	eq
 80074c4:	2301      	moveq	r3, #1
 80074c6:	2300      	movne	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d09f      	beq.n	8007412 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3740      	adds	r7, #64	; 0x40
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	88fa      	ldrh	r2, [r7, #6]
 80074f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	88fa      	ldrh	r2, [r7, #6]
 80074fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2222      	movs	r2, #34	; 0x22
 8007506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007520:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695a      	ldr	r2, [r3, #20]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f042 0201 	orr.w	r2, r2, #1
 8007530:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0220 	orr.w	r2, r2, #32
 8007540:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007550:	b480      	push	{r7}
 8007552:	b095      	sub	sp, #84	; 0x54
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	330c      	adds	r3, #12
 800755e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800756e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007578:	643a      	str	r2, [r7, #64]	; 0x40
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800757e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e5      	bne.n	8007558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3314      	adds	r3, #20
 8007592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	61fb      	str	r3, [r7, #28]
   return(result);
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3314      	adds	r3, #20
 80075aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e5      	bne.n	800758c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d119      	bne.n	80075fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	330c      	adds	r3, #12
 80075ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	e853 3f00 	ldrex	r3, [r3]
 80075d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f023 0310 	bic.w	r3, r3, #16
 80075de:	647b      	str	r3, [r7, #68]	; 0x44
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	330c      	adds	r3, #12
 80075e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075e8:	61ba      	str	r2, [r7, #24]
 80075ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	6979      	ldr	r1, [r7, #20]
 80075ee:	69ba      	ldr	r2, [r7, #24]
 80075f0:	e841 2300 	strex	r3, r2, [r1]
 80075f4:	613b      	str	r3, [r7, #16]
   return(result);
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e5      	bne.n	80075c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	631a      	str	r2, [r3, #48]	; 0x30
}
 800760a:	bf00      	nop
 800760c:	3754      	adds	r7, #84	; 0x54
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007622:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff fecf 	bl	80073d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007636:	bf00      	nop
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800763e:	b480      	push	{r7}
 8007640:	b085      	sub	sp, #20
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b21      	cmp	r3, #33	; 0x21
 8007650:	d13e      	bne.n	80076d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765a:	d114      	bne.n	8007686 <UART_Transmit_IT+0x48>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d110      	bne.n	8007686 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007678:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	1c9a      	adds	r2, r3, #2
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	621a      	str	r2, [r3, #32]
 8007684:	e008      	b.n	8007698 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	1c59      	adds	r1, r3, #1
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6211      	str	r1, [r2, #32]
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800769c:	b29b      	uxth	r3, r3
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	4619      	mov	r1, r3
 80076a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10f      	bne.n	80076cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	e000      	b.n	80076d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076d0:	2302      	movs	r3, #2
  }
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68da      	ldr	r2, [r3, #12]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2220      	movs	r2, #32
 80076fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff fe5e 	bl	80073c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b08c      	sub	sp, #48	; 0x30
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b22      	cmp	r3, #34	; 0x22
 8007720:	f040 80ab 	bne.w	800787a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772c:	d117      	bne.n	800775e <UART_Receive_IT+0x50>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d113      	bne.n	800775e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774c:	b29a      	uxth	r2, r3
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007756:	1c9a      	adds	r2, r3, #2
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	629a      	str	r2, [r3, #40]	; 0x28
 800775c:	e026      	b.n	80077ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007762:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007770:	d007      	beq.n	8007782 <UART_Receive_IT+0x74>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10a      	bne.n	8007790 <UART_Receive_IT+0x82>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	b2da      	uxtb	r2, r3
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	701a      	strb	r2, [r3, #0]
 800778e:	e008      	b.n	80077a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800779c:	b2da      	uxtb	r2, r3
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	4619      	mov	r1, r3
 80077ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d15a      	bne.n	8007876 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0220 	bic.w	r2, r2, #32
 80077ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	695a      	ldr	r2, [r3, #20]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0201 	bic.w	r2, r2, #1
 80077ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d135      	bne.n	800786c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	330c      	adds	r3, #12
 800780c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	613b      	str	r3, [r7, #16]
   return(result);
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f023 0310 	bic.w	r3, r3, #16
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	330c      	adds	r3, #12
 8007824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007826:	623a      	str	r2, [r7, #32]
 8007828:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	69f9      	ldr	r1, [r7, #28]
 800782c:	6a3a      	ldr	r2, [r7, #32]
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	61bb      	str	r3, [r7, #24]
   return(result);
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e5      	bne.n	8007806 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0310 	and.w	r3, r3, #16
 8007844:	2b10      	cmp	r3, #16
 8007846:	d10a      	bne.n	800785e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7ff fdbf 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
 800786a:	e002      	b.n	8007872 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7fb f99b 	bl	8002ba8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	e002      	b.n	800787c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	e000      	b.n	800787c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800787a:	2302      	movs	r3, #2
  }
}
 800787c:	4618      	mov	r0, r3
 800787e:	3730      	adds	r7, #48	; 0x30
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007888:	b0c0      	sub	sp, #256	; 0x100
 800788a:	af00      	add	r7, sp, #0
 800788c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a0:	68d9      	ldr	r1, [r3, #12]
 80078a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	ea40 0301 	orr.w	r3, r0, r1
 80078ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	431a      	orrs	r2, r3
 80078bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80078dc:	f021 010c 	bic.w	r1, r1, #12
 80078e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078ea:	430b      	orrs	r3, r1
 80078ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80078fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078fe:	6999      	ldr	r1, [r3, #24]
 8007900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	ea40 0301 	orr.w	r3, r0, r1
 800790a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800790c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4b8f      	ldr	r3, [pc, #572]	; (8007b50 <UART_SetConfig+0x2cc>)
 8007914:	429a      	cmp	r2, r3
 8007916:	d005      	beq.n	8007924 <UART_SetConfig+0xa0>
 8007918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b8d      	ldr	r3, [pc, #564]	; (8007b54 <UART_SetConfig+0x2d0>)
 8007920:	429a      	cmp	r2, r3
 8007922:	d104      	bne.n	800792e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007924:	f7fd fbf8 	bl	8005118 <HAL_RCC_GetPCLK2Freq>
 8007928:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800792c:	e003      	b.n	8007936 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800792e:	f7fd fbdf 	bl	80050f0 <HAL_RCC_GetPCLK1Freq>
 8007932:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007940:	f040 810c 	bne.w	8007b5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007948:	2200      	movs	r2, #0
 800794a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800794e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007952:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007956:	4622      	mov	r2, r4
 8007958:	462b      	mov	r3, r5
 800795a:	1891      	adds	r1, r2, r2
 800795c:	65b9      	str	r1, [r7, #88]	; 0x58
 800795e:	415b      	adcs	r3, r3
 8007960:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007962:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007966:	4621      	mov	r1, r4
 8007968:	eb12 0801 	adds.w	r8, r2, r1
 800796c:	4629      	mov	r1, r5
 800796e:	eb43 0901 	adc.w	r9, r3, r1
 8007972:	f04f 0200 	mov.w	r2, #0
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800797e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007986:	4690      	mov	r8, r2
 8007988:	4699      	mov	r9, r3
 800798a:	4623      	mov	r3, r4
 800798c:	eb18 0303 	adds.w	r3, r8, r3
 8007990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007994:	462b      	mov	r3, r5
 8007996:	eb49 0303 	adc.w	r3, r9, r3
 800799a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800799e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80079ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079b2:	460b      	mov	r3, r1
 80079b4:	18db      	adds	r3, r3, r3
 80079b6:	653b      	str	r3, [r7, #80]	; 0x50
 80079b8:	4613      	mov	r3, r2
 80079ba:	eb42 0303 	adc.w	r3, r2, r3
 80079be:	657b      	str	r3, [r7, #84]	; 0x54
 80079c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80079c8:	f7f9 f8ee 	bl	8000ba8 <__aeabi_uldivmod>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4b61      	ldr	r3, [pc, #388]	; (8007b58 <UART_SetConfig+0x2d4>)
 80079d2:	fba3 2302 	umull	r2, r3, r3, r2
 80079d6:	095b      	lsrs	r3, r3, #5
 80079d8:	011c      	lsls	r4, r3, #4
 80079da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079de:	2200      	movs	r2, #0
 80079e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80079e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80079ec:	4642      	mov	r2, r8
 80079ee:	464b      	mov	r3, r9
 80079f0:	1891      	adds	r1, r2, r2
 80079f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80079f4:	415b      	adcs	r3, r3
 80079f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80079fc:	4641      	mov	r1, r8
 80079fe:	eb12 0a01 	adds.w	sl, r2, r1
 8007a02:	4649      	mov	r1, r9
 8007a04:	eb43 0b01 	adc.w	fp, r3, r1
 8007a08:	f04f 0200 	mov.w	r2, #0
 8007a0c:	f04f 0300 	mov.w	r3, #0
 8007a10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a1c:	4692      	mov	sl, r2
 8007a1e:	469b      	mov	fp, r3
 8007a20:	4643      	mov	r3, r8
 8007a22:	eb1a 0303 	adds.w	r3, sl, r3
 8007a26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	eb4b 0303 	adc.w	r3, fp, r3
 8007a30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	18db      	adds	r3, r3, r3
 8007a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a4e:	4613      	mov	r3, r2
 8007a50:	eb42 0303 	adc.w	r3, r2, r3
 8007a54:	647b      	str	r3, [r7, #68]	; 0x44
 8007a56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007a5e:	f7f9 f8a3 	bl	8000ba8 <__aeabi_uldivmod>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	4b3b      	ldr	r3, [pc, #236]	; (8007b58 <UART_SetConfig+0x2d4>)
 8007a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	2264      	movs	r2, #100	; 0x64
 8007a72:	fb02 f303 	mul.w	r3, r2, r3
 8007a76:	1acb      	subs	r3, r1, r3
 8007a78:	00db      	lsls	r3, r3, #3
 8007a7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a7e:	4b36      	ldr	r3, [pc, #216]	; (8007b58 <UART_SetConfig+0x2d4>)
 8007a80:	fba3 2302 	umull	r2, r3, r3, r2
 8007a84:	095b      	lsrs	r3, r3, #5
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a8c:	441c      	add	r4, r3
 8007a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007a9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007aa0:	4642      	mov	r2, r8
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	1891      	adds	r1, r2, r2
 8007aa6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007aa8:	415b      	adcs	r3, r3
 8007aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	1851      	adds	r1, r2, r1
 8007ab4:	6339      	str	r1, [r7, #48]	; 0x30
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	414b      	adcs	r3, r1
 8007aba:	637b      	str	r3, [r7, #52]	; 0x34
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ac8:	4659      	mov	r1, fp
 8007aca:	00cb      	lsls	r3, r1, #3
 8007acc:	4651      	mov	r1, sl
 8007ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ad2:	4651      	mov	r1, sl
 8007ad4:	00ca      	lsls	r2, r1, #3
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4603      	mov	r3, r0
 8007adc:	4642      	mov	r2, r8
 8007ade:	189b      	adds	r3, r3, r2
 8007ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ae4:	464b      	mov	r3, r9
 8007ae6:	460a      	mov	r2, r1
 8007ae8:	eb42 0303 	adc.w	r3, r2, r3
 8007aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007afc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b04:	460b      	mov	r3, r1
 8007b06:	18db      	adds	r3, r3, r3
 8007b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	eb42 0303 	adc.w	r3, r2, r3
 8007b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b1a:	f7f9 f845 	bl	8000ba8 <__aeabi_uldivmod>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4b0d      	ldr	r3, [pc, #52]	; (8007b58 <UART_SetConfig+0x2d4>)
 8007b24:	fba3 1302 	umull	r1, r3, r3, r2
 8007b28:	095b      	lsrs	r3, r3, #5
 8007b2a:	2164      	movs	r1, #100	; 0x64
 8007b2c:	fb01 f303 	mul.w	r3, r1, r3
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	3332      	adds	r3, #50	; 0x32
 8007b36:	4a08      	ldr	r2, [pc, #32]	; (8007b58 <UART_SetConfig+0x2d4>)
 8007b38:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3c:	095b      	lsrs	r3, r3, #5
 8007b3e:	f003 0207 	and.w	r2, r3, #7
 8007b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4422      	add	r2, r4
 8007b4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b4c:	e106      	b.n	8007d5c <UART_SetConfig+0x4d8>
 8007b4e:	bf00      	nop
 8007b50:	40011000 	.word	0x40011000
 8007b54:	40011400 	.word	0x40011400
 8007b58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b60:	2200      	movs	r2, #0
 8007b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007b6e:	4642      	mov	r2, r8
 8007b70:	464b      	mov	r3, r9
 8007b72:	1891      	adds	r1, r2, r2
 8007b74:	6239      	str	r1, [r7, #32]
 8007b76:	415b      	adcs	r3, r3
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
 8007b7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b7e:	4641      	mov	r1, r8
 8007b80:	1854      	adds	r4, r2, r1
 8007b82:	4649      	mov	r1, r9
 8007b84:	eb43 0501 	adc.w	r5, r3, r1
 8007b88:	f04f 0200 	mov.w	r2, #0
 8007b8c:	f04f 0300 	mov.w	r3, #0
 8007b90:	00eb      	lsls	r3, r5, #3
 8007b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b96:	00e2      	lsls	r2, r4, #3
 8007b98:	4614      	mov	r4, r2
 8007b9a:	461d      	mov	r5, r3
 8007b9c:	4643      	mov	r3, r8
 8007b9e:	18e3      	adds	r3, r4, r3
 8007ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	eb45 0303 	adc.w	r3, r5, r3
 8007baa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007bbe:	f04f 0200 	mov.w	r2, #0
 8007bc2:	f04f 0300 	mov.w	r3, #0
 8007bc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007bca:	4629      	mov	r1, r5
 8007bcc:	008b      	lsls	r3, r1, #2
 8007bce:	4621      	mov	r1, r4
 8007bd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	008a      	lsls	r2, r1, #2
 8007bd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007bdc:	f7f8 ffe4 	bl	8000ba8 <__aeabi_uldivmod>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4b60      	ldr	r3, [pc, #384]	; (8007d68 <UART_SetConfig+0x4e4>)
 8007be6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bea:	095b      	lsrs	r3, r3, #5
 8007bec:	011c      	lsls	r4, r3, #4
 8007bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007bf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007bfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c00:	4642      	mov	r2, r8
 8007c02:	464b      	mov	r3, r9
 8007c04:	1891      	adds	r1, r2, r2
 8007c06:	61b9      	str	r1, [r7, #24]
 8007c08:	415b      	adcs	r3, r3
 8007c0a:	61fb      	str	r3, [r7, #28]
 8007c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c10:	4641      	mov	r1, r8
 8007c12:	1851      	adds	r1, r2, r1
 8007c14:	6139      	str	r1, [r7, #16]
 8007c16:	4649      	mov	r1, r9
 8007c18:	414b      	adcs	r3, r1
 8007c1a:	617b      	str	r3, [r7, #20]
 8007c1c:	f04f 0200 	mov.w	r2, #0
 8007c20:	f04f 0300 	mov.w	r3, #0
 8007c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c28:	4659      	mov	r1, fp
 8007c2a:	00cb      	lsls	r3, r1, #3
 8007c2c:	4651      	mov	r1, sl
 8007c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c32:	4651      	mov	r1, sl
 8007c34:	00ca      	lsls	r2, r1, #3
 8007c36:	4610      	mov	r0, r2
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	4642      	mov	r2, r8
 8007c3e:	189b      	adds	r3, r3, r2
 8007c40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c44:	464b      	mov	r3, r9
 8007c46:	460a      	mov	r2, r1
 8007c48:	eb42 0303 	adc.w	r3, r2, r3
 8007c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c5c:	f04f 0200 	mov.w	r2, #0
 8007c60:	f04f 0300 	mov.w	r3, #0
 8007c64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c68:	4649      	mov	r1, r9
 8007c6a:	008b      	lsls	r3, r1, #2
 8007c6c:	4641      	mov	r1, r8
 8007c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c72:	4641      	mov	r1, r8
 8007c74:	008a      	lsls	r2, r1, #2
 8007c76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c7a:	f7f8 ff95 	bl	8000ba8 <__aeabi_uldivmod>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	4611      	mov	r1, r2
 8007c84:	4b38      	ldr	r3, [pc, #224]	; (8007d68 <UART_SetConfig+0x4e4>)
 8007c86:	fba3 2301 	umull	r2, r3, r3, r1
 8007c8a:	095b      	lsrs	r3, r3, #5
 8007c8c:	2264      	movs	r2, #100	; 0x64
 8007c8e:	fb02 f303 	mul.w	r3, r2, r3
 8007c92:	1acb      	subs	r3, r1, r3
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	3332      	adds	r3, #50	; 0x32
 8007c98:	4a33      	ldr	r2, [pc, #204]	; (8007d68 <UART_SetConfig+0x4e4>)
 8007c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ca4:	441c      	add	r4, r3
 8007ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007caa:	2200      	movs	r2, #0
 8007cac:	673b      	str	r3, [r7, #112]	; 0x70
 8007cae:	677a      	str	r2, [r7, #116]	; 0x74
 8007cb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	1891      	adds	r1, r2, r2
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	415b      	adcs	r3, r3
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cc4:	4641      	mov	r1, r8
 8007cc6:	1851      	adds	r1, r2, r1
 8007cc8:	6039      	str	r1, [r7, #0]
 8007cca:	4649      	mov	r1, r9
 8007ccc:	414b      	adcs	r3, r1
 8007cce:	607b      	str	r3, [r7, #4]
 8007cd0:	f04f 0200 	mov.w	r2, #0
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cdc:	4659      	mov	r1, fp
 8007cde:	00cb      	lsls	r3, r1, #3
 8007ce0:	4651      	mov	r1, sl
 8007ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ce6:	4651      	mov	r1, sl
 8007ce8:	00ca      	lsls	r2, r1, #3
 8007cea:	4610      	mov	r0, r2
 8007cec:	4619      	mov	r1, r3
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	189b      	adds	r3, r3, r2
 8007cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	460a      	mov	r2, r1
 8007cfa:	eb42 0303 	adc.w	r3, r2, r3
 8007cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	663b      	str	r3, [r7, #96]	; 0x60
 8007d0a:	667a      	str	r2, [r7, #100]	; 0x64
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	f04f 0300 	mov.w	r3, #0
 8007d14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d18:	4649      	mov	r1, r9
 8007d1a:	008b      	lsls	r3, r1, #2
 8007d1c:	4641      	mov	r1, r8
 8007d1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d22:	4641      	mov	r1, r8
 8007d24:	008a      	lsls	r2, r1, #2
 8007d26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d2a:	f7f8 ff3d 	bl	8000ba8 <__aeabi_uldivmod>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4b0d      	ldr	r3, [pc, #52]	; (8007d68 <UART_SetConfig+0x4e4>)
 8007d34:	fba3 1302 	umull	r1, r3, r3, r2
 8007d38:	095b      	lsrs	r3, r3, #5
 8007d3a:	2164      	movs	r1, #100	; 0x64
 8007d3c:	fb01 f303 	mul.w	r3, r1, r3
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	3332      	adds	r3, #50	; 0x32
 8007d46:	4a08      	ldr	r2, [pc, #32]	; (8007d68 <UART_SetConfig+0x4e4>)
 8007d48:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4c:	095b      	lsrs	r3, r3, #5
 8007d4e:	f003 020f 	and.w	r2, r3, #15
 8007d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4422      	add	r2, r4
 8007d5a:	609a      	str	r2, [r3, #8]
}
 8007d5c:	bf00      	nop
 8007d5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d62:	46bd      	mov	sp, r7
 8007d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d68:	51eb851f 	.word	0x51eb851f

08007d6c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d84:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	4b20      	ldr	r3, [pc, #128]	; (8007e0c <FSMC_NORSRAM_Init+0xa0>)
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007d96:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007d9c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007da2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007da8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007dae:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007db4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007dba:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007dc0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007dc6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007dcc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007dd2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007dd8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d103      	bne.n	8007df0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dee:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68f9      	ldr	r1, [r7, #12]
 8007df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	fff00080 	.word	0xfff00080

08007e10 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007e32:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007e3e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007e46:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007e4e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007e58:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	3b02      	subs	r3, #2
 8007e60:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007e62:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	1c5a      	adds	r2, r3, #1
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6979      	ldr	r1, [r7, #20]
 8007e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
	...

08007e8c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ea4:	d122      	bne.n	8007eec <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eae:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007ec2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007eca:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007ed2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007ed8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	6979      	ldr	r1, [r7, #20]
 8007ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007eea:	e005      	b.n	8007ef8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	371c      	adds	r7, #28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	cff00000 	.word	0xcff00000

08007f0c <__cvt>:
 8007f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f10:	ec55 4b10 	vmov	r4, r5, d0
 8007f14:	2d00      	cmp	r5, #0
 8007f16:	460e      	mov	r6, r1
 8007f18:	4619      	mov	r1, r3
 8007f1a:	462b      	mov	r3, r5
 8007f1c:	bfbb      	ittet	lt
 8007f1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f22:	461d      	movlt	r5, r3
 8007f24:	2300      	movge	r3, #0
 8007f26:	232d      	movlt	r3, #45	; 0x2d
 8007f28:	700b      	strb	r3, [r1, #0]
 8007f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f30:	4691      	mov	r9, r2
 8007f32:	f023 0820 	bic.w	r8, r3, #32
 8007f36:	bfbc      	itt	lt
 8007f38:	4622      	movlt	r2, r4
 8007f3a:	4614      	movlt	r4, r2
 8007f3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f40:	d005      	beq.n	8007f4e <__cvt+0x42>
 8007f42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f46:	d100      	bne.n	8007f4a <__cvt+0x3e>
 8007f48:	3601      	adds	r6, #1
 8007f4a:	2102      	movs	r1, #2
 8007f4c:	e000      	b.n	8007f50 <__cvt+0x44>
 8007f4e:	2103      	movs	r1, #3
 8007f50:	ab03      	add	r3, sp, #12
 8007f52:	9301      	str	r3, [sp, #4]
 8007f54:	ab02      	add	r3, sp, #8
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	ec45 4b10 	vmov	d0, r4, r5
 8007f5c:	4653      	mov	r3, sl
 8007f5e:	4632      	mov	r2, r6
 8007f60:	f000 fe76 	bl	8008c50 <_dtoa_r>
 8007f64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f68:	4607      	mov	r7, r0
 8007f6a:	d102      	bne.n	8007f72 <__cvt+0x66>
 8007f6c:	f019 0f01 	tst.w	r9, #1
 8007f70:	d022      	beq.n	8007fb8 <__cvt+0xac>
 8007f72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f76:	eb07 0906 	add.w	r9, r7, r6
 8007f7a:	d110      	bne.n	8007f9e <__cvt+0x92>
 8007f7c:	783b      	ldrb	r3, [r7, #0]
 8007f7e:	2b30      	cmp	r3, #48	; 0x30
 8007f80:	d10a      	bne.n	8007f98 <__cvt+0x8c>
 8007f82:	2200      	movs	r2, #0
 8007f84:	2300      	movs	r3, #0
 8007f86:	4620      	mov	r0, r4
 8007f88:	4629      	mov	r1, r5
 8007f8a:	f7f8 fd9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f8e:	b918      	cbnz	r0, 8007f98 <__cvt+0x8c>
 8007f90:	f1c6 0601 	rsb	r6, r6, #1
 8007f94:	f8ca 6000 	str.w	r6, [sl]
 8007f98:	f8da 3000 	ldr.w	r3, [sl]
 8007f9c:	4499      	add	r9, r3
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	f7f8 fd8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007faa:	b108      	cbz	r0, 8007fb0 <__cvt+0xa4>
 8007fac:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fb0:	2230      	movs	r2, #48	; 0x30
 8007fb2:	9b03      	ldr	r3, [sp, #12]
 8007fb4:	454b      	cmp	r3, r9
 8007fb6:	d307      	bcc.n	8007fc8 <__cvt+0xbc>
 8007fb8:	9b03      	ldr	r3, [sp, #12]
 8007fba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fbc:	1bdb      	subs	r3, r3, r7
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	6013      	str	r3, [r2, #0]
 8007fc2:	b004      	add	sp, #16
 8007fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc8:	1c59      	adds	r1, r3, #1
 8007fca:	9103      	str	r1, [sp, #12]
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	e7f0      	b.n	8007fb2 <__cvt+0xa6>

08007fd0 <__exponent>:
 8007fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	bfb8      	it	lt
 8007fd8:	4249      	neglt	r1, r1
 8007fda:	f803 2b02 	strb.w	r2, [r3], #2
 8007fde:	bfb4      	ite	lt
 8007fe0:	222d      	movlt	r2, #45	; 0x2d
 8007fe2:	222b      	movge	r2, #43	; 0x2b
 8007fe4:	2909      	cmp	r1, #9
 8007fe6:	7042      	strb	r2, [r0, #1]
 8007fe8:	dd2a      	ble.n	8008040 <__exponent+0x70>
 8007fea:	f10d 0207 	add.w	r2, sp, #7
 8007fee:	4617      	mov	r7, r2
 8007ff0:	260a      	movs	r6, #10
 8007ff2:	4694      	mov	ip, r2
 8007ff4:	fb91 f5f6 	sdiv	r5, r1, r6
 8007ff8:	fb06 1415 	mls	r4, r6, r5, r1
 8007ffc:	3430      	adds	r4, #48	; 0x30
 8007ffe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008002:	460c      	mov	r4, r1
 8008004:	2c63      	cmp	r4, #99	; 0x63
 8008006:	f102 32ff 	add.w	r2, r2, #4294967295
 800800a:	4629      	mov	r1, r5
 800800c:	dcf1      	bgt.n	8007ff2 <__exponent+0x22>
 800800e:	3130      	adds	r1, #48	; 0x30
 8008010:	f1ac 0402 	sub.w	r4, ip, #2
 8008014:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008018:	1c41      	adds	r1, r0, #1
 800801a:	4622      	mov	r2, r4
 800801c:	42ba      	cmp	r2, r7
 800801e:	d30a      	bcc.n	8008036 <__exponent+0x66>
 8008020:	f10d 0209 	add.w	r2, sp, #9
 8008024:	eba2 020c 	sub.w	r2, r2, ip
 8008028:	42bc      	cmp	r4, r7
 800802a:	bf88      	it	hi
 800802c:	2200      	movhi	r2, #0
 800802e:	4413      	add	r3, r2
 8008030:	1a18      	subs	r0, r3, r0
 8008032:	b003      	add	sp, #12
 8008034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008036:	f812 5b01 	ldrb.w	r5, [r2], #1
 800803a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800803e:	e7ed      	b.n	800801c <__exponent+0x4c>
 8008040:	2330      	movs	r3, #48	; 0x30
 8008042:	3130      	adds	r1, #48	; 0x30
 8008044:	7083      	strb	r3, [r0, #2]
 8008046:	70c1      	strb	r1, [r0, #3]
 8008048:	1d03      	adds	r3, r0, #4
 800804a:	e7f1      	b.n	8008030 <__exponent+0x60>

0800804c <_printf_float>:
 800804c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008050:	ed2d 8b02 	vpush	{d8}
 8008054:	b08d      	sub	sp, #52	; 0x34
 8008056:	460c      	mov	r4, r1
 8008058:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800805c:	4616      	mov	r6, r2
 800805e:	461f      	mov	r7, r3
 8008060:	4605      	mov	r5, r0
 8008062:	f000 fcf5 	bl	8008a50 <_localeconv_r>
 8008066:	f8d0 a000 	ldr.w	sl, [r0]
 800806a:	4650      	mov	r0, sl
 800806c:	f7f8 f900 	bl	8000270 <strlen>
 8008070:	2300      	movs	r3, #0
 8008072:	930a      	str	r3, [sp, #40]	; 0x28
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	9305      	str	r3, [sp, #20]
 8008078:	f8d8 3000 	ldr.w	r3, [r8]
 800807c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008080:	3307      	adds	r3, #7
 8008082:	f023 0307 	bic.w	r3, r3, #7
 8008086:	f103 0208 	add.w	r2, r3, #8
 800808a:	f8c8 2000 	str.w	r2, [r8]
 800808e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008092:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008096:	9307      	str	r3, [sp, #28]
 8008098:	f8cd 8018 	str.w	r8, [sp, #24]
 800809c:	ee08 0a10 	vmov	s16, r0
 80080a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80080a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080a8:	4b9e      	ldr	r3, [pc, #632]	; (8008324 <_printf_float+0x2d8>)
 80080aa:	f04f 32ff 	mov.w	r2, #4294967295
 80080ae:	f7f8 fd3d 	bl	8000b2c <__aeabi_dcmpun>
 80080b2:	bb88      	cbnz	r0, 8008118 <_printf_float+0xcc>
 80080b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080b8:	4b9a      	ldr	r3, [pc, #616]	; (8008324 <_printf_float+0x2d8>)
 80080ba:	f04f 32ff 	mov.w	r2, #4294967295
 80080be:	f7f8 fd17 	bl	8000af0 <__aeabi_dcmple>
 80080c2:	bb48      	cbnz	r0, 8008118 <_printf_float+0xcc>
 80080c4:	2200      	movs	r2, #0
 80080c6:	2300      	movs	r3, #0
 80080c8:	4640      	mov	r0, r8
 80080ca:	4649      	mov	r1, r9
 80080cc:	f7f8 fd06 	bl	8000adc <__aeabi_dcmplt>
 80080d0:	b110      	cbz	r0, 80080d8 <_printf_float+0x8c>
 80080d2:	232d      	movs	r3, #45	; 0x2d
 80080d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080d8:	4a93      	ldr	r2, [pc, #588]	; (8008328 <_printf_float+0x2dc>)
 80080da:	4b94      	ldr	r3, [pc, #592]	; (800832c <_printf_float+0x2e0>)
 80080dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80080e0:	bf94      	ite	ls
 80080e2:	4690      	movls	r8, r2
 80080e4:	4698      	movhi	r8, r3
 80080e6:	2303      	movs	r3, #3
 80080e8:	6123      	str	r3, [r4, #16]
 80080ea:	9b05      	ldr	r3, [sp, #20]
 80080ec:	f023 0304 	bic.w	r3, r3, #4
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	f04f 0900 	mov.w	r9, #0
 80080f6:	9700      	str	r7, [sp, #0]
 80080f8:	4633      	mov	r3, r6
 80080fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80080fc:	4621      	mov	r1, r4
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 f9da 	bl	80084b8 <_printf_common>
 8008104:	3001      	adds	r0, #1
 8008106:	f040 8090 	bne.w	800822a <_printf_float+0x1de>
 800810a:	f04f 30ff 	mov.w	r0, #4294967295
 800810e:	b00d      	add	sp, #52	; 0x34
 8008110:	ecbd 8b02 	vpop	{d8}
 8008114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008118:	4642      	mov	r2, r8
 800811a:	464b      	mov	r3, r9
 800811c:	4640      	mov	r0, r8
 800811e:	4649      	mov	r1, r9
 8008120:	f7f8 fd04 	bl	8000b2c <__aeabi_dcmpun>
 8008124:	b140      	cbz	r0, 8008138 <_printf_float+0xec>
 8008126:	464b      	mov	r3, r9
 8008128:	2b00      	cmp	r3, #0
 800812a:	bfbc      	itt	lt
 800812c:	232d      	movlt	r3, #45	; 0x2d
 800812e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008132:	4a7f      	ldr	r2, [pc, #508]	; (8008330 <_printf_float+0x2e4>)
 8008134:	4b7f      	ldr	r3, [pc, #508]	; (8008334 <_printf_float+0x2e8>)
 8008136:	e7d1      	b.n	80080dc <_printf_float+0x90>
 8008138:	6863      	ldr	r3, [r4, #4]
 800813a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800813e:	9206      	str	r2, [sp, #24]
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	d13f      	bne.n	80081c4 <_printf_float+0x178>
 8008144:	2306      	movs	r3, #6
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	9b05      	ldr	r3, [sp, #20]
 800814a:	6861      	ldr	r1, [r4, #4]
 800814c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008150:	2300      	movs	r3, #0
 8008152:	9303      	str	r3, [sp, #12]
 8008154:	ab0a      	add	r3, sp, #40	; 0x28
 8008156:	e9cd b301 	strd	fp, r3, [sp, #4]
 800815a:	ab09      	add	r3, sp, #36	; 0x24
 800815c:	ec49 8b10 	vmov	d0, r8, r9
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	6022      	str	r2, [r4, #0]
 8008164:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008168:	4628      	mov	r0, r5
 800816a:	f7ff fecf 	bl	8007f0c <__cvt>
 800816e:	9b06      	ldr	r3, [sp, #24]
 8008170:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008172:	2b47      	cmp	r3, #71	; 0x47
 8008174:	4680      	mov	r8, r0
 8008176:	d108      	bne.n	800818a <_printf_float+0x13e>
 8008178:	1cc8      	adds	r0, r1, #3
 800817a:	db02      	blt.n	8008182 <_printf_float+0x136>
 800817c:	6863      	ldr	r3, [r4, #4]
 800817e:	4299      	cmp	r1, r3
 8008180:	dd41      	ble.n	8008206 <_printf_float+0x1ba>
 8008182:	f1ab 0302 	sub.w	r3, fp, #2
 8008186:	fa5f fb83 	uxtb.w	fp, r3
 800818a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800818e:	d820      	bhi.n	80081d2 <_printf_float+0x186>
 8008190:	3901      	subs	r1, #1
 8008192:	465a      	mov	r2, fp
 8008194:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008198:	9109      	str	r1, [sp, #36]	; 0x24
 800819a:	f7ff ff19 	bl	8007fd0 <__exponent>
 800819e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081a0:	1813      	adds	r3, r2, r0
 80081a2:	2a01      	cmp	r2, #1
 80081a4:	4681      	mov	r9, r0
 80081a6:	6123      	str	r3, [r4, #16]
 80081a8:	dc02      	bgt.n	80081b0 <_printf_float+0x164>
 80081aa:	6822      	ldr	r2, [r4, #0]
 80081ac:	07d2      	lsls	r2, r2, #31
 80081ae:	d501      	bpl.n	80081b4 <_printf_float+0x168>
 80081b0:	3301      	adds	r3, #1
 80081b2:	6123      	str	r3, [r4, #16]
 80081b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d09c      	beq.n	80080f6 <_printf_float+0xaa>
 80081bc:	232d      	movs	r3, #45	; 0x2d
 80081be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c2:	e798      	b.n	80080f6 <_printf_float+0xaa>
 80081c4:	9a06      	ldr	r2, [sp, #24]
 80081c6:	2a47      	cmp	r2, #71	; 0x47
 80081c8:	d1be      	bne.n	8008148 <_printf_float+0xfc>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1bc      	bne.n	8008148 <_printf_float+0xfc>
 80081ce:	2301      	movs	r3, #1
 80081d0:	e7b9      	b.n	8008146 <_printf_float+0xfa>
 80081d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80081d6:	d118      	bne.n	800820a <_printf_float+0x1be>
 80081d8:	2900      	cmp	r1, #0
 80081da:	6863      	ldr	r3, [r4, #4]
 80081dc:	dd0b      	ble.n	80081f6 <_printf_float+0x1aa>
 80081de:	6121      	str	r1, [r4, #16]
 80081e0:	b913      	cbnz	r3, 80081e8 <_printf_float+0x19c>
 80081e2:	6822      	ldr	r2, [r4, #0]
 80081e4:	07d0      	lsls	r0, r2, #31
 80081e6:	d502      	bpl.n	80081ee <_printf_float+0x1a2>
 80081e8:	3301      	adds	r3, #1
 80081ea:	440b      	add	r3, r1
 80081ec:	6123      	str	r3, [r4, #16]
 80081ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80081f0:	f04f 0900 	mov.w	r9, #0
 80081f4:	e7de      	b.n	80081b4 <_printf_float+0x168>
 80081f6:	b913      	cbnz	r3, 80081fe <_printf_float+0x1b2>
 80081f8:	6822      	ldr	r2, [r4, #0]
 80081fa:	07d2      	lsls	r2, r2, #31
 80081fc:	d501      	bpl.n	8008202 <_printf_float+0x1b6>
 80081fe:	3302      	adds	r3, #2
 8008200:	e7f4      	b.n	80081ec <_printf_float+0x1a0>
 8008202:	2301      	movs	r3, #1
 8008204:	e7f2      	b.n	80081ec <_printf_float+0x1a0>
 8008206:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800820a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820c:	4299      	cmp	r1, r3
 800820e:	db05      	blt.n	800821c <_printf_float+0x1d0>
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	6121      	str	r1, [r4, #16]
 8008214:	07d8      	lsls	r0, r3, #31
 8008216:	d5ea      	bpl.n	80081ee <_printf_float+0x1a2>
 8008218:	1c4b      	adds	r3, r1, #1
 800821a:	e7e7      	b.n	80081ec <_printf_float+0x1a0>
 800821c:	2900      	cmp	r1, #0
 800821e:	bfd4      	ite	le
 8008220:	f1c1 0202 	rsble	r2, r1, #2
 8008224:	2201      	movgt	r2, #1
 8008226:	4413      	add	r3, r2
 8008228:	e7e0      	b.n	80081ec <_printf_float+0x1a0>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	055a      	lsls	r2, r3, #21
 800822e:	d407      	bmi.n	8008240 <_printf_float+0x1f4>
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	4642      	mov	r2, r8
 8008234:	4631      	mov	r1, r6
 8008236:	4628      	mov	r0, r5
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	d12c      	bne.n	8008298 <_printf_float+0x24c>
 800823e:	e764      	b.n	800810a <_printf_float+0xbe>
 8008240:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008244:	f240 80e0 	bls.w	8008408 <_printf_float+0x3bc>
 8008248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800824c:	2200      	movs	r2, #0
 800824e:	2300      	movs	r3, #0
 8008250:	f7f8 fc3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008254:	2800      	cmp	r0, #0
 8008256:	d034      	beq.n	80082c2 <_printf_float+0x276>
 8008258:	4a37      	ldr	r2, [pc, #220]	; (8008338 <_printf_float+0x2ec>)
 800825a:	2301      	movs	r3, #1
 800825c:	4631      	mov	r1, r6
 800825e:	4628      	mov	r0, r5
 8008260:	47b8      	blx	r7
 8008262:	3001      	adds	r0, #1
 8008264:	f43f af51 	beq.w	800810a <_printf_float+0xbe>
 8008268:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800826c:	429a      	cmp	r2, r3
 800826e:	db02      	blt.n	8008276 <_printf_float+0x22a>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	07d8      	lsls	r0, r3, #31
 8008274:	d510      	bpl.n	8008298 <_printf_float+0x24c>
 8008276:	ee18 3a10 	vmov	r3, s16
 800827a:	4652      	mov	r2, sl
 800827c:	4631      	mov	r1, r6
 800827e:	4628      	mov	r0, r5
 8008280:	47b8      	blx	r7
 8008282:	3001      	adds	r0, #1
 8008284:	f43f af41 	beq.w	800810a <_printf_float+0xbe>
 8008288:	f04f 0800 	mov.w	r8, #0
 800828c:	f104 091a 	add.w	r9, r4, #26
 8008290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008292:	3b01      	subs	r3, #1
 8008294:	4543      	cmp	r3, r8
 8008296:	dc09      	bgt.n	80082ac <_printf_float+0x260>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	079b      	lsls	r3, r3, #30
 800829c:	f100 8107 	bmi.w	80084ae <_printf_float+0x462>
 80082a0:	68e0      	ldr	r0, [r4, #12]
 80082a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082a4:	4298      	cmp	r0, r3
 80082a6:	bfb8      	it	lt
 80082a8:	4618      	movlt	r0, r3
 80082aa:	e730      	b.n	800810e <_printf_float+0xc2>
 80082ac:	2301      	movs	r3, #1
 80082ae:	464a      	mov	r2, r9
 80082b0:	4631      	mov	r1, r6
 80082b2:	4628      	mov	r0, r5
 80082b4:	47b8      	blx	r7
 80082b6:	3001      	adds	r0, #1
 80082b8:	f43f af27 	beq.w	800810a <_printf_float+0xbe>
 80082bc:	f108 0801 	add.w	r8, r8, #1
 80082c0:	e7e6      	b.n	8008290 <_printf_float+0x244>
 80082c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	dc39      	bgt.n	800833c <_printf_float+0x2f0>
 80082c8:	4a1b      	ldr	r2, [pc, #108]	; (8008338 <_printf_float+0x2ec>)
 80082ca:	2301      	movs	r3, #1
 80082cc:	4631      	mov	r1, r6
 80082ce:	4628      	mov	r0, r5
 80082d0:	47b8      	blx	r7
 80082d2:	3001      	adds	r0, #1
 80082d4:	f43f af19 	beq.w	800810a <_printf_float+0xbe>
 80082d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80082dc:	4313      	orrs	r3, r2
 80082de:	d102      	bne.n	80082e6 <_printf_float+0x29a>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	07d9      	lsls	r1, r3, #31
 80082e4:	d5d8      	bpl.n	8008298 <_printf_float+0x24c>
 80082e6:	ee18 3a10 	vmov	r3, s16
 80082ea:	4652      	mov	r2, sl
 80082ec:	4631      	mov	r1, r6
 80082ee:	4628      	mov	r0, r5
 80082f0:	47b8      	blx	r7
 80082f2:	3001      	adds	r0, #1
 80082f4:	f43f af09 	beq.w	800810a <_printf_float+0xbe>
 80082f8:	f04f 0900 	mov.w	r9, #0
 80082fc:	f104 0a1a 	add.w	sl, r4, #26
 8008300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008302:	425b      	negs	r3, r3
 8008304:	454b      	cmp	r3, r9
 8008306:	dc01      	bgt.n	800830c <_printf_float+0x2c0>
 8008308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800830a:	e792      	b.n	8008232 <_printf_float+0x1e6>
 800830c:	2301      	movs	r3, #1
 800830e:	4652      	mov	r2, sl
 8008310:	4631      	mov	r1, r6
 8008312:	4628      	mov	r0, r5
 8008314:	47b8      	blx	r7
 8008316:	3001      	adds	r0, #1
 8008318:	f43f aef7 	beq.w	800810a <_printf_float+0xbe>
 800831c:	f109 0901 	add.w	r9, r9, #1
 8008320:	e7ee      	b.n	8008300 <_printf_float+0x2b4>
 8008322:	bf00      	nop
 8008324:	7fefffff 	.word	0x7fefffff
 8008328:	0800dc14 	.word	0x0800dc14
 800832c:	0800dc18 	.word	0x0800dc18
 8008330:	0800dc1c 	.word	0x0800dc1c
 8008334:	0800dc20 	.word	0x0800dc20
 8008338:	0800dc24 	.word	0x0800dc24
 800833c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008340:	429a      	cmp	r2, r3
 8008342:	bfa8      	it	ge
 8008344:	461a      	movge	r2, r3
 8008346:	2a00      	cmp	r2, #0
 8008348:	4691      	mov	r9, r2
 800834a:	dc37      	bgt.n	80083bc <_printf_float+0x370>
 800834c:	f04f 0b00 	mov.w	fp, #0
 8008350:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008354:	f104 021a 	add.w	r2, r4, #26
 8008358:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800835a:	9305      	str	r3, [sp, #20]
 800835c:	eba3 0309 	sub.w	r3, r3, r9
 8008360:	455b      	cmp	r3, fp
 8008362:	dc33      	bgt.n	80083cc <_printf_float+0x380>
 8008364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008368:	429a      	cmp	r2, r3
 800836a:	db3b      	blt.n	80083e4 <_printf_float+0x398>
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	07da      	lsls	r2, r3, #31
 8008370:	d438      	bmi.n	80083e4 <_printf_float+0x398>
 8008372:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008376:	eba2 0903 	sub.w	r9, r2, r3
 800837a:	9b05      	ldr	r3, [sp, #20]
 800837c:	1ad2      	subs	r2, r2, r3
 800837e:	4591      	cmp	r9, r2
 8008380:	bfa8      	it	ge
 8008382:	4691      	movge	r9, r2
 8008384:	f1b9 0f00 	cmp.w	r9, #0
 8008388:	dc35      	bgt.n	80083f6 <_printf_float+0x3aa>
 800838a:	f04f 0800 	mov.w	r8, #0
 800838e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008392:	f104 0a1a 	add.w	sl, r4, #26
 8008396:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800839a:	1a9b      	subs	r3, r3, r2
 800839c:	eba3 0309 	sub.w	r3, r3, r9
 80083a0:	4543      	cmp	r3, r8
 80083a2:	f77f af79 	ble.w	8008298 <_printf_float+0x24c>
 80083a6:	2301      	movs	r3, #1
 80083a8:	4652      	mov	r2, sl
 80083aa:	4631      	mov	r1, r6
 80083ac:	4628      	mov	r0, r5
 80083ae:	47b8      	blx	r7
 80083b0:	3001      	adds	r0, #1
 80083b2:	f43f aeaa 	beq.w	800810a <_printf_float+0xbe>
 80083b6:	f108 0801 	add.w	r8, r8, #1
 80083ba:	e7ec      	b.n	8008396 <_printf_float+0x34a>
 80083bc:	4613      	mov	r3, r2
 80083be:	4631      	mov	r1, r6
 80083c0:	4642      	mov	r2, r8
 80083c2:	4628      	mov	r0, r5
 80083c4:	47b8      	blx	r7
 80083c6:	3001      	adds	r0, #1
 80083c8:	d1c0      	bne.n	800834c <_printf_float+0x300>
 80083ca:	e69e      	b.n	800810a <_printf_float+0xbe>
 80083cc:	2301      	movs	r3, #1
 80083ce:	4631      	mov	r1, r6
 80083d0:	4628      	mov	r0, r5
 80083d2:	9205      	str	r2, [sp, #20]
 80083d4:	47b8      	blx	r7
 80083d6:	3001      	adds	r0, #1
 80083d8:	f43f ae97 	beq.w	800810a <_printf_float+0xbe>
 80083dc:	9a05      	ldr	r2, [sp, #20]
 80083de:	f10b 0b01 	add.w	fp, fp, #1
 80083e2:	e7b9      	b.n	8008358 <_printf_float+0x30c>
 80083e4:	ee18 3a10 	vmov	r3, s16
 80083e8:	4652      	mov	r2, sl
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	d1be      	bne.n	8008372 <_printf_float+0x326>
 80083f4:	e689      	b.n	800810a <_printf_float+0xbe>
 80083f6:	9a05      	ldr	r2, [sp, #20]
 80083f8:	464b      	mov	r3, r9
 80083fa:	4442      	add	r2, r8
 80083fc:	4631      	mov	r1, r6
 80083fe:	4628      	mov	r0, r5
 8008400:	47b8      	blx	r7
 8008402:	3001      	adds	r0, #1
 8008404:	d1c1      	bne.n	800838a <_printf_float+0x33e>
 8008406:	e680      	b.n	800810a <_printf_float+0xbe>
 8008408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800840a:	2a01      	cmp	r2, #1
 800840c:	dc01      	bgt.n	8008412 <_printf_float+0x3c6>
 800840e:	07db      	lsls	r3, r3, #31
 8008410:	d53a      	bpl.n	8008488 <_printf_float+0x43c>
 8008412:	2301      	movs	r3, #1
 8008414:	4642      	mov	r2, r8
 8008416:	4631      	mov	r1, r6
 8008418:	4628      	mov	r0, r5
 800841a:	47b8      	blx	r7
 800841c:	3001      	adds	r0, #1
 800841e:	f43f ae74 	beq.w	800810a <_printf_float+0xbe>
 8008422:	ee18 3a10 	vmov	r3, s16
 8008426:	4652      	mov	r2, sl
 8008428:	4631      	mov	r1, r6
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	f43f ae6b 	beq.w	800810a <_printf_float+0xbe>
 8008434:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008438:	2200      	movs	r2, #0
 800843a:	2300      	movs	r3, #0
 800843c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008440:	f7f8 fb42 	bl	8000ac8 <__aeabi_dcmpeq>
 8008444:	b9d8      	cbnz	r0, 800847e <_printf_float+0x432>
 8008446:	f10a 33ff 	add.w	r3, sl, #4294967295
 800844a:	f108 0201 	add.w	r2, r8, #1
 800844e:	4631      	mov	r1, r6
 8008450:	4628      	mov	r0, r5
 8008452:	47b8      	blx	r7
 8008454:	3001      	adds	r0, #1
 8008456:	d10e      	bne.n	8008476 <_printf_float+0x42a>
 8008458:	e657      	b.n	800810a <_printf_float+0xbe>
 800845a:	2301      	movs	r3, #1
 800845c:	4652      	mov	r2, sl
 800845e:	4631      	mov	r1, r6
 8008460:	4628      	mov	r0, r5
 8008462:	47b8      	blx	r7
 8008464:	3001      	adds	r0, #1
 8008466:	f43f ae50 	beq.w	800810a <_printf_float+0xbe>
 800846a:	f108 0801 	add.w	r8, r8, #1
 800846e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008470:	3b01      	subs	r3, #1
 8008472:	4543      	cmp	r3, r8
 8008474:	dcf1      	bgt.n	800845a <_printf_float+0x40e>
 8008476:	464b      	mov	r3, r9
 8008478:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800847c:	e6da      	b.n	8008234 <_printf_float+0x1e8>
 800847e:	f04f 0800 	mov.w	r8, #0
 8008482:	f104 0a1a 	add.w	sl, r4, #26
 8008486:	e7f2      	b.n	800846e <_printf_float+0x422>
 8008488:	2301      	movs	r3, #1
 800848a:	4642      	mov	r2, r8
 800848c:	e7df      	b.n	800844e <_printf_float+0x402>
 800848e:	2301      	movs	r3, #1
 8008490:	464a      	mov	r2, r9
 8008492:	4631      	mov	r1, r6
 8008494:	4628      	mov	r0, r5
 8008496:	47b8      	blx	r7
 8008498:	3001      	adds	r0, #1
 800849a:	f43f ae36 	beq.w	800810a <_printf_float+0xbe>
 800849e:	f108 0801 	add.w	r8, r8, #1
 80084a2:	68e3      	ldr	r3, [r4, #12]
 80084a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084a6:	1a5b      	subs	r3, r3, r1
 80084a8:	4543      	cmp	r3, r8
 80084aa:	dcf0      	bgt.n	800848e <_printf_float+0x442>
 80084ac:	e6f8      	b.n	80082a0 <_printf_float+0x254>
 80084ae:	f04f 0800 	mov.w	r8, #0
 80084b2:	f104 0919 	add.w	r9, r4, #25
 80084b6:	e7f4      	b.n	80084a2 <_printf_float+0x456>

080084b8 <_printf_common>:
 80084b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084bc:	4616      	mov	r6, r2
 80084be:	4699      	mov	r9, r3
 80084c0:	688a      	ldr	r2, [r1, #8]
 80084c2:	690b      	ldr	r3, [r1, #16]
 80084c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084c8:	4293      	cmp	r3, r2
 80084ca:	bfb8      	it	lt
 80084cc:	4613      	movlt	r3, r2
 80084ce:	6033      	str	r3, [r6, #0]
 80084d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084d4:	4607      	mov	r7, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	b10a      	cbz	r2, 80084de <_printf_common+0x26>
 80084da:	3301      	adds	r3, #1
 80084dc:	6033      	str	r3, [r6, #0]
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	0699      	lsls	r1, r3, #26
 80084e2:	bf42      	ittt	mi
 80084e4:	6833      	ldrmi	r3, [r6, #0]
 80084e6:	3302      	addmi	r3, #2
 80084e8:	6033      	strmi	r3, [r6, #0]
 80084ea:	6825      	ldr	r5, [r4, #0]
 80084ec:	f015 0506 	ands.w	r5, r5, #6
 80084f0:	d106      	bne.n	8008500 <_printf_common+0x48>
 80084f2:	f104 0a19 	add.w	sl, r4, #25
 80084f6:	68e3      	ldr	r3, [r4, #12]
 80084f8:	6832      	ldr	r2, [r6, #0]
 80084fa:	1a9b      	subs	r3, r3, r2
 80084fc:	42ab      	cmp	r3, r5
 80084fe:	dc26      	bgt.n	800854e <_printf_common+0x96>
 8008500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008504:	1e13      	subs	r3, r2, #0
 8008506:	6822      	ldr	r2, [r4, #0]
 8008508:	bf18      	it	ne
 800850a:	2301      	movne	r3, #1
 800850c:	0692      	lsls	r2, r2, #26
 800850e:	d42b      	bmi.n	8008568 <_printf_common+0xb0>
 8008510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008514:	4649      	mov	r1, r9
 8008516:	4638      	mov	r0, r7
 8008518:	47c0      	blx	r8
 800851a:	3001      	adds	r0, #1
 800851c:	d01e      	beq.n	800855c <_printf_common+0xa4>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	6922      	ldr	r2, [r4, #16]
 8008522:	f003 0306 	and.w	r3, r3, #6
 8008526:	2b04      	cmp	r3, #4
 8008528:	bf02      	ittt	eq
 800852a:	68e5      	ldreq	r5, [r4, #12]
 800852c:	6833      	ldreq	r3, [r6, #0]
 800852e:	1aed      	subeq	r5, r5, r3
 8008530:	68a3      	ldr	r3, [r4, #8]
 8008532:	bf0c      	ite	eq
 8008534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008538:	2500      	movne	r5, #0
 800853a:	4293      	cmp	r3, r2
 800853c:	bfc4      	itt	gt
 800853e:	1a9b      	subgt	r3, r3, r2
 8008540:	18ed      	addgt	r5, r5, r3
 8008542:	2600      	movs	r6, #0
 8008544:	341a      	adds	r4, #26
 8008546:	42b5      	cmp	r5, r6
 8008548:	d11a      	bne.n	8008580 <_printf_common+0xc8>
 800854a:	2000      	movs	r0, #0
 800854c:	e008      	b.n	8008560 <_printf_common+0xa8>
 800854e:	2301      	movs	r3, #1
 8008550:	4652      	mov	r2, sl
 8008552:	4649      	mov	r1, r9
 8008554:	4638      	mov	r0, r7
 8008556:	47c0      	blx	r8
 8008558:	3001      	adds	r0, #1
 800855a:	d103      	bne.n	8008564 <_printf_common+0xac>
 800855c:	f04f 30ff 	mov.w	r0, #4294967295
 8008560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008564:	3501      	adds	r5, #1
 8008566:	e7c6      	b.n	80084f6 <_printf_common+0x3e>
 8008568:	18e1      	adds	r1, r4, r3
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	2030      	movs	r0, #48	; 0x30
 800856e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008572:	4422      	add	r2, r4
 8008574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800857c:	3302      	adds	r3, #2
 800857e:	e7c7      	b.n	8008510 <_printf_common+0x58>
 8008580:	2301      	movs	r3, #1
 8008582:	4622      	mov	r2, r4
 8008584:	4649      	mov	r1, r9
 8008586:	4638      	mov	r0, r7
 8008588:	47c0      	blx	r8
 800858a:	3001      	adds	r0, #1
 800858c:	d0e6      	beq.n	800855c <_printf_common+0xa4>
 800858e:	3601      	adds	r6, #1
 8008590:	e7d9      	b.n	8008546 <_printf_common+0x8e>
	...

08008594 <_printf_i>:
 8008594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008598:	7e0f      	ldrb	r7, [r1, #24]
 800859a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800859c:	2f78      	cmp	r7, #120	; 0x78
 800859e:	4691      	mov	r9, r2
 80085a0:	4680      	mov	r8, r0
 80085a2:	460c      	mov	r4, r1
 80085a4:	469a      	mov	sl, r3
 80085a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085aa:	d807      	bhi.n	80085bc <_printf_i+0x28>
 80085ac:	2f62      	cmp	r7, #98	; 0x62
 80085ae:	d80a      	bhi.n	80085c6 <_printf_i+0x32>
 80085b0:	2f00      	cmp	r7, #0
 80085b2:	f000 80d4 	beq.w	800875e <_printf_i+0x1ca>
 80085b6:	2f58      	cmp	r7, #88	; 0x58
 80085b8:	f000 80c0 	beq.w	800873c <_printf_i+0x1a8>
 80085bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085c4:	e03a      	b.n	800863c <_printf_i+0xa8>
 80085c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085ca:	2b15      	cmp	r3, #21
 80085cc:	d8f6      	bhi.n	80085bc <_printf_i+0x28>
 80085ce:	a101      	add	r1, pc, #4	; (adr r1, 80085d4 <_printf_i+0x40>)
 80085d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085d4:	0800862d 	.word	0x0800862d
 80085d8:	08008641 	.word	0x08008641
 80085dc:	080085bd 	.word	0x080085bd
 80085e0:	080085bd 	.word	0x080085bd
 80085e4:	080085bd 	.word	0x080085bd
 80085e8:	080085bd 	.word	0x080085bd
 80085ec:	08008641 	.word	0x08008641
 80085f0:	080085bd 	.word	0x080085bd
 80085f4:	080085bd 	.word	0x080085bd
 80085f8:	080085bd 	.word	0x080085bd
 80085fc:	080085bd 	.word	0x080085bd
 8008600:	08008745 	.word	0x08008745
 8008604:	0800866d 	.word	0x0800866d
 8008608:	080086ff 	.word	0x080086ff
 800860c:	080085bd 	.word	0x080085bd
 8008610:	080085bd 	.word	0x080085bd
 8008614:	08008767 	.word	0x08008767
 8008618:	080085bd 	.word	0x080085bd
 800861c:	0800866d 	.word	0x0800866d
 8008620:	080085bd 	.word	0x080085bd
 8008624:	080085bd 	.word	0x080085bd
 8008628:	08008707 	.word	0x08008707
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	1d1a      	adds	r2, r3, #4
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	602a      	str	r2, [r5, #0]
 8008634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800863c:	2301      	movs	r3, #1
 800863e:	e09f      	b.n	8008780 <_printf_i+0x1ec>
 8008640:	6820      	ldr	r0, [r4, #0]
 8008642:	682b      	ldr	r3, [r5, #0]
 8008644:	0607      	lsls	r7, r0, #24
 8008646:	f103 0104 	add.w	r1, r3, #4
 800864a:	6029      	str	r1, [r5, #0]
 800864c:	d501      	bpl.n	8008652 <_printf_i+0xbe>
 800864e:	681e      	ldr	r6, [r3, #0]
 8008650:	e003      	b.n	800865a <_printf_i+0xc6>
 8008652:	0646      	lsls	r6, r0, #25
 8008654:	d5fb      	bpl.n	800864e <_printf_i+0xba>
 8008656:	f9b3 6000 	ldrsh.w	r6, [r3]
 800865a:	2e00      	cmp	r6, #0
 800865c:	da03      	bge.n	8008666 <_printf_i+0xd2>
 800865e:	232d      	movs	r3, #45	; 0x2d
 8008660:	4276      	negs	r6, r6
 8008662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008666:	485a      	ldr	r0, [pc, #360]	; (80087d0 <_printf_i+0x23c>)
 8008668:	230a      	movs	r3, #10
 800866a:	e012      	b.n	8008692 <_printf_i+0xfe>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	6820      	ldr	r0, [r4, #0]
 8008670:	1d19      	adds	r1, r3, #4
 8008672:	6029      	str	r1, [r5, #0]
 8008674:	0605      	lsls	r5, r0, #24
 8008676:	d501      	bpl.n	800867c <_printf_i+0xe8>
 8008678:	681e      	ldr	r6, [r3, #0]
 800867a:	e002      	b.n	8008682 <_printf_i+0xee>
 800867c:	0641      	lsls	r1, r0, #25
 800867e:	d5fb      	bpl.n	8008678 <_printf_i+0xe4>
 8008680:	881e      	ldrh	r6, [r3, #0]
 8008682:	4853      	ldr	r0, [pc, #332]	; (80087d0 <_printf_i+0x23c>)
 8008684:	2f6f      	cmp	r7, #111	; 0x6f
 8008686:	bf0c      	ite	eq
 8008688:	2308      	moveq	r3, #8
 800868a:	230a      	movne	r3, #10
 800868c:	2100      	movs	r1, #0
 800868e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008692:	6865      	ldr	r5, [r4, #4]
 8008694:	60a5      	str	r5, [r4, #8]
 8008696:	2d00      	cmp	r5, #0
 8008698:	bfa2      	ittt	ge
 800869a:	6821      	ldrge	r1, [r4, #0]
 800869c:	f021 0104 	bicge.w	r1, r1, #4
 80086a0:	6021      	strge	r1, [r4, #0]
 80086a2:	b90e      	cbnz	r6, 80086a8 <_printf_i+0x114>
 80086a4:	2d00      	cmp	r5, #0
 80086a6:	d04b      	beq.n	8008740 <_printf_i+0x1ac>
 80086a8:	4615      	mov	r5, r2
 80086aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80086ae:	fb03 6711 	mls	r7, r3, r1, r6
 80086b2:	5dc7      	ldrb	r7, [r0, r7]
 80086b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086b8:	4637      	mov	r7, r6
 80086ba:	42bb      	cmp	r3, r7
 80086bc:	460e      	mov	r6, r1
 80086be:	d9f4      	bls.n	80086aa <_printf_i+0x116>
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d10b      	bne.n	80086dc <_printf_i+0x148>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	07de      	lsls	r6, r3, #31
 80086c8:	d508      	bpl.n	80086dc <_printf_i+0x148>
 80086ca:	6923      	ldr	r3, [r4, #16]
 80086cc:	6861      	ldr	r1, [r4, #4]
 80086ce:	4299      	cmp	r1, r3
 80086d0:	bfde      	ittt	le
 80086d2:	2330      	movle	r3, #48	; 0x30
 80086d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086dc:	1b52      	subs	r2, r2, r5
 80086de:	6122      	str	r2, [r4, #16]
 80086e0:	f8cd a000 	str.w	sl, [sp]
 80086e4:	464b      	mov	r3, r9
 80086e6:	aa03      	add	r2, sp, #12
 80086e8:	4621      	mov	r1, r4
 80086ea:	4640      	mov	r0, r8
 80086ec:	f7ff fee4 	bl	80084b8 <_printf_common>
 80086f0:	3001      	adds	r0, #1
 80086f2:	d14a      	bne.n	800878a <_printf_i+0x1f6>
 80086f4:	f04f 30ff 	mov.w	r0, #4294967295
 80086f8:	b004      	add	sp, #16
 80086fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	f043 0320 	orr.w	r3, r3, #32
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	4833      	ldr	r0, [pc, #204]	; (80087d4 <_printf_i+0x240>)
 8008708:	2778      	movs	r7, #120	; 0x78
 800870a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	6829      	ldr	r1, [r5, #0]
 8008712:	061f      	lsls	r7, r3, #24
 8008714:	f851 6b04 	ldr.w	r6, [r1], #4
 8008718:	d402      	bmi.n	8008720 <_printf_i+0x18c>
 800871a:	065f      	lsls	r7, r3, #25
 800871c:	bf48      	it	mi
 800871e:	b2b6      	uxthmi	r6, r6
 8008720:	07df      	lsls	r7, r3, #31
 8008722:	bf48      	it	mi
 8008724:	f043 0320 	orrmi.w	r3, r3, #32
 8008728:	6029      	str	r1, [r5, #0]
 800872a:	bf48      	it	mi
 800872c:	6023      	strmi	r3, [r4, #0]
 800872e:	b91e      	cbnz	r6, 8008738 <_printf_i+0x1a4>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	f023 0320 	bic.w	r3, r3, #32
 8008736:	6023      	str	r3, [r4, #0]
 8008738:	2310      	movs	r3, #16
 800873a:	e7a7      	b.n	800868c <_printf_i+0xf8>
 800873c:	4824      	ldr	r0, [pc, #144]	; (80087d0 <_printf_i+0x23c>)
 800873e:	e7e4      	b.n	800870a <_printf_i+0x176>
 8008740:	4615      	mov	r5, r2
 8008742:	e7bd      	b.n	80086c0 <_printf_i+0x12c>
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	6826      	ldr	r6, [r4, #0]
 8008748:	6961      	ldr	r1, [r4, #20]
 800874a:	1d18      	adds	r0, r3, #4
 800874c:	6028      	str	r0, [r5, #0]
 800874e:	0635      	lsls	r5, r6, #24
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	d501      	bpl.n	8008758 <_printf_i+0x1c4>
 8008754:	6019      	str	r1, [r3, #0]
 8008756:	e002      	b.n	800875e <_printf_i+0x1ca>
 8008758:	0670      	lsls	r0, r6, #25
 800875a:	d5fb      	bpl.n	8008754 <_printf_i+0x1c0>
 800875c:	8019      	strh	r1, [r3, #0]
 800875e:	2300      	movs	r3, #0
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	4615      	mov	r5, r2
 8008764:	e7bc      	b.n	80086e0 <_printf_i+0x14c>
 8008766:	682b      	ldr	r3, [r5, #0]
 8008768:	1d1a      	adds	r2, r3, #4
 800876a:	602a      	str	r2, [r5, #0]
 800876c:	681d      	ldr	r5, [r3, #0]
 800876e:	6862      	ldr	r2, [r4, #4]
 8008770:	2100      	movs	r1, #0
 8008772:	4628      	mov	r0, r5
 8008774:	f7f7 fd2c 	bl	80001d0 <memchr>
 8008778:	b108      	cbz	r0, 800877e <_printf_i+0x1ea>
 800877a:	1b40      	subs	r0, r0, r5
 800877c:	6060      	str	r0, [r4, #4]
 800877e:	6863      	ldr	r3, [r4, #4]
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	2300      	movs	r3, #0
 8008784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008788:	e7aa      	b.n	80086e0 <_printf_i+0x14c>
 800878a:	6923      	ldr	r3, [r4, #16]
 800878c:	462a      	mov	r2, r5
 800878e:	4649      	mov	r1, r9
 8008790:	4640      	mov	r0, r8
 8008792:	47d0      	blx	sl
 8008794:	3001      	adds	r0, #1
 8008796:	d0ad      	beq.n	80086f4 <_printf_i+0x160>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	079b      	lsls	r3, r3, #30
 800879c:	d413      	bmi.n	80087c6 <_printf_i+0x232>
 800879e:	68e0      	ldr	r0, [r4, #12]
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	4298      	cmp	r0, r3
 80087a4:	bfb8      	it	lt
 80087a6:	4618      	movlt	r0, r3
 80087a8:	e7a6      	b.n	80086f8 <_printf_i+0x164>
 80087aa:	2301      	movs	r3, #1
 80087ac:	4632      	mov	r2, r6
 80087ae:	4649      	mov	r1, r9
 80087b0:	4640      	mov	r0, r8
 80087b2:	47d0      	blx	sl
 80087b4:	3001      	adds	r0, #1
 80087b6:	d09d      	beq.n	80086f4 <_printf_i+0x160>
 80087b8:	3501      	adds	r5, #1
 80087ba:	68e3      	ldr	r3, [r4, #12]
 80087bc:	9903      	ldr	r1, [sp, #12]
 80087be:	1a5b      	subs	r3, r3, r1
 80087c0:	42ab      	cmp	r3, r5
 80087c2:	dcf2      	bgt.n	80087aa <_printf_i+0x216>
 80087c4:	e7eb      	b.n	800879e <_printf_i+0x20a>
 80087c6:	2500      	movs	r5, #0
 80087c8:	f104 0619 	add.w	r6, r4, #25
 80087cc:	e7f5      	b.n	80087ba <_printf_i+0x226>
 80087ce:	bf00      	nop
 80087d0:	0800dc26 	.word	0x0800dc26
 80087d4:	0800dc37 	.word	0x0800dc37

080087d8 <std>:
 80087d8:	2300      	movs	r3, #0
 80087da:	b510      	push	{r4, lr}
 80087dc:	4604      	mov	r4, r0
 80087de:	e9c0 3300 	strd	r3, r3, [r0]
 80087e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087e6:	6083      	str	r3, [r0, #8]
 80087e8:	8181      	strh	r1, [r0, #12]
 80087ea:	6643      	str	r3, [r0, #100]	; 0x64
 80087ec:	81c2      	strh	r2, [r0, #14]
 80087ee:	6183      	str	r3, [r0, #24]
 80087f0:	4619      	mov	r1, r3
 80087f2:	2208      	movs	r2, #8
 80087f4:	305c      	adds	r0, #92	; 0x5c
 80087f6:	f000 f914 	bl	8008a22 <memset>
 80087fa:	4b0d      	ldr	r3, [pc, #52]	; (8008830 <std+0x58>)
 80087fc:	6263      	str	r3, [r4, #36]	; 0x24
 80087fe:	4b0d      	ldr	r3, [pc, #52]	; (8008834 <std+0x5c>)
 8008800:	62a3      	str	r3, [r4, #40]	; 0x28
 8008802:	4b0d      	ldr	r3, [pc, #52]	; (8008838 <std+0x60>)
 8008804:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008806:	4b0d      	ldr	r3, [pc, #52]	; (800883c <std+0x64>)
 8008808:	6323      	str	r3, [r4, #48]	; 0x30
 800880a:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <std+0x68>)
 800880c:	6224      	str	r4, [r4, #32]
 800880e:	429c      	cmp	r4, r3
 8008810:	d006      	beq.n	8008820 <std+0x48>
 8008812:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008816:	4294      	cmp	r4, r2
 8008818:	d002      	beq.n	8008820 <std+0x48>
 800881a:	33d0      	adds	r3, #208	; 0xd0
 800881c:	429c      	cmp	r4, r3
 800881e:	d105      	bne.n	800882c <std+0x54>
 8008820:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008828:	f000 b986 	b.w	8008b38 <__retarget_lock_init_recursive>
 800882c:	bd10      	pop	{r4, pc}
 800882e:	bf00      	nop
 8008830:	0800899d 	.word	0x0800899d
 8008834:	080089bf 	.word	0x080089bf
 8008838:	080089f7 	.word	0x080089f7
 800883c:	08008a1b 	.word	0x08008a1b
 8008840:	20000550 	.word	0x20000550

08008844 <stdio_exit_handler>:
 8008844:	4a02      	ldr	r2, [pc, #8]	; (8008850 <stdio_exit_handler+0xc>)
 8008846:	4903      	ldr	r1, [pc, #12]	; (8008854 <stdio_exit_handler+0x10>)
 8008848:	4803      	ldr	r0, [pc, #12]	; (8008858 <stdio_exit_handler+0x14>)
 800884a:	f000 b869 	b.w	8008920 <_fwalk_sglue>
 800884e:	bf00      	nop
 8008850:	20000014 	.word	0x20000014
 8008854:	0800a4e9 	.word	0x0800a4e9
 8008858:	20000020 	.word	0x20000020

0800885c <cleanup_stdio>:
 800885c:	6841      	ldr	r1, [r0, #4]
 800885e:	4b0c      	ldr	r3, [pc, #48]	; (8008890 <cleanup_stdio+0x34>)
 8008860:	4299      	cmp	r1, r3
 8008862:	b510      	push	{r4, lr}
 8008864:	4604      	mov	r4, r0
 8008866:	d001      	beq.n	800886c <cleanup_stdio+0x10>
 8008868:	f001 fe3e 	bl	800a4e8 <_fflush_r>
 800886c:	68a1      	ldr	r1, [r4, #8]
 800886e:	4b09      	ldr	r3, [pc, #36]	; (8008894 <cleanup_stdio+0x38>)
 8008870:	4299      	cmp	r1, r3
 8008872:	d002      	beq.n	800887a <cleanup_stdio+0x1e>
 8008874:	4620      	mov	r0, r4
 8008876:	f001 fe37 	bl	800a4e8 <_fflush_r>
 800887a:	68e1      	ldr	r1, [r4, #12]
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <cleanup_stdio+0x3c>)
 800887e:	4299      	cmp	r1, r3
 8008880:	d004      	beq.n	800888c <cleanup_stdio+0x30>
 8008882:	4620      	mov	r0, r4
 8008884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008888:	f001 be2e 	b.w	800a4e8 <_fflush_r>
 800888c:	bd10      	pop	{r4, pc}
 800888e:	bf00      	nop
 8008890:	20000550 	.word	0x20000550
 8008894:	200005b8 	.word	0x200005b8
 8008898:	20000620 	.word	0x20000620

0800889c <global_stdio_init.part.0>:
 800889c:	b510      	push	{r4, lr}
 800889e:	4b0b      	ldr	r3, [pc, #44]	; (80088cc <global_stdio_init.part.0+0x30>)
 80088a0:	4c0b      	ldr	r4, [pc, #44]	; (80088d0 <global_stdio_init.part.0+0x34>)
 80088a2:	4a0c      	ldr	r2, [pc, #48]	; (80088d4 <global_stdio_init.part.0+0x38>)
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	4620      	mov	r0, r4
 80088a8:	2200      	movs	r2, #0
 80088aa:	2104      	movs	r1, #4
 80088ac:	f7ff ff94 	bl	80087d8 <std>
 80088b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80088b4:	2201      	movs	r2, #1
 80088b6:	2109      	movs	r1, #9
 80088b8:	f7ff ff8e 	bl	80087d8 <std>
 80088bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80088c0:	2202      	movs	r2, #2
 80088c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c6:	2112      	movs	r1, #18
 80088c8:	f7ff bf86 	b.w	80087d8 <std>
 80088cc:	20000688 	.word	0x20000688
 80088d0:	20000550 	.word	0x20000550
 80088d4:	08008845 	.word	0x08008845

080088d8 <__sfp_lock_acquire>:
 80088d8:	4801      	ldr	r0, [pc, #4]	; (80088e0 <__sfp_lock_acquire+0x8>)
 80088da:	f000 b92e 	b.w	8008b3a <__retarget_lock_acquire_recursive>
 80088de:	bf00      	nop
 80088e0:	20000691 	.word	0x20000691

080088e4 <__sfp_lock_release>:
 80088e4:	4801      	ldr	r0, [pc, #4]	; (80088ec <__sfp_lock_release+0x8>)
 80088e6:	f000 b929 	b.w	8008b3c <__retarget_lock_release_recursive>
 80088ea:	bf00      	nop
 80088ec:	20000691 	.word	0x20000691

080088f0 <__sinit>:
 80088f0:	b510      	push	{r4, lr}
 80088f2:	4604      	mov	r4, r0
 80088f4:	f7ff fff0 	bl	80088d8 <__sfp_lock_acquire>
 80088f8:	6a23      	ldr	r3, [r4, #32]
 80088fa:	b11b      	cbz	r3, 8008904 <__sinit+0x14>
 80088fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008900:	f7ff bff0 	b.w	80088e4 <__sfp_lock_release>
 8008904:	4b04      	ldr	r3, [pc, #16]	; (8008918 <__sinit+0x28>)
 8008906:	6223      	str	r3, [r4, #32]
 8008908:	4b04      	ldr	r3, [pc, #16]	; (800891c <__sinit+0x2c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1f5      	bne.n	80088fc <__sinit+0xc>
 8008910:	f7ff ffc4 	bl	800889c <global_stdio_init.part.0>
 8008914:	e7f2      	b.n	80088fc <__sinit+0xc>
 8008916:	bf00      	nop
 8008918:	0800885d 	.word	0x0800885d
 800891c:	20000688 	.word	0x20000688

08008920 <_fwalk_sglue>:
 8008920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008924:	4607      	mov	r7, r0
 8008926:	4688      	mov	r8, r1
 8008928:	4614      	mov	r4, r2
 800892a:	2600      	movs	r6, #0
 800892c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008930:	f1b9 0901 	subs.w	r9, r9, #1
 8008934:	d505      	bpl.n	8008942 <_fwalk_sglue+0x22>
 8008936:	6824      	ldr	r4, [r4, #0]
 8008938:	2c00      	cmp	r4, #0
 800893a:	d1f7      	bne.n	800892c <_fwalk_sglue+0xc>
 800893c:	4630      	mov	r0, r6
 800893e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008942:	89ab      	ldrh	r3, [r5, #12]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d907      	bls.n	8008958 <_fwalk_sglue+0x38>
 8008948:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800894c:	3301      	adds	r3, #1
 800894e:	d003      	beq.n	8008958 <_fwalk_sglue+0x38>
 8008950:	4629      	mov	r1, r5
 8008952:	4638      	mov	r0, r7
 8008954:	47c0      	blx	r8
 8008956:	4306      	orrs	r6, r0
 8008958:	3568      	adds	r5, #104	; 0x68
 800895a:	e7e9      	b.n	8008930 <_fwalk_sglue+0x10>

0800895c <siprintf>:
 800895c:	b40e      	push	{r1, r2, r3}
 800895e:	b500      	push	{lr}
 8008960:	b09c      	sub	sp, #112	; 0x70
 8008962:	ab1d      	add	r3, sp, #116	; 0x74
 8008964:	9002      	str	r0, [sp, #8]
 8008966:	9006      	str	r0, [sp, #24]
 8008968:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800896c:	4809      	ldr	r0, [pc, #36]	; (8008994 <siprintf+0x38>)
 800896e:	9107      	str	r1, [sp, #28]
 8008970:	9104      	str	r1, [sp, #16]
 8008972:	4909      	ldr	r1, [pc, #36]	; (8008998 <siprintf+0x3c>)
 8008974:	f853 2b04 	ldr.w	r2, [r3], #4
 8008978:	9105      	str	r1, [sp, #20]
 800897a:	6800      	ldr	r0, [r0, #0]
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	a902      	add	r1, sp, #8
 8008980:	f001 fc2e 	bl	800a1e0 <_svfiprintf_r>
 8008984:	9b02      	ldr	r3, [sp, #8]
 8008986:	2200      	movs	r2, #0
 8008988:	701a      	strb	r2, [r3, #0]
 800898a:	b01c      	add	sp, #112	; 0x70
 800898c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008990:	b003      	add	sp, #12
 8008992:	4770      	bx	lr
 8008994:	2000006c 	.word	0x2000006c
 8008998:	ffff0208 	.word	0xffff0208

0800899c <__sread>:
 800899c:	b510      	push	{r4, lr}
 800899e:	460c      	mov	r4, r1
 80089a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a4:	f000 f87a 	bl	8008a9c <_read_r>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	bfab      	itete	ge
 80089ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089ae:	89a3      	ldrhlt	r3, [r4, #12]
 80089b0:	181b      	addge	r3, r3, r0
 80089b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089b6:	bfac      	ite	ge
 80089b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80089ba:	81a3      	strhlt	r3, [r4, #12]
 80089bc:	bd10      	pop	{r4, pc}

080089be <__swrite>:
 80089be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c2:	461f      	mov	r7, r3
 80089c4:	898b      	ldrh	r3, [r1, #12]
 80089c6:	05db      	lsls	r3, r3, #23
 80089c8:	4605      	mov	r5, r0
 80089ca:	460c      	mov	r4, r1
 80089cc:	4616      	mov	r6, r2
 80089ce:	d505      	bpl.n	80089dc <__swrite+0x1e>
 80089d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d4:	2302      	movs	r3, #2
 80089d6:	2200      	movs	r2, #0
 80089d8:	f000 f84e 	bl	8008a78 <_lseek_r>
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089e6:	81a3      	strh	r3, [r4, #12]
 80089e8:	4632      	mov	r2, r6
 80089ea:	463b      	mov	r3, r7
 80089ec:	4628      	mov	r0, r5
 80089ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089f2:	f000 b865 	b.w	8008ac0 <_write_r>

080089f6 <__sseek>:
 80089f6:	b510      	push	{r4, lr}
 80089f8:	460c      	mov	r4, r1
 80089fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089fe:	f000 f83b 	bl	8008a78 <_lseek_r>
 8008a02:	1c43      	adds	r3, r0, #1
 8008a04:	89a3      	ldrh	r3, [r4, #12]
 8008a06:	bf15      	itete	ne
 8008a08:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a12:	81a3      	strheq	r3, [r4, #12]
 8008a14:	bf18      	it	ne
 8008a16:	81a3      	strhne	r3, [r4, #12]
 8008a18:	bd10      	pop	{r4, pc}

08008a1a <__sclose>:
 8008a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1e:	f000 b81b 	b.w	8008a58 <_close_r>

08008a22 <memset>:
 8008a22:	4402      	add	r2, r0
 8008a24:	4603      	mov	r3, r0
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d100      	bne.n	8008a2c <memset+0xa>
 8008a2a:	4770      	bx	lr
 8008a2c:	f803 1b01 	strb.w	r1, [r3], #1
 8008a30:	e7f9      	b.n	8008a26 <memset+0x4>

08008a32 <strcat>:
 8008a32:	b510      	push	{r4, lr}
 8008a34:	4602      	mov	r2, r0
 8008a36:	7814      	ldrb	r4, [r2, #0]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	3201      	adds	r2, #1
 8008a3c:	2c00      	cmp	r4, #0
 8008a3e:	d1fa      	bne.n	8008a36 <strcat+0x4>
 8008a40:	3b01      	subs	r3, #1
 8008a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a4a:	2a00      	cmp	r2, #0
 8008a4c:	d1f9      	bne.n	8008a42 <strcat+0x10>
 8008a4e:	bd10      	pop	{r4, pc}

08008a50 <_localeconv_r>:
 8008a50:	4800      	ldr	r0, [pc, #0]	; (8008a54 <_localeconv_r+0x4>)
 8008a52:	4770      	bx	lr
 8008a54:	20000160 	.word	0x20000160

08008a58 <_close_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d06      	ldr	r5, [pc, #24]	; (8008a74 <_close_r+0x1c>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7f9 fe85 	bl	8002772 <_close>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_close_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_close_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	2000068c 	.word	0x2000068c

08008a78 <_lseek_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d07      	ldr	r5, [pc, #28]	; (8008a98 <_lseek_r+0x20>)
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	4608      	mov	r0, r1
 8008a80:	4611      	mov	r1, r2
 8008a82:	2200      	movs	r2, #0
 8008a84:	602a      	str	r2, [r5, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	f7f9 fe9a 	bl	80027c0 <_lseek>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d102      	bne.n	8008a96 <_lseek_r+0x1e>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	b103      	cbz	r3, 8008a96 <_lseek_r+0x1e>
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	2000068c 	.word	0x2000068c

08008a9c <_read_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d07      	ldr	r5, [pc, #28]	; (8008abc <_read_r+0x20>)
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	4608      	mov	r0, r1
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	602a      	str	r2, [r5, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f7f9 fe28 	bl	8002700 <_read>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d102      	bne.n	8008aba <_read_r+0x1e>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b103      	cbz	r3, 8008aba <_read_r+0x1e>
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	2000068c 	.word	0x2000068c

08008ac0 <_write_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d07      	ldr	r5, [pc, #28]	; (8008ae0 <_write_r+0x20>)
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	4608      	mov	r0, r1
 8008ac8:	4611      	mov	r1, r2
 8008aca:	2200      	movs	r2, #0
 8008acc:	602a      	str	r2, [r5, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f7f9 fe33 	bl	800273a <_write>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_write_r+0x1e>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_write_r+0x1e>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	2000068c 	.word	0x2000068c

08008ae4 <__errno>:
 8008ae4:	4b01      	ldr	r3, [pc, #4]	; (8008aec <__errno+0x8>)
 8008ae6:	6818      	ldr	r0, [r3, #0]
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	2000006c 	.word	0x2000006c

08008af0 <__libc_init_array>:
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	4d0d      	ldr	r5, [pc, #52]	; (8008b28 <__libc_init_array+0x38>)
 8008af4:	4c0d      	ldr	r4, [pc, #52]	; (8008b2c <__libc_init_array+0x3c>)
 8008af6:	1b64      	subs	r4, r4, r5
 8008af8:	10a4      	asrs	r4, r4, #2
 8008afa:	2600      	movs	r6, #0
 8008afc:	42a6      	cmp	r6, r4
 8008afe:	d109      	bne.n	8008b14 <__libc_init_array+0x24>
 8008b00:	4d0b      	ldr	r5, [pc, #44]	; (8008b30 <__libc_init_array+0x40>)
 8008b02:	4c0c      	ldr	r4, [pc, #48]	; (8008b34 <__libc_init_array+0x44>)
 8008b04:	f002 f894 	bl	800ac30 <_init>
 8008b08:	1b64      	subs	r4, r4, r5
 8008b0a:	10a4      	asrs	r4, r4, #2
 8008b0c:	2600      	movs	r6, #0
 8008b0e:	42a6      	cmp	r6, r4
 8008b10:	d105      	bne.n	8008b1e <__libc_init_array+0x2e>
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b18:	4798      	blx	r3
 8008b1a:	3601      	adds	r6, #1
 8008b1c:	e7ee      	b.n	8008afc <__libc_init_array+0xc>
 8008b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b22:	4798      	blx	r3
 8008b24:	3601      	adds	r6, #1
 8008b26:	e7f2      	b.n	8008b0e <__libc_init_array+0x1e>
 8008b28:	0800df8c 	.word	0x0800df8c
 8008b2c:	0800df8c 	.word	0x0800df8c
 8008b30:	0800df8c 	.word	0x0800df8c
 8008b34:	0800df90 	.word	0x0800df90

08008b38 <__retarget_lock_init_recursive>:
 8008b38:	4770      	bx	lr

08008b3a <__retarget_lock_acquire_recursive>:
 8008b3a:	4770      	bx	lr

08008b3c <__retarget_lock_release_recursive>:
 8008b3c:	4770      	bx	lr

08008b3e <quorem>:
 8008b3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b42:	6903      	ldr	r3, [r0, #16]
 8008b44:	690c      	ldr	r4, [r1, #16]
 8008b46:	42a3      	cmp	r3, r4
 8008b48:	4607      	mov	r7, r0
 8008b4a:	db7e      	blt.n	8008c4a <quorem+0x10c>
 8008b4c:	3c01      	subs	r4, #1
 8008b4e:	f101 0814 	add.w	r8, r1, #20
 8008b52:	f100 0514 	add.w	r5, r0, #20
 8008b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b5a:	9301      	str	r3, [sp, #4]
 8008b5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b64:	3301      	adds	r3, #1
 8008b66:	429a      	cmp	r2, r3
 8008b68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b70:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b74:	d331      	bcc.n	8008bda <quorem+0x9c>
 8008b76:	f04f 0e00 	mov.w	lr, #0
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	46ac      	mov	ip, r5
 8008b7e:	46f2      	mov	sl, lr
 8008b80:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b84:	b293      	uxth	r3, r2
 8008b86:	fb06 e303 	mla	r3, r6, r3, lr
 8008b8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b8e:	0c1a      	lsrs	r2, r3, #16
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	ebaa 0303 	sub.w	r3, sl, r3
 8008b96:	f8dc a000 	ldr.w	sl, [ip]
 8008b9a:	fa13 f38a 	uxtah	r3, r3, sl
 8008b9e:	fb06 220e 	mla	r2, r6, lr, r2
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	9b00      	ldr	r3, [sp, #0]
 8008ba6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008baa:	b292      	uxth	r2, r2
 8008bac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008bb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bb4:	f8bd 3000 	ldrh.w	r3, [sp]
 8008bb8:	4581      	cmp	r9, r0
 8008bba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bbe:	f84c 3b04 	str.w	r3, [ip], #4
 8008bc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008bc6:	d2db      	bcs.n	8008b80 <quorem+0x42>
 8008bc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8008bcc:	b92b      	cbnz	r3, 8008bda <quorem+0x9c>
 8008bce:	9b01      	ldr	r3, [sp, #4]
 8008bd0:	3b04      	subs	r3, #4
 8008bd2:	429d      	cmp	r5, r3
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	d32c      	bcc.n	8008c32 <quorem+0xf4>
 8008bd8:	613c      	str	r4, [r7, #16]
 8008bda:	4638      	mov	r0, r7
 8008bdc:	f001 f9a6 	bl	8009f2c <__mcmp>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	db22      	blt.n	8008c2a <quorem+0xec>
 8008be4:	3601      	adds	r6, #1
 8008be6:	4629      	mov	r1, r5
 8008be8:	2000      	movs	r0, #0
 8008bea:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bee:	f8d1 c000 	ldr.w	ip, [r1]
 8008bf2:	b293      	uxth	r3, r2
 8008bf4:	1ac3      	subs	r3, r0, r3
 8008bf6:	0c12      	lsrs	r2, r2, #16
 8008bf8:	fa13 f38c 	uxtah	r3, r3, ip
 8008bfc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008c00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c0a:	45c1      	cmp	r9, r8
 8008c0c:	f841 3b04 	str.w	r3, [r1], #4
 8008c10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c14:	d2e9      	bcs.n	8008bea <quorem+0xac>
 8008c16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c1e:	b922      	cbnz	r2, 8008c2a <quorem+0xec>
 8008c20:	3b04      	subs	r3, #4
 8008c22:	429d      	cmp	r5, r3
 8008c24:	461a      	mov	r2, r3
 8008c26:	d30a      	bcc.n	8008c3e <quorem+0x100>
 8008c28:	613c      	str	r4, [r7, #16]
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	b003      	add	sp, #12
 8008c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c32:	6812      	ldr	r2, [r2, #0]
 8008c34:	3b04      	subs	r3, #4
 8008c36:	2a00      	cmp	r2, #0
 8008c38:	d1ce      	bne.n	8008bd8 <quorem+0x9a>
 8008c3a:	3c01      	subs	r4, #1
 8008c3c:	e7c9      	b.n	8008bd2 <quorem+0x94>
 8008c3e:	6812      	ldr	r2, [r2, #0]
 8008c40:	3b04      	subs	r3, #4
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	d1f0      	bne.n	8008c28 <quorem+0xea>
 8008c46:	3c01      	subs	r4, #1
 8008c48:	e7eb      	b.n	8008c22 <quorem+0xe4>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	e7ee      	b.n	8008c2c <quorem+0xee>
	...

08008c50 <_dtoa_r>:
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	ed2d 8b04 	vpush	{d8-d9}
 8008c58:	69c5      	ldr	r5, [r0, #28]
 8008c5a:	b093      	sub	sp, #76	; 0x4c
 8008c5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008c60:	ec57 6b10 	vmov	r6, r7, d0
 8008c64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c68:	9107      	str	r1, [sp, #28]
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	920a      	str	r2, [sp, #40]	; 0x28
 8008c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8008c70:	b975      	cbnz	r5, 8008c90 <_dtoa_r+0x40>
 8008c72:	2010      	movs	r0, #16
 8008c74:	f000 fe2a 	bl	80098cc <malloc>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	61e0      	str	r0, [r4, #28]
 8008c7c:	b920      	cbnz	r0, 8008c88 <_dtoa_r+0x38>
 8008c7e:	4bae      	ldr	r3, [pc, #696]	; (8008f38 <_dtoa_r+0x2e8>)
 8008c80:	21ef      	movs	r1, #239	; 0xef
 8008c82:	48ae      	ldr	r0, [pc, #696]	; (8008f3c <_dtoa_r+0x2ec>)
 8008c84:	f001 fc90 	bl	800a5a8 <__assert_func>
 8008c88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c8c:	6005      	str	r5, [r0, #0]
 8008c8e:	60c5      	str	r5, [r0, #12]
 8008c90:	69e3      	ldr	r3, [r4, #28]
 8008c92:	6819      	ldr	r1, [r3, #0]
 8008c94:	b151      	cbz	r1, 8008cac <_dtoa_r+0x5c>
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	604a      	str	r2, [r1, #4]
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	4093      	lsls	r3, r2
 8008c9e:	608b      	str	r3, [r1, #8]
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f000 ff07 	bl	8009ab4 <_Bfree>
 8008ca6:	69e3      	ldr	r3, [r4, #28]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	1e3b      	subs	r3, r7, #0
 8008cae:	bfbb      	ittet	lt
 8008cb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008cb4:	9303      	strlt	r3, [sp, #12]
 8008cb6:	2300      	movge	r3, #0
 8008cb8:	2201      	movlt	r2, #1
 8008cba:	bfac      	ite	ge
 8008cbc:	f8c8 3000 	strge.w	r3, [r8]
 8008cc0:	f8c8 2000 	strlt.w	r2, [r8]
 8008cc4:	4b9e      	ldr	r3, [pc, #632]	; (8008f40 <_dtoa_r+0x2f0>)
 8008cc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008cca:	ea33 0308 	bics.w	r3, r3, r8
 8008cce:	d11b      	bne.n	8008d08 <_dtoa_r+0xb8>
 8008cd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008cdc:	4333      	orrs	r3, r6
 8008cde:	f000 8593 	beq.w	8009808 <_dtoa_r+0xbb8>
 8008ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ce4:	b963      	cbnz	r3, 8008d00 <_dtoa_r+0xb0>
 8008ce6:	4b97      	ldr	r3, [pc, #604]	; (8008f44 <_dtoa_r+0x2f4>)
 8008ce8:	e027      	b.n	8008d3a <_dtoa_r+0xea>
 8008cea:	4b97      	ldr	r3, [pc, #604]	; (8008f48 <_dtoa_r+0x2f8>)
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	3308      	adds	r3, #8
 8008cf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	9800      	ldr	r0, [sp, #0]
 8008cf6:	b013      	add	sp, #76	; 0x4c
 8008cf8:	ecbd 8b04 	vpop	{d8-d9}
 8008cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d00:	4b90      	ldr	r3, [pc, #576]	; (8008f44 <_dtoa_r+0x2f4>)
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	3303      	adds	r3, #3
 8008d06:	e7f3      	b.n	8008cf0 <_dtoa_r+0xa0>
 8008d08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	ec51 0b17 	vmov	r0, r1, d7
 8008d12:	eeb0 8a47 	vmov.f32	s16, s14
 8008d16:	eef0 8a67 	vmov.f32	s17, s15
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f7f7 fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d20:	4681      	mov	r9, r0
 8008d22:	b160      	cbz	r0, 8008d3e <_dtoa_r+0xee>
 8008d24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d26:	2301      	movs	r3, #1
 8008d28:	6013      	str	r3, [r2, #0]
 8008d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 8568 	beq.w	8009802 <_dtoa_r+0xbb2>
 8008d32:	4b86      	ldr	r3, [pc, #536]	; (8008f4c <_dtoa_r+0x2fc>)
 8008d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	e7da      	b.n	8008cf4 <_dtoa_r+0xa4>
 8008d3e:	aa10      	add	r2, sp, #64	; 0x40
 8008d40:	a911      	add	r1, sp, #68	; 0x44
 8008d42:	4620      	mov	r0, r4
 8008d44:	eeb0 0a48 	vmov.f32	s0, s16
 8008d48:	eef0 0a68 	vmov.f32	s1, s17
 8008d4c:	f001 f994 	bl	800a078 <__d2b>
 8008d50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008d54:	4682      	mov	sl, r0
 8008d56:	2d00      	cmp	r5, #0
 8008d58:	d07f      	beq.n	8008e5a <_dtoa_r+0x20a>
 8008d5a:	ee18 3a90 	vmov	r3, s17
 8008d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008d66:	ec51 0b18 	vmov	r0, r1, d8
 8008d6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008d76:	4619      	mov	r1, r3
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4b75      	ldr	r3, [pc, #468]	; (8008f50 <_dtoa_r+0x300>)
 8008d7c:	f7f7 fa84 	bl	8000288 <__aeabi_dsub>
 8008d80:	a367      	add	r3, pc, #412	; (adr r3, 8008f20 <_dtoa_r+0x2d0>)
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	f7f7 fc37 	bl	80005f8 <__aeabi_dmul>
 8008d8a:	a367      	add	r3, pc, #412	; (adr r3, 8008f28 <_dtoa_r+0x2d8>)
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	f7f7 fa7c 	bl	800028c <__adddf3>
 8008d94:	4606      	mov	r6, r0
 8008d96:	4628      	mov	r0, r5
 8008d98:	460f      	mov	r7, r1
 8008d9a:	f7f7 fbc3 	bl	8000524 <__aeabi_i2d>
 8008d9e:	a364      	add	r3, pc, #400	; (adr r3, 8008f30 <_dtoa_r+0x2e0>)
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	f7f7 fc28 	bl	80005f8 <__aeabi_dmul>
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	4630      	mov	r0, r6
 8008dae:	4639      	mov	r1, r7
 8008db0:	f7f7 fa6c 	bl	800028c <__adddf3>
 8008db4:	4606      	mov	r6, r0
 8008db6:	460f      	mov	r7, r1
 8008db8:	f7f7 fece 	bl	8000b58 <__aeabi_d2iz>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4683      	mov	fp, r0
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	4639      	mov	r1, r7
 8008dc6:	f7f7 fe89 	bl	8000adc <__aeabi_dcmplt>
 8008dca:	b148      	cbz	r0, 8008de0 <_dtoa_r+0x190>
 8008dcc:	4658      	mov	r0, fp
 8008dce:	f7f7 fba9 	bl	8000524 <__aeabi_i2d>
 8008dd2:	4632      	mov	r2, r6
 8008dd4:	463b      	mov	r3, r7
 8008dd6:	f7f7 fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dda:	b908      	cbnz	r0, 8008de0 <_dtoa_r+0x190>
 8008ddc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008de0:	f1bb 0f16 	cmp.w	fp, #22
 8008de4:	d857      	bhi.n	8008e96 <_dtoa_r+0x246>
 8008de6:	4b5b      	ldr	r3, [pc, #364]	; (8008f54 <_dtoa_r+0x304>)
 8008de8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df0:	ec51 0b18 	vmov	r0, r1, d8
 8008df4:	f7f7 fe72 	bl	8000adc <__aeabi_dcmplt>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d04e      	beq.n	8008e9a <_dtoa_r+0x24a>
 8008dfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e00:	2300      	movs	r3, #0
 8008e02:	930c      	str	r3, [sp, #48]	; 0x30
 8008e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e06:	1b5b      	subs	r3, r3, r5
 8008e08:	1e5a      	subs	r2, r3, #1
 8008e0a:	bf45      	ittet	mi
 8008e0c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008e10:	9305      	strmi	r3, [sp, #20]
 8008e12:	2300      	movpl	r3, #0
 8008e14:	2300      	movmi	r3, #0
 8008e16:	9206      	str	r2, [sp, #24]
 8008e18:	bf54      	ite	pl
 8008e1a:	9305      	strpl	r3, [sp, #20]
 8008e1c:	9306      	strmi	r3, [sp, #24]
 8008e1e:	f1bb 0f00 	cmp.w	fp, #0
 8008e22:	db3c      	blt.n	8008e9e <_dtoa_r+0x24e>
 8008e24:	9b06      	ldr	r3, [sp, #24]
 8008e26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008e2a:	445b      	add	r3, fp
 8008e2c:	9306      	str	r3, [sp, #24]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9308      	str	r3, [sp, #32]
 8008e32:	9b07      	ldr	r3, [sp, #28]
 8008e34:	2b09      	cmp	r3, #9
 8008e36:	d868      	bhi.n	8008f0a <_dtoa_r+0x2ba>
 8008e38:	2b05      	cmp	r3, #5
 8008e3a:	bfc4      	itt	gt
 8008e3c:	3b04      	subgt	r3, #4
 8008e3e:	9307      	strgt	r3, [sp, #28]
 8008e40:	9b07      	ldr	r3, [sp, #28]
 8008e42:	f1a3 0302 	sub.w	r3, r3, #2
 8008e46:	bfcc      	ite	gt
 8008e48:	2500      	movgt	r5, #0
 8008e4a:	2501      	movle	r5, #1
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	f200 8085 	bhi.w	8008f5c <_dtoa_r+0x30c>
 8008e52:	e8df f003 	tbb	[pc, r3]
 8008e56:	3b2e      	.short	0x3b2e
 8008e58:	5839      	.short	0x5839
 8008e5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e5e:	441d      	add	r5, r3
 8008e60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e64:	2b20      	cmp	r3, #32
 8008e66:	bfc1      	itttt	gt
 8008e68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008e70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008e74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008e78:	bfd6      	itet	le
 8008e7a:	f1c3 0320 	rsble	r3, r3, #32
 8008e7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008e82:	fa06 f003 	lslle.w	r0, r6, r3
 8008e86:	f7f7 fb3d 	bl	8000504 <__aeabi_ui2d>
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008e90:	3d01      	subs	r5, #1
 8008e92:	920e      	str	r2, [sp, #56]	; 0x38
 8008e94:	e76f      	b.n	8008d76 <_dtoa_r+0x126>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e7b3      	b.n	8008e02 <_dtoa_r+0x1b2>
 8008e9a:	900c      	str	r0, [sp, #48]	; 0x30
 8008e9c:	e7b2      	b.n	8008e04 <_dtoa_r+0x1b4>
 8008e9e:	9b05      	ldr	r3, [sp, #20]
 8008ea0:	eba3 030b 	sub.w	r3, r3, fp
 8008ea4:	9305      	str	r3, [sp, #20]
 8008ea6:	f1cb 0300 	rsb	r3, fp, #0
 8008eaa:	9308      	str	r3, [sp, #32]
 8008eac:	2300      	movs	r3, #0
 8008eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eb0:	e7bf      	b.n	8008e32 <_dtoa_r+0x1e2>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	dc52      	bgt.n	8008f62 <_dtoa_r+0x312>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	9301      	str	r3, [sp, #4]
 8008ec0:	9304      	str	r3, [sp, #16]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	920a      	str	r2, [sp, #40]	; 0x28
 8008ec6:	e00b      	b.n	8008ee0 <_dtoa_r+0x290>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e7f3      	b.n	8008eb4 <_dtoa_r+0x264>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed2:	445b      	add	r3, fp
 8008ed4:	9301      	str	r3, [sp, #4]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	9304      	str	r3, [sp, #16]
 8008edc:	bfb8      	it	lt
 8008ede:	2301      	movlt	r3, #1
 8008ee0:	69e0      	ldr	r0, [r4, #28]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	2204      	movs	r2, #4
 8008ee6:	f102 0614 	add.w	r6, r2, #20
 8008eea:	429e      	cmp	r6, r3
 8008eec:	d93d      	bls.n	8008f6a <_dtoa_r+0x31a>
 8008eee:	6041      	str	r1, [r0, #4]
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 fd9f 	bl	8009a34 <_Balloc>
 8008ef6:	9000      	str	r0, [sp, #0]
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d139      	bne.n	8008f70 <_dtoa_r+0x320>
 8008efc:	4b16      	ldr	r3, [pc, #88]	; (8008f58 <_dtoa_r+0x308>)
 8008efe:	4602      	mov	r2, r0
 8008f00:	f240 11af 	movw	r1, #431	; 0x1af
 8008f04:	e6bd      	b.n	8008c82 <_dtoa_r+0x32>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e7e1      	b.n	8008ece <_dtoa_r+0x27e>
 8008f0a:	2501      	movs	r5, #1
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9307      	str	r3, [sp, #28]
 8008f10:	9509      	str	r5, [sp, #36]	; 0x24
 8008f12:	f04f 33ff 	mov.w	r3, #4294967295
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	9304      	str	r3, [sp, #16]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2312      	movs	r3, #18
 8008f1e:	e7d1      	b.n	8008ec4 <_dtoa_r+0x274>
 8008f20:	636f4361 	.word	0x636f4361
 8008f24:	3fd287a7 	.word	0x3fd287a7
 8008f28:	8b60c8b3 	.word	0x8b60c8b3
 8008f2c:	3fc68a28 	.word	0x3fc68a28
 8008f30:	509f79fb 	.word	0x509f79fb
 8008f34:	3fd34413 	.word	0x3fd34413
 8008f38:	0800dc55 	.word	0x0800dc55
 8008f3c:	0800dc6c 	.word	0x0800dc6c
 8008f40:	7ff00000 	.word	0x7ff00000
 8008f44:	0800dc51 	.word	0x0800dc51
 8008f48:	0800dc48 	.word	0x0800dc48
 8008f4c:	0800dc25 	.word	0x0800dc25
 8008f50:	3ff80000 	.word	0x3ff80000
 8008f54:	0800dd58 	.word	0x0800dd58
 8008f58:	0800dcc4 	.word	0x0800dcc4
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f60:	e7d7      	b.n	8008f12 <_dtoa_r+0x2c2>
 8008f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	9304      	str	r3, [sp, #16]
 8008f68:	e7ba      	b.n	8008ee0 <_dtoa_r+0x290>
 8008f6a:	3101      	adds	r1, #1
 8008f6c:	0052      	lsls	r2, r2, #1
 8008f6e:	e7ba      	b.n	8008ee6 <_dtoa_r+0x296>
 8008f70:	69e3      	ldr	r3, [r4, #28]
 8008f72:	9a00      	ldr	r2, [sp, #0]
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	9b04      	ldr	r3, [sp, #16]
 8008f78:	2b0e      	cmp	r3, #14
 8008f7a:	f200 80a8 	bhi.w	80090ce <_dtoa_r+0x47e>
 8008f7e:	2d00      	cmp	r5, #0
 8008f80:	f000 80a5 	beq.w	80090ce <_dtoa_r+0x47e>
 8008f84:	f1bb 0f00 	cmp.w	fp, #0
 8008f88:	dd38      	ble.n	8008ffc <_dtoa_r+0x3ac>
 8008f8a:	4bc0      	ldr	r3, [pc, #768]	; (800928c <_dtoa_r+0x63c>)
 8008f8c:	f00b 020f 	and.w	r2, fp, #15
 8008f90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008f98:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008f9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008fa0:	d019      	beq.n	8008fd6 <_dtoa_r+0x386>
 8008fa2:	4bbb      	ldr	r3, [pc, #748]	; (8009290 <_dtoa_r+0x640>)
 8008fa4:	ec51 0b18 	vmov	r0, r1, d8
 8008fa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fac:	f7f7 fc4e 	bl	800084c <__aeabi_ddiv>
 8008fb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fb4:	f008 080f 	and.w	r8, r8, #15
 8008fb8:	2503      	movs	r5, #3
 8008fba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009290 <_dtoa_r+0x640>
 8008fbe:	f1b8 0f00 	cmp.w	r8, #0
 8008fc2:	d10a      	bne.n	8008fda <_dtoa_r+0x38a>
 8008fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fc8:	4632      	mov	r2, r6
 8008fca:	463b      	mov	r3, r7
 8008fcc:	f7f7 fc3e 	bl	800084c <__aeabi_ddiv>
 8008fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fd4:	e02b      	b.n	800902e <_dtoa_r+0x3de>
 8008fd6:	2502      	movs	r5, #2
 8008fd8:	e7ef      	b.n	8008fba <_dtoa_r+0x36a>
 8008fda:	f018 0f01 	tst.w	r8, #1
 8008fde:	d008      	beq.n	8008ff2 <_dtoa_r+0x3a2>
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	4639      	mov	r1, r7
 8008fe4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008fe8:	f7f7 fb06 	bl	80005f8 <__aeabi_dmul>
 8008fec:	3501      	adds	r5, #1
 8008fee:	4606      	mov	r6, r0
 8008ff0:	460f      	mov	r7, r1
 8008ff2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ff6:	f109 0908 	add.w	r9, r9, #8
 8008ffa:	e7e0      	b.n	8008fbe <_dtoa_r+0x36e>
 8008ffc:	f000 809f 	beq.w	800913e <_dtoa_r+0x4ee>
 8009000:	f1cb 0600 	rsb	r6, fp, #0
 8009004:	4ba1      	ldr	r3, [pc, #644]	; (800928c <_dtoa_r+0x63c>)
 8009006:	4fa2      	ldr	r7, [pc, #648]	; (8009290 <_dtoa_r+0x640>)
 8009008:	f006 020f 	and.w	r2, r6, #15
 800900c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	ec51 0b18 	vmov	r0, r1, d8
 8009018:	f7f7 faee 	bl	80005f8 <__aeabi_dmul>
 800901c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009020:	1136      	asrs	r6, r6, #4
 8009022:	2300      	movs	r3, #0
 8009024:	2502      	movs	r5, #2
 8009026:	2e00      	cmp	r6, #0
 8009028:	d17e      	bne.n	8009128 <_dtoa_r+0x4d8>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1d0      	bne.n	8008fd0 <_dtoa_r+0x380>
 800902e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009030:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 8084 	beq.w	8009142 <_dtoa_r+0x4f2>
 800903a:	4b96      	ldr	r3, [pc, #600]	; (8009294 <_dtoa_r+0x644>)
 800903c:	2200      	movs	r2, #0
 800903e:	4640      	mov	r0, r8
 8009040:	4649      	mov	r1, r9
 8009042:	f7f7 fd4b 	bl	8000adc <__aeabi_dcmplt>
 8009046:	2800      	cmp	r0, #0
 8009048:	d07b      	beq.n	8009142 <_dtoa_r+0x4f2>
 800904a:	9b04      	ldr	r3, [sp, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d078      	beq.n	8009142 <_dtoa_r+0x4f2>
 8009050:	9b01      	ldr	r3, [sp, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	dd39      	ble.n	80090ca <_dtoa_r+0x47a>
 8009056:	4b90      	ldr	r3, [pc, #576]	; (8009298 <_dtoa_r+0x648>)
 8009058:	2200      	movs	r2, #0
 800905a:	4640      	mov	r0, r8
 800905c:	4649      	mov	r1, r9
 800905e:	f7f7 facb 	bl	80005f8 <__aeabi_dmul>
 8009062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009066:	9e01      	ldr	r6, [sp, #4]
 8009068:	f10b 37ff 	add.w	r7, fp, #4294967295
 800906c:	3501      	adds	r5, #1
 800906e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009072:	4628      	mov	r0, r5
 8009074:	f7f7 fa56 	bl	8000524 <__aeabi_i2d>
 8009078:	4642      	mov	r2, r8
 800907a:	464b      	mov	r3, r9
 800907c:	f7f7 fabc 	bl	80005f8 <__aeabi_dmul>
 8009080:	4b86      	ldr	r3, [pc, #536]	; (800929c <_dtoa_r+0x64c>)
 8009082:	2200      	movs	r2, #0
 8009084:	f7f7 f902 	bl	800028c <__adddf3>
 8009088:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800908c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009090:	9303      	str	r3, [sp, #12]
 8009092:	2e00      	cmp	r6, #0
 8009094:	d158      	bne.n	8009148 <_dtoa_r+0x4f8>
 8009096:	4b82      	ldr	r3, [pc, #520]	; (80092a0 <_dtoa_r+0x650>)
 8009098:	2200      	movs	r2, #0
 800909a:	4640      	mov	r0, r8
 800909c:	4649      	mov	r1, r9
 800909e:	f7f7 f8f3 	bl	8000288 <__aeabi_dsub>
 80090a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090a6:	4680      	mov	r8, r0
 80090a8:	4689      	mov	r9, r1
 80090aa:	f7f7 fd35 	bl	8000b18 <__aeabi_dcmpgt>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f040 8296 	bne.w	80095e0 <_dtoa_r+0x990>
 80090b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80090b8:	4640      	mov	r0, r8
 80090ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090be:	4649      	mov	r1, r9
 80090c0:	f7f7 fd0c 	bl	8000adc <__aeabi_dcmplt>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	f040 8289 	bne.w	80095dc <_dtoa_r+0x98c>
 80090ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80090ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f2c0 814e 	blt.w	8009372 <_dtoa_r+0x722>
 80090d6:	f1bb 0f0e 	cmp.w	fp, #14
 80090da:	f300 814a 	bgt.w	8009372 <_dtoa_r+0x722>
 80090de:	4b6b      	ldr	r3, [pc, #428]	; (800928c <_dtoa_r+0x63c>)
 80090e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80090e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f280 80dc 	bge.w	80092a8 <_dtoa_r+0x658>
 80090f0:	9b04      	ldr	r3, [sp, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f300 80d8 	bgt.w	80092a8 <_dtoa_r+0x658>
 80090f8:	f040 826f 	bne.w	80095da <_dtoa_r+0x98a>
 80090fc:	4b68      	ldr	r3, [pc, #416]	; (80092a0 <_dtoa_r+0x650>)
 80090fe:	2200      	movs	r2, #0
 8009100:	4640      	mov	r0, r8
 8009102:	4649      	mov	r1, r9
 8009104:	f7f7 fa78 	bl	80005f8 <__aeabi_dmul>
 8009108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800910c:	f7f7 fcfa 	bl	8000b04 <__aeabi_dcmpge>
 8009110:	9e04      	ldr	r6, [sp, #16]
 8009112:	4637      	mov	r7, r6
 8009114:	2800      	cmp	r0, #0
 8009116:	f040 8245 	bne.w	80095a4 <_dtoa_r+0x954>
 800911a:	9d00      	ldr	r5, [sp, #0]
 800911c:	2331      	movs	r3, #49	; 0x31
 800911e:	f805 3b01 	strb.w	r3, [r5], #1
 8009122:	f10b 0b01 	add.w	fp, fp, #1
 8009126:	e241      	b.n	80095ac <_dtoa_r+0x95c>
 8009128:	07f2      	lsls	r2, r6, #31
 800912a:	d505      	bpl.n	8009138 <_dtoa_r+0x4e8>
 800912c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009130:	f7f7 fa62 	bl	80005f8 <__aeabi_dmul>
 8009134:	3501      	adds	r5, #1
 8009136:	2301      	movs	r3, #1
 8009138:	1076      	asrs	r6, r6, #1
 800913a:	3708      	adds	r7, #8
 800913c:	e773      	b.n	8009026 <_dtoa_r+0x3d6>
 800913e:	2502      	movs	r5, #2
 8009140:	e775      	b.n	800902e <_dtoa_r+0x3de>
 8009142:	9e04      	ldr	r6, [sp, #16]
 8009144:	465f      	mov	r7, fp
 8009146:	e792      	b.n	800906e <_dtoa_r+0x41e>
 8009148:	9900      	ldr	r1, [sp, #0]
 800914a:	4b50      	ldr	r3, [pc, #320]	; (800928c <_dtoa_r+0x63c>)
 800914c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009150:	4431      	add	r1, r6
 8009152:	9102      	str	r1, [sp, #8]
 8009154:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009156:	eeb0 9a47 	vmov.f32	s18, s14
 800915a:	eef0 9a67 	vmov.f32	s19, s15
 800915e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009162:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009166:	2900      	cmp	r1, #0
 8009168:	d044      	beq.n	80091f4 <_dtoa_r+0x5a4>
 800916a:	494e      	ldr	r1, [pc, #312]	; (80092a4 <_dtoa_r+0x654>)
 800916c:	2000      	movs	r0, #0
 800916e:	f7f7 fb6d 	bl	800084c <__aeabi_ddiv>
 8009172:	ec53 2b19 	vmov	r2, r3, d9
 8009176:	f7f7 f887 	bl	8000288 <__aeabi_dsub>
 800917a:	9d00      	ldr	r5, [sp, #0]
 800917c:	ec41 0b19 	vmov	d9, r0, r1
 8009180:	4649      	mov	r1, r9
 8009182:	4640      	mov	r0, r8
 8009184:	f7f7 fce8 	bl	8000b58 <__aeabi_d2iz>
 8009188:	4606      	mov	r6, r0
 800918a:	f7f7 f9cb 	bl	8000524 <__aeabi_i2d>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	4640      	mov	r0, r8
 8009194:	4649      	mov	r1, r9
 8009196:	f7f7 f877 	bl	8000288 <__aeabi_dsub>
 800919a:	3630      	adds	r6, #48	; 0x30
 800919c:	f805 6b01 	strb.w	r6, [r5], #1
 80091a0:	ec53 2b19 	vmov	r2, r3, d9
 80091a4:	4680      	mov	r8, r0
 80091a6:	4689      	mov	r9, r1
 80091a8:	f7f7 fc98 	bl	8000adc <__aeabi_dcmplt>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d164      	bne.n	800927a <_dtoa_r+0x62a>
 80091b0:	4642      	mov	r2, r8
 80091b2:	464b      	mov	r3, r9
 80091b4:	4937      	ldr	r1, [pc, #220]	; (8009294 <_dtoa_r+0x644>)
 80091b6:	2000      	movs	r0, #0
 80091b8:	f7f7 f866 	bl	8000288 <__aeabi_dsub>
 80091bc:	ec53 2b19 	vmov	r2, r3, d9
 80091c0:	f7f7 fc8c 	bl	8000adc <__aeabi_dcmplt>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	f040 80b6 	bne.w	8009336 <_dtoa_r+0x6e6>
 80091ca:	9b02      	ldr	r3, [sp, #8]
 80091cc:	429d      	cmp	r5, r3
 80091ce:	f43f af7c 	beq.w	80090ca <_dtoa_r+0x47a>
 80091d2:	4b31      	ldr	r3, [pc, #196]	; (8009298 <_dtoa_r+0x648>)
 80091d4:	ec51 0b19 	vmov	r0, r1, d9
 80091d8:	2200      	movs	r2, #0
 80091da:	f7f7 fa0d 	bl	80005f8 <__aeabi_dmul>
 80091de:	4b2e      	ldr	r3, [pc, #184]	; (8009298 <_dtoa_r+0x648>)
 80091e0:	ec41 0b19 	vmov	d9, r0, r1
 80091e4:	2200      	movs	r2, #0
 80091e6:	4640      	mov	r0, r8
 80091e8:	4649      	mov	r1, r9
 80091ea:	f7f7 fa05 	bl	80005f8 <__aeabi_dmul>
 80091ee:	4680      	mov	r8, r0
 80091f0:	4689      	mov	r9, r1
 80091f2:	e7c5      	b.n	8009180 <_dtoa_r+0x530>
 80091f4:	ec51 0b17 	vmov	r0, r1, d7
 80091f8:	f7f7 f9fe 	bl	80005f8 <__aeabi_dmul>
 80091fc:	9b02      	ldr	r3, [sp, #8]
 80091fe:	9d00      	ldr	r5, [sp, #0]
 8009200:	930f      	str	r3, [sp, #60]	; 0x3c
 8009202:	ec41 0b19 	vmov	d9, r0, r1
 8009206:	4649      	mov	r1, r9
 8009208:	4640      	mov	r0, r8
 800920a:	f7f7 fca5 	bl	8000b58 <__aeabi_d2iz>
 800920e:	4606      	mov	r6, r0
 8009210:	f7f7 f988 	bl	8000524 <__aeabi_i2d>
 8009214:	3630      	adds	r6, #48	; 0x30
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4640      	mov	r0, r8
 800921c:	4649      	mov	r1, r9
 800921e:	f7f7 f833 	bl	8000288 <__aeabi_dsub>
 8009222:	f805 6b01 	strb.w	r6, [r5], #1
 8009226:	9b02      	ldr	r3, [sp, #8]
 8009228:	429d      	cmp	r5, r3
 800922a:	4680      	mov	r8, r0
 800922c:	4689      	mov	r9, r1
 800922e:	f04f 0200 	mov.w	r2, #0
 8009232:	d124      	bne.n	800927e <_dtoa_r+0x62e>
 8009234:	4b1b      	ldr	r3, [pc, #108]	; (80092a4 <_dtoa_r+0x654>)
 8009236:	ec51 0b19 	vmov	r0, r1, d9
 800923a:	f7f7 f827 	bl	800028c <__adddf3>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4640      	mov	r0, r8
 8009244:	4649      	mov	r1, r9
 8009246:	f7f7 fc67 	bl	8000b18 <__aeabi_dcmpgt>
 800924a:	2800      	cmp	r0, #0
 800924c:	d173      	bne.n	8009336 <_dtoa_r+0x6e6>
 800924e:	ec53 2b19 	vmov	r2, r3, d9
 8009252:	4914      	ldr	r1, [pc, #80]	; (80092a4 <_dtoa_r+0x654>)
 8009254:	2000      	movs	r0, #0
 8009256:	f7f7 f817 	bl	8000288 <__aeabi_dsub>
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	4640      	mov	r0, r8
 8009260:	4649      	mov	r1, r9
 8009262:	f7f7 fc3b 	bl	8000adc <__aeabi_dcmplt>
 8009266:	2800      	cmp	r0, #0
 8009268:	f43f af2f 	beq.w	80090ca <_dtoa_r+0x47a>
 800926c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800926e:	1e6b      	subs	r3, r5, #1
 8009270:	930f      	str	r3, [sp, #60]	; 0x3c
 8009272:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009276:	2b30      	cmp	r3, #48	; 0x30
 8009278:	d0f8      	beq.n	800926c <_dtoa_r+0x61c>
 800927a:	46bb      	mov	fp, r7
 800927c:	e04a      	b.n	8009314 <_dtoa_r+0x6c4>
 800927e:	4b06      	ldr	r3, [pc, #24]	; (8009298 <_dtoa_r+0x648>)
 8009280:	f7f7 f9ba 	bl	80005f8 <__aeabi_dmul>
 8009284:	4680      	mov	r8, r0
 8009286:	4689      	mov	r9, r1
 8009288:	e7bd      	b.n	8009206 <_dtoa_r+0x5b6>
 800928a:	bf00      	nop
 800928c:	0800dd58 	.word	0x0800dd58
 8009290:	0800dd30 	.word	0x0800dd30
 8009294:	3ff00000 	.word	0x3ff00000
 8009298:	40240000 	.word	0x40240000
 800929c:	401c0000 	.word	0x401c0000
 80092a0:	40140000 	.word	0x40140000
 80092a4:	3fe00000 	.word	0x3fe00000
 80092a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80092ac:	9d00      	ldr	r5, [sp, #0]
 80092ae:	4642      	mov	r2, r8
 80092b0:	464b      	mov	r3, r9
 80092b2:	4630      	mov	r0, r6
 80092b4:	4639      	mov	r1, r7
 80092b6:	f7f7 fac9 	bl	800084c <__aeabi_ddiv>
 80092ba:	f7f7 fc4d 	bl	8000b58 <__aeabi_d2iz>
 80092be:	9001      	str	r0, [sp, #4]
 80092c0:	f7f7 f930 	bl	8000524 <__aeabi_i2d>
 80092c4:	4642      	mov	r2, r8
 80092c6:	464b      	mov	r3, r9
 80092c8:	f7f7 f996 	bl	80005f8 <__aeabi_dmul>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4630      	mov	r0, r6
 80092d2:	4639      	mov	r1, r7
 80092d4:	f7f6 ffd8 	bl	8000288 <__aeabi_dsub>
 80092d8:	9e01      	ldr	r6, [sp, #4]
 80092da:	9f04      	ldr	r7, [sp, #16]
 80092dc:	3630      	adds	r6, #48	; 0x30
 80092de:	f805 6b01 	strb.w	r6, [r5], #1
 80092e2:	9e00      	ldr	r6, [sp, #0]
 80092e4:	1bae      	subs	r6, r5, r6
 80092e6:	42b7      	cmp	r7, r6
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	d134      	bne.n	8009358 <_dtoa_r+0x708>
 80092ee:	f7f6 ffcd 	bl	800028c <__adddf3>
 80092f2:	4642      	mov	r2, r8
 80092f4:	464b      	mov	r3, r9
 80092f6:	4606      	mov	r6, r0
 80092f8:	460f      	mov	r7, r1
 80092fa:	f7f7 fc0d 	bl	8000b18 <__aeabi_dcmpgt>
 80092fe:	b9c8      	cbnz	r0, 8009334 <_dtoa_r+0x6e4>
 8009300:	4642      	mov	r2, r8
 8009302:	464b      	mov	r3, r9
 8009304:	4630      	mov	r0, r6
 8009306:	4639      	mov	r1, r7
 8009308:	f7f7 fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 800930c:	b110      	cbz	r0, 8009314 <_dtoa_r+0x6c4>
 800930e:	9b01      	ldr	r3, [sp, #4]
 8009310:	07db      	lsls	r3, r3, #31
 8009312:	d40f      	bmi.n	8009334 <_dtoa_r+0x6e4>
 8009314:	4651      	mov	r1, sl
 8009316:	4620      	mov	r0, r4
 8009318:	f000 fbcc 	bl	8009ab4 <_Bfree>
 800931c:	2300      	movs	r3, #0
 800931e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009320:	702b      	strb	r3, [r5, #0]
 8009322:	f10b 0301 	add.w	r3, fp, #1
 8009326:	6013      	str	r3, [r2, #0]
 8009328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800932a:	2b00      	cmp	r3, #0
 800932c:	f43f ace2 	beq.w	8008cf4 <_dtoa_r+0xa4>
 8009330:	601d      	str	r5, [r3, #0]
 8009332:	e4df      	b.n	8008cf4 <_dtoa_r+0xa4>
 8009334:	465f      	mov	r7, fp
 8009336:	462b      	mov	r3, r5
 8009338:	461d      	mov	r5, r3
 800933a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800933e:	2a39      	cmp	r2, #57	; 0x39
 8009340:	d106      	bne.n	8009350 <_dtoa_r+0x700>
 8009342:	9a00      	ldr	r2, [sp, #0]
 8009344:	429a      	cmp	r2, r3
 8009346:	d1f7      	bne.n	8009338 <_dtoa_r+0x6e8>
 8009348:	9900      	ldr	r1, [sp, #0]
 800934a:	2230      	movs	r2, #48	; 0x30
 800934c:	3701      	adds	r7, #1
 800934e:	700a      	strb	r2, [r1, #0]
 8009350:	781a      	ldrb	r2, [r3, #0]
 8009352:	3201      	adds	r2, #1
 8009354:	701a      	strb	r2, [r3, #0]
 8009356:	e790      	b.n	800927a <_dtoa_r+0x62a>
 8009358:	4ba3      	ldr	r3, [pc, #652]	; (80095e8 <_dtoa_r+0x998>)
 800935a:	2200      	movs	r2, #0
 800935c:	f7f7 f94c 	bl	80005f8 <__aeabi_dmul>
 8009360:	2200      	movs	r2, #0
 8009362:	2300      	movs	r3, #0
 8009364:	4606      	mov	r6, r0
 8009366:	460f      	mov	r7, r1
 8009368:	f7f7 fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800936c:	2800      	cmp	r0, #0
 800936e:	d09e      	beq.n	80092ae <_dtoa_r+0x65e>
 8009370:	e7d0      	b.n	8009314 <_dtoa_r+0x6c4>
 8009372:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009374:	2a00      	cmp	r2, #0
 8009376:	f000 80ca 	beq.w	800950e <_dtoa_r+0x8be>
 800937a:	9a07      	ldr	r2, [sp, #28]
 800937c:	2a01      	cmp	r2, #1
 800937e:	f300 80ad 	bgt.w	80094dc <_dtoa_r+0x88c>
 8009382:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009384:	2a00      	cmp	r2, #0
 8009386:	f000 80a5 	beq.w	80094d4 <_dtoa_r+0x884>
 800938a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800938e:	9e08      	ldr	r6, [sp, #32]
 8009390:	9d05      	ldr	r5, [sp, #20]
 8009392:	9a05      	ldr	r2, [sp, #20]
 8009394:	441a      	add	r2, r3
 8009396:	9205      	str	r2, [sp, #20]
 8009398:	9a06      	ldr	r2, [sp, #24]
 800939a:	2101      	movs	r1, #1
 800939c:	441a      	add	r2, r3
 800939e:	4620      	mov	r0, r4
 80093a0:	9206      	str	r2, [sp, #24]
 80093a2:	f000 fc3d 	bl	8009c20 <__i2b>
 80093a6:	4607      	mov	r7, r0
 80093a8:	b165      	cbz	r5, 80093c4 <_dtoa_r+0x774>
 80093aa:	9b06      	ldr	r3, [sp, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	dd09      	ble.n	80093c4 <_dtoa_r+0x774>
 80093b0:	42ab      	cmp	r3, r5
 80093b2:	9a05      	ldr	r2, [sp, #20]
 80093b4:	bfa8      	it	ge
 80093b6:	462b      	movge	r3, r5
 80093b8:	1ad2      	subs	r2, r2, r3
 80093ba:	9205      	str	r2, [sp, #20]
 80093bc:	9a06      	ldr	r2, [sp, #24]
 80093be:	1aed      	subs	r5, r5, r3
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	9306      	str	r3, [sp, #24]
 80093c4:	9b08      	ldr	r3, [sp, #32]
 80093c6:	b1f3      	cbz	r3, 8009406 <_dtoa_r+0x7b6>
 80093c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 80a3 	beq.w	8009516 <_dtoa_r+0x8c6>
 80093d0:	2e00      	cmp	r6, #0
 80093d2:	dd10      	ble.n	80093f6 <_dtoa_r+0x7a6>
 80093d4:	4639      	mov	r1, r7
 80093d6:	4632      	mov	r2, r6
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 fce1 	bl	8009da0 <__pow5mult>
 80093de:	4652      	mov	r2, sl
 80093e0:	4601      	mov	r1, r0
 80093e2:	4607      	mov	r7, r0
 80093e4:	4620      	mov	r0, r4
 80093e6:	f000 fc31 	bl	8009c4c <__multiply>
 80093ea:	4651      	mov	r1, sl
 80093ec:	4680      	mov	r8, r0
 80093ee:	4620      	mov	r0, r4
 80093f0:	f000 fb60 	bl	8009ab4 <_Bfree>
 80093f4:	46c2      	mov	sl, r8
 80093f6:	9b08      	ldr	r3, [sp, #32]
 80093f8:	1b9a      	subs	r2, r3, r6
 80093fa:	d004      	beq.n	8009406 <_dtoa_r+0x7b6>
 80093fc:	4651      	mov	r1, sl
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 fcce 	bl	8009da0 <__pow5mult>
 8009404:	4682      	mov	sl, r0
 8009406:	2101      	movs	r1, #1
 8009408:	4620      	mov	r0, r4
 800940a:	f000 fc09 	bl	8009c20 <__i2b>
 800940e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009410:	2b00      	cmp	r3, #0
 8009412:	4606      	mov	r6, r0
 8009414:	f340 8081 	ble.w	800951a <_dtoa_r+0x8ca>
 8009418:	461a      	mov	r2, r3
 800941a:	4601      	mov	r1, r0
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fcbf 	bl	8009da0 <__pow5mult>
 8009422:	9b07      	ldr	r3, [sp, #28]
 8009424:	2b01      	cmp	r3, #1
 8009426:	4606      	mov	r6, r0
 8009428:	dd7a      	ble.n	8009520 <_dtoa_r+0x8d0>
 800942a:	f04f 0800 	mov.w	r8, #0
 800942e:	6933      	ldr	r3, [r6, #16]
 8009430:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009434:	6918      	ldr	r0, [r3, #16]
 8009436:	f000 fba5 	bl	8009b84 <__hi0bits>
 800943a:	f1c0 0020 	rsb	r0, r0, #32
 800943e:	9b06      	ldr	r3, [sp, #24]
 8009440:	4418      	add	r0, r3
 8009442:	f010 001f 	ands.w	r0, r0, #31
 8009446:	f000 8094 	beq.w	8009572 <_dtoa_r+0x922>
 800944a:	f1c0 0320 	rsb	r3, r0, #32
 800944e:	2b04      	cmp	r3, #4
 8009450:	f340 8085 	ble.w	800955e <_dtoa_r+0x90e>
 8009454:	9b05      	ldr	r3, [sp, #20]
 8009456:	f1c0 001c 	rsb	r0, r0, #28
 800945a:	4403      	add	r3, r0
 800945c:	9305      	str	r3, [sp, #20]
 800945e:	9b06      	ldr	r3, [sp, #24]
 8009460:	4403      	add	r3, r0
 8009462:	4405      	add	r5, r0
 8009464:	9306      	str	r3, [sp, #24]
 8009466:	9b05      	ldr	r3, [sp, #20]
 8009468:	2b00      	cmp	r3, #0
 800946a:	dd05      	ble.n	8009478 <_dtoa_r+0x828>
 800946c:	4651      	mov	r1, sl
 800946e:	461a      	mov	r2, r3
 8009470:	4620      	mov	r0, r4
 8009472:	f000 fcef 	bl	8009e54 <__lshift>
 8009476:	4682      	mov	sl, r0
 8009478:	9b06      	ldr	r3, [sp, #24]
 800947a:	2b00      	cmp	r3, #0
 800947c:	dd05      	ble.n	800948a <_dtoa_r+0x83a>
 800947e:	4631      	mov	r1, r6
 8009480:	461a      	mov	r2, r3
 8009482:	4620      	mov	r0, r4
 8009484:	f000 fce6 	bl	8009e54 <__lshift>
 8009488:	4606      	mov	r6, r0
 800948a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800948c:	2b00      	cmp	r3, #0
 800948e:	d072      	beq.n	8009576 <_dtoa_r+0x926>
 8009490:	4631      	mov	r1, r6
 8009492:	4650      	mov	r0, sl
 8009494:	f000 fd4a 	bl	8009f2c <__mcmp>
 8009498:	2800      	cmp	r0, #0
 800949a:	da6c      	bge.n	8009576 <_dtoa_r+0x926>
 800949c:	2300      	movs	r3, #0
 800949e:	4651      	mov	r1, sl
 80094a0:	220a      	movs	r2, #10
 80094a2:	4620      	mov	r0, r4
 80094a4:	f000 fb28 	bl	8009af8 <__multadd>
 80094a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094ae:	4682      	mov	sl, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 81b0 	beq.w	8009816 <_dtoa_r+0xbc6>
 80094b6:	2300      	movs	r3, #0
 80094b8:	4639      	mov	r1, r7
 80094ba:	220a      	movs	r2, #10
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 fb1b 	bl	8009af8 <__multadd>
 80094c2:	9b01      	ldr	r3, [sp, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	4607      	mov	r7, r0
 80094c8:	f300 8096 	bgt.w	80095f8 <_dtoa_r+0x9a8>
 80094cc:	9b07      	ldr	r3, [sp, #28]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	dc59      	bgt.n	8009586 <_dtoa_r+0x936>
 80094d2:	e091      	b.n	80095f8 <_dtoa_r+0x9a8>
 80094d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094da:	e758      	b.n	800938e <_dtoa_r+0x73e>
 80094dc:	9b04      	ldr	r3, [sp, #16]
 80094de:	1e5e      	subs	r6, r3, #1
 80094e0:	9b08      	ldr	r3, [sp, #32]
 80094e2:	42b3      	cmp	r3, r6
 80094e4:	bfbf      	itttt	lt
 80094e6:	9b08      	ldrlt	r3, [sp, #32]
 80094e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80094ea:	9608      	strlt	r6, [sp, #32]
 80094ec:	1af3      	sublt	r3, r6, r3
 80094ee:	bfb4      	ite	lt
 80094f0:	18d2      	addlt	r2, r2, r3
 80094f2:	1b9e      	subge	r6, r3, r6
 80094f4:	9b04      	ldr	r3, [sp, #16]
 80094f6:	bfbc      	itt	lt
 80094f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80094fa:	2600      	movlt	r6, #0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	bfb7      	itett	lt
 8009500:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009504:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009508:	1a9d      	sublt	r5, r3, r2
 800950a:	2300      	movlt	r3, #0
 800950c:	e741      	b.n	8009392 <_dtoa_r+0x742>
 800950e:	9e08      	ldr	r6, [sp, #32]
 8009510:	9d05      	ldr	r5, [sp, #20]
 8009512:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009514:	e748      	b.n	80093a8 <_dtoa_r+0x758>
 8009516:	9a08      	ldr	r2, [sp, #32]
 8009518:	e770      	b.n	80093fc <_dtoa_r+0x7ac>
 800951a:	9b07      	ldr	r3, [sp, #28]
 800951c:	2b01      	cmp	r3, #1
 800951e:	dc19      	bgt.n	8009554 <_dtoa_r+0x904>
 8009520:	9b02      	ldr	r3, [sp, #8]
 8009522:	b9bb      	cbnz	r3, 8009554 <_dtoa_r+0x904>
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800952a:	b99b      	cbnz	r3, 8009554 <_dtoa_r+0x904>
 800952c:	9b03      	ldr	r3, [sp, #12]
 800952e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009532:	0d1b      	lsrs	r3, r3, #20
 8009534:	051b      	lsls	r3, r3, #20
 8009536:	b183      	cbz	r3, 800955a <_dtoa_r+0x90a>
 8009538:	9b05      	ldr	r3, [sp, #20]
 800953a:	3301      	adds	r3, #1
 800953c:	9305      	str	r3, [sp, #20]
 800953e:	9b06      	ldr	r3, [sp, #24]
 8009540:	3301      	adds	r3, #1
 8009542:	9306      	str	r3, [sp, #24]
 8009544:	f04f 0801 	mov.w	r8, #1
 8009548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800954a:	2b00      	cmp	r3, #0
 800954c:	f47f af6f 	bne.w	800942e <_dtoa_r+0x7de>
 8009550:	2001      	movs	r0, #1
 8009552:	e774      	b.n	800943e <_dtoa_r+0x7ee>
 8009554:	f04f 0800 	mov.w	r8, #0
 8009558:	e7f6      	b.n	8009548 <_dtoa_r+0x8f8>
 800955a:	4698      	mov	r8, r3
 800955c:	e7f4      	b.n	8009548 <_dtoa_r+0x8f8>
 800955e:	d082      	beq.n	8009466 <_dtoa_r+0x816>
 8009560:	9a05      	ldr	r2, [sp, #20]
 8009562:	331c      	adds	r3, #28
 8009564:	441a      	add	r2, r3
 8009566:	9205      	str	r2, [sp, #20]
 8009568:	9a06      	ldr	r2, [sp, #24]
 800956a:	441a      	add	r2, r3
 800956c:	441d      	add	r5, r3
 800956e:	9206      	str	r2, [sp, #24]
 8009570:	e779      	b.n	8009466 <_dtoa_r+0x816>
 8009572:	4603      	mov	r3, r0
 8009574:	e7f4      	b.n	8009560 <_dtoa_r+0x910>
 8009576:	9b04      	ldr	r3, [sp, #16]
 8009578:	2b00      	cmp	r3, #0
 800957a:	dc37      	bgt.n	80095ec <_dtoa_r+0x99c>
 800957c:	9b07      	ldr	r3, [sp, #28]
 800957e:	2b02      	cmp	r3, #2
 8009580:	dd34      	ble.n	80095ec <_dtoa_r+0x99c>
 8009582:	9b04      	ldr	r3, [sp, #16]
 8009584:	9301      	str	r3, [sp, #4]
 8009586:	9b01      	ldr	r3, [sp, #4]
 8009588:	b963      	cbnz	r3, 80095a4 <_dtoa_r+0x954>
 800958a:	4631      	mov	r1, r6
 800958c:	2205      	movs	r2, #5
 800958e:	4620      	mov	r0, r4
 8009590:	f000 fab2 	bl	8009af8 <__multadd>
 8009594:	4601      	mov	r1, r0
 8009596:	4606      	mov	r6, r0
 8009598:	4650      	mov	r0, sl
 800959a:	f000 fcc7 	bl	8009f2c <__mcmp>
 800959e:	2800      	cmp	r0, #0
 80095a0:	f73f adbb 	bgt.w	800911a <_dtoa_r+0x4ca>
 80095a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a6:	9d00      	ldr	r5, [sp, #0]
 80095a8:	ea6f 0b03 	mvn.w	fp, r3
 80095ac:	f04f 0800 	mov.w	r8, #0
 80095b0:	4631      	mov	r1, r6
 80095b2:	4620      	mov	r0, r4
 80095b4:	f000 fa7e 	bl	8009ab4 <_Bfree>
 80095b8:	2f00      	cmp	r7, #0
 80095ba:	f43f aeab 	beq.w	8009314 <_dtoa_r+0x6c4>
 80095be:	f1b8 0f00 	cmp.w	r8, #0
 80095c2:	d005      	beq.n	80095d0 <_dtoa_r+0x980>
 80095c4:	45b8      	cmp	r8, r7
 80095c6:	d003      	beq.n	80095d0 <_dtoa_r+0x980>
 80095c8:	4641      	mov	r1, r8
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 fa72 	bl	8009ab4 <_Bfree>
 80095d0:	4639      	mov	r1, r7
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 fa6e 	bl	8009ab4 <_Bfree>
 80095d8:	e69c      	b.n	8009314 <_dtoa_r+0x6c4>
 80095da:	2600      	movs	r6, #0
 80095dc:	4637      	mov	r7, r6
 80095de:	e7e1      	b.n	80095a4 <_dtoa_r+0x954>
 80095e0:	46bb      	mov	fp, r7
 80095e2:	4637      	mov	r7, r6
 80095e4:	e599      	b.n	800911a <_dtoa_r+0x4ca>
 80095e6:	bf00      	nop
 80095e8:	40240000 	.word	0x40240000
 80095ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 80c8 	beq.w	8009784 <_dtoa_r+0xb34>
 80095f4:	9b04      	ldr	r3, [sp, #16]
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	2d00      	cmp	r5, #0
 80095fa:	dd05      	ble.n	8009608 <_dtoa_r+0x9b8>
 80095fc:	4639      	mov	r1, r7
 80095fe:	462a      	mov	r2, r5
 8009600:	4620      	mov	r0, r4
 8009602:	f000 fc27 	bl	8009e54 <__lshift>
 8009606:	4607      	mov	r7, r0
 8009608:	f1b8 0f00 	cmp.w	r8, #0
 800960c:	d05b      	beq.n	80096c6 <_dtoa_r+0xa76>
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	4620      	mov	r0, r4
 8009612:	f000 fa0f 	bl	8009a34 <_Balloc>
 8009616:	4605      	mov	r5, r0
 8009618:	b928      	cbnz	r0, 8009626 <_dtoa_r+0x9d6>
 800961a:	4b83      	ldr	r3, [pc, #524]	; (8009828 <_dtoa_r+0xbd8>)
 800961c:	4602      	mov	r2, r0
 800961e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009622:	f7ff bb2e 	b.w	8008c82 <_dtoa_r+0x32>
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	3202      	adds	r2, #2
 800962a:	0092      	lsls	r2, r2, #2
 800962c:	f107 010c 	add.w	r1, r7, #12
 8009630:	300c      	adds	r0, #12
 8009632:	f000 ffab 	bl	800a58c <memcpy>
 8009636:	2201      	movs	r2, #1
 8009638:	4629      	mov	r1, r5
 800963a:	4620      	mov	r0, r4
 800963c:	f000 fc0a 	bl	8009e54 <__lshift>
 8009640:	9b00      	ldr	r3, [sp, #0]
 8009642:	3301      	adds	r3, #1
 8009644:	9304      	str	r3, [sp, #16]
 8009646:	e9dd 2300 	ldrd	r2, r3, [sp]
 800964a:	4413      	add	r3, r2
 800964c:	9308      	str	r3, [sp, #32]
 800964e:	9b02      	ldr	r3, [sp, #8]
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	46b8      	mov	r8, r7
 8009656:	9306      	str	r3, [sp, #24]
 8009658:	4607      	mov	r7, r0
 800965a:	9b04      	ldr	r3, [sp, #16]
 800965c:	4631      	mov	r1, r6
 800965e:	3b01      	subs	r3, #1
 8009660:	4650      	mov	r0, sl
 8009662:	9301      	str	r3, [sp, #4]
 8009664:	f7ff fa6b 	bl	8008b3e <quorem>
 8009668:	4641      	mov	r1, r8
 800966a:	9002      	str	r0, [sp, #8]
 800966c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009670:	4650      	mov	r0, sl
 8009672:	f000 fc5b 	bl	8009f2c <__mcmp>
 8009676:	463a      	mov	r2, r7
 8009678:	9005      	str	r0, [sp, #20]
 800967a:	4631      	mov	r1, r6
 800967c:	4620      	mov	r0, r4
 800967e:	f000 fc71 	bl	8009f64 <__mdiff>
 8009682:	68c2      	ldr	r2, [r0, #12]
 8009684:	4605      	mov	r5, r0
 8009686:	bb02      	cbnz	r2, 80096ca <_dtoa_r+0xa7a>
 8009688:	4601      	mov	r1, r0
 800968a:	4650      	mov	r0, sl
 800968c:	f000 fc4e 	bl	8009f2c <__mcmp>
 8009690:	4602      	mov	r2, r0
 8009692:	4629      	mov	r1, r5
 8009694:	4620      	mov	r0, r4
 8009696:	9209      	str	r2, [sp, #36]	; 0x24
 8009698:	f000 fa0c 	bl	8009ab4 <_Bfree>
 800969c:	9b07      	ldr	r3, [sp, #28]
 800969e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096a0:	9d04      	ldr	r5, [sp, #16]
 80096a2:	ea43 0102 	orr.w	r1, r3, r2
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	4319      	orrs	r1, r3
 80096aa:	d110      	bne.n	80096ce <_dtoa_r+0xa7e>
 80096ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80096b0:	d029      	beq.n	8009706 <_dtoa_r+0xab6>
 80096b2:	9b05      	ldr	r3, [sp, #20]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	dd02      	ble.n	80096be <_dtoa_r+0xa6e>
 80096b8:	9b02      	ldr	r3, [sp, #8]
 80096ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80096be:	9b01      	ldr	r3, [sp, #4]
 80096c0:	f883 9000 	strb.w	r9, [r3]
 80096c4:	e774      	b.n	80095b0 <_dtoa_r+0x960>
 80096c6:	4638      	mov	r0, r7
 80096c8:	e7ba      	b.n	8009640 <_dtoa_r+0x9f0>
 80096ca:	2201      	movs	r2, #1
 80096cc:	e7e1      	b.n	8009692 <_dtoa_r+0xa42>
 80096ce:	9b05      	ldr	r3, [sp, #20]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	db04      	blt.n	80096de <_dtoa_r+0xa8e>
 80096d4:	9907      	ldr	r1, [sp, #28]
 80096d6:	430b      	orrs	r3, r1
 80096d8:	9906      	ldr	r1, [sp, #24]
 80096da:	430b      	orrs	r3, r1
 80096dc:	d120      	bne.n	8009720 <_dtoa_r+0xad0>
 80096de:	2a00      	cmp	r2, #0
 80096e0:	dded      	ble.n	80096be <_dtoa_r+0xa6e>
 80096e2:	4651      	mov	r1, sl
 80096e4:	2201      	movs	r2, #1
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 fbb4 	bl	8009e54 <__lshift>
 80096ec:	4631      	mov	r1, r6
 80096ee:	4682      	mov	sl, r0
 80096f0:	f000 fc1c 	bl	8009f2c <__mcmp>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	dc03      	bgt.n	8009700 <_dtoa_r+0xab0>
 80096f8:	d1e1      	bne.n	80096be <_dtoa_r+0xa6e>
 80096fa:	f019 0f01 	tst.w	r9, #1
 80096fe:	d0de      	beq.n	80096be <_dtoa_r+0xa6e>
 8009700:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009704:	d1d8      	bne.n	80096b8 <_dtoa_r+0xa68>
 8009706:	9a01      	ldr	r2, [sp, #4]
 8009708:	2339      	movs	r3, #57	; 0x39
 800970a:	7013      	strb	r3, [r2, #0]
 800970c:	462b      	mov	r3, r5
 800970e:	461d      	mov	r5, r3
 8009710:	3b01      	subs	r3, #1
 8009712:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009716:	2a39      	cmp	r2, #57	; 0x39
 8009718:	d06c      	beq.n	80097f4 <_dtoa_r+0xba4>
 800971a:	3201      	adds	r2, #1
 800971c:	701a      	strb	r2, [r3, #0]
 800971e:	e747      	b.n	80095b0 <_dtoa_r+0x960>
 8009720:	2a00      	cmp	r2, #0
 8009722:	dd07      	ble.n	8009734 <_dtoa_r+0xae4>
 8009724:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009728:	d0ed      	beq.n	8009706 <_dtoa_r+0xab6>
 800972a:	9a01      	ldr	r2, [sp, #4]
 800972c:	f109 0301 	add.w	r3, r9, #1
 8009730:	7013      	strb	r3, [r2, #0]
 8009732:	e73d      	b.n	80095b0 <_dtoa_r+0x960>
 8009734:	9b04      	ldr	r3, [sp, #16]
 8009736:	9a08      	ldr	r2, [sp, #32]
 8009738:	f803 9c01 	strb.w	r9, [r3, #-1]
 800973c:	4293      	cmp	r3, r2
 800973e:	d043      	beq.n	80097c8 <_dtoa_r+0xb78>
 8009740:	4651      	mov	r1, sl
 8009742:	2300      	movs	r3, #0
 8009744:	220a      	movs	r2, #10
 8009746:	4620      	mov	r0, r4
 8009748:	f000 f9d6 	bl	8009af8 <__multadd>
 800974c:	45b8      	cmp	r8, r7
 800974e:	4682      	mov	sl, r0
 8009750:	f04f 0300 	mov.w	r3, #0
 8009754:	f04f 020a 	mov.w	r2, #10
 8009758:	4641      	mov	r1, r8
 800975a:	4620      	mov	r0, r4
 800975c:	d107      	bne.n	800976e <_dtoa_r+0xb1e>
 800975e:	f000 f9cb 	bl	8009af8 <__multadd>
 8009762:	4680      	mov	r8, r0
 8009764:	4607      	mov	r7, r0
 8009766:	9b04      	ldr	r3, [sp, #16]
 8009768:	3301      	adds	r3, #1
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	e775      	b.n	800965a <_dtoa_r+0xa0a>
 800976e:	f000 f9c3 	bl	8009af8 <__multadd>
 8009772:	4639      	mov	r1, r7
 8009774:	4680      	mov	r8, r0
 8009776:	2300      	movs	r3, #0
 8009778:	220a      	movs	r2, #10
 800977a:	4620      	mov	r0, r4
 800977c:	f000 f9bc 	bl	8009af8 <__multadd>
 8009780:	4607      	mov	r7, r0
 8009782:	e7f0      	b.n	8009766 <_dtoa_r+0xb16>
 8009784:	9b04      	ldr	r3, [sp, #16]
 8009786:	9301      	str	r3, [sp, #4]
 8009788:	9d00      	ldr	r5, [sp, #0]
 800978a:	4631      	mov	r1, r6
 800978c:	4650      	mov	r0, sl
 800978e:	f7ff f9d6 	bl	8008b3e <quorem>
 8009792:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009796:	9b00      	ldr	r3, [sp, #0]
 8009798:	f805 9b01 	strb.w	r9, [r5], #1
 800979c:	1aea      	subs	r2, r5, r3
 800979e:	9b01      	ldr	r3, [sp, #4]
 80097a0:	4293      	cmp	r3, r2
 80097a2:	dd07      	ble.n	80097b4 <_dtoa_r+0xb64>
 80097a4:	4651      	mov	r1, sl
 80097a6:	2300      	movs	r3, #0
 80097a8:	220a      	movs	r2, #10
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 f9a4 	bl	8009af8 <__multadd>
 80097b0:	4682      	mov	sl, r0
 80097b2:	e7ea      	b.n	800978a <_dtoa_r+0xb3a>
 80097b4:	9b01      	ldr	r3, [sp, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	bfc8      	it	gt
 80097ba:	461d      	movgt	r5, r3
 80097bc:	9b00      	ldr	r3, [sp, #0]
 80097be:	bfd8      	it	le
 80097c0:	2501      	movle	r5, #1
 80097c2:	441d      	add	r5, r3
 80097c4:	f04f 0800 	mov.w	r8, #0
 80097c8:	4651      	mov	r1, sl
 80097ca:	2201      	movs	r2, #1
 80097cc:	4620      	mov	r0, r4
 80097ce:	f000 fb41 	bl	8009e54 <__lshift>
 80097d2:	4631      	mov	r1, r6
 80097d4:	4682      	mov	sl, r0
 80097d6:	f000 fba9 	bl	8009f2c <__mcmp>
 80097da:	2800      	cmp	r0, #0
 80097dc:	dc96      	bgt.n	800970c <_dtoa_r+0xabc>
 80097de:	d102      	bne.n	80097e6 <_dtoa_r+0xb96>
 80097e0:	f019 0f01 	tst.w	r9, #1
 80097e4:	d192      	bne.n	800970c <_dtoa_r+0xabc>
 80097e6:	462b      	mov	r3, r5
 80097e8:	461d      	mov	r5, r3
 80097ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097ee:	2a30      	cmp	r2, #48	; 0x30
 80097f0:	d0fa      	beq.n	80097e8 <_dtoa_r+0xb98>
 80097f2:	e6dd      	b.n	80095b0 <_dtoa_r+0x960>
 80097f4:	9a00      	ldr	r2, [sp, #0]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d189      	bne.n	800970e <_dtoa_r+0xabe>
 80097fa:	f10b 0b01 	add.w	fp, fp, #1
 80097fe:	2331      	movs	r3, #49	; 0x31
 8009800:	e796      	b.n	8009730 <_dtoa_r+0xae0>
 8009802:	4b0a      	ldr	r3, [pc, #40]	; (800982c <_dtoa_r+0xbdc>)
 8009804:	f7ff ba99 	b.w	8008d3a <_dtoa_r+0xea>
 8009808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800980a:	2b00      	cmp	r3, #0
 800980c:	f47f aa6d 	bne.w	8008cea <_dtoa_r+0x9a>
 8009810:	4b07      	ldr	r3, [pc, #28]	; (8009830 <_dtoa_r+0xbe0>)
 8009812:	f7ff ba92 	b.w	8008d3a <_dtoa_r+0xea>
 8009816:	9b01      	ldr	r3, [sp, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	dcb5      	bgt.n	8009788 <_dtoa_r+0xb38>
 800981c:	9b07      	ldr	r3, [sp, #28]
 800981e:	2b02      	cmp	r3, #2
 8009820:	f73f aeb1 	bgt.w	8009586 <_dtoa_r+0x936>
 8009824:	e7b0      	b.n	8009788 <_dtoa_r+0xb38>
 8009826:	bf00      	nop
 8009828:	0800dcc4 	.word	0x0800dcc4
 800982c:	0800dc24 	.word	0x0800dc24
 8009830:	0800dc48 	.word	0x0800dc48

08009834 <_free_r>:
 8009834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009836:	2900      	cmp	r1, #0
 8009838:	d044      	beq.n	80098c4 <_free_r+0x90>
 800983a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800983e:	9001      	str	r0, [sp, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	f1a1 0404 	sub.w	r4, r1, #4
 8009846:	bfb8      	it	lt
 8009848:	18e4      	addlt	r4, r4, r3
 800984a:	f000 f8e7 	bl	8009a1c <__malloc_lock>
 800984e:	4a1e      	ldr	r2, [pc, #120]	; (80098c8 <_free_r+0x94>)
 8009850:	9801      	ldr	r0, [sp, #4]
 8009852:	6813      	ldr	r3, [r2, #0]
 8009854:	b933      	cbnz	r3, 8009864 <_free_r+0x30>
 8009856:	6063      	str	r3, [r4, #4]
 8009858:	6014      	str	r4, [r2, #0]
 800985a:	b003      	add	sp, #12
 800985c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009860:	f000 b8e2 	b.w	8009a28 <__malloc_unlock>
 8009864:	42a3      	cmp	r3, r4
 8009866:	d908      	bls.n	800987a <_free_r+0x46>
 8009868:	6825      	ldr	r5, [r4, #0]
 800986a:	1961      	adds	r1, r4, r5
 800986c:	428b      	cmp	r3, r1
 800986e:	bf01      	itttt	eq
 8009870:	6819      	ldreq	r1, [r3, #0]
 8009872:	685b      	ldreq	r3, [r3, #4]
 8009874:	1949      	addeq	r1, r1, r5
 8009876:	6021      	streq	r1, [r4, #0]
 8009878:	e7ed      	b.n	8009856 <_free_r+0x22>
 800987a:	461a      	mov	r2, r3
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	b10b      	cbz	r3, 8009884 <_free_r+0x50>
 8009880:	42a3      	cmp	r3, r4
 8009882:	d9fa      	bls.n	800987a <_free_r+0x46>
 8009884:	6811      	ldr	r1, [r2, #0]
 8009886:	1855      	adds	r5, r2, r1
 8009888:	42a5      	cmp	r5, r4
 800988a:	d10b      	bne.n	80098a4 <_free_r+0x70>
 800988c:	6824      	ldr	r4, [r4, #0]
 800988e:	4421      	add	r1, r4
 8009890:	1854      	adds	r4, r2, r1
 8009892:	42a3      	cmp	r3, r4
 8009894:	6011      	str	r1, [r2, #0]
 8009896:	d1e0      	bne.n	800985a <_free_r+0x26>
 8009898:	681c      	ldr	r4, [r3, #0]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	6053      	str	r3, [r2, #4]
 800989e:	440c      	add	r4, r1
 80098a0:	6014      	str	r4, [r2, #0]
 80098a2:	e7da      	b.n	800985a <_free_r+0x26>
 80098a4:	d902      	bls.n	80098ac <_free_r+0x78>
 80098a6:	230c      	movs	r3, #12
 80098a8:	6003      	str	r3, [r0, #0]
 80098aa:	e7d6      	b.n	800985a <_free_r+0x26>
 80098ac:	6825      	ldr	r5, [r4, #0]
 80098ae:	1961      	adds	r1, r4, r5
 80098b0:	428b      	cmp	r3, r1
 80098b2:	bf04      	itt	eq
 80098b4:	6819      	ldreq	r1, [r3, #0]
 80098b6:	685b      	ldreq	r3, [r3, #4]
 80098b8:	6063      	str	r3, [r4, #4]
 80098ba:	bf04      	itt	eq
 80098bc:	1949      	addeq	r1, r1, r5
 80098be:	6021      	streq	r1, [r4, #0]
 80098c0:	6054      	str	r4, [r2, #4]
 80098c2:	e7ca      	b.n	800985a <_free_r+0x26>
 80098c4:	b003      	add	sp, #12
 80098c6:	bd30      	pop	{r4, r5, pc}
 80098c8:	20000694 	.word	0x20000694

080098cc <malloc>:
 80098cc:	4b02      	ldr	r3, [pc, #8]	; (80098d8 <malloc+0xc>)
 80098ce:	4601      	mov	r1, r0
 80098d0:	6818      	ldr	r0, [r3, #0]
 80098d2:	f000 b823 	b.w	800991c <_malloc_r>
 80098d6:	bf00      	nop
 80098d8:	2000006c 	.word	0x2000006c

080098dc <sbrk_aligned>:
 80098dc:	b570      	push	{r4, r5, r6, lr}
 80098de:	4e0e      	ldr	r6, [pc, #56]	; (8009918 <sbrk_aligned+0x3c>)
 80098e0:	460c      	mov	r4, r1
 80098e2:	6831      	ldr	r1, [r6, #0]
 80098e4:	4605      	mov	r5, r0
 80098e6:	b911      	cbnz	r1, 80098ee <sbrk_aligned+0x12>
 80098e8:	f000 fe40 	bl	800a56c <_sbrk_r>
 80098ec:	6030      	str	r0, [r6, #0]
 80098ee:	4621      	mov	r1, r4
 80098f0:	4628      	mov	r0, r5
 80098f2:	f000 fe3b 	bl	800a56c <_sbrk_r>
 80098f6:	1c43      	adds	r3, r0, #1
 80098f8:	d00a      	beq.n	8009910 <sbrk_aligned+0x34>
 80098fa:	1cc4      	adds	r4, r0, #3
 80098fc:	f024 0403 	bic.w	r4, r4, #3
 8009900:	42a0      	cmp	r0, r4
 8009902:	d007      	beq.n	8009914 <sbrk_aligned+0x38>
 8009904:	1a21      	subs	r1, r4, r0
 8009906:	4628      	mov	r0, r5
 8009908:	f000 fe30 	bl	800a56c <_sbrk_r>
 800990c:	3001      	adds	r0, #1
 800990e:	d101      	bne.n	8009914 <sbrk_aligned+0x38>
 8009910:	f04f 34ff 	mov.w	r4, #4294967295
 8009914:	4620      	mov	r0, r4
 8009916:	bd70      	pop	{r4, r5, r6, pc}
 8009918:	20000698 	.word	0x20000698

0800991c <_malloc_r>:
 800991c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009920:	1ccd      	adds	r5, r1, #3
 8009922:	f025 0503 	bic.w	r5, r5, #3
 8009926:	3508      	adds	r5, #8
 8009928:	2d0c      	cmp	r5, #12
 800992a:	bf38      	it	cc
 800992c:	250c      	movcc	r5, #12
 800992e:	2d00      	cmp	r5, #0
 8009930:	4607      	mov	r7, r0
 8009932:	db01      	blt.n	8009938 <_malloc_r+0x1c>
 8009934:	42a9      	cmp	r1, r5
 8009936:	d905      	bls.n	8009944 <_malloc_r+0x28>
 8009938:	230c      	movs	r3, #12
 800993a:	603b      	str	r3, [r7, #0]
 800993c:	2600      	movs	r6, #0
 800993e:	4630      	mov	r0, r6
 8009940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009944:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a18 <_malloc_r+0xfc>
 8009948:	f000 f868 	bl	8009a1c <__malloc_lock>
 800994c:	f8d8 3000 	ldr.w	r3, [r8]
 8009950:	461c      	mov	r4, r3
 8009952:	bb5c      	cbnz	r4, 80099ac <_malloc_r+0x90>
 8009954:	4629      	mov	r1, r5
 8009956:	4638      	mov	r0, r7
 8009958:	f7ff ffc0 	bl	80098dc <sbrk_aligned>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	4604      	mov	r4, r0
 8009960:	d155      	bne.n	8009a0e <_malloc_r+0xf2>
 8009962:	f8d8 4000 	ldr.w	r4, [r8]
 8009966:	4626      	mov	r6, r4
 8009968:	2e00      	cmp	r6, #0
 800996a:	d145      	bne.n	80099f8 <_malloc_r+0xdc>
 800996c:	2c00      	cmp	r4, #0
 800996e:	d048      	beq.n	8009a02 <_malloc_r+0xe6>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	4631      	mov	r1, r6
 8009974:	4638      	mov	r0, r7
 8009976:	eb04 0903 	add.w	r9, r4, r3
 800997a:	f000 fdf7 	bl	800a56c <_sbrk_r>
 800997e:	4581      	cmp	r9, r0
 8009980:	d13f      	bne.n	8009a02 <_malloc_r+0xe6>
 8009982:	6821      	ldr	r1, [r4, #0]
 8009984:	1a6d      	subs	r5, r5, r1
 8009986:	4629      	mov	r1, r5
 8009988:	4638      	mov	r0, r7
 800998a:	f7ff ffa7 	bl	80098dc <sbrk_aligned>
 800998e:	3001      	adds	r0, #1
 8009990:	d037      	beq.n	8009a02 <_malloc_r+0xe6>
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	442b      	add	r3, r5
 8009996:	6023      	str	r3, [r4, #0]
 8009998:	f8d8 3000 	ldr.w	r3, [r8]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d038      	beq.n	8009a12 <_malloc_r+0xf6>
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	42a2      	cmp	r2, r4
 80099a4:	d12b      	bne.n	80099fe <_malloc_r+0xe2>
 80099a6:	2200      	movs	r2, #0
 80099a8:	605a      	str	r2, [r3, #4]
 80099aa:	e00f      	b.n	80099cc <_malloc_r+0xb0>
 80099ac:	6822      	ldr	r2, [r4, #0]
 80099ae:	1b52      	subs	r2, r2, r5
 80099b0:	d41f      	bmi.n	80099f2 <_malloc_r+0xd6>
 80099b2:	2a0b      	cmp	r2, #11
 80099b4:	d917      	bls.n	80099e6 <_malloc_r+0xca>
 80099b6:	1961      	adds	r1, r4, r5
 80099b8:	42a3      	cmp	r3, r4
 80099ba:	6025      	str	r5, [r4, #0]
 80099bc:	bf18      	it	ne
 80099be:	6059      	strne	r1, [r3, #4]
 80099c0:	6863      	ldr	r3, [r4, #4]
 80099c2:	bf08      	it	eq
 80099c4:	f8c8 1000 	streq.w	r1, [r8]
 80099c8:	5162      	str	r2, [r4, r5]
 80099ca:	604b      	str	r3, [r1, #4]
 80099cc:	4638      	mov	r0, r7
 80099ce:	f104 060b 	add.w	r6, r4, #11
 80099d2:	f000 f829 	bl	8009a28 <__malloc_unlock>
 80099d6:	f026 0607 	bic.w	r6, r6, #7
 80099da:	1d23      	adds	r3, r4, #4
 80099dc:	1af2      	subs	r2, r6, r3
 80099de:	d0ae      	beq.n	800993e <_malloc_r+0x22>
 80099e0:	1b9b      	subs	r3, r3, r6
 80099e2:	50a3      	str	r3, [r4, r2]
 80099e4:	e7ab      	b.n	800993e <_malloc_r+0x22>
 80099e6:	42a3      	cmp	r3, r4
 80099e8:	6862      	ldr	r2, [r4, #4]
 80099ea:	d1dd      	bne.n	80099a8 <_malloc_r+0x8c>
 80099ec:	f8c8 2000 	str.w	r2, [r8]
 80099f0:	e7ec      	b.n	80099cc <_malloc_r+0xb0>
 80099f2:	4623      	mov	r3, r4
 80099f4:	6864      	ldr	r4, [r4, #4]
 80099f6:	e7ac      	b.n	8009952 <_malloc_r+0x36>
 80099f8:	4634      	mov	r4, r6
 80099fa:	6876      	ldr	r6, [r6, #4]
 80099fc:	e7b4      	b.n	8009968 <_malloc_r+0x4c>
 80099fe:	4613      	mov	r3, r2
 8009a00:	e7cc      	b.n	800999c <_malloc_r+0x80>
 8009a02:	230c      	movs	r3, #12
 8009a04:	603b      	str	r3, [r7, #0]
 8009a06:	4638      	mov	r0, r7
 8009a08:	f000 f80e 	bl	8009a28 <__malloc_unlock>
 8009a0c:	e797      	b.n	800993e <_malloc_r+0x22>
 8009a0e:	6025      	str	r5, [r4, #0]
 8009a10:	e7dc      	b.n	80099cc <_malloc_r+0xb0>
 8009a12:	605b      	str	r3, [r3, #4]
 8009a14:	deff      	udf	#255	; 0xff
 8009a16:	bf00      	nop
 8009a18:	20000694 	.word	0x20000694

08009a1c <__malloc_lock>:
 8009a1c:	4801      	ldr	r0, [pc, #4]	; (8009a24 <__malloc_lock+0x8>)
 8009a1e:	f7ff b88c 	b.w	8008b3a <__retarget_lock_acquire_recursive>
 8009a22:	bf00      	nop
 8009a24:	20000690 	.word	0x20000690

08009a28 <__malloc_unlock>:
 8009a28:	4801      	ldr	r0, [pc, #4]	; (8009a30 <__malloc_unlock+0x8>)
 8009a2a:	f7ff b887 	b.w	8008b3c <__retarget_lock_release_recursive>
 8009a2e:	bf00      	nop
 8009a30:	20000690 	.word	0x20000690

08009a34 <_Balloc>:
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	69c6      	ldr	r6, [r0, #28]
 8009a38:	4604      	mov	r4, r0
 8009a3a:	460d      	mov	r5, r1
 8009a3c:	b976      	cbnz	r6, 8009a5c <_Balloc+0x28>
 8009a3e:	2010      	movs	r0, #16
 8009a40:	f7ff ff44 	bl	80098cc <malloc>
 8009a44:	4602      	mov	r2, r0
 8009a46:	61e0      	str	r0, [r4, #28]
 8009a48:	b920      	cbnz	r0, 8009a54 <_Balloc+0x20>
 8009a4a:	4b18      	ldr	r3, [pc, #96]	; (8009aac <_Balloc+0x78>)
 8009a4c:	4818      	ldr	r0, [pc, #96]	; (8009ab0 <_Balloc+0x7c>)
 8009a4e:	216b      	movs	r1, #107	; 0x6b
 8009a50:	f000 fdaa 	bl	800a5a8 <__assert_func>
 8009a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a58:	6006      	str	r6, [r0, #0]
 8009a5a:	60c6      	str	r6, [r0, #12]
 8009a5c:	69e6      	ldr	r6, [r4, #28]
 8009a5e:	68f3      	ldr	r3, [r6, #12]
 8009a60:	b183      	cbz	r3, 8009a84 <_Balloc+0x50>
 8009a62:	69e3      	ldr	r3, [r4, #28]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a6a:	b9b8      	cbnz	r0, 8009a9c <_Balloc+0x68>
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	fa01 f605 	lsl.w	r6, r1, r5
 8009a72:	1d72      	adds	r2, r6, #5
 8009a74:	0092      	lsls	r2, r2, #2
 8009a76:	4620      	mov	r0, r4
 8009a78:	f000 fdb4 	bl	800a5e4 <_calloc_r>
 8009a7c:	b160      	cbz	r0, 8009a98 <_Balloc+0x64>
 8009a7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a82:	e00e      	b.n	8009aa2 <_Balloc+0x6e>
 8009a84:	2221      	movs	r2, #33	; 0x21
 8009a86:	2104      	movs	r1, #4
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 fdab 	bl	800a5e4 <_calloc_r>
 8009a8e:	69e3      	ldr	r3, [r4, #28]
 8009a90:	60f0      	str	r0, [r6, #12]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e4      	bne.n	8009a62 <_Balloc+0x2e>
 8009a98:	2000      	movs	r0, #0
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	6802      	ldr	r2, [r0, #0]
 8009a9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009aa8:	e7f7      	b.n	8009a9a <_Balloc+0x66>
 8009aaa:	bf00      	nop
 8009aac:	0800dc55 	.word	0x0800dc55
 8009ab0:	0800dcd5 	.word	0x0800dcd5

08009ab4 <_Bfree>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	69c6      	ldr	r6, [r0, #28]
 8009ab8:	4605      	mov	r5, r0
 8009aba:	460c      	mov	r4, r1
 8009abc:	b976      	cbnz	r6, 8009adc <_Bfree+0x28>
 8009abe:	2010      	movs	r0, #16
 8009ac0:	f7ff ff04 	bl	80098cc <malloc>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	61e8      	str	r0, [r5, #28]
 8009ac8:	b920      	cbnz	r0, 8009ad4 <_Bfree+0x20>
 8009aca:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <_Bfree+0x3c>)
 8009acc:	4809      	ldr	r0, [pc, #36]	; (8009af4 <_Bfree+0x40>)
 8009ace:	218f      	movs	r1, #143	; 0x8f
 8009ad0:	f000 fd6a 	bl	800a5a8 <__assert_func>
 8009ad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ad8:	6006      	str	r6, [r0, #0]
 8009ada:	60c6      	str	r6, [r0, #12]
 8009adc:	b13c      	cbz	r4, 8009aee <_Bfree+0x3a>
 8009ade:	69eb      	ldr	r3, [r5, #28]
 8009ae0:	6862      	ldr	r2, [r4, #4]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ae8:	6021      	str	r1, [r4, #0]
 8009aea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	0800dc55 	.word	0x0800dc55
 8009af4:	0800dcd5 	.word	0x0800dcd5

08009af8 <__multadd>:
 8009af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009afc:	690d      	ldr	r5, [r1, #16]
 8009afe:	4607      	mov	r7, r0
 8009b00:	460c      	mov	r4, r1
 8009b02:	461e      	mov	r6, r3
 8009b04:	f101 0c14 	add.w	ip, r1, #20
 8009b08:	2000      	movs	r0, #0
 8009b0a:	f8dc 3000 	ldr.w	r3, [ip]
 8009b0e:	b299      	uxth	r1, r3
 8009b10:	fb02 6101 	mla	r1, r2, r1, r6
 8009b14:	0c1e      	lsrs	r6, r3, #16
 8009b16:	0c0b      	lsrs	r3, r1, #16
 8009b18:	fb02 3306 	mla	r3, r2, r6, r3
 8009b1c:	b289      	uxth	r1, r1
 8009b1e:	3001      	adds	r0, #1
 8009b20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b24:	4285      	cmp	r5, r0
 8009b26:	f84c 1b04 	str.w	r1, [ip], #4
 8009b2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b2e:	dcec      	bgt.n	8009b0a <__multadd+0x12>
 8009b30:	b30e      	cbz	r6, 8009b76 <__multadd+0x7e>
 8009b32:	68a3      	ldr	r3, [r4, #8]
 8009b34:	42ab      	cmp	r3, r5
 8009b36:	dc19      	bgt.n	8009b6c <__multadd+0x74>
 8009b38:	6861      	ldr	r1, [r4, #4]
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	3101      	adds	r1, #1
 8009b3e:	f7ff ff79 	bl	8009a34 <_Balloc>
 8009b42:	4680      	mov	r8, r0
 8009b44:	b928      	cbnz	r0, 8009b52 <__multadd+0x5a>
 8009b46:	4602      	mov	r2, r0
 8009b48:	4b0c      	ldr	r3, [pc, #48]	; (8009b7c <__multadd+0x84>)
 8009b4a:	480d      	ldr	r0, [pc, #52]	; (8009b80 <__multadd+0x88>)
 8009b4c:	21ba      	movs	r1, #186	; 0xba
 8009b4e:	f000 fd2b 	bl	800a5a8 <__assert_func>
 8009b52:	6922      	ldr	r2, [r4, #16]
 8009b54:	3202      	adds	r2, #2
 8009b56:	f104 010c 	add.w	r1, r4, #12
 8009b5a:	0092      	lsls	r2, r2, #2
 8009b5c:	300c      	adds	r0, #12
 8009b5e:	f000 fd15 	bl	800a58c <memcpy>
 8009b62:	4621      	mov	r1, r4
 8009b64:	4638      	mov	r0, r7
 8009b66:	f7ff ffa5 	bl	8009ab4 <_Bfree>
 8009b6a:	4644      	mov	r4, r8
 8009b6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b70:	3501      	adds	r5, #1
 8009b72:	615e      	str	r6, [r3, #20]
 8009b74:	6125      	str	r5, [r4, #16]
 8009b76:	4620      	mov	r0, r4
 8009b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b7c:	0800dcc4 	.word	0x0800dcc4
 8009b80:	0800dcd5 	.word	0x0800dcd5

08009b84 <__hi0bits>:
 8009b84:	0c03      	lsrs	r3, r0, #16
 8009b86:	041b      	lsls	r3, r3, #16
 8009b88:	b9d3      	cbnz	r3, 8009bc0 <__hi0bits+0x3c>
 8009b8a:	0400      	lsls	r0, r0, #16
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b92:	bf04      	itt	eq
 8009b94:	0200      	lsleq	r0, r0, #8
 8009b96:	3308      	addeq	r3, #8
 8009b98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b9c:	bf04      	itt	eq
 8009b9e:	0100      	lsleq	r0, r0, #4
 8009ba0:	3304      	addeq	r3, #4
 8009ba2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ba6:	bf04      	itt	eq
 8009ba8:	0080      	lsleq	r0, r0, #2
 8009baa:	3302      	addeq	r3, #2
 8009bac:	2800      	cmp	r0, #0
 8009bae:	db05      	blt.n	8009bbc <__hi0bits+0x38>
 8009bb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009bb4:	f103 0301 	add.w	r3, r3, #1
 8009bb8:	bf08      	it	eq
 8009bba:	2320      	moveq	r3, #32
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	4770      	bx	lr
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	e7e4      	b.n	8009b8e <__hi0bits+0xa>

08009bc4 <__lo0bits>:
 8009bc4:	6803      	ldr	r3, [r0, #0]
 8009bc6:	f013 0207 	ands.w	r2, r3, #7
 8009bca:	d00c      	beq.n	8009be6 <__lo0bits+0x22>
 8009bcc:	07d9      	lsls	r1, r3, #31
 8009bce:	d422      	bmi.n	8009c16 <__lo0bits+0x52>
 8009bd0:	079a      	lsls	r2, r3, #30
 8009bd2:	bf49      	itett	mi
 8009bd4:	085b      	lsrmi	r3, r3, #1
 8009bd6:	089b      	lsrpl	r3, r3, #2
 8009bd8:	6003      	strmi	r3, [r0, #0]
 8009bda:	2201      	movmi	r2, #1
 8009bdc:	bf5c      	itt	pl
 8009bde:	6003      	strpl	r3, [r0, #0]
 8009be0:	2202      	movpl	r2, #2
 8009be2:	4610      	mov	r0, r2
 8009be4:	4770      	bx	lr
 8009be6:	b299      	uxth	r1, r3
 8009be8:	b909      	cbnz	r1, 8009bee <__lo0bits+0x2a>
 8009bea:	0c1b      	lsrs	r3, r3, #16
 8009bec:	2210      	movs	r2, #16
 8009bee:	b2d9      	uxtb	r1, r3
 8009bf0:	b909      	cbnz	r1, 8009bf6 <__lo0bits+0x32>
 8009bf2:	3208      	adds	r2, #8
 8009bf4:	0a1b      	lsrs	r3, r3, #8
 8009bf6:	0719      	lsls	r1, r3, #28
 8009bf8:	bf04      	itt	eq
 8009bfa:	091b      	lsreq	r3, r3, #4
 8009bfc:	3204      	addeq	r2, #4
 8009bfe:	0799      	lsls	r1, r3, #30
 8009c00:	bf04      	itt	eq
 8009c02:	089b      	lsreq	r3, r3, #2
 8009c04:	3202      	addeq	r2, #2
 8009c06:	07d9      	lsls	r1, r3, #31
 8009c08:	d403      	bmi.n	8009c12 <__lo0bits+0x4e>
 8009c0a:	085b      	lsrs	r3, r3, #1
 8009c0c:	f102 0201 	add.w	r2, r2, #1
 8009c10:	d003      	beq.n	8009c1a <__lo0bits+0x56>
 8009c12:	6003      	str	r3, [r0, #0]
 8009c14:	e7e5      	b.n	8009be2 <__lo0bits+0x1e>
 8009c16:	2200      	movs	r2, #0
 8009c18:	e7e3      	b.n	8009be2 <__lo0bits+0x1e>
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	e7e1      	b.n	8009be2 <__lo0bits+0x1e>
	...

08009c20 <__i2b>:
 8009c20:	b510      	push	{r4, lr}
 8009c22:	460c      	mov	r4, r1
 8009c24:	2101      	movs	r1, #1
 8009c26:	f7ff ff05 	bl	8009a34 <_Balloc>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	b928      	cbnz	r0, 8009c3a <__i2b+0x1a>
 8009c2e:	4b05      	ldr	r3, [pc, #20]	; (8009c44 <__i2b+0x24>)
 8009c30:	4805      	ldr	r0, [pc, #20]	; (8009c48 <__i2b+0x28>)
 8009c32:	f240 1145 	movw	r1, #325	; 0x145
 8009c36:	f000 fcb7 	bl	800a5a8 <__assert_func>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	6144      	str	r4, [r0, #20]
 8009c3e:	6103      	str	r3, [r0, #16]
 8009c40:	bd10      	pop	{r4, pc}
 8009c42:	bf00      	nop
 8009c44:	0800dcc4 	.word	0x0800dcc4
 8009c48:	0800dcd5 	.word	0x0800dcd5

08009c4c <__multiply>:
 8009c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	4691      	mov	r9, r2
 8009c52:	690a      	ldr	r2, [r1, #16]
 8009c54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	bfb8      	it	lt
 8009c5c:	460b      	movlt	r3, r1
 8009c5e:	460c      	mov	r4, r1
 8009c60:	bfbc      	itt	lt
 8009c62:	464c      	movlt	r4, r9
 8009c64:	4699      	movlt	r9, r3
 8009c66:	6927      	ldr	r7, [r4, #16]
 8009c68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c6c:	68a3      	ldr	r3, [r4, #8]
 8009c6e:	6861      	ldr	r1, [r4, #4]
 8009c70:	eb07 060a 	add.w	r6, r7, sl
 8009c74:	42b3      	cmp	r3, r6
 8009c76:	b085      	sub	sp, #20
 8009c78:	bfb8      	it	lt
 8009c7a:	3101      	addlt	r1, #1
 8009c7c:	f7ff feda 	bl	8009a34 <_Balloc>
 8009c80:	b930      	cbnz	r0, 8009c90 <__multiply+0x44>
 8009c82:	4602      	mov	r2, r0
 8009c84:	4b44      	ldr	r3, [pc, #272]	; (8009d98 <__multiply+0x14c>)
 8009c86:	4845      	ldr	r0, [pc, #276]	; (8009d9c <__multiply+0x150>)
 8009c88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009c8c:	f000 fc8c 	bl	800a5a8 <__assert_func>
 8009c90:	f100 0514 	add.w	r5, r0, #20
 8009c94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c98:	462b      	mov	r3, r5
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	4543      	cmp	r3, r8
 8009c9e:	d321      	bcc.n	8009ce4 <__multiply+0x98>
 8009ca0:	f104 0314 	add.w	r3, r4, #20
 8009ca4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ca8:	f109 0314 	add.w	r3, r9, #20
 8009cac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009cb0:	9202      	str	r2, [sp, #8]
 8009cb2:	1b3a      	subs	r2, r7, r4
 8009cb4:	3a15      	subs	r2, #21
 8009cb6:	f022 0203 	bic.w	r2, r2, #3
 8009cba:	3204      	adds	r2, #4
 8009cbc:	f104 0115 	add.w	r1, r4, #21
 8009cc0:	428f      	cmp	r7, r1
 8009cc2:	bf38      	it	cc
 8009cc4:	2204      	movcc	r2, #4
 8009cc6:	9201      	str	r2, [sp, #4]
 8009cc8:	9a02      	ldr	r2, [sp, #8]
 8009cca:	9303      	str	r3, [sp, #12]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d80c      	bhi.n	8009cea <__multiply+0x9e>
 8009cd0:	2e00      	cmp	r6, #0
 8009cd2:	dd03      	ble.n	8009cdc <__multiply+0x90>
 8009cd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d05b      	beq.n	8009d94 <__multiply+0x148>
 8009cdc:	6106      	str	r6, [r0, #16]
 8009cde:	b005      	add	sp, #20
 8009ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce4:	f843 2b04 	str.w	r2, [r3], #4
 8009ce8:	e7d8      	b.n	8009c9c <__multiply+0x50>
 8009cea:	f8b3 a000 	ldrh.w	sl, [r3]
 8009cee:	f1ba 0f00 	cmp.w	sl, #0
 8009cf2:	d024      	beq.n	8009d3e <__multiply+0xf2>
 8009cf4:	f104 0e14 	add.w	lr, r4, #20
 8009cf8:	46a9      	mov	r9, r5
 8009cfa:	f04f 0c00 	mov.w	ip, #0
 8009cfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d02:	f8d9 1000 	ldr.w	r1, [r9]
 8009d06:	fa1f fb82 	uxth.w	fp, r2
 8009d0a:	b289      	uxth	r1, r1
 8009d0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d14:	f8d9 2000 	ldr.w	r2, [r9]
 8009d18:	4461      	add	r1, ip
 8009d1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d26:	b289      	uxth	r1, r1
 8009d28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d2c:	4577      	cmp	r7, lr
 8009d2e:	f849 1b04 	str.w	r1, [r9], #4
 8009d32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d36:	d8e2      	bhi.n	8009cfe <__multiply+0xb2>
 8009d38:	9a01      	ldr	r2, [sp, #4]
 8009d3a:	f845 c002 	str.w	ip, [r5, r2]
 8009d3e:	9a03      	ldr	r2, [sp, #12]
 8009d40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d44:	3304      	adds	r3, #4
 8009d46:	f1b9 0f00 	cmp.w	r9, #0
 8009d4a:	d021      	beq.n	8009d90 <__multiply+0x144>
 8009d4c:	6829      	ldr	r1, [r5, #0]
 8009d4e:	f104 0c14 	add.w	ip, r4, #20
 8009d52:	46ae      	mov	lr, r5
 8009d54:	f04f 0a00 	mov.w	sl, #0
 8009d58:	f8bc b000 	ldrh.w	fp, [ip]
 8009d5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d60:	fb09 220b 	mla	r2, r9, fp, r2
 8009d64:	4452      	add	r2, sl
 8009d66:	b289      	uxth	r1, r1
 8009d68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d6c:	f84e 1b04 	str.w	r1, [lr], #4
 8009d70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009d74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d78:	f8be 1000 	ldrh.w	r1, [lr]
 8009d7c:	fb09 110a 	mla	r1, r9, sl, r1
 8009d80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009d84:	4567      	cmp	r7, ip
 8009d86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d8a:	d8e5      	bhi.n	8009d58 <__multiply+0x10c>
 8009d8c:	9a01      	ldr	r2, [sp, #4]
 8009d8e:	50a9      	str	r1, [r5, r2]
 8009d90:	3504      	adds	r5, #4
 8009d92:	e799      	b.n	8009cc8 <__multiply+0x7c>
 8009d94:	3e01      	subs	r6, #1
 8009d96:	e79b      	b.n	8009cd0 <__multiply+0x84>
 8009d98:	0800dcc4 	.word	0x0800dcc4
 8009d9c:	0800dcd5 	.word	0x0800dcd5

08009da0 <__pow5mult>:
 8009da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009da4:	4615      	mov	r5, r2
 8009da6:	f012 0203 	ands.w	r2, r2, #3
 8009daa:	4606      	mov	r6, r0
 8009dac:	460f      	mov	r7, r1
 8009dae:	d007      	beq.n	8009dc0 <__pow5mult+0x20>
 8009db0:	4c25      	ldr	r4, [pc, #148]	; (8009e48 <__pow5mult+0xa8>)
 8009db2:	3a01      	subs	r2, #1
 8009db4:	2300      	movs	r3, #0
 8009db6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dba:	f7ff fe9d 	bl	8009af8 <__multadd>
 8009dbe:	4607      	mov	r7, r0
 8009dc0:	10ad      	asrs	r5, r5, #2
 8009dc2:	d03d      	beq.n	8009e40 <__pow5mult+0xa0>
 8009dc4:	69f4      	ldr	r4, [r6, #28]
 8009dc6:	b97c      	cbnz	r4, 8009de8 <__pow5mult+0x48>
 8009dc8:	2010      	movs	r0, #16
 8009dca:	f7ff fd7f 	bl	80098cc <malloc>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	61f0      	str	r0, [r6, #28]
 8009dd2:	b928      	cbnz	r0, 8009de0 <__pow5mult+0x40>
 8009dd4:	4b1d      	ldr	r3, [pc, #116]	; (8009e4c <__pow5mult+0xac>)
 8009dd6:	481e      	ldr	r0, [pc, #120]	; (8009e50 <__pow5mult+0xb0>)
 8009dd8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009ddc:	f000 fbe4 	bl	800a5a8 <__assert_func>
 8009de0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009de4:	6004      	str	r4, [r0, #0]
 8009de6:	60c4      	str	r4, [r0, #12]
 8009de8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009dec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009df0:	b94c      	cbnz	r4, 8009e06 <__pow5mult+0x66>
 8009df2:	f240 2171 	movw	r1, #625	; 0x271
 8009df6:	4630      	mov	r0, r6
 8009df8:	f7ff ff12 	bl	8009c20 <__i2b>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e02:	4604      	mov	r4, r0
 8009e04:	6003      	str	r3, [r0, #0]
 8009e06:	f04f 0900 	mov.w	r9, #0
 8009e0a:	07eb      	lsls	r3, r5, #31
 8009e0c:	d50a      	bpl.n	8009e24 <__pow5mult+0x84>
 8009e0e:	4639      	mov	r1, r7
 8009e10:	4622      	mov	r2, r4
 8009e12:	4630      	mov	r0, r6
 8009e14:	f7ff ff1a 	bl	8009c4c <__multiply>
 8009e18:	4639      	mov	r1, r7
 8009e1a:	4680      	mov	r8, r0
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f7ff fe49 	bl	8009ab4 <_Bfree>
 8009e22:	4647      	mov	r7, r8
 8009e24:	106d      	asrs	r5, r5, #1
 8009e26:	d00b      	beq.n	8009e40 <__pow5mult+0xa0>
 8009e28:	6820      	ldr	r0, [r4, #0]
 8009e2a:	b938      	cbnz	r0, 8009e3c <__pow5mult+0x9c>
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	4621      	mov	r1, r4
 8009e30:	4630      	mov	r0, r6
 8009e32:	f7ff ff0b 	bl	8009c4c <__multiply>
 8009e36:	6020      	str	r0, [r4, #0]
 8009e38:	f8c0 9000 	str.w	r9, [r0]
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	e7e4      	b.n	8009e0a <__pow5mult+0x6a>
 8009e40:	4638      	mov	r0, r7
 8009e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e46:	bf00      	nop
 8009e48:	0800de20 	.word	0x0800de20
 8009e4c:	0800dc55 	.word	0x0800dc55
 8009e50:	0800dcd5 	.word	0x0800dcd5

08009e54 <__lshift>:
 8009e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e58:	460c      	mov	r4, r1
 8009e5a:	6849      	ldr	r1, [r1, #4]
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e62:	68a3      	ldr	r3, [r4, #8]
 8009e64:	4607      	mov	r7, r0
 8009e66:	4691      	mov	r9, r2
 8009e68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e6c:	f108 0601 	add.w	r6, r8, #1
 8009e70:	42b3      	cmp	r3, r6
 8009e72:	db0b      	blt.n	8009e8c <__lshift+0x38>
 8009e74:	4638      	mov	r0, r7
 8009e76:	f7ff fddd 	bl	8009a34 <_Balloc>
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	b948      	cbnz	r0, 8009e92 <__lshift+0x3e>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	4b28      	ldr	r3, [pc, #160]	; (8009f24 <__lshift+0xd0>)
 8009e82:	4829      	ldr	r0, [pc, #164]	; (8009f28 <__lshift+0xd4>)
 8009e84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009e88:	f000 fb8e 	bl	800a5a8 <__assert_func>
 8009e8c:	3101      	adds	r1, #1
 8009e8e:	005b      	lsls	r3, r3, #1
 8009e90:	e7ee      	b.n	8009e70 <__lshift+0x1c>
 8009e92:	2300      	movs	r3, #0
 8009e94:	f100 0114 	add.w	r1, r0, #20
 8009e98:	f100 0210 	add.w	r2, r0, #16
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	4553      	cmp	r3, sl
 8009ea0:	db33      	blt.n	8009f0a <__lshift+0xb6>
 8009ea2:	6920      	ldr	r0, [r4, #16]
 8009ea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ea8:	f104 0314 	add.w	r3, r4, #20
 8009eac:	f019 091f 	ands.w	r9, r9, #31
 8009eb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009eb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009eb8:	d02b      	beq.n	8009f12 <__lshift+0xbe>
 8009eba:	f1c9 0e20 	rsb	lr, r9, #32
 8009ebe:	468a      	mov	sl, r1
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	6818      	ldr	r0, [r3, #0]
 8009ec4:	fa00 f009 	lsl.w	r0, r0, r9
 8009ec8:	4310      	orrs	r0, r2
 8009eca:	f84a 0b04 	str.w	r0, [sl], #4
 8009ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ed2:	459c      	cmp	ip, r3
 8009ed4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ed8:	d8f3      	bhi.n	8009ec2 <__lshift+0x6e>
 8009eda:	ebac 0304 	sub.w	r3, ip, r4
 8009ede:	3b15      	subs	r3, #21
 8009ee0:	f023 0303 	bic.w	r3, r3, #3
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	f104 0015 	add.w	r0, r4, #21
 8009eea:	4584      	cmp	ip, r0
 8009eec:	bf38      	it	cc
 8009eee:	2304      	movcc	r3, #4
 8009ef0:	50ca      	str	r2, [r1, r3]
 8009ef2:	b10a      	cbz	r2, 8009ef8 <__lshift+0xa4>
 8009ef4:	f108 0602 	add.w	r6, r8, #2
 8009ef8:	3e01      	subs	r6, #1
 8009efa:	4638      	mov	r0, r7
 8009efc:	612e      	str	r6, [r5, #16]
 8009efe:	4621      	mov	r1, r4
 8009f00:	f7ff fdd8 	bl	8009ab4 <_Bfree>
 8009f04:	4628      	mov	r0, r5
 8009f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f0e:	3301      	adds	r3, #1
 8009f10:	e7c5      	b.n	8009e9e <__lshift+0x4a>
 8009f12:	3904      	subs	r1, #4
 8009f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f18:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f1c:	459c      	cmp	ip, r3
 8009f1e:	d8f9      	bhi.n	8009f14 <__lshift+0xc0>
 8009f20:	e7ea      	b.n	8009ef8 <__lshift+0xa4>
 8009f22:	bf00      	nop
 8009f24:	0800dcc4 	.word	0x0800dcc4
 8009f28:	0800dcd5 	.word	0x0800dcd5

08009f2c <__mcmp>:
 8009f2c:	b530      	push	{r4, r5, lr}
 8009f2e:	6902      	ldr	r2, [r0, #16]
 8009f30:	690c      	ldr	r4, [r1, #16]
 8009f32:	1b12      	subs	r2, r2, r4
 8009f34:	d10e      	bne.n	8009f54 <__mcmp+0x28>
 8009f36:	f100 0314 	add.w	r3, r0, #20
 8009f3a:	3114      	adds	r1, #20
 8009f3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f4c:	42a5      	cmp	r5, r4
 8009f4e:	d003      	beq.n	8009f58 <__mcmp+0x2c>
 8009f50:	d305      	bcc.n	8009f5e <__mcmp+0x32>
 8009f52:	2201      	movs	r2, #1
 8009f54:	4610      	mov	r0, r2
 8009f56:	bd30      	pop	{r4, r5, pc}
 8009f58:	4283      	cmp	r3, r0
 8009f5a:	d3f3      	bcc.n	8009f44 <__mcmp+0x18>
 8009f5c:	e7fa      	b.n	8009f54 <__mcmp+0x28>
 8009f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f62:	e7f7      	b.n	8009f54 <__mcmp+0x28>

08009f64 <__mdiff>:
 8009f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f68:	460c      	mov	r4, r1
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	4620      	mov	r0, r4
 8009f70:	4690      	mov	r8, r2
 8009f72:	f7ff ffdb 	bl	8009f2c <__mcmp>
 8009f76:	1e05      	subs	r5, r0, #0
 8009f78:	d110      	bne.n	8009f9c <__mdiff+0x38>
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f7ff fd59 	bl	8009a34 <_Balloc>
 8009f82:	b930      	cbnz	r0, 8009f92 <__mdiff+0x2e>
 8009f84:	4b3a      	ldr	r3, [pc, #232]	; (800a070 <__mdiff+0x10c>)
 8009f86:	4602      	mov	r2, r0
 8009f88:	f240 2137 	movw	r1, #567	; 0x237
 8009f8c:	4839      	ldr	r0, [pc, #228]	; (800a074 <__mdiff+0x110>)
 8009f8e:	f000 fb0b 	bl	800a5a8 <__assert_func>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9c:	bfa4      	itt	ge
 8009f9e:	4643      	movge	r3, r8
 8009fa0:	46a0      	movge	r8, r4
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009fa8:	bfa6      	itte	ge
 8009faa:	461c      	movge	r4, r3
 8009fac:	2500      	movge	r5, #0
 8009fae:	2501      	movlt	r5, #1
 8009fb0:	f7ff fd40 	bl	8009a34 <_Balloc>
 8009fb4:	b920      	cbnz	r0, 8009fc0 <__mdiff+0x5c>
 8009fb6:	4b2e      	ldr	r3, [pc, #184]	; (800a070 <__mdiff+0x10c>)
 8009fb8:	4602      	mov	r2, r0
 8009fba:	f240 2145 	movw	r1, #581	; 0x245
 8009fbe:	e7e5      	b.n	8009f8c <__mdiff+0x28>
 8009fc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009fc4:	6926      	ldr	r6, [r4, #16]
 8009fc6:	60c5      	str	r5, [r0, #12]
 8009fc8:	f104 0914 	add.w	r9, r4, #20
 8009fcc:	f108 0514 	add.w	r5, r8, #20
 8009fd0:	f100 0e14 	add.w	lr, r0, #20
 8009fd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009fd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009fdc:	f108 0210 	add.w	r2, r8, #16
 8009fe0:	46f2      	mov	sl, lr
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009fe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009fec:	fa11 f88b 	uxtah	r8, r1, fp
 8009ff0:	b299      	uxth	r1, r3
 8009ff2:	0c1b      	lsrs	r3, r3, #16
 8009ff4:	eba8 0801 	sub.w	r8, r8, r1
 8009ff8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ffc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a000:	fa1f f888 	uxth.w	r8, r8
 800a004:	1419      	asrs	r1, r3, #16
 800a006:	454e      	cmp	r6, r9
 800a008:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a00c:	f84a 3b04 	str.w	r3, [sl], #4
 800a010:	d8e8      	bhi.n	8009fe4 <__mdiff+0x80>
 800a012:	1b33      	subs	r3, r6, r4
 800a014:	3b15      	subs	r3, #21
 800a016:	f023 0303 	bic.w	r3, r3, #3
 800a01a:	3304      	adds	r3, #4
 800a01c:	3415      	adds	r4, #21
 800a01e:	42a6      	cmp	r6, r4
 800a020:	bf38      	it	cc
 800a022:	2304      	movcc	r3, #4
 800a024:	441d      	add	r5, r3
 800a026:	4473      	add	r3, lr
 800a028:	469e      	mov	lr, r3
 800a02a:	462e      	mov	r6, r5
 800a02c:	4566      	cmp	r6, ip
 800a02e:	d30e      	bcc.n	800a04e <__mdiff+0xea>
 800a030:	f10c 0203 	add.w	r2, ip, #3
 800a034:	1b52      	subs	r2, r2, r5
 800a036:	f022 0203 	bic.w	r2, r2, #3
 800a03a:	3d03      	subs	r5, #3
 800a03c:	45ac      	cmp	ip, r5
 800a03e:	bf38      	it	cc
 800a040:	2200      	movcc	r2, #0
 800a042:	4413      	add	r3, r2
 800a044:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a048:	b17a      	cbz	r2, 800a06a <__mdiff+0x106>
 800a04a:	6107      	str	r7, [r0, #16]
 800a04c:	e7a4      	b.n	8009f98 <__mdiff+0x34>
 800a04e:	f856 8b04 	ldr.w	r8, [r6], #4
 800a052:	fa11 f288 	uxtah	r2, r1, r8
 800a056:	1414      	asrs	r4, r2, #16
 800a058:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a05c:	b292      	uxth	r2, r2
 800a05e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a062:	f84e 2b04 	str.w	r2, [lr], #4
 800a066:	1421      	asrs	r1, r4, #16
 800a068:	e7e0      	b.n	800a02c <__mdiff+0xc8>
 800a06a:	3f01      	subs	r7, #1
 800a06c:	e7ea      	b.n	800a044 <__mdiff+0xe0>
 800a06e:	bf00      	nop
 800a070:	0800dcc4 	.word	0x0800dcc4
 800a074:	0800dcd5 	.word	0x0800dcd5

0800a078 <__d2b>:
 800a078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a07c:	460f      	mov	r7, r1
 800a07e:	2101      	movs	r1, #1
 800a080:	ec59 8b10 	vmov	r8, r9, d0
 800a084:	4616      	mov	r6, r2
 800a086:	f7ff fcd5 	bl	8009a34 <_Balloc>
 800a08a:	4604      	mov	r4, r0
 800a08c:	b930      	cbnz	r0, 800a09c <__d2b+0x24>
 800a08e:	4602      	mov	r2, r0
 800a090:	4b24      	ldr	r3, [pc, #144]	; (800a124 <__d2b+0xac>)
 800a092:	4825      	ldr	r0, [pc, #148]	; (800a128 <__d2b+0xb0>)
 800a094:	f240 310f 	movw	r1, #783	; 0x30f
 800a098:	f000 fa86 	bl	800a5a8 <__assert_func>
 800a09c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a0a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0a4:	bb2d      	cbnz	r5, 800a0f2 <__d2b+0x7a>
 800a0a6:	9301      	str	r3, [sp, #4]
 800a0a8:	f1b8 0300 	subs.w	r3, r8, #0
 800a0ac:	d026      	beq.n	800a0fc <__d2b+0x84>
 800a0ae:	4668      	mov	r0, sp
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	f7ff fd87 	bl	8009bc4 <__lo0bits>
 800a0b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a0ba:	b1e8      	cbz	r0, 800a0f8 <__d2b+0x80>
 800a0bc:	f1c0 0320 	rsb	r3, r0, #32
 800a0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	40c2      	lsrs	r2, r0
 800a0c8:	6163      	str	r3, [r4, #20]
 800a0ca:	9201      	str	r2, [sp, #4]
 800a0cc:	9b01      	ldr	r3, [sp, #4]
 800a0ce:	61a3      	str	r3, [r4, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	bf14      	ite	ne
 800a0d4:	2202      	movne	r2, #2
 800a0d6:	2201      	moveq	r2, #1
 800a0d8:	6122      	str	r2, [r4, #16]
 800a0da:	b1bd      	cbz	r5, 800a10c <__d2b+0x94>
 800a0dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0e0:	4405      	add	r5, r0
 800a0e2:	603d      	str	r5, [r7, #0]
 800a0e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0e8:	6030      	str	r0, [r6, #0]
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	b003      	add	sp, #12
 800a0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0f6:	e7d6      	b.n	800a0a6 <__d2b+0x2e>
 800a0f8:	6161      	str	r1, [r4, #20]
 800a0fa:	e7e7      	b.n	800a0cc <__d2b+0x54>
 800a0fc:	a801      	add	r0, sp, #4
 800a0fe:	f7ff fd61 	bl	8009bc4 <__lo0bits>
 800a102:	9b01      	ldr	r3, [sp, #4]
 800a104:	6163      	str	r3, [r4, #20]
 800a106:	3020      	adds	r0, #32
 800a108:	2201      	movs	r2, #1
 800a10a:	e7e5      	b.n	800a0d8 <__d2b+0x60>
 800a10c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a110:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a114:	6038      	str	r0, [r7, #0]
 800a116:	6918      	ldr	r0, [r3, #16]
 800a118:	f7ff fd34 	bl	8009b84 <__hi0bits>
 800a11c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a120:	e7e2      	b.n	800a0e8 <__d2b+0x70>
 800a122:	bf00      	nop
 800a124:	0800dcc4 	.word	0x0800dcc4
 800a128:	0800dcd5 	.word	0x0800dcd5

0800a12c <__ssputs_r>:
 800a12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a130:	688e      	ldr	r6, [r1, #8]
 800a132:	461f      	mov	r7, r3
 800a134:	42be      	cmp	r6, r7
 800a136:	680b      	ldr	r3, [r1, #0]
 800a138:	4682      	mov	sl, r0
 800a13a:	460c      	mov	r4, r1
 800a13c:	4690      	mov	r8, r2
 800a13e:	d82c      	bhi.n	800a19a <__ssputs_r+0x6e>
 800a140:	898a      	ldrh	r2, [r1, #12]
 800a142:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a146:	d026      	beq.n	800a196 <__ssputs_r+0x6a>
 800a148:	6965      	ldr	r5, [r4, #20]
 800a14a:	6909      	ldr	r1, [r1, #16]
 800a14c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a150:	eba3 0901 	sub.w	r9, r3, r1
 800a154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a158:	1c7b      	adds	r3, r7, #1
 800a15a:	444b      	add	r3, r9
 800a15c:	106d      	asrs	r5, r5, #1
 800a15e:	429d      	cmp	r5, r3
 800a160:	bf38      	it	cc
 800a162:	461d      	movcc	r5, r3
 800a164:	0553      	lsls	r3, r2, #21
 800a166:	d527      	bpl.n	800a1b8 <__ssputs_r+0x8c>
 800a168:	4629      	mov	r1, r5
 800a16a:	f7ff fbd7 	bl	800991c <_malloc_r>
 800a16e:	4606      	mov	r6, r0
 800a170:	b360      	cbz	r0, 800a1cc <__ssputs_r+0xa0>
 800a172:	6921      	ldr	r1, [r4, #16]
 800a174:	464a      	mov	r2, r9
 800a176:	f000 fa09 	bl	800a58c <memcpy>
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a184:	81a3      	strh	r3, [r4, #12]
 800a186:	6126      	str	r6, [r4, #16]
 800a188:	6165      	str	r5, [r4, #20]
 800a18a:	444e      	add	r6, r9
 800a18c:	eba5 0509 	sub.w	r5, r5, r9
 800a190:	6026      	str	r6, [r4, #0]
 800a192:	60a5      	str	r5, [r4, #8]
 800a194:	463e      	mov	r6, r7
 800a196:	42be      	cmp	r6, r7
 800a198:	d900      	bls.n	800a19c <__ssputs_r+0x70>
 800a19a:	463e      	mov	r6, r7
 800a19c:	6820      	ldr	r0, [r4, #0]
 800a19e:	4632      	mov	r2, r6
 800a1a0:	4641      	mov	r1, r8
 800a1a2:	f000 f9c9 	bl	800a538 <memmove>
 800a1a6:	68a3      	ldr	r3, [r4, #8]
 800a1a8:	1b9b      	subs	r3, r3, r6
 800a1aa:	60a3      	str	r3, [r4, #8]
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	4433      	add	r3, r6
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b8:	462a      	mov	r2, r5
 800a1ba:	f000 fa3b 	bl	800a634 <_realloc_r>
 800a1be:	4606      	mov	r6, r0
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d1e0      	bne.n	800a186 <__ssputs_r+0x5a>
 800a1c4:	6921      	ldr	r1, [r4, #16]
 800a1c6:	4650      	mov	r0, sl
 800a1c8:	f7ff fb34 	bl	8009834 <_free_r>
 800a1cc:	230c      	movs	r3, #12
 800a1ce:	f8ca 3000 	str.w	r3, [sl]
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d8:	81a3      	strh	r3, [r4, #12]
 800a1da:	f04f 30ff 	mov.w	r0, #4294967295
 800a1de:	e7e9      	b.n	800a1b4 <__ssputs_r+0x88>

0800a1e0 <_svfiprintf_r>:
 800a1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e4:	4698      	mov	r8, r3
 800a1e6:	898b      	ldrh	r3, [r1, #12]
 800a1e8:	061b      	lsls	r3, r3, #24
 800a1ea:	b09d      	sub	sp, #116	; 0x74
 800a1ec:	4607      	mov	r7, r0
 800a1ee:	460d      	mov	r5, r1
 800a1f0:	4614      	mov	r4, r2
 800a1f2:	d50e      	bpl.n	800a212 <_svfiprintf_r+0x32>
 800a1f4:	690b      	ldr	r3, [r1, #16]
 800a1f6:	b963      	cbnz	r3, 800a212 <_svfiprintf_r+0x32>
 800a1f8:	2140      	movs	r1, #64	; 0x40
 800a1fa:	f7ff fb8f 	bl	800991c <_malloc_r>
 800a1fe:	6028      	str	r0, [r5, #0]
 800a200:	6128      	str	r0, [r5, #16]
 800a202:	b920      	cbnz	r0, 800a20e <_svfiprintf_r+0x2e>
 800a204:	230c      	movs	r3, #12
 800a206:	603b      	str	r3, [r7, #0]
 800a208:	f04f 30ff 	mov.w	r0, #4294967295
 800a20c:	e0d0      	b.n	800a3b0 <_svfiprintf_r+0x1d0>
 800a20e:	2340      	movs	r3, #64	; 0x40
 800a210:	616b      	str	r3, [r5, #20]
 800a212:	2300      	movs	r3, #0
 800a214:	9309      	str	r3, [sp, #36]	; 0x24
 800a216:	2320      	movs	r3, #32
 800a218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a21c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a220:	2330      	movs	r3, #48	; 0x30
 800a222:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a3c8 <_svfiprintf_r+0x1e8>
 800a226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a22a:	f04f 0901 	mov.w	r9, #1
 800a22e:	4623      	mov	r3, r4
 800a230:	469a      	mov	sl, r3
 800a232:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a236:	b10a      	cbz	r2, 800a23c <_svfiprintf_r+0x5c>
 800a238:	2a25      	cmp	r2, #37	; 0x25
 800a23a:	d1f9      	bne.n	800a230 <_svfiprintf_r+0x50>
 800a23c:	ebba 0b04 	subs.w	fp, sl, r4
 800a240:	d00b      	beq.n	800a25a <_svfiprintf_r+0x7a>
 800a242:	465b      	mov	r3, fp
 800a244:	4622      	mov	r2, r4
 800a246:	4629      	mov	r1, r5
 800a248:	4638      	mov	r0, r7
 800a24a:	f7ff ff6f 	bl	800a12c <__ssputs_r>
 800a24e:	3001      	adds	r0, #1
 800a250:	f000 80a9 	beq.w	800a3a6 <_svfiprintf_r+0x1c6>
 800a254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a256:	445a      	add	r2, fp
 800a258:	9209      	str	r2, [sp, #36]	; 0x24
 800a25a:	f89a 3000 	ldrb.w	r3, [sl]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f000 80a1 	beq.w	800a3a6 <_svfiprintf_r+0x1c6>
 800a264:	2300      	movs	r3, #0
 800a266:	f04f 32ff 	mov.w	r2, #4294967295
 800a26a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a26e:	f10a 0a01 	add.w	sl, sl, #1
 800a272:	9304      	str	r3, [sp, #16]
 800a274:	9307      	str	r3, [sp, #28]
 800a276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a27a:	931a      	str	r3, [sp, #104]	; 0x68
 800a27c:	4654      	mov	r4, sl
 800a27e:	2205      	movs	r2, #5
 800a280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a284:	4850      	ldr	r0, [pc, #320]	; (800a3c8 <_svfiprintf_r+0x1e8>)
 800a286:	f7f5 ffa3 	bl	80001d0 <memchr>
 800a28a:	9a04      	ldr	r2, [sp, #16]
 800a28c:	b9d8      	cbnz	r0, 800a2c6 <_svfiprintf_r+0xe6>
 800a28e:	06d0      	lsls	r0, r2, #27
 800a290:	bf44      	itt	mi
 800a292:	2320      	movmi	r3, #32
 800a294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a298:	0711      	lsls	r1, r2, #28
 800a29a:	bf44      	itt	mi
 800a29c:	232b      	movmi	r3, #43	; 0x2b
 800a29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a2a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a2a8:	d015      	beq.n	800a2d6 <_svfiprintf_r+0xf6>
 800a2aa:	9a07      	ldr	r2, [sp, #28]
 800a2ac:	4654      	mov	r4, sl
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	f04f 0c0a 	mov.w	ip, #10
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2ba:	3b30      	subs	r3, #48	; 0x30
 800a2bc:	2b09      	cmp	r3, #9
 800a2be:	d94d      	bls.n	800a35c <_svfiprintf_r+0x17c>
 800a2c0:	b1b0      	cbz	r0, 800a2f0 <_svfiprintf_r+0x110>
 800a2c2:	9207      	str	r2, [sp, #28]
 800a2c4:	e014      	b.n	800a2f0 <_svfiprintf_r+0x110>
 800a2c6:	eba0 0308 	sub.w	r3, r0, r8
 800a2ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	9304      	str	r3, [sp, #16]
 800a2d2:	46a2      	mov	sl, r4
 800a2d4:	e7d2      	b.n	800a27c <_svfiprintf_r+0x9c>
 800a2d6:	9b03      	ldr	r3, [sp, #12]
 800a2d8:	1d19      	adds	r1, r3, #4
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	9103      	str	r1, [sp, #12]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	bfbb      	ittet	lt
 800a2e2:	425b      	neglt	r3, r3
 800a2e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a2e8:	9307      	strge	r3, [sp, #28]
 800a2ea:	9307      	strlt	r3, [sp, #28]
 800a2ec:	bfb8      	it	lt
 800a2ee:	9204      	strlt	r2, [sp, #16]
 800a2f0:	7823      	ldrb	r3, [r4, #0]
 800a2f2:	2b2e      	cmp	r3, #46	; 0x2e
 800a2f4:	d10c      	bne.n	800a310 <_svfiprintf_r+0x130>
 800a2f6:	7863      	ldrb	r3, [r4, #1]
 800a2f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a2fa:	d134      	bne.n	800a366 <_svfiprintf_r+0x186>
 800a2fc:	9b03      	ldr	r3, [sp, #12]
 800a2fe:	1d1a      	adds	r2, r3, #4
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	9203      	str	r2, [sp, #12]
 800a304:	2b00      	cmp	r3, #0
 800a306:	bfb8      	it	lt
 800a308:	f04f 33ff 	movlt.w	r3, #4294967295
 800a30c:	3402      	adds	r4, #2
 800a30e:	9305      	str	r3, [sp, #20]
 800a310:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a3d8 <_svfiprintf_r+0x1f8>
 800a314:	7821      	ldrb	r1, [r4, #0]
 800a316:	2203      	movs	r2, #3
 800a318:	4650      	mov	r0, sl
 800a31a:	f7f5 ff59 	bl	80001d0 <memchr>
 800a31e:	b138      	cbz	r0, 800a330 <_svfiprintf_r+0x150>
 800a320:	9b04      	ldr	r3, [sp, #16]
 800a322:	eba0 000a 	sub.w	r0, r0, sl
 800a326:	2240      	movs	r2, #64	; 0x40
 800a328:	4082      	lsls	r2, r0
 800a32a:	4313      	orrs	r3, r2
 800a32c:	3401      	adds	r4, #1
 800a32e:	9304      	str	r3, [sp, #16]
 800a330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a334:	4825      	ldr	r0, [pc, #148]	; (800a3cc <_svfiprintf_r+0x1ec>)
 800a336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a33a:	2206      	movs	r2, #6
 800a33c:	f7f5 ff48 	bl	80001d0 <memchr>
 800a340:	2800      	cmp	r0, #0
 800a342:	d038      	beq.n	800a3b6 <_svfiprintf_r+0x1d6>
 800a344:	4b22      	ldr	r3, [pc, #136]	; (800a3d0 <_svfiprintf_r+0x1f0>)
 800a346:	bb1b      	cbnz	r3, 800a390 <_svfiprintf_r+0x1b0>
 800a348:	9b03      	ldr	r3, [sp, #12]
 800a34a:	3307      	adds	r3, #7
 800a34c:	f023 0307 	bic.w	r3, r3, #7
 800a350:	3308      	adds	r3, #8
 800a352:	9303      	str	r3, [sp, #12]
 800a354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a356:	4433      	add	r3, r6
 800a358:	9309      	str	r3, [sp, #36]	; 0x24
 800a35a:	e768      	b.n	800a22e <_svfiprintf_r+0x4e>
 800a35c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a360:	460c      	mov	r4, r1
 800a362:	2001      	movs	r0, #1
 800a364:	e7a6      	b.n	800a2b4 <_svfiprintf_r+0xd4>
 800a366:	2300      	movs	r3, #0
 800a368:	3401      	adds	r4, #1
 800a36a:	9305      	str	r3, [sp, #20]
 800a36c:	4619      	mov	r1, r3
 800a36e:	f04f 0c0a 	mov.w	ip, #10
 800a372:	4620      	mov	r0, r4
 800a374:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a378:	3a30      	subs	r2, #48	; 0x30
 800a37a:	2a09      	cmp	r2, #9
 800a37c:	d903      	bls.n	800a386 <_svfiprintf_r+0x1a6>
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0c6      	beq.n	800a310 <_svfiprintf_r+0x130>
 800a382:	9105      	str	r1, [sp, #20]
 800a384:	e7c4      	b.n	800a310 <_svfiprintf_r+0x130>
 800a386:	fb0c 2101 	mla	r1, ip, r1, r2
 800a38a:	4604      	mov	r4, r0
 800a38c:	2301      	movs	r3, #1
 800a38e:	e7f0      	b.n	800a372 <_svfiprintf_r+0x192>
 800a390:	ab03      	add	r3, sp, #12
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	462a      	mov	r2, r5
 800a396:	4b0f      	ldr	r3, [pc, #60]	; (800a3d4 <_svfiprintf_r+0x1f4>)
 800a398:	a904      	add	r1, sp, #16
 800a39a:	4638      	mov	r0, r7
 800a39c:	f7fd fe56 	bl	800804c <_printf_float>
 800a3a0:	1c42      	adds	r2, r0, #1
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	d1d6      	bne.n	800a354 <_svfiprintf_r+0x174>
 800a3a6:	89ab      	ldrh	r3, [r5, #12]
 800a3a8:	065b      	lsls	r3, r3, #25
 800a3aa:	f53f af2d 	bmi.w	800a208 <_svfiprintf_r+0x28>
 800a3ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3b0:	b01d      	add	sp, #116	; 0x74
 800a3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b6:	ab03      	add	r3, sp, #12
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	462a      	mov	r2, r5
 800a3bc:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <_svfiprintf_r+0x1f4>)
 800a3be:	a904      	add	r1, sp, #16
 800a3c0:	4638      	mov	r0, r7
 800a3c2:	f7fe f8e7 	bl	8008594 <_printf_i>
 800a3c6:	e7eb      	b.n	800a3a0 <_svfiprintf_r+0x1c0>
 800a3c8:	0800de2c 	.word	0x0800de2c
 800a3cc:	0800de36 	.word	0x0800de36
 800a3d0:	0800804d 	.word	0x0800804d
 800a3d4:	0800a12d 	.word	0x0800a12d
 800a3d8:	0800de32 	.word	0x0800de32

0800a3dc <__sflush_r>:
 800a3dc:	898a      	ldrh	r2, [r1, #12]
 800a3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	0710      	lsls	r0, r2, #28
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	d458      	bmi.n	800a49c <__sflush_r+0xc0>
 800a3ea:	684b      	ldr	r3, [r1, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	dc05      	bgt.n	800a3fc <__sflush_r+0x20>
 800a3f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	dc02      	bgt.n	800a3fc <__sflush_r+0x20>
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3fe:	2e00      	cmp	r6, #0
 800a400:	d0f9      	beq.n	800a3f6 <__sflush_r+0x1a>
 800a402:	2300      	movs	r3, #0
 800a404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a408:	682f      	ldr	r7, [r5, #0]
 800a40a:	6a21      	ldr	r1, [r4, #32]
 800a40c:	602b      	str	r3, [r5, #0]
 800a40e:	d032      	beq.n	800a476 <__sflush_r+0x9a>
 800a410:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	075a      	lsls	r2, r3, #29
 800a416:	d505      	bpl.n	800a424 <__sflush_r+0x48>
 800a418:	6863      	ldr	r3, [r4, #4]
 800a41a:	1ac0      	subs	r0, r0, r3
 800a41c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a41e:	b10b      	cbz	r3, 800a424 <__sflush_r+0x48>
 800a420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a422:	1ac0      	subs	r0, r0, r3
 800a424:	2300      	movs	r3, #0
 800a426:	4602      	mov	r2, r0
 800a428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a42a:	6a21      	ldr	r1, [r4, #32]
 800a42c:	4628      	mov	r0, r5
 800a42e:	47b0      	blx	r6
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	d106      	bne.n	800a444 <__sflush_r+0x68>
 800a436:	6829      	ldr	r1, [r5, #0]
 800a438:	291d      	cmp	r1, #29
 800a43a:	d82b      	bhi.n	800a494 <__sflush_r+0xb8>
 800a43c:	4a29      	ldr	r2, [pc, #164]	; (800a4e4 <__sflush_r+0x108>)
 800a43e:	410a      	asrs	r2, r1
 800a440:	07d6      	lsls	r6, r2, #31
 800a442:	d427      	bmi.n	800a494 <__sflush_r+0xb8>
 800a444:	2200      	movs	r2, #0
 800a446:	6062      	str	r2, [r4, #4]
 800a448:	04d9      	lsls	r1, r3, #19
 800a44a:	6922      	ldr	r2, [r4, #16]
 800a44c:	6022      	str	r2, [r4, #0]
 800a44e:	d504      	bpl.n	800a45a <__sflush_r+0x7e>
 800a450:	1c42      	adds	r2, r0, #1
 800a452:	d101      	bne.n	800a458 <__sflush_r+0x7c>
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	b903      	cbnz	r3, 800a45a <__sflush_r+0x7e>
 800a458:	6560      	str	r0, [r4, #84]	; 0x54
 800a45a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a45c:	602f      	str	r7, [r5, #0]
 800a45e:	2900      	cmp	r1, #0
 800a460:	d0c9      	beq.n	800a3f6 <__sflush_r+0x1a>
 800a462:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a466:	4299      	cmp	r1, r3
 800a468:	d002      	beq.n	800a470 <__sflush_r+0x94>
 800a46a:	4628      	mov	r0, r5
 800a46c:	f7ff f9e2 	bl	8009834 <_free_r>
 800a470:	2000      	movs	r0, #0
 800a472:	6360      	str	r0, [r4, #52]	; 0x34
 800a474:	e7c0      	b.n	800a3f8 <__sflush_r+0x1c>
 800a476:	2301      	movs	r3, #1
 800a478:	4628      	mov	r0, r5
 800a47a:	47b0      	blx	r6
 800a47c:	1c41      	adds	r1, r0, #1
 800a47e:	d1c8      	bne.n	800a412 <__sflush_r+0x36>
 800a480:	682b      	ldr	r3, [r5, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0c5      	beq.n	800a412 <__sflush_r+0x36>
 800a486:	2b1d      	cmp	r3, #29
 800a488:	d001      	beq.n	800a48e <__sflush_r+0xb2>
 800a48a:	2b16      	cmp	r3, #22
 800a48c:	d101      	bne.n	800a492 <__sflush_r+0xb6>
 800a48e:	602f      	str	r7, [r5, #0]
 800a490:	e7b1      	b.n	800a3f6 <__sflush_r+0x1a>
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a498:	81a3      	strh	r3, [r4, #12]
 800a49a:	e7ad      	b.n	800a3f8 <__sflush_r+0x1c>
 800a49c:	690f      	ldr	r7, [r1, #16]
 800a49e:	2f00      	cmp	r7, #0
 800a4a0:	d0a9      	beq.n	800a3f6 <__sflush_r+0x1a>
 800a4a2:	0793      	lsls	r3, r2, #30
 800a4a4:	680e      	ldr	r6, [r1, #0]
 800a4a6:	bf08      	it	eq
 800a4a8:	694b      	ldreq	r3, [r1, #20]
 800a4aa:	600f      	str	r7, [r1, #0]
 800a4ac:	bf18      	it	ne
 800a4ae:	2300      	movne	r3, #0
 800a4b0:	eba6 0807 	sub.w	r8, r6, r7
 800a4b4:	608b      	str	r3, [r1, #8]
 800a4b6:	f1b8 0f00 	cmp.w	r8, #0
 800a4ba:	dd9c      	ble.n	800a3f6 <__sflush_r+0x1a>
 800a4bc:	6a21      	ldr	r1, [r4, #32]
 800a4be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4c0:	4643      	mov	r3, r8
 800a4c2:	463a      	mov	r2, r7
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	47b0      	blx	r6
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	dc06      	bgt.n	800a4da <__sflush_r+0xfe>
 800a4cc:	89a3      	ldrh	r3, [r4, #12]
 800a4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4d2:	81a3      	strh	r3, [r4, #12]
 800a4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d8:	e78e      	b.n	800a3f8 <__sflush_r+0x1c>
 800a4da:	4407      	add	r7, r0
 800a4dc:	eba8 0800 	sub.w	r8, r8, r0
 800a4e0:	e7e9      	b.n	800a4b6 <__sflush_r+0xda>
 800a4e2:	bf00      	nop
 800a4e4:	dfbffffe 	.word	0xdfbffffe

0800a4e8 <_fflush_r>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	690b      	ldr	r3, [r1, #16]
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	b913      	cbnz	r3, 800a4f8 <_fflush_r+0x10>
 800a4f2:	2500      	movs	r5, #0
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	bd38      	pop	{r3, r4, r5, pc}
 800a4f8:	b118      	cbz	r0, 800a502 <_fflush_r+0x1a>
 800a4fa:	6a03      	ldr	r3, [r0, #32]
 800a4fc:	b90b      	cbnz	r3, 800a502 <_fflush_r+0x1a>
 800a4fe:	f7fe f9f7 	bl	80088f0 <__sinit>
 800a502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d0f3      	beq.n	800a4f2 <_fflush_r+0xa>
 800a50a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a50c:	07d0      	lsls	r0, r2, #31
 800a50e:	d404      	bmi.n	800a51a <_fflush_r+0x32>
 800a510:	0599      	lsls	r1, r3, #22
 800a512:	d402      	bmi.n	800a51a <_fflush_r+0x32>
 800a514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a516:	f7fe fb10 	bl	8008b3a <__retarget_lock_acquire_recursive>
 800a51a:	4628      	mov	r0, r5
 800a51c:	4621      	mov	r1, r4
 800a51e:	f7ff ff5d 	bl	800a3dc <__sflush_r>
 800a522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a524:	07da      	lsls	r2, r3, #31
 800a526:	4605      	mov	r5, r0
 800a528:	d4e4      	bmi.n	800a4f4 <_fflush_r+0xc>
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	059b      	lsls	r3, r3, #22
 800a52e:	d4e1      	bmi.n	800a4f4 <_fflush_r+0xc>
 800a530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a532:	f7fe fb03 	bl	8008b3c <__retarget_lock_release_recursive>
 800a536:	e7dd      	b.n	800a4f4 <_fflush_r+0xc>

0800a538 <memmove>:
 800a538:	4288      	cmp	r0, r1
 800a53a:	b510      	push	{r4, lr}
 800a53c:	eb01 0402 	add.w	r4, r1, r2
 800a540:	d902      	bls.n	800a548 <memmove+0x10>
 800a542:	4284      	cmp	r4, r0
 800a544:	4623      	mov	r3, r4
 800a546:	d807      	bhi.n	800a558 <memmove+0x20>
 800a548:	1e43      	subs	r3, r0, #1
 800a54a:	42a1      	cmp	r1, r4
 800a54c:	d008      	beq.n	800a560 <memmove+0x28>
 800a54e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a552:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a556:	e7f8      	b.n	800a54a <memmove+0x12>
 800a558:	4402      	add	r2, r0
 800a55a:	4601      	mov	r1, r0
 800a55c:	428a      	cmp	r2, r1
 800a55e:	d100      	bne.n	800a562 <memmove+0x2a>
 800a560:	bd10      	pop	{r4, pc}
 800a562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a56a:	e7f7      	b.n	800a55c <memmove+0x24>

0800a56c <_sbrk_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	4d06      	ldr	r5, [pc, #24]	; (800a588 <_sbrk_r+0x1c>)
 800a570:	2300      	movs	r3, #0
 800a572:	4604      	mov	r4, r0
 800a574:	4608      	mov	r0, r1
 800a576:	602b      	str	r3, [r5, #0]
 800a578:	f7f8 f930 	bl	80027dc <_sbrk>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d102      	bne.n	800a586 <_sbrk_r+0x1a>
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	b103      	cbz	r3, 800a586 <_sbrk_r+0x1a>
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	2000068c 	.word	0x2000068c

0800a58c <memcpy>:
 800a58c:	440a      	add	r2, r1
 800a58e:	4291      	cmp	r1, r2
 800a590:	f100 33ff 	add.w	r3, r0, #4294967295
 800a594:	d100      	bne.n	800a598 <memcpy+0xc>
 800a596:	4770      	bx	lr
 800a598:	b510      	push	{r4, lr}
 800a59a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a59e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5a2:	4291      	cmp	r1, r2
 800a5a4:	d1f9      	bne.n	800a59a <memcpy+0xe>
 800a5a6:	bd10      	pop	{r4, pc}

0800a5a8 <__assert_func>:
 800a5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5aa:	4614      	mov	r4, r2
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	4b09      	ldr	r3, [pc, #36]	; (800a5d4 <__assert_func+0x2c>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	68d8      	ldr	r0, [r3, #12]
 800a5b6:	b14c      	cbz	r4, 800a5cc <__assert_func+0x24>
 800a5b8:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <__assert_func+0x30>)
 800a5ba:	9100      	str	r1, [sp, #0]
 800a5bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5c0:	4906      	ldr	r1, [pc, #24]	; (800a5dc <__assert_func+0x34>)
 800a5c2:	462b      	mov	r3, r5
 800a5c4:	f000 f872 	bl	800a6ac <fiprintf>
 800a5c8:	f000 f882 	bl	800a6d0 <abort>
 800a5cc:	4b04      	ldr	r3, [pc, #16]	; (800a5e0 <__assert_func+0x38>)
 800a5ce:	461c      	mov	r4, r3
 800a5d0:	e7f3      	b.n	800a5ba <__assert_func+0x12>
 800a5d2:	bf00      	nop
 800a5d4:	2000006c 	.word	0x2000006c
 800a5d8:	0800de47 	.word	0x0800de47
 800a5dc:	0800de54 	.word	0x0800de54
 800a5e0:	0800de82 	.word	0x0800de82

0800a5e4 <_calloc_r>:
 800a5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5e6:	fba1 2402 	umull	r2, r4, r1, r2
 800a5ea:	b94c      	cbnz	r4, 800a600 <_calloc_r+0x1c>
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	9201      	str	r2, [sp, #4]
 800a5f0:	f7ff f994 	bl	800991c <_malloc_r>
 800a5f4:	9a01      	ldr	r2, [sp, #4]
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	b930      	cbnz	r0, 800a608 <_calloc_r+0x24>
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	b003      	add	sp, #12
 800a5fe:	bd30      	pop	{r4, r5, pc}
 800a600:	220c      	movs	r2, #12
 800a602:	6002      	str	r2, [r0, #0]
 800a604:	2500      	movs	r5, #0
 800a606:	e7f8      	b.n	800a5fa <_calloc_r+0x16>
 800a608:	4621      	mov	r1, r4
 800a60a:	f7fe fa0a 	bl	8008a22 <memset>
 800a60e:	e7f4      	b.n	800a5fa <_calloc_r+0x16>

0800a610 <__ascii_mbtowc>:
 800a610:	b082      	sub	sp, #8
 800a612:	b901      	cbnz	r1, 800a616 <__ascii_mbtowc+0x6>
 800a614:	a901      	add	r1, sp, #4
 800a616:	b142      	cbz	r2, 800a62a <__ascii_mbtowc+0x1a>
 800a618:	b14b      	cbz	r3, 800a62e <__ascii_mbtowc+0x1e>
 800a61a:	7813      	ldrb	r3, [r2, #0]
 800a61c:	600b      	str	r3, [r1, #0]
 800a61e:	7812      	ldrb	r2, [r2, #0]
 800a620:	1e10      	subs	r0, r2, #0
 800a622:	bf18      	it	ne
 800a624:	2001      	movne	r0, #1
 800a626:	b002      	add	sp, #8
 800a628:	4770      	bx	lr
 800a62a:	4610      	mov	r0, r2
 800a62c:	e7fb      	b.n	800a626 <__ascii_mbtowc+0x16>
 800a62e:	f06f 0001 	mvn.w	r0, #1
 800a632:	e7f8      	b.n	800a626 <__ascii_mbtowc+0x16>

0800a634 <_realloc_r>:
 800a634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a638:	4680      	mov	r8, r0
 800a63a:	4614      	mov	r4, r2
 800a63c:	460e      	mov	r6, r1
 800a63e:	b921      	cbnz	r1, 800a64a <_realloc_r+0x16>
 800a640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a644:	4611      	mov	r1, r2
 800a646:	f7ff b969 	b.w	800991c <_malloc_r>
 800a64a:	b92a      	cbnz	r2, 800a658 <_realloc_r+0x24>
 800a64c:	f7ff f8f2 	bl	8009834 <_free_r>
 800a650:	4625      	mov	r5, r4
 800a652:	4628      	mov	r0, r5
 800a654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a658:	f000 f841 	bl	800a6de <_malloc_usable_size_r>
 800a65c:	4284      	cmp	r4, r0
 800a65e:	4607      	mov	r7, r0
 800a660:	d802      	bhi.n	800a668 <_realloc_r+0x34>
 800a662:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a666:	d812      	bhi.n	800a68e <_realloc_r+0x5a>
 800a668:	4621      	mov	r1, r4
 800a66a:	4640      	mov	r0, r8
 800a66c:	f7ff f956 	bl	800991c <_malloc_r>
 800a670:	4605      	mov	r5, r0
 800a672:	2800      	cmp	r0, #0
 800a674:	d0ed      	beq.n	800a652 <_realloc_r+0x1e>
 800a676:	42bc      	cmp	r4, r7
 800a678:	4622      	mov	r2, r4
 800a67a:	4631      	mov	r1, r6
 800a67c:	bf28      	it	cs
 800a67e:	463a      	movcs	r2, r7
 800a680:	f7ff ff84 	bl	800a58c <memcpy>
 800a684:	4631      	mov	r1, r6
 800a686:	4640      	mov	r0, r8
 800a688:	f7ff f8d4 	bl	8009834 <_free_r>
 800a68c:	e7e1      	b.n	800a652 <_realloc_r+0x1e>
 800a68e:	4635      	mov	r5, r6
 800a690:	e7df      	b.n	800a652 <_realloc_r+0x1e>

0800a692 <__ascii_wctomb>:
 800a692:	b149      	cbz	r1, 800a6a8 <__ascii_wctomb+0x16>
 800a694:	2aff      	cmp	r2, #255	; 0xff
 800a696:	bf85      	ittet	hi
 800a698:	238a      	movhi	r3, #138	; 0x8a
 800a69a:	6003      	strhi	r3, [r0, #0]
 800a69c:	700a      	strbls	r2, [r1, #0]
 800a69e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6a2:	bf98      	it	ls
 800a6a4:	2001      	movls	r0, #1
 800a6a6:	4770      	bx	lr
 800a6a8:	4608      	mov	r0, r1
 800a6aa:	4770      	bx	lr

0800a6ac <fiprintf>:
 800a6ac:	b40e      	push	{r1, r2, r3}
 800a6ae:	b503      	push	{r0, r1, lr}
 800a6b0:	4601      	mov	r1, r0
 800a6b2:	ab03      	add	r3, sp, #12
 800a6b4:	4805      	ldr	r0, [pc, #20]	; (800a6cc <fiprintf+0x20>)
 800a6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ba:	6800      	ldr	r0, [r0, #0]
 800a6bc:	9301      	str	r3, [sp, #4]
 800a6be:	f000 f83f 	bl	800a740 <_vfiprintf_r>
 800a6c2:	b002      	add	sp, #8
 800a6c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6c8:	b003      	add	sp, #12
 800a6ca:	4770      	bx	lr
 800a6cc:	2000006c 	.word	0x2000006c

0800a6d0 <abort>:
 800a6d0:	b508      	push	{r3, lr}
 800a6d2:	2006      	movs	r0, #6
 800a6d4:	f000 fa0c 	bl	800aaf0 <raise>
 800a6d8:	2001      	movs	r0, #1
 800a6da:	f7f8 f807 	bl	80026ec <_exit>

0800a6de <_malloc_usable_size_r>:
 800a6de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6e2:	1f18      	subs	r0, r3, #4
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	bfbc      	itt	lt
 800a6e8:	580b      	ldrlt	r3, [r1, r0]
 800a6ea:	18c0      	addlt	r0, r0, r3
 800a6ec:	4770      	bx	lr

0800a6ee <__sfputc_r>:
 800a6ee:	6893      	ldr	r3, [r2, #8]
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	b410      	push	{r4}
 800a6f6:	6093      	str	r3, [r2, #8]
 800a6f8:	da08      	bge.n	800a70c <__sfputc_r+0x1e>
 800a6fa:	6994      	ldr	r4, [r2, #24]
 800a6fc:	42a3      	cmp	r3, r4
 800a6fe:	db01      	blt.n	800a704 <__sfputc_r+0x16>
 800a700:	290a      	cmp	r1, #10
 800a702:	d103      	bne.n	800a70c <__sfputc_r+0x1e>
 800a704:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a708:	f000 b934 	b.w	800a974 <__swbuf_r>
 800a70c:	6813      	ldr	r3, [r2, #0]
 800a70e:	1c58      	adds	r0, r3, #1
 800a710:	6010      	str	r0, [r2, #0]
 800a712:	7019      	strb	r1, [r3, #0]
 800a714:	4608      	mov	r0, r1
 800a716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <__sfputs_r>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	4606      	mov	r6, r0
 800a720:	460f      	mov	r7, r1
 800a722:	4614      	mov	r4, r2
 800a724:	18d5      	adds	r5, r2, r3
 800a726:	42ac      	cmp	r4, r5
 800a728:	d101      	bne.n	800a72e <__sfputs_r+0x12>
 800a72a:	2000      	movs	r0, #0
 800a72c:	e007      	b.n	800a73e <__sfputs_r+0x22>
 800a72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a732:	463a      	mov	r2, r7
 800a734:	4630      	mov	r0, r6
 800a736:	f7ff ffda 	bl	800a6ee <__sfputc_r>
 800a73a:	1c43      	adds	r3, r0, #1
 800a73c:	d1f3      	bne.n	800a726 <__sfputs_r+0xa>
 800a73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a740 <_vfiprintf_r>:
 800a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	460d      	mov	r5, r1
 800a746:	b09d      	sub	sp, #116	; 0x74
 800a748:	4614      	mov	r4, r2
 800a74a:	4698      	mov	r8, r3
 800a74c:	4606      	mov	r6, r0
 800a74e:	b118      	cbz	r0, 800a758 <_vfiprintf_r+0x18>
 800a750:	6a03      	ldr	r3, [r0, #32]
 800a752:	b90b      	cbnz	r3, 800a758 <_vfiprintf_r+0x18>
 800a754:	f7fe f8cc 	bl	80088f0 <__sinit>
 800a758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a75a:	07d9      	lsls	r1, r3, #31
 800a75c:	d405      	bmi.n	800a76a <_vfiprintf_r+0x2a>
 800a75e:	89ab      	ldrh	r3, [r5, #12]
 800a760:	059a      	lsls	r2, r3, #22
 800a762:	d402      	bmi.n	800a76a <_vfiprintf_r+0x2a>
 800a764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a766:	f7fe f9e8 	bl	8008b3a <__retarget_lock_acquire_recursive>
 800a76a:	89ab      	ldrh	r3, [r5, #12]
 800a76c:	071b      	lsls	r3, r3, #28
 800a76e:	d501      	bpl.n	800a774 <_vfiprintf_r+0x34>
 800a770:	692b      	ldr	r3, [r5, #16]
 800a772:	b99b      	cbnz	r3, 800a79c <_vfiprintf_r+0x5c>
 800a774:	4629      	mov	r1, r5
 800a776:	4630      	mov	r0, r6
 800a778:	f000 f93a 	bl	800a9f0 <__swsetup_r>
 800a77c:	b170      	cbz	r0, 800a79c <_vfiprintf_r+0x5c>
 800a77e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a780:	07dc      	lsls	r4, r3, #31
 800a782:	d504      	bpl.n	800a78e <_vfiprintf_r+0x4e>
 800a784:	f04f 30ff 	mov.w	r0, #4294967295
 800a788:	b01d      	add	sp, #116	; 0x74
 800a78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78e:	89ab      	ldrh	r3, [r5, #12]
 800a790:	0598      	lsls	r0, r3, #22
 800a792:	d4f7      	bmi.n	800a784 <_vfiprintf_r+0x44>
 800a794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a796:	f7fe f9d1 	bl	8008b3c <__retarget_lock_release_recursive>
 800a79a:	e7f3      	b.n	800a784 <_vfiprintf_r+0x44>
 800a79c:	2300      	movs	r3, #0
 800a79e:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a0:	2320      	movs	r3, #32
 800a7a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7aa:	2330      	movs	r3, #48	; 0x30
 800a7ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a960 <_vfiprintf_r+0x220>
 800a7b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7b4:	f04f 0901 	mov.w	r9, #1
 800a7b8:	4623      	mov	r3, r4
 800a7ba:	469a      	mov	sl, r3
 800a7bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c0:	b10a      	cbz	r2, 800a7c6 <_vfiprintf_r+0x86>
 800a7c2:	2a25      	cmp	r2, #37	; 0x25
 800a7c4:	d1f9      	bne.n	800a7ba <_vfiprintf_r+0x7a>
 800a7c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a7ca:	d00b      	beq.n	800a7e4 <_vfiprintf_r+0xa4>
 800a7cc:	465b      	mov	r3, fp
 800a7ce:	4622      	mov	r2, r4
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f7ff ffa2 	bl	800a71c <__sfputs_r>
 800a7d8:	3001      	adds	r0, #1
 800a7da:	f000 80a9 	beq.w	800a930 <_vfiprintf_r+0x1f0>
 800a7de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e0:	445a      	add	r2, fp
 800a7e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a7e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 80a1 	beq.w	800a930 <_vfiprintf_r+0x1f0>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7f8:	f10a 0a01 	add.w	sl, sl, #1
 800a7fc:	9304      	str	r3, [sp, #16]
 800a7fe:	9307      	str	r3, [sp, #28]
 800a800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a804:	931a      	str	r3, [sp, #104]	; 0x68
 800a806:	4654      	mov	r4, sl
 800a808:	2205      	movs	r2, #5
 800a80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a80e:	4854      	ldr	r0, [pc, #336]	; (800a960 <_vfiprintf_r+0x220>)
 800a810:	f7f5 fcde 	bl	80001d0 <memchr>
 800a814:	9a04      	ldr	r2, [sp, #16]
 800a816:	b9d8      	cbnz	r0, 800a850 <_vfiprintf_r+0x110>
 800a818:	06d1      	lsls	r1, r2, #27
 800a81a:	bf44      	itt	mi
 800a81c:	2320      	movmi	r3, #32
 800a81e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a822:	0713      	lsls	r3, r2, #28
 800a824:	bf44      	itt	mi
 800a826:	232b      	movmi	r3, #43	; 0x2b
 800a828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a82c:	f89a 3000 	ldrb.w	r3, [sl]
 800a830:	2b2a      	cmp	r3, #42	; 0x2a
 800a832:	d015      	beq.n	800a860 <_vfiprintf_r+0x120>
 800a834:	9a07      	ldr	r2, [sp, #28]
 800a836:	4654      	mov	r4, sl
 800a838:	2000      	movs	r0, #0
 800a83a:	f04f 0c0a 	mov.w	ip, #10
 800a83e:	4621      	mov	r1, r4
 800a840:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a844:	3b30      	subs	r3, #48	; 0x30
 800a846:	2b09      	cmp	r3, #9
 800a848:	d94d      	bls.n	800a8e6 <_vfiprintf_r+0x1a6>
 800a84a:	b1b0      	cbz	r0, 800a87a <_vfiprintf_r+0x13a>
 800a84c:	9207      	str	r2, [sp, #28]
 800a84e:	e014      	b.n	800a87a <_vfiprintf_r+0x13a>
 800a850:	eba0 0308 	sub.w	r3, r0, r8
 800a854:	fa09 f303 	lsl.w	r3, r9, r3
 800a858:	4313      	orrs	r3, r2
 800a85a:	9304      	str	r3, [sp, #16]
 800a85c:	46a2      	mov	sl, r4
 800a85e:	e7d2      	b.n	800a806 <_vfiprintf_r+0xc6>
 800a860:	9b03      	ldr	r3, [sp, #12]
 800a862:	1d19      	adds	r1, r3, #4
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	9103      	str	r1, [sp, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bfbb      	ittet	lt
 800a86c:	425b      	neglt	r3, r3
 800a86e:	f042 0202 	orrlt.w	r2, r2, #2
 800a872:	9307      	strge	r3, [sp, #28]
 800a874:	9307      	strlt	r3, [sp, #28]
 800a876:	bfb8      	it	lt
 800a878:	9204      	strlt	r2, [sp, #16]
 800a87a:	7823      	ldrb	r3, [r4, #0]
 800a87c:	2b2e      	cmp	r3, #46	; 0x2e
 800a87e:	d10c      	bne.n	800a89a <_vfiprintf_r+0x15a>
 800a880:	7863      	ldrb	r3, [r4, #1]
 800a882:	2b2a      	cmp	r3, #42	; 0x2a
 800a884:	d134      	bne.n	800a8f0 <_vfiprintf_r+0x1b0>
 800a886:	9b03      	ldr	r3, [sp, #12]
 800a888:	1d1a      	adds	r2, r3, #4
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	9203      	str	r2, [sp, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bfb8      	it	lt
 800a892:	f04f 33ff 	movlt.w	r3, #4294967295
 800a896:	3402      	adds	r4, #2
 800a898:	9305      	str	r3, [sp, #20]
 800a89a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a970 <_vfiprintf_r+0x230>
 800a89e:	7821      	ldrb	r1, [r4, #0]
 800a8a0:	2203      	movs	r2, #3
 800a8a2:	4650      	mov	r0, sl
 800a8a4:	f7f5 fc94 	bl	80001d0 <memchr>
 800a8a8:	b138      	cbz	r0, 800a8ba <_vfiprintf_r+0x17a>
 800a8aa:	9b04      	ldr	r3, [sp, #16]
 800a8ac:	eba0 000a 	sub.w	r0, r0, sl
 800a8b0:	2240      	movs	r2, #64	; 0x40
 800a8b2:	4082      	lsls	r2, r0
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	3401      	adds	r4, #1
 800a8b8:	9304      	str	r3, [sp, #16]
 800a8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8be:	4829      	ldr	r0, [pc, #164]	; (800a964 <_vfiprintf_r+0x224>)
 800a8c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8c4:	2206      	movs	r2, #6
 800a8c6:	f7f5 fc83 	bl	80001d0 <memchr>
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d03f      	beq.n	800a94e <_vfiprintf_r+0x20e>
 800a8ce:	4b26      	ldr	r3, [pc, #152]	; (800a968 <_vfiprintf_r+0x228>)
 800a8d0:	bb1b      	cbnz	r3, 800a91a <_vfiprintf_r+0x1da>
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	3307      	adds	r3, #7
 800a8d6:	f023 0307 	bic.w	r3, r3, #7
 800a8da:	3308      	adds	r3, #8
 800a8dc:	9303      	str	r3, [sp, #12]
 800a8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e0:	443b      	add	r3, r7
 800a8e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e4:	e768      	b.n	800a7b8 <_vfiprintf_r+0x78>
 800a8e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	2001      	movs	r0, #1
 800a8ee:	e7a6      	b.n	800a83e <_vfiprintf_r+0xfe>
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	3401      	adds	r4, #1
 800a8f4:	9305      	str	r3, [sp, #20]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	f04f 0c0a 	mov.w	ip, #10
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a902:	3a30      	subs	r2, #48	; 0x30
 800a904:	2a09      	cmp	r2, #9
 800a906:	d903      	bls.n	800a910 <_vfiprintf_r+0x1d0>
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d0c6      	beq.n	800a89a <_vfiprintf_r+0x15a>
 800a90c:	9105      	str	r1, [sp, #20]
 800a90e:	e7c4      	b.n	800a89a <_vfiprintf_r+0x15a>
 800a910:	fb0c 2101 	mla	r1, ip, r1, r2
 800a914:	4604      	mov	r4, r0
 800a916:	2301      	movs	r3, #1
 800a918:	e7f0      	b.n	800a8fc <_vfiprintf_r+0x1bc>
 800a91a:	ab03      	add	r3, sp, #12
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	462a      	mov	r2, r5
 800a920:	4b12      	ldr	r3, [pc, #72]	; (800a96c <_vfiprintf_r+0x22c>)
 800a922:	a904      	add	r1, sp, #16
 800a924:	4630      	mov	r0, r6
 800a926:	f7fd fb91 	bl	800804c <_printf_float>
 800a92a:	4607      	mov	r7, r0
 800a92c:	1c78      	adds	r0, r7, #1
 800a92e:	d1d6      	bne.n	800a8de <_vfiprintf_r+0x19e>
 800a930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a932:	07d9      	lsls	r1, r3, #31
 800a934:	d405      	bmi.n	800a942 <_vfiprintf_r+0x202>
 800a936:	89ab      	ldrh	r3, [r5, #12]
 800a938:	059a      	lsls	r2, r3, #22
 800a93a:	d402      	bmi.n	800a942 <_vfiprintf_r+0x202>
 800a93c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a93e:	f7fe f8fd 	bl	8008b3c <__retarget_lock_release_recursive>
 800a942:	89ab      	ldrh	r3, [r5, #12]
 800a944:	065b      	lsls	r3, r3, #25
 800a946:	f53f af1d 	bmi.w	800a784 <_vfiprintf_r+0x44>
 800a94a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a94c:	e71c      	b.n	800a788 <_vfiprintf_r+0x48>
 800a94e:	ab03      	add	r3, sp, #12
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	462a      	mov	r2, r5
 800a954:	4b05      	ldr	r3, [pc, #20]	; (800a96c <_vfiprintf_r+0x22c>)
 800a956:	a904      	add	r1, sp, #16
 800a958:	4630      	mov	r0, r6
 800a95a:	f7fd fe1b 	bl	8008594 <_printf_i>
 800a95e:	e7e4      	b.n	800a92a <_vfiprintf_r+0x1ea>
 800a960:	0800de2c 	.word	0x0800de2c
 800a964:	0800de36 	.word	0x0800de36
 800a968:	0800804d 	.word	0x0800804d
 800a96c:	0800a71d 	.word	0x0800a71d
 800a970:	0800de32 	.word	0x0800de32

0800a974 <__swbuf_r>:
 800a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a976:	460e      	mov	r6, r1
 800a978:	4614      	mov	r4, r2
 800a97a:	4605      	mov	r5, r0
 800a97c:	b118      	cbz	r0, 800a986 <__swbuf_r+0x12>
 800a97e:	6a03      	ldr	r3, [r0, #32]
 800a980:	b90b      	cbnz	r3, 800a986 <__swbuf_r+0x12>
 800a982:	f7fd ffb5 	bl	80088f0 <__sinit>
 800a986:	69a3      	ldr	r3, [r4, #24]
 800a988:	60a3      	str	r3, [r4, #8]
 800a98a:	89a3      	ldrh	r3, [r4, #12]
 800a98c:	071a      	lsls	r2, r3, #28
 800a98e:	d525      	bpl.n	800a9dc <__swbuf_r+0x68>
 800a990:	6923      	ldr	r3, [r4, #16]
 800a992:	b31b      	cbz	r3, 800a9dc <__swbuf_r+0x68>
 800a994:	6823      	ldr	r3, [r4, #0]
 800a996:	6922      	ldr	r2, [r4, #16]
 800a998:	1a98      	subs	r0, r3, r2
 800a99a:	6963      	ldr	r3, [r4, #20]
 800a99c:	b2f6      	uxtb	r6, r6
 800a99e:	4283      	cmp	r3, r0
 800a9a0:	4637      	mov	r7, r6
 800a9a2:	dc04      	bgt.n	800a9ae <__swbuf_r+0x3a>
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f7ff fd9e 	bl	800a4e8 <_fflush_r>
 800a9ac:	b9e0      	cbnz	r0, 800a9e8 <__swbuf_r+0x74>
 800a9ae:	68a3      	ldr	r3, [r4, #8]
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	60a3      	str	r3, [r4, #8]
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	6022      	str	r2, [r4, #0]
 800a9ba:	701e      	strb	r6, [r3, #0]
 800a9bc:	6962      	ldr	r2, [r4, #20]
 800a9be:	1c43      	adds	r3, r0, #1
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d004      	beq.n	800a9ce <__swbuf_r+0x5a>
 800a9c4:	89a3      	ldrh	r3, [r4, #12]
 800a9c6:	07db      	lsls	r3, r3, #31
 800a9c8:	d506      	bpl.n	800a9d8 <__swbuf_r+0x64>
 800a9ca:	2e0a      	cmp	r6, #10
 800a9cc:	d104      	bne.n	800a9d8 <__swbuf_r+0x64>
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	f7ff fd89 	bl	800a4e8 <_fflush_r>
 800a9d6:	b938      	cbnz	r0, 800a9e8 <__swbuf_r+0x74>
 800a9d8:	4638      	mov	r0, r7
 800a9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9dc:	4621      	mov	r1, r4
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f000 f806 	bl	800a9f0 <__swsetup_r>
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	d0d5      	beq.n	800a994 <__swbuf_r+0x20>
 800a9e8:	f04f 37ff 	mov.w	r7, #4294967295
 800a9ec:	e7f4      	b.n	800a9d8 <__swbuf_r+0x64>
	...

0800a9f0 <__swsetup_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	4b2a      	ldr	r3, [pc, #168]	; (800aa9c <__swsetup_r+0xac>)
 800a9f4:	4605      	mov	r5, r0
 800a9f6:	6818      	ldr	r0, [r3, #0]
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	b118      	cbz	r0, 800aa04 <__swsetup_r+0x14>
 800a9fc:	6a03      	ldr	r3, [r0, #32]
 800a9fe:	b90b      	cbnz	r3, 800aa04 <__swsetup_r+0x14>
 800aa00:	f7fd ff76 	bl	80088f0 <__sinit>
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa0a:	0718      	lsls	r0, r3, #28
 800aa0c:	d422      	bmi.n	800aa54 <__swsetup_r+0x64>
 800aa0e:	06d9      	lsls	r1, r3, #27
 800aa10:	d407      	bmi.n	800aa22 <__swsetup_r+0x32>
 800aa12:	2309      	movs	r3, #9
 800aa14:	602b      	str	r3, [r5, #0]
 800aa16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa1a:	81a3      	strh	r3, [r4, #12]
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	e034      	b.n	800aa8c <__swsetup_r+0x9c>
 800aa22:	0758      	lsls	r0, r3, #29
 800aa24:	d512      	bpl.n	800aa4c <__swsetup_r+0x5c>
 800aa26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa28:	b141      	cbz	r1, 800aa3c <__swsetup_r+0x4c>
 800aa2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa2e:	4299      	cmp	r1, r3
 800aa30:	d002      	beq.n	800aa38 <__swsetup_r+0x48>
 800aa32:	4628      	mov	r0, r5
 800aa34:	f7fe fefe 	bl	8009834 <_free_r>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	6363      	str	r3, [r4, #52]	; 0x34
 800aa3c:	89a3      	ldrh	r3, [r4, #12]
 800aa3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa42:	81a3      	strh	r3, [r4, #12]
 800aa44:	2300      	movs	r3, #0
 800aa46:	6063      	str	r3, [r4, #4]
 800aa48:	6923      	ldr	r3, [r4, #16]
 800aa4a:	6023      	str	r3, [r4, #0]
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	f043 0308 	orr.w	r3, r3, #8
 800aa52:	81a3      	strh	r3, [r4, #12]
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	b94b      	cbnz	r3, 800aa6c <__swsetup_r+0x7c>
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa62:	d003      	beq.n	800aa6c <__swsetup_r+0x7c>
 800aa64:	4621      	mov	r1, r4
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 f884 	bl	800ab74 <__smakebuf_r>
 800aa6c:	89a0      	ldrh	r0, [r4, #12]
 800aa6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa72:	f010 0301 	ands.w	r3, r0, #1
 800aa76:	d00a      	beq.n	800aa8e <__swsetup_r+0x9e>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	60a3      	str	r3, [r4, #8]
 800aa7c:	6963      	ldr	r3, [r4, #20]
 800aa7e:	425b      	negs	r3, r3
 800aa80:	61a3      	str	r3, [r4, #24]
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	b943      	cbnz	r3, 800aa98 <__swsetup_r+0xa8>
 800aa86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa8a:	d1c4      	bne.n	800aa16 <__swsetup_r+0x26>
 800aa8c:	bd38      	pop	{r3, r4, r5, pc}
 800aa8e:	0781      	lsls	r1, r0, #30
 800aa90:	bf58      	it	pl
 800aa92:	6963      	ldrpl	r3, [r4, #20]
 800aa94:	60a3      	str	r3, [r4, #8]
 800aa96:	e7f4      	b.n	800aa82 <__swsetup_r+0x92>
 800aa98:	2000      	movs	r0, #0
 800aa9a:	e7f7      	b.n	800aa8c <__swsetup_r+0x9c>
 800aa9c:	2000006c 	.word	0x2000006c

0800aaa0 <_raise_r>:
 800aaa0:	291f      	cmp	r1, #31
 800aaa2:	b538      	push	{r3, r4, r5, lr}
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	460d      	mov	r5, r1
 800aaa8:	d904      	bls.n	800aab4 <_raise_r+0x14>
 800aaaa:	2316      	movs	r3, #22
 800aaac:	6003      	str	r3, [r0, #0]
 800aaae:	f04f 30ff 	mov.w	r0, #4294967295
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aab6:	b112      	cbz	r2, 800aabe <_raise_r+0x1e>
 800aab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aabc:	b94b      	cbnz	r3, 800aad2 <_raise_r+0x32>
 800aabe:	4620      	mov	r0, r4
 800aac0:	f000 f830 	bl	800ab24 <_getpid_r>
 800aac4:	462a      	mov	r2, r5
 800aac6:	4601      	mov	r1, r0
 800aac8:	4620      	mov	r0, r4
 800aaca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aace:	f000 b817 	b.w	800ab00 <_kill_r>
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d00a      	beq.n	800aaec <_raise_r+0x4c>
 800aad6:	1c59      	adds	r1, r3, #1
 800aad8:	d103      	bne.n	800aae2 <_raise_r+0x42>
 800aada:	2316      	movs	r3, #22
 800aadc:	6003      	str	r3, [r0, #0]
 800aade:	2001      	movs	r0, #1
 800aae0:	e7e7      	b.n	800aab2 <_raise_r+0x12>
 800aae2:	2400      	movs	r4, #0
 800aae4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aae8:	4628      	mov	r0, r5
 800aaea:	4798      	blx	r3
 800aaec:	2000      	movs	r0, #0
 800aaee:	e7e0      	b.n	800aab2 <_raise_r+0x12>

0800aaf0 <raise>:
 800aaf0:	4b02      	ldr	r3, [pc, #8]	; (800aafc <raise+0xc>)
 800aaf2:	4601      	mov	r1, r0
 800aaf4:	6818      	ldr	r0, [r3, #0]
 800aaf6:	f7ff bfd3 	b.w	800aaa0 <_raise_r>
 800aafa:	bf00      	nop
 800aafc:	2000006c 	.word	0x2000006c

0800ab00 <_kill_r>:
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	4d07      	ldr	r5, [pc, #28]	; (800ab20 <_kill_r+0x20>)
 800ab04:	2300      	movs	r3, #0
 800ab06:	4604      	mov	r4, r0
 800ab08:	4608      	mov	r0, r1
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	602b      	str	r3, [r5, #0]
 800ab0e:	f7f7 fddd 	bl	80026cc <_kill>
 800ab12:	1c43      	adds	r3, r0, #1
 800ab14:	d102      	bne.n	800ab1c <_kill_r+0x1c>
 800ab16:	682b      	ldr	r3, [r5, #0]
 800ab18:	b103      	cbz	r3, 800ab1c <_kill_r+0x1c>
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	bd38      	pop	{r3, r4, r5, pc}
 800ab1e:	bf00      	nop
 800ab20:	2000068c 	.word	0x2000068c

0800ab24 <_getpid_r>:
 800ab24:	f7f7 bdca 	b.w	80026bc <_getpid>

0800ab28 <__swhatbuf_r>:
 800ab28:	b570      	push	{r4, r5, r6, lr}
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab30:	2900      	cmp	r1, #0
 800ab32:	b096      	sub	sp, #88	; 0x58
 800ab34:	4615      	mov	r5, r2
 800ab36:	461e      	mov	r6, r3
 800ab38:	da0d      	bge.n	800ab56 <__swhatbuf_r+0x2e>
 800ab3a:	89a3      	ldrh	r3, [r4, #12]
 800ab3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ab40:	f04f 0100 	mov.w	r1, #0
 800ab44:	bf0c      	ite	eq
 800ab46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ab4a:	2340      	movne	r3, #64	; 0x40
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	6031      	str	r1, [r6, #0]
 800ab50:	602b      	str	r3, [r5, #0]
 800ab52:	b016      	add	sp, #88	; 0x58
 800ab54:	bd70      	pop	{r4, r5, r6, pc}
 800ab56:	466a      	mov	r2, sp
 800ab58:	f000 f848 	bl	800abec <_fstat_r>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	dbec      	blt.n	800ab3a <__swhatbuf_r+0x12>
 800ab60:	9901      	ldr	r1, [sp, #4]
 800ab62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ab66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ab6a:	4259      	negs	r1, r3
 800ab6c:	4159      	adcs	r1, r3
 800ab6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab72:	e7eb      	b.n	800ab4c <__swhatbuf_r+0x24>

0800ab74 <__smakebuf_r>:
 800ab74:	898b      	ldrh	r3, [r1, #12]
 800ab76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab78:	079d      	lsls	r5, r3, #30
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	d507      	bpl.n	800ab90 <__smakebuf_r+0x1c>
 800ab80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	6123      	str	r3, [r4, #16]
 800ab88:	2301      	movs	r3, #1
 800ab8a:	6163      	str	r3, [r4, #20]
 800ab8c:	b002      	add	sp, #8
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
 800ab90:	ab01      	add	r3, sp, #4
 800ab92:	466a      	mov	r2, sp
 800ab94:	f7ff ffc8 	bl	800ab28 <__swhatbuf_r>
 800ab98:	9900      	ldr	r1, [sp, #0]
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f7fe febd 	bl	800991c <_malloc_r>
 800aba2:	b948      	cbnz	r0, 800abb8 <__smakebuf_r+0x44>
 800aba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aba8:	059a      	lsls	r2, r3, #22
 800abaa:	d4ef      	bmi.n	800ab8c <__smakebuf_r+0x18>
 800abac:	f023 0303 	bic.w	r3, r3, #3
 800abb0:	f043 0302 	orr.w	r3, r3, #2
 800abb4:	81a3      	strh	r3, [r4, #12]
 800abb6:	e7e3      	b.n	800ab80 <__smakebuf_r+0xc>
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	6020      	str	r0, [r4, #0]
 800abbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc0:	81a3      	strh	r3, [r4, #12]
 800abc2:	9b00      	ldr	r3, [sp, #0]
 800abc4:	6163      	str	r3, [r4, #20]
 800abc6:	9b01      	ldr	r3, [sp, #4]
 800abc8:	6120      	str	r0, [r4, #16]
 800abca:	b15b      	cbz	r3, 800abe4 <__smakebuf_r+0x70>
 800abcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abd0:	4630      	mov	r0, r6
 800abd2:	f000 f81d 	bl	800ac10 <_isatty_r>
 800abd6:	b128      	cbz	r0, 800abe4 <__smakebuf_r+0x70>
 800abd8:	89a3      	ldrh	r3, [r4, #12]
 800abda:	f023 0303 	bic.w	r3, r3, #3
 800abde:	f043 0301 	orr.w	r3, r3, #1
 800abe2:	81a3      	strh	r3, [r4, #12]
 800abe4:	89a3      	ldrh	r3, [r4, #12]
 800abe6:	431d      	orrs	r5, r3
 800abe8:	81a5      	strh	r5, [r4, #12]
 800abea:	e7cf      	b.n	800ab8c <__smakebuf_r+0x18>

0800abec <_fstat_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4d07      	ldr	r5, [pc, #28]	; (800ac0c <_fstat_r+0x20>)
 800abf0:	2300      	movs	r3, #0
 800abf2:	4604      	mov	r4, r0
 800abf4:	4608      	mov	r0, r1
 800abf6:	4611      	mov	r1, r2
 800abf8:	602b      	str	r3, [r5, #0]
 800abfa:	f7f7 fdc6 	bl	800278a <_fstat>
 800abfe:	1c43      	adds	r3, r0, #1
 800ac00:	d102      	bne.n	800ac08 <_fstat_r+0x1c>
 800ac02:	682b      	ldr	r3, [r5, #0]
 800ac04:	b103      	cbz	r3, 800ac08 <_fstat_r+0x1c>
 800ac06:	6023      	str	r3, [r4, #0]
 800ac08:	bd38      	pop	{r3, r4, r5, pc}
 800ac0a:	bf00      	nop
 800ac0c:	2000068c 	.word	0x2000068c

0800ac10 <_isatty_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4d06      	ldr	r5, [pc, #24]	; (800ac2c <_isatty_r+0x1c>)
 800ac14:	2300      	movs	r3, #0
 800ac16:	4604      	mov	r4, r0
 800ac18:	4608      	mov	r0, r1
 800ac1a:	602b      	str	r3, [r5, #0]
 800ac1c:	f7f7 fdc5 	bl	80027aa <_isatty>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	d102      	bne.n	800ac2a <_isatty_r+0x1a>
 800ac24:	682b      	ldr	r3, [r5, #0]
 800ac26:	b103      	cbz	r3, 800ac2a <_isatty_r+0x1a>
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	2000068c 	.word	0x2000068c

0800ac30 <_init>:
 800ac30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac32:	bf00      	nop
 800ac34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac36:	bc08      	pop	{r3}
 800ac38:	469e      	mov	lr, r3
 800ac3a:	4770      	bx	lr

0800ac3c <_fini>:
 800ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3e:	bf00      	nop
 800ac40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac42:	bc08      	pop	{r3}
 800ac44:	469e      	mov	lr, r3
 800ac46:	4770      	bx	lr
