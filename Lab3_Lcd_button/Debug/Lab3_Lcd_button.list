
Lab3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004608  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000301c  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077ac  080077ac  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080077ac  080077ac  000177ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077b4  080077b4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080077bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          0000015c  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000017c  2000017c  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f05b  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c5a  00000000  00000000  0002f0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f18  00000000  00000000  00031d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b80  00000000  00000000  00032c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000228e7  00000000  00000000  000337e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012fcb  00000000  00000000  000560c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd0cf  00000000  00000000  00069092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003d00  00000000  00000000  00136164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00139e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004778 	.word	0x08004778

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08004778 	.word	0x08004778

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	2108      	movs	r1, #8
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <button_init+0x14>)
 80004de:	f002 f963 	bl	80027a8 <HAL_GPIO_WritePin>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40020c00 	.word	0x40020c00

080004ec <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2108      	movs	r1, #8
 80004f6:	482f      	ldr	r0, [pc, #188]	; (80005b4 <button_Scan+0xc8>)
 80004f8:	f002 f956 	bl	80027a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2108      	movs	r1, #8
 8000500:	482c      	ldr	r0, [pc, #176]	; (80005b4 <button_Scan+0xc8>)
 8000502:	f002 f951 	bl	80027a8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000506:	230a      	movs	r3, #10
 8000508:	2202      	movs	r2, #2
 800050a:	492b      	ldr	r1, [pc, #172]	; (80005b8 <button_Scan+0xcc>)
 800050c:	482b      	ldr	r0, [pc, #172]	; (80005bc <button_Scan+0xd0>)
 800050e:	f002 ff8e 	bl	800342e <HAL_SPI_Receive>
	  int button_index = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800051a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	e03f      	b.n	80005a2 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b00      	cmp	r3, #0
 8000526:	db06      	blt.n	8000536 <button_Scan+0x4a>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b03      	cmp	r3, #3
 800052c:	dc03      	bgt.n	8000536 <button_Scan+0x4a>
			  button_index = i + 4;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3304      	adds	r3, #4
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e018      	b.n	8000568 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b03      	cmp	r3, #3
 800053a:	dd07      	ble.n	800054c <button_Scan+0x60>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b07      	cmp	r3, #7
 8000540:	dc04      	bgt.n	800054c <button_Scan+0x60>
			  button_index = 7 - i;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f1c3 0307 	rsb	r3, r3, #7
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e00d      	b.n	8000568 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b07      	cmp	r3, #7
 8000550:	dd06      	ble.n	8000560 <button_Scan+0x74>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0b      	cmp	r3, #11
 8000556:	dc03      	bgt.n	8000560 <button_Scan+0x74>
			  button_index = i + 4;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3304      	adds	r3, #4
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	e003      	b.n	8000568 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f1c3 0317 	rsb	r3, r3, #23
 8000566:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <button_Scan+0xcc>)
 800056a:	881a      	ldrh	r2, [r3, #0]
 800056c:	897b      	ldrh	r3, [r7, #10]
 800056e:	4013      	ands	r3, r2
 8000570:	b29b      	uxth	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d005      	beq.n	8000582 <button_Scan+0x96>
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <button_Scan+0xd4>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2100      	movs	r1, #0
 800057c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000580:	e009      	b.n	8000596 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <button_Scan+0xd4>)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058a:	3301      	adds	r3, #1
 800058c:	b299      	uxth	r1, r3
 800058e:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <button_Scan+0xd4>)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000596:	897b      	ldrh	r3, [r7, #10]
 8000598:	085b      	lsrs	r3, r3, #1
 800059a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3301      	adds	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b0f      	cmp	r3, #15
 80005a6:	ddbc      	ble.n	8000522 <button_Scan+0x36>
	  }
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020c00 	.word	0x40020c00
 80005b8:	2000005c 	.word	0x2000005c
 80005bc:	200000d8 	.word	0x200000d8
 80005c0:	2000003c 	.word	0x2000003c

080005c4 <update_time>:
	//	if ((count == green_count) || (count == green_count + yellow_count)) {
	//		tr_state = (tr_state + 1) % 4;
	//	}
}

void update_time(void) {
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	tick_count = (tick_count + 1)
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <update_time+0x80>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1c5a      	adds	r2, r3, #1
			% ((green_count + yellow_count + red_count) * 20);
 80005ce:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <update_time+0x84>)
 80005d0:	6819      	ldr	r1, [r3, #0]
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <update_time+0x88>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4419      	add	r1, r3
 80005d8:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <update_time+0x8c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4419      	add	r1, r3
 80005de:	460b      	mov	r3, r1
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	440b      	add	r3, r1
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	fb92 f1f3 	sdiv	r1, r2, r3
 80005ea:	fb01 f303 	mul.w	r3, r1, r3
 80005ee:	1ad3      	subs	r3, r2, r3
	tick_count = (tick_count + 1)
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <update_time+0x80>)
 80005f2:	6013      	str	r3, [r2, #0]
	if (tick_count % 20 == 0) {
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <update_time+0x80>)
 80005f6:	6819      	ldr	r1, [r3, #0]
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <update_time+0x90>)
 80005fa:	fb83 2301 	smull	r2, r3, r3, r1
 80005fe:	10da      	asrs	r2, r3, #3
 8000600:	17cb      	asrs	r3, r1, #31
 8000602:	1ad2      	subs	r2, r2, r3
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	1aca      	subs	r2, r1, r3
 800060e:	2a00      	cmp	r2, #0
 8000610:	d113      	bne.n	800063a <update_time+0x76>
		count0 = tick_count / 20;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <update_time+0x80>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <update_time+0x90>)
 8000618:	fb82 1203 	smull	r1, r2, r2, r3
 800061c:	10d2      	asrs	r2, r2, #3
 800061e:	17db      	asrs	r3, r3, #31
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <update_time+0x94>)
 8000624:	6013      	str	r3, [r2, #0]
		count1 = tick_count / 20;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <update_time+0x80>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <update_time+0x90>)
 800062c:	fb82 1203 	smull	r1, r2, r2, r3
 8000630:	10d2      	asrs	r2, r2, #3
 8000632:	17db      	asrs	r3, r3, #31
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	4a09      	ldr	r2, [pc, #36]	; (800065c <update_time+0x98>)
 8000638:	6013      	str	r3, [r2, #0]
	}
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	20000068 	.word	0x20000068
 8000648:	20000000 	.word	0x20000000
 800064c:	20000004 	.word	0x20000004
 8000650:	20000008 	.word	0x20000008
 8000654:	66666667 	.word	0x66666667
 8000658:	20000060 	.word	0x20000060
 800065c:	20000064 	.word	0x20000064

08000660 <show_count>:

void show_count(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af04      	add	r7, sp, #16
	int temp;
	if (count0 < green_count) {
 8000666:	4b3d      	ldr	r3, [pc, #244]	; (800075c <show_count+0xfc>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <show_count+0x100>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	429a      	cmp	r2, r3
 8000670:	da06      	bge.n	8000680 <show_count+0x20>
		temp = green_count - count0;
 8000672:	4b3b      	ldr	r3, [pc, #236]	; (8000760 <show_count+0x100>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b39      	ldr	r3, [pc, #228]	; (800075c <show_count+0xfc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	e01e      	b.n	80006be <show_count+0x5e>
	} else if (count0 < green_count + yellow_count) {
 8000680:	4b37      	ldr	r3, [pc, #220]	; (8000760 <show_count+0x100>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b37      	ldr	r3, [pc, #220]	; (8000764 <show_count+0x104>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	441a      	add	r2, r3
 800068a:	4b34      	ldr	r3, [pc, #208]	; (800075c <show_count+0xfc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	429a      	cmp	r2, r3
 8000690:	dd09      	ble.n	80006a6 <show_count+0x46>
		temp = green_count + yellow_count - count0;
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <show_count+0x100>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b33      	ldr	r3, [pc, #204]	; (8000764 <show_count+0x104>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	441a      	add	r2, r3
 800069c:	4b2f      	ldr	r3, [pc, #188]	; (800075c <show_count+0xfc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	e00b      	b.n	80006be <show_count+0x5e>
	} else {
		temp = green_count + yellow_count + red_count - count0;
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <show_count+0x100>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <show_count+0x104>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	441a      	add	r2, r3
 80006b0:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <show_count+0x108>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	441a      	add	r2, r3
 80006b6:	4b29      	ldr	r3, [pc, #164]	; (800075c <show_count+0xfc>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	607b      	str	r3, [r7, #4]
	}
	lcd_ShowIntNum(90, 50, temp, 2, RED, WHITE, 16);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	2310      	movs	r3, #16
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2302      	movs	r3, #2
 80006d4:	2132      	movs	r1, #50	; 0x32
 80006d6:	205a      	movs	r0, #90	; 0x5a
 80006d8:	f000 fe6e 	bl	80013b8 <lcd_ShowIntNum>

	int temp0;
	if (count0 < red_count) {
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <show_count+0xfc>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b21      	ldr	r3, [pc, #132]	; (8000768 <show_count+0x108>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	da06      	bge.n	80006f6 <show_count+0x96>
		temp0 = red_count - count0;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <show_count+0x108>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <show_count+0xfc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	e01e      	b.n	8000734 <show_count+0xd4>
	} else if (count0 < green_count + red_count) {
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <show_count+0x100>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <show_count+0x108>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	441a      	add	r2, r3
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <show_count+0xfc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	dd09      	ble.n	800071c <show_count+0xbc>
		temp0 = green_count + red_count - count0;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <show_count+0x100>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <show_count+0x108>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	441a      	add	r2, r3
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <show_count+0xfc>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	e00b      	b.n	8000734 <show_count+0xd4>
	} else {
		temp0 = green_count + yellow_count + red_count - count0;
 800071c:	4b10      	ldr	r3, [pc, #64]	; (8000760 <show_count+0x100>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <show_count+0x104>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	441a      	add	r2, r3
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <show_count+0x108>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	441a      	add	r2, r3
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <show_count+0xfc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	603b      	str	r3, [r7, #0]
	}
	lcd_ShowIntNum(210, 50, temp0, 2, RED, WHITE, 16);
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	b29a      	uxth	r2, r3
 8000738:	2310      	movs	r3, #16
 800073a:	9302      	str	r3, [sp, #8]
 800073c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2302      	movs	r3, #2
 800074a:	2132      	movs	r1, #50	; 0x32
 800074c:	20d2      	movs	r0, #210	; 0xd2
 800074e:	f000 fe33 	bl	80013b8 <lcd_ShowIntNum>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000060 	.word	0x20000060
 8000760:	20000000 	.word	0x20000000
 8000764:	20000004 	.word	0x20000004
 8000768:	20000008 	.word	0x20000008

0800076c <traffic_fsm>:

void traffic_fsm(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af02      	add	r7, sp, #8
	//	 lcd_ShowIntNum(90, 50, count0, 2, RED, WHITE, 16);
	show_count();
 8000772:	f7ff ff75 	bl	8000660 <show_count>
	if (count0 == green_count) {
 8000776:	4b67      	ldr	r3, [pc, #412]	; (8000914 <traffic_fsm+0x1a8>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	4b67      	ldr	r3, [pc, #412]	; (8000918 <traffic_fsm+0x1ac>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	429a      	cmp	r2, r3
 8000780:	d11b      	bne.n	80007ba <traffic_fsm+0x4e>
		//		lcd_DrawCircle(50, 100, WHITE, 24, 1);
		//		lcd_DrawCircle(50, 170, GREEN, 24, 1);
		//		lcd_DrawCircle(50, 240, WHITE, 24, 1);
		lcd_DrawCircle(50, 100, WHITE, 24, 1);
 8000782:	2301      	movs	r3, #1
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2318      	movs	r3, #24
 8000788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800078c:	2164      	movs	r1, #100	; 0x64
 800078e:	2032      	movs	r0, #50	; 0x32
 8000790:	f001 f89f 	bl	80018d2 <lcd_DrawCircle>
		lcd_DrawCircle(50, 170, WHITE, 24, 1);
 8000794:	2301      	movs	r3, #1
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2318      	movs	r3, #24
 800079a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800079e:	21aa      	movs	r1, #170	; 0xaa
 80007a0:	2032      	movs	r0, #50	; 0x32
 80007a2:	f001 f896 	bl	80018d2 <lcd_DrawCircle>
		lcd_DrawCircle(50, 240, YELLOW, 24, 1);
 80007a6:	2301      	movs	r3, #1
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2318      	movs	r3, #24
 80007ac:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80007b0:	21f0      	movs	r1, #240	; 0xf0
 80007b2:	2032      	movs	r0, #50	; 0x32
 80007b4:	f001 f88d 	bl	80018d2 <lcd_DrawCircle>
 80007b8:	e043      	b.n	8000842 <traffic_fsm+0xd6>
	} else if (count0 == green_count + yellow_count) {
 80007ba:	4b57      	ldr	r3, [pc, #348]	; (8000918 <traffic_fsm+0x1ac>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	4b57      	ldr	r3, [pc, #348]	; (800091c <traffic_fsm+0x1b0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	441a      	add	r2, r3
 80007c4:	4b53      	ldr	r3, [pc, #332]	; (8000914 <traffic_fsm+0x1a8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d11b      	bne.n	8000804 <traffic_fsm+0x98>
		//		lcd_DrawCircle(50, 100, WHITE, 24, 1);
		//		lcd_DrawCircle(50, 170, WHITE, 24, 1);
		//		lcd_DrawCircle(50, 240, YELLOW, 24, 1);
		lcd_DrawCircle(50, 100, RED, 24, 1);
 80007cc:	2301      	movs	r3, #1
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2318      	movs	r3, #24
 80007d2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007d6:	2164      	movs	r1, #100	; 0x64
 80007d8:	2032      	movs	r0, #50	; 0x32
 80007da:	f001 f87a 	bl	80018d2 <lcd_DrawCircle>
		lcd_DrawCircle(50, 170, WHITE, 24, 1);
 80007de:	2301      	movs	r3, #1
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2318      	movs	r3, #24
 80007e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e8:	21aa      	movs	r1, #170	; 0xaa
 80007ea:	2032      	movs	r0, #50	; 0x32
 80007ec:	f001 f871 	bl	80018d2 <lcd_DrawCircle>
		lcd_DrawCircle(50, 240, WHITE, 24, 1);
 80007f0:	2301      	movs	r3, #1
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2318      	movs	r3, #24
 80007f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fa:	21f0      	movs	r1, #240	; 0xf0
 80007fc:	2032      	movs	r0, #50	; 0x32
 80007fe:	f001 f868 	bl	80018d2 <lcd_DrawCircle>
 8000802:	e01e      	b.n	8000842 <traffic_fsm+0xd6>
	} else if (count0 == 0) {
 8000804:	4b43      	ldr	r3, [pc, #268]	; (8000914 <traffic_fsm+0x1a8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d11a      	bne.n	8000842 <traffic_fsm+0xd6>
		//		lcd_DrawCircle(50, 100, RED, 24, 1);
		//		lcd_DrawCircle(50, 170, WHITE, 24, 1);
		//		lcd_DrawCircle(50, 240, WHITE, 24, 1);
		lcd_DrawCircle(50, 100, WHITE, 24, 1);
 800080c:	2301      	movs	r3, #1
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2318      	movs	r3, #24
 8000812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000816:	2164      	movs	r1, #100	; 0x64
 8000818:	2032      	movs	r0, #50	; 0x32
 800081a:	f001 f85a 	bl	80018d2 <lcd_DrawCircle>
		lcd_DrawCircle(50, 170, GREEN, 24, 1);
 800081e:	2301      	movs	r3, #1
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2318      	movs	r3, #24
 8000824:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000828:	21aa      	movs	r1, #170	; 0xaa
 800082a:	2032      	movs	r0, #50	; 0x32
 800082c:	f001 f851 	bl	80018d2 <lcd_DrawCircle>
		lcd_DrawCircle(50, 240, WHITE, 24, 1);
 8000830:	2301      	movs	r3, #1
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2318      	movs	r3, #24
 8000836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800083a:	21f0      	movs	r1, #240	; 0xf0
 800083c:	2032      	movs	r0, #50	; 0x32
 800083e:	f001 f848 	bl	80018d2 <lcd_DrawCircle>
	}

	if (count1 == red_count) {
 8000842:	4b37      	ldr	r3, [pc, #220]	; (8000920 <traffic_fsm+0x1b4>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4b37      	ldr	r3, [pc, #220]	; (8000924 <traffic_fsm+0x1b8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	429a      	cmp	r2, r3
 800084c:	d11b      	bne.n	8000886 <traffic_fsm+0x11a>
		//		lcd_DrawCircle(50, 100, WHITE, 24, 1);
		//		lcd_DrawCircle(50, 170, GREEN, 24, 1);
		//		lcd_DrawCircle(50, 240, WHITE, 24, 1);
		lcd_DrawCircle(170, 100, WHITE, 24, 1);
 800084e:	2301      	movs	r3, #1
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2318      	movs	r3, #24
 8000854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000858:	2164      	movs	r1, #100	; 0x64
 800085a:	20aa      	movs	r0, #170	; 0xaa
 800085c:	f001 f839 	bl	80018d2 <lcd_DrawCircle>
		lcd_DrawCircle(170, 170, GREEN, 24, 1);
 8000860:	2301      	movs	r3, #1
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2318      	movs	r3, #24
 8000866:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800086a:	21aa      	movs	r1, #170	; 0xaa
 800086c:	20aa      	movs	r0, #170	; 0xaa
 800086e:	f001 f830 	bl	80018d2 <lcd_DrawCircle>
		lcd_DrawCircle(170, 240, WHITE, 24, 1);
 8000872:	2301      	movs	r3, #1
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2318      	movs	r3, #24
 8000878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800087c:	21f0      	movs	r1, #240	; 0xf0
 800087e:	20aa      	movs	r0, #170	; 0xaa
 8000880:	f001 f827 	bl	80018d2 <lcd_DrawCircle>
		//		lcd_DrawCircle(50, 240, WHITE, 24, 1);
		lcd_DrawCircle(170, 100, RED, 24, 1);
		lcd_DrawCircle(170, 170, WHITE, 24, 1);
		lcd_DrawCircle(170, 240, WHITE, 24, 1);
	}
}
 8000884:	e043      	b.n	800090e <traffic_fsm+0x1a2>
	} else if (count1 == green_count + red_count) {
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <traffic_fsm+0x1ac>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <traffic_fsm+0x1b8>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	441a      	add	r2, r3
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <traffic_fsm+0x1b4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	429a      	cmp	r2, r3
 8000896:	d11b      	bne.n	80008d0 <traffic_fsm+0x164>
		lcd_DrawCircle(170, 100, WHITE, 24, 1);
 8000898:	2301      	movs	r3, #1
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2318      	movs	r3, #24
 800089e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a2:	2164      	movs	r1, #100	; 0x64
 80008a4:	20aa      	movs	r0, #170	; 0xaa
 80008a6:	f001 f814 	bl	80018d2 <lcd_DrawCircle>
		lcd_DrawCircle(170, 170, WHITE, 24, 1);
 80008aa:	2301      	movs	r3, #1
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2318      	movs	r3, #24
 80008b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b4:	21aa      	movs	r1, #170	; 0xaa
 80008b6:	20aa      	movs	r0, #170	; 0xaa
 80008b8:	f001 f80b 	bl	80018d2 <lcd_DrawCircle>
		lcd_DrawCircle(170, 240, YELLOW, 24, 1);
 80008bc:	2301      	movs	r3, #1
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2318      	movs	r3, #24
 80008c2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80008c6:	21f0      	movs	r1, #240	; 0xf0
 80008c8:	20aa      	movs	r0, #170	; 0xaa
 80008ca:	f001 f802 	bl	80018d2 <lcd_DrawCircle>
}
 80008ce:	e01e      	b.n	800090e <traffic_fsm+0x1a2>
	} else if (count1 == 0) {
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <traffic_fsm+0x1b4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d11a      	bne.n	800090e <traffic_fsm+0x1a2>
		lcd_DrawCircle(170, 100, RED, 24, 1);
 80008d8:	2301      	movs	r3, #1
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2318      	movs	r3, #24
 80008de:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80008e2:	2164      	movs	r1, #100	; 0x64
 80008e4:	20aa      	movs	r0, #170	; 0xaa
 80008e6:	f000 fff4 	bl	80018d2 <lcd_DrawCircle>
		lcd_DrawCircle(170, 170, WHITE, 24, 1);
 80008ea:	2301      	movs	r3, #1
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2318      	movs	r3, #24
 80008f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f4:	21aa      	movs	r1, #170	; 0xaa
 80008f6:	20aa      	movs	r0, #170	; 0xaa
 80008f8:	f000 ffeb 	bl	80018d2 <lcd_DrawCircle>
		lcd_DrawCircle(170, 240, WHITE, 24, 1);
 80008fc:	2301      	movs	r3, #1
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2318      	movs	r3, #24
 8000902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000906:	21f0      	movs	r1, #240	; 0xf0
 8000908:	20aa      	movs	r0, #170	; 0xaa
 800090a:	f000 ffe2 	bl	80018d2 <lcd_DrawCircle>
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000060 	.word	0x20000060
 8000918:	20000000 	.word	0x20000000
 800091c:	20000004 	.word	0x20000004
 8000920:	20000064 	.word	0x20000064
 8000924:	20000008 	.word	0x20000008

08000928 <traffic_UI>:

void traffic_UI(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, 10, "TRAFFIC LIGHT", RED, BLUE, 16, 1);
 800092e:	2301      	movs	r3, #1
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	2310      	movs	r3, #16
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	231f      	movs	r3, #31
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <traffic_UI+0x5c>)
 8000940:	210a      	movs	r1, #10
 8000942:	2000      	movs	r0, #0
 8000944:	f001 f896 	bl	8001a74 <lcd_StrCenter>

	lcd_ShowStr(30, 50, "Lane I:", BLUE, RED, 16, 1);
 8000948:	2301      	movs	r3, #1
 800094a:	9302      	str	r3, [sp, #8]
 800094c:	2310      	movs	r3, #16
 800094e:	9301      	str	r3, [sp, #4]
 8000950:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	231f      	movs	r3, #31
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <traffic_UI+0x60>)
 800095a:	2132      	movs	r1, #50	; 0x32
 800095c:	201e      	movs	r0, #30
 800095e:	f001 f825 	bl	80019ac <lcd_ShowStr>

	// lcd_DrawCircle(110, 120, GREEN, 16, 1);
	// lcd_DrawCircle(160, 120, YELLOW, 16, 1);
	// lcd_DrawCircle(210, 120, RED, 16, 1);

	lcd_ShowStr(140, 50, "Lane II:", BLUE, RED, 16, 1);
 8000962:	2301      	movs	r3, #1
 8000964:	9302      	str	r3, [sp, #8]
 8000966:	2310      	movs	r3, #16
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	231f      	movs	r3, #31
 8000972:	4a06      	ldr	r2, [pc, #24]	; (800098c <traffic_UI+0x64>)
 8000974:	2132      	movs	r1, #50	; 0x32
 8000976:	208c      	movs	r0, #140	; 0x8c
 8000978:	f001 f818 	bl	80019ac <lcd_ShowStr>
	// lcd_ShowIntNum(210, 50, 88, 2, RED, WHITE, 16);

//	lcd_DrawCircle(170, 100, RED, 24, 1);
//	lcd_DrawCircle(170, 170, GREEN, 24, 1);
//	lcd_DrawCircle(170, 240, YELLOW, 24, 1);
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	08004790 	.word	0x08004790
 8000988:	080047a0 	.word	0x080047a0
 800098c:	080047a8 	.word	0x080047a8

08000990 <update_fsm_state>:

void update_fsm_state(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	if (button_count[0] == 1) {
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <update_fsm_state+0x68>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d12a      	bne.n	80009f2 <update_fsm_state+0x62>
		f_state = (f_state + 1) % 4;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <update_fsm_state+0x6c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	425a      	negs	r2, r3
 80009a4:	f003 0303 	and.w	r3, r3, #3
 80009a8:	f002 0203 	and.w	r2, r2, #3
 80009ac:	bf58      	it	pl
 80009ae:	4253      	negpl	r3, r2
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <update_fsm_state+0x6c>)
 80009b4:	701a      	strb	r2, [r3, #0]
		lcd_Clear(WHITE);
 80009b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009ba:	f000 fbc7 	bl	800114c <lcd_Clear>
		if (f_state == red) {
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <update_fsm_state+0x6c>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d104      	bne.n	80009d0 <update_fsm_state+0x40>
			temp_count = red_count;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <update_fsm_state+0x70>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <update_fsm_state+0x74>)
 80009cc:	6013      	str	r3, [r2, #0]
			temp_count = green_count;
		} else if (f_state == yellow) {
			temp_count = yellow_count;
		}
	}
}
 80009ce:	e010      	b.n	80009f2 <update_fsm_state+0x62>
		} else if (f_state == green) {
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <update_fsm_state+0x6c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d104      	bne.n	80009e2 <update_fsm_state+0x52>
			temp_count = green_count;
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <update_fsm_state+0x78>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <update_fsm_state+0x74>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	e007      	b.n	80009f2 <update_fsm_state+0x62>
		} else if (f_state == yellow) {
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <update_fsm_state+0x6c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d103      	bne.n	80009f2 <update_fsm_state+0x62>
			temp_count = yellow_count;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <update_fsm_state+0x7c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <update_fsm_state+0x74>)
 80009f0:	6013      	str	r3, [r2, #0]
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000003c 	.word	0x2000003c
 80009fc:	2000005e 	.word	0x2000005e
 8000a00:	20000008 	.word	0x20000008
 8000a04:	2000006c 	.word	0x2000006c
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000004 	.word	0x20000004

08000a10 <mod_UI>:

void mod_UI(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af04      	add	r7, sp, #16
//	lcd_Clear(WHITE);
	toggle = (toggle + 1) % 20;
 8000a16:	4b6c      	ldr	r3, [pc, #432]	; (8000bc8 <mod_UI+0x1b8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	1c59      	adds	r1, r3, #1
 8000a1c:	4b6b      	ldr	r3, [pc, #428]	; (8000bcc <mod_UI+0x1bc>)
 8000a1e:	fb83 2301 	smull	r2, r3, r3, r1
 8000a22:	10da      	asrs	r2, r3, #3
 8000a24:	17cb      	asrs	r3, r1, #31
 8000a26:	1ad2      	subs	r2, r2, r3
 8000a28:	4613      	mov	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	1aca      	subs	r2, r1, r3
 8000a32:	4b65      	ldr	r3, [pc, #404]	; (8000bc8 <mod_UI+0x1b8>)
 8000a34:	601a      	str	r2, [r3, #0]

	update_temp_count();
 8000a36:	f000 f8db 	bl	8000bf0 <update_temp_count>
	switch (f_state) {
 8000a3a:	4b65      	ldr	r3, [pc, #404]	; (8000bd0 <mod_UI+0x1c0>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	d03d      	beq.n	8000abe <mod_UI+0xae>
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	f300 80ac 	bgt.w	8000ba0 <mod_UI+0x190>
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d002      	beq.n	8000a52 <mod_UI+0x42>
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d06c      	beq.n	8000b2a <mod_UI+0x11a>
 8000a50:	e0a6      	b.n	8000ba0 <mod_UI+0x190>
	case red:
		lcd_StrCenter(0, 10, "RED MODIFICATION", RED, BLUE, 16, 1);
 8000a52:	2301      	movs	r3, #1
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	2310      	movs	r3, #16
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	231f      	movs	r3, #31
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a62:	4a5c      	ldr	r2, [pc, #368]	; (8000bd4 <mod_UI+0x1c4>)
 8000a64:	210a      	movs	r1, #10
 8000a66:	2000      	movs	r0, #0
 8000a68:	f001 f804 	bl	8001a74 <lcd_StrCenter>
		lcd_ShowStr(30, 50, "RED Period:", BLUE, RED, 16, 1);
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	2310      	movs	r3, #16
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	231f      	movs	r3, #31
 8000a7c:	4a56      	ldr	r2, [pc, #344]	; (8000bd8 <mod_UI+0x1c8>)
 8000a7e:	2132      	movs	r1, #50	; 0x32
 8000a80:	201e      	movs	r0, #30
 8000a82:	f000 ff93 	bl	80019ac <lcd_ShowStr>
		if (toggle == 0)
 8000a86:	4b50      	ldr	r3, [pc, #320]	; (8000bc8 <mod_UI+0x1b8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d109      	bne.n	8000aa2 <mod_UI+0x92>
			lcd_DrawCircle(50, 100, RED, 24, 1);
 8000a8e:	2301      	movs	r3, #1
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	2318      	movs	r3, #24
 8000a94:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000a98:	2164      	movs	r1, #100	; 0x64
 8000a9a:	2032      	movs	r0, #50	; 0x32
 8000a9c:	f000 ff19 	bl	80018d2 <lcd_DrawCircle>
		else if (toggle == 10)
			lcd_DrawCircle(50, 100, WHITE, 24, 1);
		break;
 8000aa0:	e079      	b.n	8000b96 <mod_UI+0x186>
		else if (toggle == 10)
 8000aa2:	4b49      	ldr	r3, [pc, #292]	; (8000bc8 <mod_UI+0x1b8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b0a      	cmp	r3, #10
 8000aa8:	d175      	bne.n	8000b96 <mod_UI+0x186>
			lcd_DrawCircle(50, 100, WHITE, 24, 1);
 8000aaa:	2301      	movs	r3, #1
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2318      	movs	r3, #24
 8000ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab4:	2164      	movs	r1, #100	; 0x64
 8000ab6:	2032      	movs	r0, #50	; 0x32
 8000ab8:	f000 ff0b 	bl	80018d2 <lcd_DrawCircle>
		break;
 8000abc:	e06b      	b.n	8000b96 <mod_UI+0x186>
	case green:
		lcd_StrCenter(0, 10, "GREEN MODIFICATION", RED, BLUE, 16, 1);
 8000abe:	2301      	movs	r3, #1
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	231f      	movs	r3, #31
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ace:	4a43      	ldr	r2, [pc, #268]	; (8000bdc <mod_UI+0x1cc>)
 8000ad0:	210a      	movs	r1, #10
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 ffce 	bl	8001a74 <lcd_StrCenter>
		lcd_ShowStr(30, 50, "GREEN Period:", BLUE, RED, 16, 1);
 8000ad8:	2301      	movs	r3, #1
 8000ada:	9302      	str	r3, [sp, #8]
 8000adc:	2310      	movs	r3, #16
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	231f      	movs	r3, #31
 8000ae8:	4a3d      	ldr	r2, [pc, #244]	; (8000be0 <mod_UI+0x1d0>)
 8000aea:	2132      	movs	r1, #50	; 0x32
 8000aec:	201e      	movs	r0, #30
 8000aee:	f000 ff5d 	bl	80019ac <lcd_ShowStr>
		if (toggle == 0)
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <mod_UI+0x1b8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d109      	bne.n	8000b0e <mod_UI+0xfe>
			lcd_DrawCircle(50, 170, GREEN, 24, 1);
 8000afa:	2301      	movs	r3, #1
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2318      	movs	r3, #24
 8000b00:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000b04:	21aa      	movs	r1, #170	; 0xaa
 8000b06:	2032      	movs	r0, #50	; 0x32
 8000b08:	f000 fee3 	bl	80018d2 <lcd_DrawCircle>
		else if (toggle == 10)
			lcd_DrawCircle(50, 170, WHITE, 24, 1);
		break;
 8000b0c:	e045      	b.n	8000b9a <mod_UI+0x18a>
		else if (toggle == 10)
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <mod_UI+0x1b8>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b0a      	cmp	r3, #10
 8000b14:	d141      	bne.n	8000b9a <mod_UI+0x18a>
			lcd_DrawCircle(50, 170, WHITE, 24, 1);
 8000b16:	2301      	movs	r3, #1
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	2318      	movs	r3, #24
 8000b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b20:	21aa      	movs	r1, #170	; 0xaa
 8000b22:	2032      	movs	r0, #50	; 0x32
 8000b24:	f000 fed5 	bl	80018d2 <lcd_DrawCircle>
		break;
 8000b28:	e037      	b.n	8000b9a <mod_UI+0x18a>
	case yellow:
		lcd_StrCenter(0, 10, "YELLOW MODIFICATION", RED, BLUE, 16, 1);
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	9302      	str	r3, [sp, #8]
 8000b2e:	2310      	movs	r3, #16
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	231f      	movs	r3, #31
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b3a:	4a2a      	ldr	r2, [pc, #168]	; (8000be4 <mod_UI+0x1d4>)
 8000b3c:	210a      	movs	r1, #10
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 ff98 	bl	8001a74 <lcd_StrCenter>
		lcd_ShowStr(30, 50, "YELLOW Period:", BLUE, RED, 16, 1);
 8000b44:	2301      	movs	r3, #1
 8000b46:	9302      	str	r3, [sp, #8]
 8000b48:	2310      	movs	r3, #16
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	231f      	movs	r3, #31
 8000b54:	4a24      	ldr	r2, [pc, #144]	; (8000be8 <mod_UI+0x1d8>)
 8000b56:	2132      	movs	r1, #50	; 0x32
 8000b58:	201e      	movs	r0, #30
 8000b5a:	f000 ff27 	bl	80019ac <lcd_ShowStr>
		if (toggle == 0)
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <mod_UI+0x1b8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d109      	bne.n	8000b7a <mod_UI+0x16a>
			lcd_DrawCircle(50, 240, YELLOW, 24, 1);
 8000b66:	2301      	movs	r3, #1
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2318      	movs	r3, #24
 8000b6c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b70:	21f0      	movs	r1, #240	; 0xf0
 8000b72:	2032      	movs	r0, #50	; 0x32
 8000b74:	f000 fead 	bl	80018d2 <lcd_DrawCircle>
		else if (toggle == 10)
			lcd_DrawCircle(50, 240, WHITE, 24, 1);
		break;
 8000b78:	e011      	b.n	8000b9e <mod_UI+0x18e>
		else if (toggle == 10)
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <mod_UI+0x1b8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b0a      	cmp	r3, #10
 8000b80:	d10d      	bne.n	8000b9e <mod_UI+0x18e>
			lcd_DrawCircle(50, 240, WHITE, 24, 1);
 8000b82:	2301      	movs	r3, #1
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	2318      	movs	r3, #24
 8000b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b8c:	21f0      	movs	r1, #240	; 0xf0
 8000b8e:	2032      	movs	r0, #50	; 0x32
 8000b90:	f000 fe9f 	bl	80018d2 <lcd_DrawCircle>
		break;
 8000b94:	e003      	b.n	8000b9e <mod_UI+0x18e>
		break;
 8000b96:	bf00      	nop
 8000b98:	e002      	b.n	8000ba0 <mod_UI+0x190>
		break;
 8000b9a:	bf00      	nop
 8000b9c:	e000      	b.n	8000ba0 <mod_UI+0x190>
		break;
 8000b9e:	bf00      	nop
	default:
	}
	lcd_ShowIntNum(180, 50, temp_count, 2, RED, WHITE, 16);
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <mod_UI+0x1dc>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	9302      	str	r3, [sp, #8]
 8000baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	2132      	movs	r1, #50	; 0x32
 8000bba:	20b4      	movs	r0, #180	; 0xb4
 8000bbc:	f000 fbfc 	bl	80013b8 <lcd_ShowIntNum>
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000070 	.word	0x20000070
 8000bcc:	66666667 	.word	0x66666667
 8000bd0:	2000005e 	.word	0x2000005e
 8000bd4:	080047b4 	.word	0x080047b4
 8000bd8:	080047c8 	.word	0x080047c8
 8000bdc:	080047d4 	.word	0x080047d4
 8000be0:	080047e8 	.word	0x080047e8
 8000be4:	080047f8 	.word	0x080047f8
 8000be8:	0800480c 	.word	0x0800480c
 8000bec:	2000006c 	.word	0x2000006c

08000bf0 <update_temp_count>:

void update_temp_count(void) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
	if ((button_count[1] == 1) && (temp_count < 99))
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <update_temp_count+0x28>)
 8000bf6:	885b      	ldrh	r3, [r3, #2]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d108      	bne.n	8000c0e <update_temp_count+0x1e>
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <update_temp_count+0x2c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b62      	cmp	r3, #98	; 0x62
 8000c02:	dc04      	bgt.n	8000c0e <update_temp_count+0x1e>
		temp_count = temp_count + 1;
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <update_temp_count+0x2c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <update_temp_count+0x2c>)
 8000c0c:	6013      	str	r3, [r2, #0]
//			temp_count = temp_count + 1;
//		else if (button_count[2] == 1)
//			temp_count = temp_count - 1;
//	}

}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	2000003c 	.word	0x2000003c
 8000c1c:	2000006c 	.word	0x2000006c

08000c20 <fsm_no_return>:

void fsm_no_return(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	update_fsm_state();
 8000c24:	f7ff feb4 	bl	8000990 <update_fsm_state>
	switch (f_state) {
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <fsm_no_return+0x88>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d838      	bhi.n	8000ca2 <fsm_no_return+0x82>
 8000c30:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <fsm_no_return+0x18>)
 8000c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c36:	bf00      	nop
 8000c38:	08000c49 	.word	0x08000c49
 8000c3c:	08000c57 	.word	0x08000c57
 8000c40:	08000c83 	.word	0x08000c83
 8000c44:	08000c6d 	.word	0x08000c6d
	case normal:
		update_time();
 8000c48:	f7ff fcbc 	bl	80005c4 <update_time>
		traffic_UI();
 8000c4c:	f7ff fe6c 	bl	8000928 <traffic_UI>
		traffic_fsm();
 8000c50:	f7ff fd8c 	bl	800076c <traffic_fsm>
		break;
 8000c54:	e025      	b.n	8000ca2 <fsm_no_return+0x82>
	case red:
		mod_UI();
 8000c56:	f7ff fedb 	bl	8000a10 <mod_UI>
		if (button_count[2] == 1)
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <fsm_no_return+0x8c>)
 8000c5c:	889b      	ldrh	r3, [r3, #4]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d11a      	bne.n	8000c98 <fsm_no_return+0x78>
			red_count = temp_count;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <fsm_no_return+0x90>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <fsm_no_return+0x94>)
 8000c68:	6013      	str	r3, [r2, #0]
		break;
 8000c6a:	e015      	b.n	8000c98 <fsm_no_return+0x78>
	case green:
		mod_UI();
 8000c6c:	f7ff fed0 	bl	8000a10 <mod_UI>
		if (button_count[2] == 1)
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <fsm_no_return+0x8c>)
 8000c72:	889b      	ldrh	r3, [r3, #4]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d111      	bne.n	8000c9c <fsm_no_return+0x7c>
			green_count = temp_count;
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <fsm_no_return+0x90>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <fsm_no_return+0x98>)
 8000c7e:	6013      	str	r3, [r2, #0]
		break;
 8000c80:	e00c      	b.n	8000c9c <fsm_no_return+0x7c>
	case yellow:
		mod_UI();
 8000c82:	f7ff fec5 	bl	8000a10 <mod_UI>
		if (button_count[2] == 1)
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <fsm_no_return+0x8c>)
 8000c88:	889b      	ldrh	r3, [r3, #4]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d108      	bne.n	8000ca0 <fsm_no_return+0x80>
			yellow_count = temp_count;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <fsm_no_return+0x90>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <fsm_no_return+0x9c>)
 8000c94:	6013      	str	r3, [r2, #0]
		break;
 8000c96:	e003      	b.n	8000ca0 <fsm_no_return+0x80>
		break;
 8000c98:	bf00      	nop
 8000c9a:	e002      	b.n	8000ca2 <fsm_no_return+0x82>
		break;
 8000c9c:	bf00      	nop
 8000c9e:	e000      	b.n	8000ca2 <fsm_no_return+0x82>
		break;
 8000ca0:	bf00      	nop
	default:

	}
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000005e 	.word	0x2000005e
 8000cac:	2000003c 	.word	0x2000003c
 8000cb0:	2000006c 	.word	0x2000006c
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08e      	sub	sp, #56	; 0x38
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
 8000cd6:	615a      	str	r2, [r3, #20]
 8000cd8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <MX_FSMC_Init+0xec>)
 8000cee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000cf2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <MX_FSMC_Init+0xec>)
 8000cf6:	4a2e      	ldr	r2, [pc, #184]	; (8000db0 <MX_FSMC_Init+0xf0>)
 8000cf8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <MX_FSMC_Init+0xec>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000d06:	4b29      	ldr	r3, [pc, #164]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d0e:	2210      	movs	r2, #16
 8000d10:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000d52:	230f      	movs	r3, #15
 8000d54:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000d56:	230f      	movs	r3, #15
 8000d58:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000d5a:	233c      	movs	r3, #60	; 0x3c
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000d62:	2310      	movs	r3, #16
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000d66:	2311      	movs	r3, #17
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000d72:	230f      	movs	r3, #15
 8000d74:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000d76:	2309      	movs	r3, #9
 8000d78:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000d7e:	2310      	movs	r3, #16
 8000d80:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000d82:	2311      	movs	r3, #17
 8000d84:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000d8a:	463a      	mov	r2, r7
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <MX_FSMC_Init+0xec>)
 8000d94:	f002 ff2e 	bl	8003bf4 <HAL_SRAM_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000d9e:	f000 ffe1 	bl	8001d64 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000da2:	bf00      	nop
 8000da4:	3738      	adds	r7, #56	; 0x38
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000074 	.word	0x20000074
 8000db0:	a0000104 	.word	0xa0000104

08000db4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <HAL_FSMC_MspInit+0x88>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d131      	bne.n	8000e34 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <HAL_FSMC_MspInit+0x88>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_FSMC_MspInit+0x8c>)
 8000ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dde:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <HAL_FSMC_MspInit+0x8c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6393      	str	r3, [r2, #56]	; 0x38
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_FSMC_MspInit+0x8c>)
 8000de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000df2:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000df6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000e04:	230c      	movs	r3, #12
 8000e06:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <HAL_FSMC_MspInit+0x90>)
 8000e0e:	f001 fb2f 	bl	8002470 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e12:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000e16:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000e24:	230c      	movs	r3, #12
 8000e26:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <HAL_FSMC_MspInit+0x94>)
 8000e2e:	f001 fb1f 	bl	8002470 <HAL_GPIO_Init>
 8000e32:	e000      	b.n	8000e36 <HAL_FSMC_MspInit+0x82>
    return;
 8000e34:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200000c4 	.word	0x200000c4
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40020c00 	.word	0x40020c00

08000e4c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000e54:	f7ff ffae 	bl	8000db4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	4b6f      	ldr	r3, [pc, #444]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a6e      	ldr	r2, [pc, #440]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000e80:	f043 0310 	orr.w	r3, r3, #16
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b6c      	ldr	r3, [pc, #432]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	4b68      	ldr	r3, [pc, #416]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a67      	ldr	r2, [pc, #412]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b65      	ldr	r3, [pc, #404]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b61      	ldr	r3, [pc, #388]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a60      	ldr	r2, [pc, #384]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b5e      	ldr	r3, [pc, #376]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b5a      	ldr	r3, [pc, #360]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a59      	ldr	r2, [pc, #356]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b57      	ldr	r3, [pc, #348]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	4b53      	ldr	r3, [pc, #332]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a52      	ldr	r2, [pc, #328]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b50      	ldr	r3, [pc, #320]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b4c      	ldr	r3, [pc, #304]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a4b      	ldr	r2, [pc, #300]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b49      	ldr	r3, [pc, #292]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b45      	ldr	r3, [pc, #276]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a44      	ldr	r2, [pc, #272]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b42      	ldr	r3, [pc, #264]	; (8001038 <MX_GPIO_Init+0x1d8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2170      	movs	r1, #112	; 0x70
 8000f3e:	483f      	ldr	r0, [pc, #252]	; (800103c <MX_GPIO_Init+0x1dc>)
 8000f40:	f001 fc32 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4a:	483d      	ldr	r0, [pc, #244]	; (8001040 <MX_GPIO_Init+0x1e0>)
 8000f4c:	f001 fc2c 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	483b      	ldr	r0, [pc, #236]	; (8001044 <MX_GPIO_Init+0x1e4>)
 8000f56:	f001 fc27 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f60:	4839      	ldr	r0, [pc, #228]	; (8001048 <MX_GPIO_Init+0x1e8>)
 8000f62:	f001 fc21 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4838      	ldr	r0, [pc, #224]	; (800104c <MX_GPIO_Init+0x1ec>)
 8000f6c:	f001 fc1c 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000f70:	2370      	movs	r3, #112	; 0x70
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	482d      	ldr	r0, [pc, #180]	; (800103c <MX_GPIO_Init+0x1dc>)
 8000f88:	f001 fa72 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4826      	ldr	r0, [pc, #152]	; (8001040 <MX_GPIO_Init+0x1e0>)
 8000fa6:	f001 fa63 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000faa:	23c0      	movs	r3, #192	; 0xc0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4822      	ldr	r0, [pc, #136]	; (8001048 <MX_GPIO_Init+0x1e8>)
 8000fbe:	f001 fa57 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000fc2:	2330      	movs	r3, #48	; 0x30
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	481a      	ldr	r0, [pc, #104]	; (8001040 <MX_GPIO_Init+0x1e0>)
 8000fd6:	f001 fa4b 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000fda:	2340      	movs	r3, #64	; 0x40
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4814      	ldr	r0, [pc, #80]	; (8001044 <MX_GPIO_Init+0x1e4>)
 8000ff2:	f001 fa3d 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	480e      	ldr	r0, [pc, #56]	; (8001048 <MX_GPIO_Init+0x1e8>)
 8001010:	f001 fa2e 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001014:	2308      	movs	r3, #8
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101c:	2301      	movs	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4808      	ldr	r0, [pc, #32]	; (800104c <MX_GPIO_Init+0x1ec>)
 800102c:	f001 fa20 	bl	8002470 <HAL_GPIO_Init>

}
 8001030:	bf00      	nop
 8001032:	3730      	adds	r7, #48	; 0x30
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	40021000 	.word	0x40021000
 8001040:	40020800 	.word	0x40020800
 8001044:	40021800 	.word	0x40021800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020c00 	.word	0x40020c00

08001050 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <LCD_WR_REG+0x1c>)
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	8013      	strh	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	600ffffe 	.word	0x600ffffe

08001070 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <LCD_WR_DATA+0x1c>)
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	8053      	strh	r3, [r2, #2]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	600ffffe 	.word	0x600ffffe

08001090 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <LCD_RD_DATA+0x20>)
 8001098:	885b      	ldrh	r3, [r3, #2]
 800109a:	b29b      	uxth	r3, r3
 800109c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	b29b      	uxth	r3, r3
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	600ffffe 	.word	0x600ffffe

080010b4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4604      	mov	r4, r0
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4623      	mov	r3, r4
 80010c4:	80fb      	strh	r3, [r7, #6]
 80010c6:	4603      	mov	r3, r0
 80010c8:	80bb      	strh	r3, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	807b      	strh	r3, [r7, #2]
 80010ce:	4613      	mov	r3, r2
 80010d0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80010d2:	202a      	movs	r0, #42	; 0x2a
 80010d4:	f7ff ffbc 	bl	8001050 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ffc6 	bl	8001070 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ffc0 	bl	8001070 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ffba 	bl	8001070 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffb4 	bl	8001070 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001108:	202b      	movs	r0, #43	; 0x2b
 800110a:	f7ff ffa1 	bl	8001050 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800110e:	88bb      	ldrh	r3, [r7, #4]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	b29b      	uxth	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffab 	bl	8001070 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffa5 	bl	8001070 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001126:	883b      	ldrh	r3, [r7, #0]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff9f 	bl	8001070 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001132:	883b      	ldrh	r3, [r7, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	b29b      	uxth	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff99 	bl	8001070 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800113e:	202c      	movs	r0, #44	; 0x2c
 8001140:	f7ff ff86 	bl	8001050 <LCD_WR_REG>
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bd90      	pop	{r4, r7, pc}

0800114c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <lcd_Clear+0x60>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	3b01      	subs	r3, #1
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <lcd_Clear+0x60>)
 8001160:	885b      	ldrh	r3, [r3, #2]
 8001162:	3b01      	subs	r3, #1
 8001164:	b29b      	uxth	r3, r3
 8001166:	2100      	movs	r1, #0
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff ffa3 	bl	80010b4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800116e:	2300      	movs	r3, #0
 8001170:	81fb      	strh	r3, [r7, #14]
 8001172:	e011      	b.n	8001198 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001174:	2300      	movs	r3, #0
 8001176:	81bb      	strh	r3, [r7, #12]
 8001178:	e006      	b.n	8001188 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff77 	bl	8001070 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001182:	89bb      	ldrh	r3, [r7, #12]
 8001184:	3301      	adds	r3, #1
 8001186:	81bb      	strh	r3, [r7, #12]
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <lcd_Clear+0x60>)
 800118a:	885b      	ldrh	r3, [r3, #2]
 800118c:	89ba      	ldrh	r2, [r7, #12]
 800118e:	429a      	cmp	r2, r3
 8001190:	d3f3      	bcc.n	800117a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	3301      	adds	r3, #1
 8001196:	81fb      	strh	r3, [r7, #14]
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <lcd_Clear+0x60>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	89fa      	ldrh	r2, [r7, #14]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3e8      	bcc.n	8001174 <lcd_Clear+0x28>
		}
	}
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200000c8 	.word	0x200000c8

080011b0 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
 80011ba:	460b      	mov	r3, r1
 80011bc:	80bb      	strh	r3, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80011c2:	88bb      	ldrh	r3, [r7, #4]
 80011c4:	88fa      	ldrh	r2, [r7, #6]
 80011c6:	88b9      	ldrh	r1, [r7, #4]
 80011c8:	88f8      	ldrh	r0, [r7, #6]
 80011ca:	f7ff ff73 	bl	80010b4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff4d 	bl	8001070 <LCD_WR_DATA>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4604      	mov	r4, r0
 80011e8:	4608      	mov	r0, r1
 80011ea:	4611      	mov	r1, r2
 80011ec:	461a      	mov	r2, r3
 80011ee:	4623      	mov	r3, r4
 80011f0:	80fb      	strh	r3, [r7, #6]
 80011f2:	4603      	mov	r3, r0
 80011f4:	80bb      	strh	r3, [r7, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	70fb      	strb	r3, [r7, #3]
 80011fa:	4613      	mov	r3, r2
 80011fc:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80011fe:	2300      	movs	r3, #0
 8001200:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001206:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800120a:	085b      	lsrs	r3, r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	08db      	lsrs	r3, r3, #3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf14      	ite	ne
 8001222:	2301      	movne	r3, #1
 8001224:	2300      	moveq	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4413      	add	r3, r2
 800122a:	b29a      	uxth	r2, r3
 800122c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001230:	b29b      	uxth	r3, r3
 8001232:	fb12 f303 	smulbb	r3, r2, r3
 8001236:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	3b20      	subs	r3, #32
 800123c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	b29a      	uxth	r2, r3
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	4413      	add	r3, r2
 8001246:	b29b      	uxth	r3, r3
 8001248:	3b01      	subs	r3, #1
 800124a:	b29c      	uxth	r4, r3
 800124c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001250:	b29a      	uxth	r2, r3
 8001252:	88bb      	ldrh	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	b29b      	uxth	r3, r3
 8001258:	3b01      	subs	r3, #1
 800125a:	b29b      	uxth	r3, r3
 800125c:	88b9      	ldrh	r1, [r7, #4]
 800125e:	88f8      	ldrh	r0, [r7, #6]
 8001260:	4622      	mov	r2, r4
 8001262:	f7ff ff27 	bl	80010b4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001266:	2300      	movs	r3, #0
 8001268:	827b      	strh	r3, [r7, #18]
 800126a:	e07a      	b.n	8001362 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 800126c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d028      	beq.n	80012c6 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001274:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001278:	2b10      	cmp	r3, #16
 800127a:	d108      	bne.n	800128e <lcd_ShowChar+0xae>
 800127c:	78fa      	ldrb	r2, [r7, #3]
 800127e:	8a7b      	ldrh	r3, [r7, #18]
 8001280:	493c      	ldr	r1, [pc, #240]	; (8001374 <lcd_ShowChar+0x194>)
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	440a      	add	r2, r1
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	75fb      	strb	r3, [r7, #23]
 800128c:	e01b      	b.n	80012c6 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800128e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001292:	2b18      	cmp	r3, #24
 8001294:	d10b      	bne.n	80012ae <lcd_ShowChar+0xce>
 8001296:	78fa      	ldrb	r2, [r7, #3]
 8001298:	8a79      	ldrh	r1, [r7, #18]
 800129a:	4837      	ldr	r0, [pc, #220]	; (8001378 <lcd_ShowChar+0x198>)
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	4403      	add	r3, r0
 80012a6:	440b      	add	r3, r1
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	75fb      	strb	r3, [r7, #23]
 80012ac:	e00b      	b.n	80012c6 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80012ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012b2:	2b20      	cmp	r3, #32
 80012b4:	d15a      	bne.n	800136c <lcd_ShowChar+0x18c>
 80012b6:	78fa      	ldrb	r2, [r7, #3]
 80012b8:	8a7b      	ldrh	r3, [r7, #18]
 80012ba:	4930      	ldr	r1, [pc, #192]	; (800137c <lcd_ShowChar+0x19c>)
 80012bc:	0192      	lsls	r2, r2, #6
 80012be:	440a      	add	r2, r1
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	75bb      	strb	r3, [r7, #22]
 80012ca:	e044      	b.n	8001356 <lcd_ShowChar+0x176>
		{
			if(!mode)
 80012cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d120      	bne.n	8001316 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80012d4:	7dfa      	ldrb	r2, [r7, #23]
 80012d6:	7dbb      	ldrb	r3, [r7, #22]
 80012d8:	fa42 f303 	asr.w	r3, r2, r3
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d004      	beq.n	80012ee <lcd_ShowChar+0x10e>
 80012e4:	883b      	ldrh	r3, [r7, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fec2 	bl	8001070 <LCD_WR_DATA>
 80012ec:	e003      	b.n	80012f6 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80012ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff febd 	bl	8001070 <LCD_WR_DATA>
				m++;
 80012f6:	7d7b      	ldrb	r3, [r7, #21]
 80012f8:	3301      	adds	r3, #1
 80012fa:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80012fc:	7d7b      	ldrb	r3, [r7, #21]
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	fbb3 f1f2 	udiv	r1, r3, r2
 8001304:	fb01 f202 	mul.w	r2, r1, r2
 8001308:	1a9b      	subs	r3, r3, r2
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d11f      	bne.n	8001350 <lcd_ShowChar+0x170>
				{
					m=0;
 8001310:	2300      	movs	r3, #0
 8001312:	757b      	strb	r3, [r7, #21]
					break;
 8001314:	e022      	b.n	800135c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001316:	7dfa      	ldrb	r2, [r7, #23]
 8001318:	7dbb      	ldrb	r3, [r7, #22]
 800131a:	fa42 f303 	asr.w	r3, r2, r3
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d005      	beq.n	8001332 <lcd_ShowChar+0x152>
 8001326:	883a      	ldrh	r2, [r7, #0]
 8001328:	88b9      	ldrh	r1, [r7, #4]
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff3f 	bl	80011b0 <lcd_DrawPoint>
				x++;
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	3301      	adds	r3, #1
 8001336:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001338:	88fa      	ldrh	r2, [r7, #6]
 800133a:	8a3b      	ldrh	r3, [r7, #16]
 800133c:	1ad2      	subs	r2, r2, r3
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	429a      	cmp	r2, r3
 8001342:	d105      	bne.n	8001350 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001344:	8a3b      	ldrh	r3, [r7, #16]
 8001346:	80fb      	strh	r3, [r7, #6]
					y++;
 8001348:	88bb      	ldrh	r3, [r7, #4]
 800134a:	3301      	adds	r3, #1
 800134c:	80bb      	strh	r3, [r7, #4]
					break;
 800134e:	e005      	b.n	800135c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001350:	7dbb      	ldrb	r3, [r7, #22]
 8001352:	3301      	adds	r3, #1
 8001354:	75bb      	strb	r3, [r7, #22]
 8001356:	7dbb      	ldrb	r3, [r7, #22]
 8001358:	2b07      	cmp	r3, #7
 800135a:	d9b7      	bls.n	80012cc <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 800135c:	8a7b      	ldrh	r3, [r7, #18]
 800135e:	3301      	adds	r3, #1
 8001360:	827b      	strh	r3, [r7, #18]
 8001362:	8a7a      	ldrh	r2, [r7, #18]
 8001364:	89bb      	ldrh	r3, [r7, #12]
 8001366:	429a      	cmp	r2, r3
 8001368:	d380      	bcc.n	800126c <lcd_ShowChar+0x8c>
 800136a:	e000      	b.n	800136e <lcd_ShowChar+0x18e>
		else return;
 800136c:	bf00      	nop
				}
			}
		}
	}
}
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd90      	pop	{r4, r7, pc}
 8001374:	0800481c 	.word	0x0800481c
 8001378:	08004e0c 	.word	0x08004e0c
 800137c:	08005fdc 	.word	0x08005fdc

08001380 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	460a      	mov	r2, r1
 800138a:	71fb      	strb	r3, [r7, #7]
 800138c:	4613      	mov	r3, r2
 800138e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001390:	2301      	movs	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001394:	e004      	b.n	80013a0 <mypow+0x20>
 8001396:	79fa      	ldrb	r2, [r7, #7]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	79bb      	ldrb	r3, [r7, #6]
 80013a2:	1e5a      	subs	r2, r3, #1
 80013a4:	71ba      	strb	r2, [r7, #6]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f5      	bne.n	8001396 <mypow+0x16>
	return result;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af04      	add	r7, sp, #16
 80013be:	4604      	mov	r4, r0
 80013c0:	4608      	mov	r0, r1
 80013c2:	4611      	mov	r1, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	4623      	mov	r3, r4
 80013c8:	80fb      	strh	r3, [r7, #6]
 80013ca:	4603      	mov	r3, r0
 80013cc:	80bb      	strh	r3, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	807b      	strh	r3, [r7, #2]
 80013d2:	4613      	mov	r3, r2
 80013d4:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80013da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013de:	085b      	lsrs	r3, r3, #1
 80013e0:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	e059      	b.n	800149c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80013e8:	887c      	ldrh	r4, [r7, #2]
 80013ea:	787a      	ldrb	r2, [r7, #1]
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	3b01      	subs	r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	200a      	movs	r0, #10
 80013fa:	f7ff ffc1 	bl	8001380 <mypow>
 80013fe:	4603      	mov	r3, r0
 8001400:	fbb4 f1f3 	udiv	r1, r4, r3
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <lcd_ShowIntNum+0xf8>)
 8001406:	fba3 2301 	umull	r2, r3, r3, r1
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	1aca      	subs	r2, r1, r3
 8001416:	4613      	mov	r3, r2
 8001418:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d121      	bne.n	8001464 <lcd_ShowIntNum+0xac>
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	787b      	ldrb	r3, [r7, #1]
 8001424:	3b01      	subs	r3, #1
 8001426:	429a      	cmp	r2, r3
 8001428:	da1c      	bge.n	8001464 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800142a:	7b3b      	ldrb	r3, [r7, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d117      	bne.n	8001460 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	b29a      	uxth	r2, r3
 8001434:	7b7b      	ldrb	r3, [r7, #13]
 8001436:	b29b      	uxth	r3, r3
 8001438:	fb12 f303 	smulbb	r3, r2, r3
 800143c:	b29a      	uxth	r2, r3
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4413      	add	r3, r2
 8001442:	b298      	uxth	r0, r3
 8001444:	8c3a      	ldrh	r2, [r7, #32]
 8001446:	88b9      	ldrh	r1, [r7, #4]
 8001448:	2300      	movs	r3, #0
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	4613      	mov	r3, r2
 8001458:	2220      	movs	r2, #32
 800145a:	f7ff fec1 	bl	80011e0 <lcd_ShowChar>
				continue;
 800145e:	e01a      	b.n	8001496 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001460:	2301      	movs	r3, #1
 8001462:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	b29a      	uxth	r2, r3
 8001468:	7b7b      	ldrb	r3, [r7, #13]
 800146a:	b29b      	uxth	r3, r3
 800146c:	fb12 f303 	smulbb	r3, r2, r3
 8001470:	b29a      	uxth	r2, r3
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	4413      	add	r3, r2
 8001476:	b298      	uxth	r0, r3
 8001478:	7b3b      	ldrb	r3, [r7, #12]
 800147a:	3330      	adds	r3, #48	; 0x30
 800147c:	b2da      	uxtb	r2, r3
 800147e:	8c3c      	ldrh	r4, [r7, #32]
 8001480:	88b9      	ldrh	r1, [r7, #4]
 8001482:	2300      	movs	r3, #0
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	4623      	mov	r3, r4
 8001492:	f7ff fea5 	bl	80011e0 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	3301      	adds	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	787b      	ldrb	r3, [r7, #1]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d3a1      	bcc.n	80013e8 <lcd_ShowIntNum+0x30>
	}
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}
 80014ae:	bf00      	nop
 80014b0:	cccccccd 	.word	0xcccccccd

080014b4 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <lcd_SetDir+0x44>)
 80014d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014d4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <lcd_SetDir+0x44>)
 80014d8:	22f0      	movs	r2, #240	; 0xf0
 80014da:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80014dc:	e006      	b.n	80014ec <lcd_SetDir+0x38>
		lcddev.width=240;
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <lcd_SetDir+0x44>)
 80014e0:	22f0      	movs	r2, #240	; 0xf0
 80014e2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <lcd_SetDir+0x44>)
 80014e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014ea:	805a      	strh	r2, [r3, #2]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	200000c8 	.word	0x200000c8

080014fc <lcd_init>:


void lcd_init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001506:	48aa      	ldr	r0, [pc, #680]	; (80017b0 <lcd_init+0x2b4>)
 8001508:	f001 f94e 	bl	80027a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800150c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001510:	f000 fe78 	bl	8002204 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800151a:	48a5      	ldr	r0, [pc, #660]	; (80017b0 <lcd_init+0x2b4>)
 800151c:	f001 f944 	bl	80027a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001520:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001524:	f000 fe6e 	bl	8002204 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff ffc3 	bl	80014b4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800152e:	20d3      	movs	r0, #211	; 0xd3
 8001530:	f7ff fd8e 	bl	8001050 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001534:	f7ff fdac 	bl	8001090 <LCD_RD_DATA>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4b9d      	ldr	r3, [pc, #628]	; (80017b4 <lcd_init+0x2b8>)
 800153e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001540:	f7ff fda6 	bl	8001090 <LCD_RD_DATA>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	4b9a      	ldr	r3, [pc, #616]	; (80017b4 <lcd_init+0x2b8>)
 800154a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800154c:	f7ff fda0 	bl	8001090 <LCD_RD_DATA>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	4b97      	ldr	r3, [pc, #604]	; (80017b4 <lcd_init+0x2b8>)
 8001556:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001558:	4b96      	ldr	r3, [pc, #600]	; (80017b4 <lcd_init+0x2b8>)
 800155a:	889b      	ldrh	r3, [r3, #4]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b94      	ldr	r3, [pc, #592]	; (80017b4 <lcd_init+0x2b8>)
 8001562:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001564:	f7ff fd94 	bl	8001090 <LCD_RD_DATA>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b91      	ldr	r3, [pc, #580]	; (80017b4 <lcd_init+0x2b8>)
 800156e:	889b      	ldrh	r3, [r3, #4]
 8001570:	4313      	orrs	r3, r2
 8001572:	b29a      	uxth	r2, r3
 8001574:	4b8f      	ldr	r3, [pc, #572]	; (80017b4 <lcd_init+0x2b8>)
 8001576:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001578:	20cf      	movs	r0, #207	; 0xcf
 800157a:	f7ff fd69 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff fd76 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001584:	20c1      	movs	r0, #193	; 0xc1
 8001586:	f7ff fd73 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800158a:	2030      	movs	r0, #48	; 0x30
 800158c:	f7ff fd70 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001590:	20ed      	movs	r0, #237	; 0xed
 8001592:	f7ff fd5d 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001596:	2064      	movs	r0, #100	; 0x64
 8001598:	f7ff fd6a 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800159c:	2003      	movs	r0, #3
 800159e:	f7ff fd67 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80015a2:	2012      	movs	r0, #18
 80015a4:	f7ff fd64 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80015a8:	2081      	movs	r0, #129	; 0x81
 80015aa:	f7ff fd61 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80015ae:	20e8      	movs	r0, #232	; 0xe8
 80015b0:	f7ff fd4e 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80015b4:	2085      	movs	r0, #133	; 0x85
 80015b6:	f7ff fd5b 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80015ba:	2010      	movs	r0, #16
 80015bc:	f7ff fd58 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80015c0:	207a      	movs	r0, #122	; 0x7a
 80015c2:	f7ff fd55 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80015c6:	20cb      	movs	r0, #203	; 0xcb
 80015c8:	f7ff fd42 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80015cc:	2039      	movs	r0, #57	; 0x39
 80015ce:	f7ff fd4f 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80015d2:	202c      	movs	r0, #44	; 0x2c
 80015d4:	f7ff fd4c 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80015d8:	2000      	movs	r0, #0
 80015da:	f7ff fd49 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80015de:	2034      	movs	r0, #52	; 0x34
 80015e0:	f7ff fd46 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80015e4:	2002      	movs	r0, #2
 80015e6:	f7ff fd43 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80015ea:	20f7      	movs	r0, #247	; 0xf7
 80015ec:	f7ff fd30 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80015f0:	2020      	movs	r0, #32
 80015f2:	f7ff fd3d 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80015f6:	20ea      	movs	r0, #234	; 0xea
 80015f8:	f7ff fd2a 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fd37 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff fd34 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001608:	20c0      	movs	r0, #192	; 0xc0
 800160a:	f7ff fd21 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800160e:	201b      	movs	r0, #27
 8001610:	f7ff fd2e 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001614:	20c1      	movs	r0, #193	; 0xc1
 8001616:	f7ff fd1b 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff fd28 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001620:	20c5      	movs	r0, #197	; 0xc5
 8001622:	f7ff fd15 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001626:	2030      	movs	r0, #48	; 0x30
 8001628:	f7ff fd22 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800162c:	2030      	movs	r0, #48	; 0x30
 800162e:	f7ff fd1f 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001632:	20c7      	movs	r0, #199	; 0xc7
 8001634:	f7ff fd0c 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001638:	20b7      	movs	r0, #183	; 0xb7
 800163a:	f7ff fd19 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800163e:	2036      	movs	r0, #54	; 0x36
 8001640:	f7ff fd06 	bl	8001050 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001644:	2008      	movs	r0, #8
 8001646:	f7ff fd13 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800164a:	203a      	movs	r0, #58	; 0x3a
 800164c:	f7ff fd00 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001650:	2055      	movs	r0, #85	; 0x55
 8001652:	f7ff fd0d 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001656:	20b1      	movs	r0, #177	; 0xb1
 8001658:	f7ff fcfa 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fd07 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001662:	201a      	movs	r0, #26
 8001664:	f7ff fd04 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001668:	20b6      	movs	r0, #182	; 0xb6
 800166a:	f7ff fcf1 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800166e:	200a      	movs	r0, #10
 8001670:	f7ff fcfe 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001674:	20a2      	movs	r0, #162	; 0xa2
 8001676:	f7ff fcfb 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800167a:	20f2      	movs	r0, #242	; 0xf2
 800167c:	f7ff fce8 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff fcf5 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001686:	2026      	movs	r0, #38	; 0x26
 8001688:	f7ff fce2 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff fcef 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001692:	20e0      	movs	r0, #224	; 0xe0
 8001694:	f7ff fcdc 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001698:	200f      	movs	r0, #15
 800169a:	f7ff fce9 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800169e:	202a      	movs	r0, #42	; 0x2a
 80016a0:	f7ff fce6 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80016a4:	2028      	movs	r0, #40	; 0x28
 80016a6:	f7ff fce3 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80016aa:	2008      	movs	r0, #8
 80016ac:	f7ff fce0 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80016b0:	200e      	movs	r0, #14
 80016b2:	f7ff fcdd 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80016b6:	2008      	movs	r0, #8
 80016b8:	f7ff fcda 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80016bc:	2054      	movs	r0, #84	; 0x54
 80016be:	f7ff fcd7 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80016c2:	20a9      	movs	r0, #169	; 0xa9
 80016c4:	f7ff fcd4 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80016c8:	2043      	movs	r0, #67	; 0x43
 80016ca:	f7ff fcd1 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80016ce:	200a      	movs	r0, #10
 80016d0:	f7ff fcce 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80016d4:	200f      	movs	r0, #15
 80016d6:	f7ff fccb 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff fcc8 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff fcc5 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff fcc2 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fcbf 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80016f2:	20e1      	movs	r0, #225	; 0xe1
 80016f4:	f7ff fcac 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fcb9 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80016fe:	2015      	movs	r0, #21
 8001700:	f7ff fcb6 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001704:	2017      	movs	r0, #23
 8001706:	f7ff fcb3 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800170a:	2007      	movs	r0, #7
 800170c:	f7ff fcb0 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001710:	2011      	movs	r0, #17
 8001712:	f7ff fcad 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001716:	2006      	movs	r0, #6
 8001718:	f7ff fcaa 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800171c:	202b      	movs	r0, #43	; 0x2b
 800171e:	f7ff fca7 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001722:	2056      	movs	r0, #86	; 0x56
 8001724:	f7ff fca4 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001728:	203c      	movs	r0, #60	; 0x3c
 800172a:	f7ff fca1 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800172e:	2005      	movs	r0, #5
 8001730:	f7ff fc9e 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001734:	2010      	movs	r0, #16
 8001736:	f7ff fc9b 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800173a:	200f      	movs	r0, #15
 800173c:	f7ff fc98 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001740:	203f      	movs	r0, #63	; 0x3f
 8001742:	f7ff fc95 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001746:	203f      	movs	r0, #63	; 0x3f
 8001748:	f7ff fc92 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800174c:	200f      	movs	r0, #15
 800174e:	f7ff fc8f 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001752:	202b      	movs	r0, #43	; 0x2b
 8001754:	f7ff fc7c 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff fc89 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800175e:	2000      	movs	r0, #0
 8001760:	f7ff fc86 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fc83 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800176a:	203f      	movs	r0, #63	; 0x3f
 800176c:	f7ff fc80 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001770:	202a      	movs	r0, #42	; 0x2a
 8001772:	f7ff fc6d 	bl	8001050 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff fc7a 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fc77 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001782:	2000      	movs	r0, #0
 8001784:	f7ff fc74 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001788:	20ef      	movs	r0, #239	; 0xef
 800178a:	f7ff fc71 	bl	8001070 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800178e:	2011      	movs	r0, #17
 8001790:	f7ff fc5e 	bl	8001050 <LCD_WR_REG>
	HAL_Delay(120);
 8001794:	2078      	movs	r0, #120	; 0x78
 8001796:	f000 fd35 	bl	8002204 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800179a:	2029      	movs	r0, #41	; 0x29
 800179c:	f7ff fc58 	bl	8001050 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a6:	4804      	ldr	r0, [pc, #16]	; (80017b8 <lcd_init+0x2bc>)
 80017a8:	f000 fffe 	bl	80027a8 <HAL_GPIO_WritePin>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40020800 	.word	0x40020800
 80017b4:	200000c8 	.word	0x200000c8
 80017b8:	40020000 	.word	0x40020000

080017bc <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	b298      	uxth	r0, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	4413      	add	r3, r2
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	8b3a      	ldrh	r2, [r7, #24]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff fce3 	bl	80011b0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	b298      	uxth	r0, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4413      	add	r3, r2
 8001800:	b29b      	uxth	r3, r3
 8001802:	8b3a      	ldrh	r2, [r7, #24]
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff fcd3 	bl	80011b0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	b29a      	uxth	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4413      	add	r3, r2
 8001814:	b298      	uxth	r0, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	b29a      	uxth	r2, r3
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b29b      	uxth	r3, r3
 8001822:	8b3a      	ldrh	r2, [r7, #24]
 8001824:	4619      	mov	r1, r3
 8001826:	f7ff fcc3 	bl	80011b0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	b29a      	uxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	b29b      	uxth	r3, r3
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	b298      	uxth	r0, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	b29a      	uxth	r2, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b29b      	uxth	r3, r3
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	b29b      	uxth	r3, r3
 8001842:	8b3a      	ldrh	r2, [r7, #24]
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff fcb3 	bl	80011b0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	b29a      	uxth	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	4413      	add	r3, r2
 8001854:	b298      	uxth	r0, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	b29a      	uxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	b29b      	uxth	r3, r3
 800185e:	4413      	add	r3, r2
 8001860:	b29b      	uxth	r3, r3
 8001862:	8b3a      	ldrh	r2, [r7, #24]
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff fca3 	bl	80011b0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	b29a      	uxth	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b29b      	uxth	r3, r3
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	b298      	uxth	r0, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	b29a      	uxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	b29b      	uxth	r3, r3
 800187e:	4413      	add	r3, r2
 8001880:	b29b      	uxth	r3, r3
 8001882:	8b3a      	ldrh	r2, [r7, #24]
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff fc93 	bl	80011b0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	b29a      	uxth	r2, r3
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b29b      	uxth	r3, r3
 8001892:	4413      	add	r3, r2
 8001894:	b298      	uxth	r0, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	b29b      	uxth	r3, r3
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	8b3a      	ldrh	r2, [r7, #24]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff fc83 	bl	80011b0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	b298      	uxth	r0, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	8b3a      	ldrh	r2, [r7, #24]
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff fc73 	bl	80011b0 <lcd_DrawPoint>
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b08a      	sub	sp, #40	; 0x28
 80018d6:	af02      	add	r7, sp, #8
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	4613      	mov	r3, r2
 80018e0:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	f1c3 0303 	rsb	r3, r3, #3
 80018f2:	613b      	str	r3, [r7, #16]


	if (fill)
 80018f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d04f      	beq.n	800199a <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80018fa:	e029      	b.n	8001950 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	e00a      	b.n	8001918 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f7ff ff55 	bl	80017bc <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	429a      	cmp	r2, r3
 800191e:	ddf0      	ble.n	8001902 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	2b00      	cmp	r3, #0
 8001924:	da06      	bge.n	8001934 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	009a      	lsls	r2, r3, #2
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4413      	add	r3, r2
 800192e:	3306      	adds	r3, #6
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	e00a      	b.n	800194a <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	009a      	lsls	r2, r3, #2
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4413      	add	r3, r2
 8001940:	330a      	adds	r3, #10
 8001942:	613b      	str	r3, [r7, #16]
				y--;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	3b01      	subs	r3, #1
 8001948:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3301      	adds	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	429a      	cmp	r2, r3
 8001956:	ddd1      	ble.n	80018fc <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001958:	e023      	b.n	80019a2 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	68b9      	ldr	r1, [r7, #8]
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff ff29 	bl	80017bc <_draw_circle_8>
			if (d < 0) {
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	da06      	bge.n	800197e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	009a      	lsls	r2, r3, #2
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4413      	add	r3, r2
 8001978:	3306      	adds	r3, #6
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	e00a      	b.n	8001994 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	009a      	lsls	r2, r3, #2
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4413      	add	r3, r2
 800198a:	330a      	adds	r3, #10
 800198c:	613b      	str	r3, [r7, #16]
				y--;
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	3b01      	subs	r3, #1
 8001992:	61bb      	str	r3, [r7, #24]
			x++;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	3301      	adds	r3, #1
 8001998:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dddb      	ble.n	800195a <lcd_DrawCircle+0x88>
}
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b08b      	sub	sp, #44	; 0x2c
 80019b0:	af04      	add	r7, sp, #16
 80019b2:	60ba      	str	r2, [r7, #8]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4603      	mov	r3, r0
 80019b8:	81fb      	strh	r3, [r7, #14]
 80019ba:	460b      	mov	r3, r1
 80019bc:	81bb      	strh	r3, [r7, #12]
 80019be:	4613      	mov	r3, r2
 80019c0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80019ca:	e048      	b.n	8001a5e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d145      	bne.n	8001a5e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80019d2:	89fa      	ldrh	r2, [r7, #14]
 80019d4:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <lcd_ShowStr+0xc4>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019de:	085b      	lsrs	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	1acb      	subs	r3, r1, r3
 80019e4:	429a      	cmp	r2, r3
 80019e6:	dc3f      	bgt.n	8001a68 <lcd_ShowStr+0xbc>
 80019e8:	89ba      	ldrh	r2, [r7, #12]
 80019ea:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <lcd_ShowStr+0xc4>)
 80019ec:	885b      	ldrh	r3, [r3, #2]
 80019ee:	4619      	mov	r1, r3
 80019f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019f4:	1acb      	subs	r3, r1, r3
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dc36      	bgt.n	8001a68 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b80      	cmp	r3, #128	; 0x80
 8001a00:	d902      	bls.n	8001a08 <lcd_ShowStr+0x5c>
 8001a02:	2301      	movs	r3, #1
 8001a04:	75fb      	strb	r3, [r7, #23]
 8001a06:	e02a      	b.n	8001a5e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b0d      	cmp	r3, #13
 8001a0e:	d10b      	bne.n	8001a28 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001a10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	89bb      	ldrh	r3, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001a1c:	8abb      	ldrh	r3, [r7, #20]
 8001a1e:	81fb      	strh	r3, [r7, #14]
					str++;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	3301      	adds	r3, #1
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	e017      	b.n	8001a58 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	88fc      	ldrh	r4, [r7, #6]
 8001a2e:	89b9      	ldrh	r1, [r7, #12]
 8001a30:	89f8      	ldrh	r0, [r7, #14]
 8001a32:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a36:	9302      	str	r3, [sp, #8]
 8001a38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	4623      	mov	r3, r4
 8001a44:	f7ff fbcc 	bl	80011e0 <lcd_ShowChar>
					x+=sizey/2;
 8001a48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	89fb      	ldrh	r3, [r7, #14]
 8001a54:	4413      	add	r3, r2
 8001a56:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1b2      	bne.n	80019cc <lcd_ShowStr+0x20>
 8001a66:	e000      	b.n	8001a6a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001a68:	bf00      	nop
			}
		}
	}
}
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd90      	pop	{r4, r7, pc}
 8001a70:	200000c8 	.word	0x200000c8

08001a74 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	60ba      	str	r2, [r7, #8]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	81fb      	strh	r3, [r7, #14]
 8001a82:	460b      	mov	r3, r1
 8001a84:	81bb      	strh	r3, [r7, #12]
 8001a86:	4613      	mov	r3, r2
 8001a88:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001a8a:	68b8      	ldr	r0, [r7, #8]
 8001a8c:	f7fe fb9c 	bl	80001c8 <strlen>
 8001a90:	4603      	mov	r3, r0
 8001a92:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <lcd_StrCenter+0x60>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	8afb      	ldrh	r3, [r7, #22]
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	0fda      	lsrs	r2, r3, #31
 8001aa2:	4413      	add	r3, r2
 8001aa4:	105b      	asrs	r3, r3, #1
 8001aa6:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001aa8:	89fa      	ldrh	r2, [r7, #14]
 8001aaa:	8abb      	ldrh	r3, [r7, #20]
 8001aac:	4413      	add	r3, r2
 8001aae:	b298      	uxth	r0, r3
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	89b9      	ldrh	r1, [r7, #12]
 8001ab4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ab8:	9302      	str	r3, [sp, #8]
 8001aba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	8c3b      	ldrh	r3, [r7, #32]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f7ff ff70 	bl	80019ac <lcd_ShowStr>
}
 8001acc:	bf00      	nop
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200000c8 	.word	0x200000c8

08001ad8 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2140      	movs	r1, #64	; 0x40
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <led7_init+0x14>)
 8001ae2:	f000 fe61 	bl	80027a8 <HAL_GPIO_WritePin>
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40021800 	.word	0x40021800

08001af0 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001af4:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <led7_Scan+0x104>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <led7_Scan+0x104>)
 8001afe:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001b00:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <led7_Scan+0x108>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <led7_Scan+0x10c>)
 8001b08:	5c9b      	ldrb	r3, [r3, r2]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	4b39      	ldr	r3, [pc, #228]	; (8001bf4 <led7_Scan+0x104>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <led7_Scan+0x104>)
 8001b1c:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001b1e:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <led7_Scan+0x108>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d846      	bhi.n	8001bb4 <led7_Scan+0xc4>
 8001b26:	a201      	add	r2, pc, #4	; (adr r2, 8001b2c <led7_Scan+0x3c>)
 8001b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2c:	08001b3d 	.word	0x08001b3d
 8001b30:	08001b5b 	.word	0x08001b5b
 8001b34:	08001b79 	.word	0x08001b79
 8001b38:	08001b97 	.word	0x08001b97
	case 0:
		spi_buffer |= 0x00b0;
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <led7_Scan+0x104>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <led7_Scan+0x104>)
 8001b48:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <led7_Scan+0x104>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <led7_Scan+0x104>)
 8001b56:	801a      	strh	r2, [r3, #0]
		break;
 8001b58:	e02d      	b.n	8001bb6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <led7_Scan+0x104>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <led7_Scan+0x104>)
 8001b66:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <led7_Scan+0x104>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	f023 0320 	bic.w	r3, r3, #32
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <led7_Scan+0x104>)
 8001b74:	801a      	strh	r2, [r3, #0]
		break;
 8001b76:	e01e      	b.n	8001bb6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <led7_Scan+0x104>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <led7_Scan+0x104>)
 8001b84:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <led7_Scan+0x104>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	f023 0310 	bic.w	r3, r3, #16
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <led7_Scan+0x104>)
 8001b92:	801a      	strh	r2, [r3, #0]
		break;
 8001b94:	e00f      	b.n	8001bb6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <led7_Scan+0x104>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <led7_Scan+0x104>)
 8001ba2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <led7_Scan+0x104>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <led7_Scan+0x104>)
 8001bb0:	801a      	strh	r2, [r3, #0]
		break;
 8001bb2:	e000      	b.n	8001bb6 <led7_Scan+0xc6>
	default:
		break;
 8001bb4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <led7_Scan+0x108>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	425a      	negs	r2, r3
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	f002 0203 	and.w	r2, r2, #3
 8001bc6:	bf58      	it	pl
 8001bc8:	4253      	negpl	r3, r2
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <led7_Scan+0x108>)
 8001bce:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2140      	movs	r1, #64	; 0x40
 8001bd4:	480a      	ldr	r0, [pc, #40]	; (8001c00 <led7_Scan+0x110>)
 8001bd6:	f000 fde7 	bl	80027a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001bda:	2301      	movs	r3, #1
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4905      	ldr	r1, [pc, #20]	; (8001bf4 <led7_Scan+0x104>)
 8001be0:	4808      	ldr	r0, [pc, #32]	; (8001c04 <led7_Scan+0x114>)
 8001be2:	f001 fae8 	bl	80031b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001be6:	2201      	movs	r2, #1
 8001be8:	2140      	movs	r1, #64	; 0x40
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <led7_Scan+0x110>)
 8001bec:	f000 fddc 	bl	80027a8 <HAL_GPIO_WritePin>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000010 	.word	0x20000010
 8001bf8:	200000ce 	.word	0x200000ce
 8001bfc:	2000000c 	.word	0x2000000c
 8001c00:	40021800 	.word	0x40021800
 8001c04:	200000d8 	.word	0x200000d8

08001c08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c0c:	f000 fa88 	bl	8002120 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c10:	f000 f81a 	bl	8001c48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c14:	f7ff f924 	bl	8000e60 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001c18:	f000 f9e6 	bl	8001fe8 <MX_TIM2_Init>
	MX_SPI1_Init();
 8001c1c:	f000 f8f8 	bl	8001e10 <MX_SPI1_Init>
	MX_FSMC_Init();
 8001c20:	f7ff f84e 	bl	8000cc0 <MX_FSMC_Init>
	/* USER CODE BEGIN 2 */
	system_init();
 8001c24:	f000 f87a 	bl	8001d1c <system_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		while (!flag_timer2)
 8001c28:	bf00      	nop
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <main+0x3c>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0fb      	beq.n	8001c2a <main+0x22>
			;
		flag_timer2 = 0;
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <main+0x3c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	801a      	strh	r2, [r3, #0]
		button_Scan();
 8001c38:	f7fe fc58 	bl	80004ec <button_Scan>
//	  test_button();

//		traffic_fsm();
		fsm_no_return();
 8001c3c:	f7fe fff0 	bl	8000c20 <fsm_no_return>
		while (!flag_timer2)
 8001c40:	e7f2      	b.n	8001c28 <main+0x20>
 8001c42:	bf00      	nop
 8001c44:	200000d0 	.word	0x200000d0

08001c48 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b094      	sub	sp, #80	; 0x50
 8001c4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001c4e:	f107 0320 	add.w	r3, r7, #32
 8001c52:	2230      	movs	r2, #48	; 0x30
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 fd62 	bl	8004720 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <SystemClock_Config+0xcc>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	4a27      	ldr	r2, [pc, #156]	; (8001d14 <SystemClock_Config+0xcc>)
 8001c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7c:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <SystemClock_Config+0xcc>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <SystemClock_Config+0xd0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <SystemClock_Config+0xd0>)
 8001c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <SystemClock_Config+0xd0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cac:	2310      	movs	r3, #16
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001cbc:	23a8      	movs	r3, #168	; 0xa8
 8001cbe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 fd85 	bl	80027dc <HAL_RCC_OscConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SystemClock_Config+0x94>
		Error_Handler();
 8001cd8:	f000 f844 	bl	8001d64 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001cdc:	230f      	movs	r3, #15
 8001cde:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ce8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001cee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cf2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 ffe6 	bl	8002ccc <HAL_RCC_ClockConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <SystemClock_Config+0xc2>
		Error_Handler();
 8001d06:	f000 f82d 	bl	8001d64 <Error_Handler>
	}
}
 8001d0a:	bf00      	nop
 8001d0c:	3750      	adds	r7, #80	; 0x50
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40007000 	.word	0x40007000

08001d1c <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2120      	movs	r1, #32
 8001d24:	480e      	ldr	r0, [pc, #56]	; (8001d60 <system_init+0x44>)
 8001d26:	f000 fd3f 	bl	80027a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2140      	movs	r1, #64	; 0x40
 8001d2e:	480c      	ldr	r0, [pc, #48]	; (8001d60 <system_init+0x44>)
 8001d30:	f000 fd3a 	bl	80027a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2110      	movs	r1, #16
 8001d38:	4809      	ldr	r0, [pc, #36]	; (8001d60 <system_init+0x44>)
 8001d3a:	f000 fd35 	bl	80027a8 <HAL_GPIO_WritePin>
	timer_init();
 8001d3e:	f000 f817 	bl	8001d70 <timer_init>
	led7_init();
 8001d42:	f7ff fec9 	bl	8001ad8 <led7_init>
	button_init();
 8001d46:	f7fe fbc5 	bl	80004d4 <button_init>
	lcd_init();
 8001d4a:	f7ff fbd7 	bl	80014fc <lcd_init>
	setTimer2(50);
 8001d4e:	2032      	movs	r0, #50	; 0x32
 8001d50:	f000 f818 	bl	8001d84 <setTimer2>
	/******/
	lcd_Clear(WHITE);
 8001d54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d58:	f7ff f9f8 	bl	800114c <lcd_Clear>
//	traffic_UI();
//	traffic_init();
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000

08001d64 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>
	...

08001d70 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <timer_init+0x10>)
 8001d76:	f001 ffd1 	bl	8003d1c <HAL_TIM_Base_Start_IT>
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000130 	.word	0x20000130

08001d84 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001d8e:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <setTimer2+0x2c>)
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <setTimer2+0x2c>)
 8001d96:	881a      	ldrh	r2, [r3, #0]
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <setTimer2+0x30>)
 8001d9a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <setTimer2+0x34>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	801a      	strh	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	200000d4 	.word	0x200000d4
 8001db4:	200000d2 	.word	0x200000d2
 8001db8:	200000d0 	.word	0x200000d0

08001dbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dcc:	d116      	bne.n	8001dfc <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d010      	beq.n	8001df8 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001de0:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001df2:	881a      	ldrh	r2, [r3, #0]
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001df6:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8001df8:	f7ff fe7a 	bl	8001af0 <led7_Scan>
	}
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200000d2 	.word	0x200000d2
 8001e08:	200000d0 	.word	0x200000d0
 8001e0c:	200000d4 	.word	0x200000d4

08001e10 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e16:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <MX_SPI1_Init+0x68>)
 8001e18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e5c:	220a      	movs	r2, #10
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e60:	4804      	ldr	r0, [pc, #16]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e62:	f001 f91f 	bl	80030a4 <HAL_SPI_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e6c:	f7ff ff7a 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200000d8 	.word	0x200000d8
 8001e78:	40013000 	.word	0x40013000

08001e7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <HAL_SPI_MspInit+0x84>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d12b      	bne.n	8001ef6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_SPI_MspInit+0x88>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_SPI_MspInit+0x88>)
 8001ea8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_SPI_MspInit+0x88>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_SPI_MspInit+0x88>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <HAL_SPI_MspInit+0x88>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_SPI_MspInit+0x88>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ed6:	2338      	movs	r3, #56	; 0x38
 8001ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4805      	ldr	r0, [pc, #20]	; (8001f08 <HAL_SPI_MspInit+0x8c>)
 8001ef2:	f000 fabd 	bl	8002470 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	; 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40013000 	.word	0x40013000
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020400 	.word	0x40020400

08001f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	4a0f      	ldr	r2, [pc, #60]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f20:	6453      	str	r3, [r2, #68]	; 0x44
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800

08001f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <NMI_Handler+0x4>

08001f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <HardFault_Handler+0x4>

08001f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <MemManage_Handler+0x4>

08001f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <BusFault_Handler+0x4>

08001f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <UsageFault_Handler+0x4>

08001f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa8:	f000 f90c 	bl	80021c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <TIM2_IRQHandler+0x10>)
 8001fb6:	f001 ff21 	bl	8003dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000130 	.word	0x20000130

08001fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <SystemInit+0x20>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <SystemInit+0x20>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <MX_TIM2_Init+0x94>)
 8002006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800200a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800200c:	4b1b      	ldr	r3, [pc, #108]	; (800207c <MX_TIM2_Init+0x94>)
 800200e:	f240 3247 	movw	r2, #839	; 0x347
 8002012:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <MX_TIM2_Init+0x94>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <MX_TIM2_Init+0x94>)
 800201c:	2263      	movs	r2, #99	; 0x63
 800201e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <MX_TIM2_Init+0x94>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <MX_TIM2_Init+0x94>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800202c:	4813      	ldr	r0, [pc, #76]	; (800207c <MX_TIM2_Init+0x94>)
 800202e:	f001 fe25 	bl	8003c7c <HAL_TIM_Base_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002038:	f7ff fe94 	bl	8001d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002040:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002042:	f107 0308 	add.w	r3, r7, #8
 8002046:	4619      	mov	r1, r3
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <MX_TIM2_Init+0x94>)
 800204a:	f001 ffdf 	bl	800400c <HAL_TIM_ConfigClockSource>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002054:	f7ff fe86 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002060:	463b      	mov	r3, r7
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_TIM2_Init+0x94>)
 8002066:	f002 f9fb 	bl	8004460 <HAL_TIMEx_MasterConfigSynchronization>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002070:	f7ff fe78 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000130 	.word	0x20000130

08002080 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002090:	d115      	bne.n	80020be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_TIM_Base_MspInit+0x48>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <HAL_TIM_Base_MspInit+0x48>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_TIM_Base_MspInit+0x48>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	201c      	movs	r0, #28
 80020b4:	f000 f9a5 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020b8:	201c      	movs	r0, #28
 80020ba:	f000 f9be 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800

080020cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002104 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d0:	480d      	ldr	r0, [pc, #52]	; (8002108 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020d2:	490e      	ldr	r1, [pc, #56]	; (800210c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020d4:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e6:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020e8:	4c0b      	ldr	r4, [pc, #44]	; (8002118 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020f6:	f7ff ff65 	bl	8001fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020fa:	f002 fb19 	bl	8004730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020fe:	f7ff fd83 	bl	8001c08 <main>
  bx  lr    
 8002102:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800210c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002110:	080077bc 	.word	0x080077bc
  ldr r2, =_sbss
 8002114:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002118:	2000017c 	.word	0x2000017c

0800211c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC_IRQHandler>
	...

08002120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <HAL_Init+0x40>)
 800212a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800212e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_Init+0x40>)
 8002136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800213a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a07      	ldr	r2, [pc, #28]	; (8002160 <HAL_Init+0x40>)
 8002142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002148:	2003      	movs	r0, #3
 800214a:	f000 f94f 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800214e:	200f      	movs	r0, #15
 8002150:	f000 f808 	bl	8002164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002154:	f7ff feda 	bl	8001f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023c00 	.word	0x40023c00

08002164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_InitTick+0x54>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_InitTick+0x58>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4619      	mov	r1, r3
 8002176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217a:	fbb3 f3f1 	udiv	r3, r3, r1
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f967 	bl	8002456 <HAL_SYSTICK_Config>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e00e      	b.n	80021b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b0f      	cmp	r3, #15
 8002196:	d80a      	bhi.n	80021ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002198:	2200      	movs	r2, #0
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f000 f92f 	bl	8002402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <HAL_InitTick+0x5c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000014 	.word	0x20000014
 80021bc:	2000001c 	.word	0x2000001c
 80021c0:	20000018 	.word	0x20000018

080021c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_IncTick+0x20>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_IncTick+0x24>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_IncTick+0x24>)
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	2000001c 	.word	0x2000001c
 80021e8:	20000178 	.word	0x20000178

080021ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_GetTick+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000178 	.word	0x20000178

08002204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff ffee 	bl	80021ec <HAL_GetTick>
 8002210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d005      	beq.n	800222a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_Delay+0x44>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800222a:	bf00      	nop
 800222c:	f7ff ffde 	bl	80021ec <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	429a      	cmp	r2, r3
 800223a:	d8f7      	bhi.n	800222c <HAL_Delay+0x28>
  {
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000001c 	.word	0x2000001c

0800224c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002268:	4013      	ands	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227e:	4a04      	ldr	r2, [pc, #16]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <__NVIC_GetPriorityGrouping+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0307 	and.w	r3, r3, #7
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	db0b      	blt.n	80022da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	f003 021f 	and.w	r2, r3, #31
 80022c8:	4907      	ldr	r1, [pc, #28]	; (80022e8 <__NVIC_EnableIRQ+0x38>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2001      	movs	r0, #1
 80022d2:	fa00 f202 	lsl.w	r2, r0, r2
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db0a      	blt.n	8002316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	490c      	ldr	r1, [pc, #48]	; (8002338 <__NVIC_SetPriority+0x4c>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002314:	e00a      	b.n	800232c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4908      	ldr	r1, [pc, #32]	; (800233c <__NVIC_SetPriority+0x50>)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	3b04      	subs	r3, #4
 8002324:	0112      	lsls	r2, r2, #4
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	440b      	add	r3, r1
 800232a:	761a      	strb	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f1c3 0307 	rsb	r3, r3, #7
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf28      	it	cs
 800235e:	2304      	movcs	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	2b06      	cmp	r3, #6
 8002368:	d902      	bls.n	8002370 <NVIC_EncodePriority+0x30>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3b03      	subs	r3, #3
 800236e:	e000      	b.n	8002372 <NVIC_EncodePriority+0x32>
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	401a      	ands	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43d9      	mvns	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	4313      	orrs	r3, r2
         );
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7ff ff8e 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff29 	bl	800224c <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff3e 	bl	8002294 <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff8e 	bl	8002340 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff5d 	bl	80022ec <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff31 	bl	80022b0 <__NVIC_EnableIRQ>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffa2 	bl	80023a8 <SysTick_Config>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	e16b      	b.n	8002764 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	f040 815a 	bne.w	800275e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d005      	beq.n	80024c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d130      	bne.n	8002524 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	2203      	movs	r2, #3
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 0201 	and.w	r2, r3, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b03      	cmp	r3, #3
 800252e:	d017      	beq.n	8002560 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d123      	bne.n	80025b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	08da      	lsrs	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3208      	adds	r2, #8
 8002574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	220f      	movs	r2, #15
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	08da      	lsrs	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3208      	adds	r2, #8
 80025ae:	69b9      	ldr	r1, [r7, #24]
 80025b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	2203      	movs	r2, #3
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0203 	and.w	r2, r3, #3
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80b4 	beq.w	800275e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	4b60      	ldr	r3, [pc, #384]	; (800277c <HAL_GPIO_Init+0x30c>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	4a5f      	ldr	r2, [pc, #380]	; (800277c <HAL_GPIO_Init+0x30c>)
 8002600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002604:	6453      	str	r3, [r2, #68]	; 0x44
 8002606:	4b5d      	ldr	r3, [pc, #372]	; (800277c <HAL_GPIO_Init+0x30c>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002612:	4a5b      	ldr	r2, [pc, #364]	; (8002780 <HAL_GPIO_Init+0x310>)
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3302      	adds	r3, #2
 800261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	220f      	movs	r2, #15
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a52      	ldr	r2, [pc, #328]	; (8002784 <HAL_GPIO_Init+0x314>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d02b      	beq.n	8002696 <HAL_GPIO_Init+0x226>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a51      	ldr	r2, [pc, #324]	; (8002788 <HAL_GPIO_Init+0x318>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d025      	beq.n	8002692 <HAL_GPIO_Init+0x222>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a50      	ldr	r2, [pc, #320]	; (800278c <HAL_GPIO_Init+0x31c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d01f      	beq.n	800268e <HAL_GPIO_Init+0x21e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4f      	ldr	r2, [pc, #316]	; (8002790 <HAL_GPIO_Init+0x320>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d019      	beq.n	800268a <HAL_GPIO_Init+0x21a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4e      	ldr	r2, [pc, #312]	; (8002794 <HAL_GPIO_Init+0x324>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_GPIO_Init+0x216>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4d      	ldr	r2, [pc, #308]	; (8002798 <HAL_GPIO_Init+0x328>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00d      	beq.n	8002682 <HAL_GPIO_Init+0x212>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4c      	ldr	r2, [pc, #304]	; (800279c <HAL_GPIO_Init+0x32c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <HAL_GPIO_Init+0x20e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4b      	ldr	r2, [pc, #300]	; (80027a0 <HAL_GPIO_Init+0x330>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d101      	bne.n	800267a <HAL_GPIO_Init+0x20a>
 8002676:	2307      	movs	r3, #7
 8002678:	e00e      	b.n	8002698 <HAL_GPIO_Init+0x228>
 800267a:	2308      	movs	r3, #8
 800267c:	e00c      	b.n	8002698 <HAL_GPIO_Init+0x228>
 800267e:	2306      	movs	r3, #6
 8002680:	e00a      	b.n	8002698 <HAL_GPIO_Init+0x228>
 8002682:	2305      	movs	r3, #5
 8002684:	e008      	b.n	8002698 <HAL_GPIO_Init+0x228>
 8002686:	2304      	movs	r3, #4
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x228>
 800268a:	2303      	movs	r3, #3
 800268c:	e004      	b.n	8002698 <HAL_GPIO_Init+0x228>
 800268e:	2302      	movs	r3, #2
 8002690:	e002      	b.n	8002698 <HAL_GPIO_Init+0x228>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_GPIO_Init+0x228>
 8002696:	2300      	movs	r3, #0
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	f002 0203 	and.w	r2, r2, #3
 800269e:	0092      	lsls	r2, r2, #2
 80026a0:	4093      	lsls	r3, r2
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a8:	4935      	ldr	r1, [pc, #212]	; (8002780 <HAL_GPIO_Init+0x310>)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	3302      	adds	r3, #2
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b6:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <HAL_GPIO_Init+0x334>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026da:	4a32      	ldr	r2, [pc, #200]	; (80027a4 <HAL_GPIO_Init+0x334>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026e0:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <HAL_GPIO_Init+0x334>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002704:	4a27      	ldr	r2, [pc, #156]	; (80027a4 <HAL_GPIO_Init+0x334>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800270a:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <HAL_GPIO_Init+0x334>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800272e:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <HAL_GPIO_Init+0x334>)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002734:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_GPIO_Init+0x334>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002758:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <HAL_GPIO_Init+0x334>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3301      	adds	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	2b0f      	cmp	r3, #15
 8002768:	f67f ae90 	bls.w	800248c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3724      	adds	r7, #36	; 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	40013800 	.word	0x40013800
 8002784:	40020000 	.word	0x40020000
 8002788:	40020400 	.word	0x40020400
 800278c:	40020800 	.word	0x40020800
 8002790:	40020c00 	.word	0x40020c00
 8002794:	40021000 	.word	0x40021000
 8002798:	40021400 	.word	0x40021400
 800279c:	40021800 	.word	0x40021800
 80027a0:	40021c00 	.word	0x40021c00
 80027a4:	40013c00 	.word	0x40013c00

080027a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
 80027b4:	4613      	mov	r3, r2
 80027b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b8:	787b      	ldrb	r3, [r7, #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027c4:	e003      	b.n	80027ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	041a      	lsls	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	619a      	str	r2, [r3, #24]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e267      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d075      	beq.n	80028e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b04      	cmp	r3, #4
 8002804:	d00c      	beq.n	8002820 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002806:	4b85      	ldr	r3, [pc, #532]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280e:	2b08      	cmp	r3, #8
 8002810:	d112      	bne.n	8002838 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002812:	4b82      	ldr	r3, [pc, #520]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281e:	d10b      	bne.n	8002838 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	4b7e      	ldr	r3, [pc, #504]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d05b      	beq.n	80028e4 <HAL_RCC_OscConfig+0x108>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d157      	bne.n	80028e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e242      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d106      	bne.n	8002850 <HAL_RCC_OscConfig+0x74>
 8002842:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a75      	ldr	r2, [pc, #468]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e01d      	b.n	800288c <HAL_RCC_OscConfig+0xb0>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x98>
 800285a:	4b70      	ldr	r3, [pc, #448]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6f      	ldr	r2, [pc, #444]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a6c      	ldr	r2, [pc, #432]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0xb0>
 8002874:	4b69      	ldr	r3, [pc, #420]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a68      	ldr	r2, [pc, #416]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800287a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4b66      	ldr	r3, [pc, #408]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a65      	ldr	r2, [pc, #404]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d013      	beq.n	80028bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7ff fcaa 	bl	80021ec <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289c:	f7ff fca6 	bl	80021ec <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e207      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0xc0>
 80028ba:	e014      	b.n	80028e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff fc96 	bl	80021ec <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c4:	f7ff fc92 	bl	80021ec <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e1f3      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0xe8>
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d063      	beq.n	80029ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028f2:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002906:	2b08      	cmp	r3, #8
 8002908:	d11c      	bne.n	8002944 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290a:	4b44      	ldr	r3, [pc, #272]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d116      	bne.n	8002944 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_RCC_OscConfig+0x152>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e1c7      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292e:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4937      	ldr	r1, [pc, #220]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	e03a      	b.n	80029ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294c:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <HAL_RCC_OscConfig+0x244>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7ff fc4b 	bl	80021ec <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295a:	f7ff fc47 	bl	80021ec <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e1a8      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002978:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4925      	ldr	r1, [pc, #148]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]
 800298c:	e015      	b.n	80029ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_RCC_OscConfig+0x244>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7ff fc2a 	bl	80021ec <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299c:	f7ff fc26 	bl	80021ec <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e187      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d036      	beq.n	8002a34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d016      	beq.n	80029fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_RCC_OscConfig+0x248>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7ff fc0a 	bl	80021ec <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029dc:	f7ff fc06 	bl	80021ec <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e167      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 80029f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x200>
 80029fa:	e01b      	b.n	8002a34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_OscConfig+0x248>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7ff fbf3 	bl	80021ec <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	e00e      	b.n	8002a28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0a:	f7ff fbef 	bl	80021ec <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d907      	bls.n	8002a28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e150      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	42470000 	.word	0x42470000
 8002a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	4b88      	ldr	r3, [pc, #544]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ea      	bne.n	8002a0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8097 	beq.w	8002b70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a46:	4b81      	ldr	r3, [pc, #516]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	4b7d      	ldr	r3, [pc, #500]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a7c      	ldr	r2, [pc, #496]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b7a      	ldr	r3, [pc, #488]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	4b77      	ldr	r3, [pc, #476]	; (8002c50 <HAL_RCC_OscConfig+0x474>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d118      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7e:	4b74      	ldr	r3, [pc, #464]	; (8002c50 <HAL_RCC_OscConfig+0x474>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a73      	ldr	r2, [pc, #460]	; (8002c50 <HAL_RCC_OscConfig+0x474>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8a:	f7ff fbaf 	bl	80021ec <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7ff fbab 	bl	80021ec <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e10c      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	; (8002c50 <HAL_RCC_OscConfig+0x474>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x2ea>
 8002ab8:	4b64      	ldr	r3, [pc, #400]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4a63      	ldr	r2, [pc, #396]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac4:	e01c      	b.n	8002b00 <HAL_RCC_OscConfig+0x324>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b05      	cmp	r3, #5
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x30c>
 8002ace:	4b5f      	ldr	r3, [pc, #380]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a5e      	ldr	r2, [pc, #376]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ada:	4b5c      	ldr	r3, [pc, #368]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a5b      	ldr	r2, [pc, #364]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0x324>
 8002ae8:	4b58      	ldr	r3, [pc, #352]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a57      	ldr	r2, [pc, #348]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	4b55      	ldr	r3, [pc, #340]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a54      	ldr	r2, [pc, #336]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002afa:	f023 0304 	bic.w	r3, r3, #4
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d015      	beq.n	8002b34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7ff fb70 	bl	80021ec <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b10:	f7ff fb6c 	bl	80021ec <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e0cb      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b26:	4b49      	ldr	r3, [pc, #292]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0ee      	beq.n	8002b10 <HAL_RCC_OscConfig+0x334>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b34:	f7ff fb5a 	bl	80021ec <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7ff fb56 	bl	80021ec <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0b5      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b52:	4b3e      	ldr	r3, [pc, #248]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1ee      	bne.n	8002b3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b64:	4b39      	ldr	r3, [pc, #228]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	4a38      	ldr	r2, [pc, #224]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80a1 	beq.w	8002cbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b7a:	4b34      	ldr	r3, [pc, #208]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d05c      	beq.n	8002c40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d141      	bne.n	8002c12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <HAL_RCC_OscConfig+0x478>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7ff fb2a 	bl	80021ec <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7ff fb26 	bl	80021ec <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e087      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	061b      	lsls	r3, r3, #24
 8002bde:	491b      	ldr	r1, [pc, #108]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be4:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x478>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bea:	f7ff faff 	bl	80021ec <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7ff fafb 	bl	80021ec <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e05c      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x416>
 8002c10:	e054      	b.n	8002cbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_RCC_OscConfig+0x478>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7ff fae8 	bl	80021ec <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c20:	f7ff fae4 	bl	80021ec <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e045      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x444>
 8002c3e:	e03d      	b.n	8002cbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e038      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40007000 	.word	0x40007000
 8002c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_RCC_OscConfig+0x4ec>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d028      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d121      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d11a      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d111      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800

08002ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0cc      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b68      	ldr	r3, [pc, #416]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d90c      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b65      	ldr	r3, [pc, #404]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0b8      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d20:	4b59      	ldr	r3, [pc, #356]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	494d      	ldr	r1, [pc, #308]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d044      	beq.n	8002dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d119      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d003      	beq.n	8002d8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8a:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e06f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9a:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e067      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002daa:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4934      	ldr	r1, [pc, #208]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dbc:	f7ff fa16 	bl	80021ec <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc4:	f7ff fa12 	bl	80021ec <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e04f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 020c 	and.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1eb      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dec:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d20c      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e032      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4916      	ldr	r1, [pc, #88]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	490e      	ldr	r1, [pc, #56]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e52:	f000 f821 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	490a      	ldr	r1, [pc, #40]	; (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	5ccb      	ldrb	r3, [r1, r3]
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f976 	bl	8002164 <HAL_InitTick>

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023c00 	.word	0x40023c00
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	0800779c 	.word	0x0800779c
 8002e90:	20000014 	.word	0x20000014
 8002e94:	20000018 	.word	0x20000018

08002e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e9c:	b094      	sub	sp, #80	; 0x50
 8002e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb0:	4b79      	ldr	r3, [pc, #484]	; (8003098 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d00d      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	f200 80e1 	bhi.w	8003084 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x34>
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eca:	e0db      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ecc:	4b73      	ldr	r3, [pc, #460]	; (800309c <HAL_RCC_GetSysClockFreq+0x204>)
 8002ece:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ed0:	e0db      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ed2:	4b73      	ldr	r3, [pc, #460]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ed4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ed6:	e0d8      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed8:	4b6f      	ldr	r3, [pc, #444]	; (8003098 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d063      	beq.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eee:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f00:	633b      	str	r3, [r7, #48]	; 0x30
 8002f02:	2300      	movs	r3, #0
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
 8002f06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f0a:	4622      	mov	r2, r4
 8002f0c:	462b      	mov	r3, r5
 8002f0e:	f04f 0000 	mov.w	r0, #0
 8002f12:	f04f 0100 	mov.w	r1, #0
 8002f16:	0159      	lsls	r1, r3, #5
 8002f18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f1c:	0150      	lsls	r0, r2, #5
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4621      	mov	r1, r4
 8002f24:	1a51      	subs	r1, r2, r1
 8002f26:	6139      	str	r1, [r7, #16]
 8002f28:	4629      	mov	r1, r5
 8002f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f3c:	4659      	mov	r1, fp
 8002f3e:	018b      	lsls	r3, r1, #6
 8002f40:	4651      	mov	r1, sl
 8002f42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f46:	4651      	mov	r1, sl
 8002f48:	018a      	lsls	r2, r1, #6
 8002f4a:	4651      	mov	r1, sl
 8002f4c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f50:	4659      	mov	r1, fp
 8002f52:	eb63 0901 	sbc.w	r9, r3, r1
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f6a:	4690      	mov	r8, r2
 8002f6c:	4699      	mov	r9, r3
 8002f6e:	4623      	mov	r3, r4
 8002f70:	eb18 0303 	adds.w	r3, r8, r3
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	462b      	mov	r3, r5
 8002f78:	eb49 0303 	adc.w	r3, r9, r3
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	024b      	lsls	r3, r1, #9
 8002f8e:	4621      	mov	r1, r4
 8002f90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f94:	4621      	mov	r1, r4
 8002f96:	024a      	lsls	r2, r1, #9
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fa8:	f7fd f916 	bl	80001d8 <__aeabi_uldivmod>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb4:	e058      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb6:	4b38      	ldr	r3, [pc, #224]	; (8003098 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	099b      	lsrs	r3, r3, #6
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fc6:	623b      	str	r3, [r7, #32]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
 8002fcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fd0:	4642      	mov	r2, r8
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	f04f 0000 	mov.w	r0, #0
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	0159      	lsls	r1, r3, #5
 8002fde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe2:	0150      	lsls	r0, r2, #5
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4641      	mov	r1, r8
 8002fea:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fee:	4649      	mov	r1, r9
 8002ff0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003000:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003004:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003008:	ebb2 040a 	subs.w	r4, r2, sl
 800300c:	eb63 050b 	sbc.w	r5, r3, fp
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	00eb      	lsls	r3, r5, #3
 800301a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800301e:	00e2      	lsls	r2, r4, #3
 8003020:	4614      	mov	r4, r2
 8003022:	461d      	mov	r5, r3
 8003024:	4643      	mov	r3, r8
 8003026:	18e3      	adds	r3, r4, r3
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	464b      	mov	r3, r9
 800302c:	eb45 0303 	adc.w	r3, r5, r3
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800303e:	4629      	mov	r1, r5
 8003040:	028b      	lsls	r3, r1, #10
 8003042:	4621      	mov	r1, r4
 8003044:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003048:	4621      	mov	r1, r4
 800304a:	028a      	lsls	r2, r1, #10
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003052:	2200      	movs	r2, #0
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	61fa      	str	r2, [r7, #28]
 8003058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800305c:	f7fd f8bc 	bl	80001d8 <__aeabi_uldivmod>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4613      	mov	r3, r2
 8003066:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_GetSysClockFreq+0x200>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	0c1b      	lsrs	r3, r3, #16
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	3301      	adds	r3, #1
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003078:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800307a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003082:	e002      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetSysClockFreq+0x204>)
 8003086:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800308a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800308c:	4618      	mov	r0, r3
 800308e:	3750      	adds	r7, #80	; 0x50
 8003090:	46bd      	mov	sp, r7
 8003092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	00f42400 	.word	0x00f42400
 80030a0:	007a1200 	.word	0x007a1200

080030a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e07b      	b.n	80031ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d108      	bne.n	80030d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030c6:	d009      	beq.n	80030dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	61da      	str	r2, [r3, #28]
 80030ce:	e005      	b.n	80030dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe fec0 	bl	8001e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003112:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003160:	ea42 0103 	orr.w	r1, r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	f003 0104 	and.w	r1, r3, #4
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	f003 0210 	and.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800319c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b088      	sub	sp, #32
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_SPI_Transmit+0x22>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e126      	b.n	8003426 <HAL_SPI_Transmit+0x270>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031e0:	f7ff f804 	bl	80021ec <HAL_GetTick>
 80031e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d002      	beq.n	80031fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
 80031f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031fa:	e10b      	b.n	8003414 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_SPI_Transmit+0x52>
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800320c:	e102      	b.n	8003414 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2203      	movs	r2, #3
 8003212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	88fa      	ldrh	r2, [r7, #6]
 800322c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003254:	d10f      	bne.n	8003276 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003274:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d007      	beq.n	8003294 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800329c:	d14b      	bne.n	8003336 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_SPI_Transmit+0xf6>
 80032a6:	8afb      	ldrh	r3, [r7, #22]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d13e      	bne.n	800332a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	881a      	ldrh	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	1c9a      	adds	r2, r3, #2
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032d0:	e02b      	b.n	800332a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d112      	bne.n	8003306 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	881a      	ldrh	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	1c9a      	adds	r2, r3, #2
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	86da      	strh	r2, [r3, #54]	; 0x36
 8003304:	e011      	b.n	800332a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003306:	f7fe ff71 	bl	80021ec <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d803      	bhi.n	800331e <HAL_SPI_Transmit+0x168>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d102      	bne.n	8003324 <HAL_SPI_Transmit+0x16e>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003328:	e074      	b.n	8003414 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ce      	bne.n	80032d2 <HAL_SPI_Transmit+0x11c>
 8003334:	e04c      	b.n	80033d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_SPI_Transmit+0x18e>
 800333e:	8afb      	ldrh	r3, [r7, #22]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d140      	bne.n	80033c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	330c      	adds	r3, #12
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800336a:	e02c      	b.n	80033c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	d113      	bne.n	80033a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	330c      	adds	r3, #12
 8003384:	7812      	ldrb	r2, [r2, #0]
 8003386:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	86da      	strh	r2, [r3, #54]	; 0x36
 80033a0:	e011      	b.n	80033c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033a2:	f7fe ff23 	bl	80021ec <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d803      	bhi.n	80033ba <HAL_SPI_Transmit+0x204>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d102      	bne.n	80033c0 <HAL_SPI_Transmit+0x20a>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033c4:	e026      	b.n	8003414 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1cd      	bne.n	800336c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	6839      	ldr	r1, [r7, #0]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fbcb 	bl	8003b70 <SPI_EndRxTxTransaction>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e000      	b.n	8003414 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003412:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003424:	7ffb      	ldrb	r3, [r7, #31]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b088      	sub	sp, #32
 8003432:	af02      	add	r7, sp, #8
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344a:	d112      	bne.n	8003472 <HAL_SPI_Receive+0x44>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10e      	bne.n	8003472 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2204      	movs	r2, #4
 8003458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800345c:	88fa      	ldrh	r2, [r7, #6]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	4613      	mov	r3, r2
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f8f1 	bl	8003650 <HAL_SPI_TransmitReceive>
 800346e:	4603      	mov	r3, r0
 8003470:	e0ea      	b.n	8003648 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_SPI_Receive+0x52>
 800347c:	2302      	movs	r3, #2
 800347e:	e0e3      	b.n	8003648 <HAL_SPI_Receive+0x21a>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003488:	f7fe feb0 	bl	80021ec <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d002      	beq.n	80034a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800349a:	2302      	movs	r3, #2
 800349c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800349e:	e0ca      	b.n	8003636 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_SPI_Receive+0x7e>
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034b0:	e0c1      	b.n	8003636 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2204      	movs	r2, #4
 80034b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	88fa      	ldrh	r2, [r7, #6]
 80034ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	88fa      	ldrh	r2, [r7, #6]
 80034d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f8:	d10f      	bne.n	800351a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003508:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003518:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003524:	2b40      	cmp	r3, #64	; 0x40
 8003526:	d007      	beq.n	8003538 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003536:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d162      	bne.n	8003606 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003540:	e02e      	b.n	80035a0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b01      	cmp	r3, #1
 800354e:	d115      	bne.n	800357c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f103 020c 	add.w	r2, r3, #12
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	7812      	ldrb	r2, [r2, #0]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	87da      	strh	r2, [r3, #62]	; 0x3e
 800357a:	e011      	b.n	80035a0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800357c:	f7fe fe36 	bl	80021ec <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d803      	bhi.n	8003594 <HAL_SPI_Receive+0x166>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003592:	d102      	bne.n	800359a <HAL_SPI_Receive+0x16c>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d102      	bne.n	80035a0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800359e:	e04a      	b.n	8003636 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1cb      	bne.n	8003542 <HAL_SPI_Receive+0x114>
 80035aa:	e031      	b.n	8003610 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d113      	bne.n	80035e2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	b292      	uxth	r2, r2
 80035c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	1c9a      	adds	r2, r3, #2
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035e0:	e011      	b.n	8003606 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035e2:	f7fe fe03 	bl	80021ec <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d803      	bhi.n	80035fa <HAL_SPI_Receive+0x1cc>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d102      	bne.n	8003600 <HAL_SPI_Receive+0x1d2>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003604:	e017      	b.n	8003636 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1cd      	bne.n	80035ac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	6839      	ldr	r1, [r7, #0]
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fa45 	bl	8003aa4 <SPI_EndRxTransaction>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	75fb      	strb	r3, [r7, #23]
 8003632:	e000      	b.n	8003636 <HAL_SPI_Receive+0x208>
  }

error :
 8003634:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003646:	7dfb      	ldrb	r3, [r7, #23]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08c      	sub	sp, #48	; 0x30
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800365e:	2301      	movs	r3, #1
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x26>
 8003672:	2302      	movs	r3, #2
 8003674:	e18a      	b.n	800398c <HAL_SPI_TransmitReceive+0x33c>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800367e:	f7fe fdb5 	bl	80021ec <HAL_GetTick>
 8003682:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003698:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800369c:	2b01      	cmp	r3, #1
 800369e:	d00f      	beq.n	80036c0 <HAL_SPI_TransmitReceive+0x70>
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036a6:	d107      	bne.n	80036b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d103      	bne.n	80036b8 <HAL_SPI_TransmitReceive+0x68>
 80036b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d003      	beq.n	80036c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
 80036ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036be:	e15b      	b.n	8003978 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_SPI_TransmitReceive+0x82>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_SPI_TransmitReceive+0x82>
 80036cc:	887b      	ldrh	r3, [r7, #2]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d103      	bne.n	80036da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036d8:	e14e      	b.n	8003978 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d003      	beq.n	80036ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2205      	movs	r2, #5
 80036ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	887a      	ldrh	r2, [r7, #2]
 80036fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	887a      	ldrh	r2, [r7, #2]
 8003716:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d007      	beq.n	8003742 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003740:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800374a:	d178      	bne.n	800383e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_SPI_TransmitReceive+0x10a>
 8003754:	8b7b      	ldrh	r3, [r7, #26]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d166      	bne.n	8003828 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	881a      	ldrh	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	1c9a      	adds	r2, r3, #2
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800377e:	e053      	b.n	8003828 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	d11b      	bne.n	80037c6 <HAL_SPI_TransmitReceive+0x176>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d016      	beq.n	80037c6 <HAL_SPI_TransmitReceive+0x176>
 8003798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379a:	2b01      	cmp	r3, #1
 800379c:	d113      	bne.n	80037c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	881a      	ldrh	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	1c9a      	adds	r2, r3, #2
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d119      	bne.n	8003808 <HAL_SPI_TransmitReceive+0x1b8>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d014      	beq.n	8003808 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	b292      	uxth	r2, r2
 80037ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	1c9a      	adds	r2, r3, #2
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003804:	2301      	movs	r3, #1
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003808:	f7fe fcf0 	bl	80021ec <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003814:	429a      	cmp	r2, r3
 8003816:	d807      	bhi.n	8003828 <HAL_SPI_TransmitReceive+0x1d8>
 8003818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d003      	beq.n	8003828 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003826:	e0a7      	b.n	8003978 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1a6      	bne.n	8003780 <HAL_SPI_TransmitReceive+0x130>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1a1      	bne.n	8003780 <HAL_SPI_TransmitReceive+0x130>
 800383c:	e07c      	b.n	8003938 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_SPI_TransmitReceive+0x1fc>
 8003846:	8b7b      	ldrh	r3, [r7, #26]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d16b      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	330c      	adds	r3, #12
 8003856:	7812      	ldrb	r2, [r2, #0]
 8003858:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003872:	e057      	b.n	8003924 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d11c      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x26c>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d017      	beq.n	80038bc <HAL_SPI_TransmitReceive+0x26c>
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	2b01      	cmp	r3, #1
 8003890:	d114      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	330c      	adds	r3, #12
 800389c:	7812      	ldrb	r2, [r2, #0]
 800389e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d119      	bne.n	80038fe <HAL_SPI_TransmitReceive+0x2ae>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d014      	beq.n	80038fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038fa:	2301      	movs	r3, #1
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038fe:	f7fe fc75 	bl	80021ec <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800390a:	429a      	cmp	r2, r3
 800390c:	d803      	bhi.n	8003916 <HAL_SPI_TransmitReceive+0x2c6>
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d102      	bne.n	800391c <HAL_SPI_TransmitReceive+0x2cc>
 8003916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003918:	2b00      	cmp	r3, #0
 800391a:	d103      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003922:	e029      	b.n	8003978 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1a2      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x224>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d19d      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f917 	bl	8003b70 <SPI_EndRxTxTransaction>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d006      	beq.n	8003956 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2220      	movs	r2, #32
 8003952:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003954:	e010      	b.n	8003978 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	e000      	b.n	8003978 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003976:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003988:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800398c:	4618      	mov	r0, r3
 800398e:	3730      	adds	r7, #48	; 0x30
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	4613      	mov	r3, r2
 80039a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039a4:	f7fe fc22 	bl	80021ec <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	4413      	add	r3, r2
 80039b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039b4:	f7fe fc1a 	bl	80021ec <HAL_GetTick>
 80039b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039ba:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	015b      	lsls	r3, r3, #5
 80039c0:	0d1b      	lsrs	r3, r3, #20
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	fb02 f303 	mul.w	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ca:	e054      	b.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d2:	d050      	beq.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039d4:	f7fe fc0a 	bl	80021ec <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d902      	bls.n	80039ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d13d      	bne.n	8003a66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a02:	d111      	bne.n	8003a28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0c:	d004      	beq.n	8003a18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a16:	d107      	bne.n	8003a28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a30:	d10f      	bne.n	8003a52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e017      	b.n	8003a96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	bf0c      	ite	eq
 8003a86:	2301      	moveq	r3, #1
 8003a88:	2300      	movne	r3, #0
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d19b      	bne.n	80039cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000014 	.word	0x20000014

08003aa4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ab8:	d111      	bne.n	8003ade <SPI_EndRxTransaction+0x3a>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac2:	d004      	beq.n	8003ace <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003acc:	d107      	bne.n	8003ade <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003adc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae6:	d12a      	bne.n	8003b3e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af0:	d012      	beq.n	8003b18 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2180      	movs	r1, #128	; 0x80
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff ff49 	bl	8003994 <SPI_WaitFlagStateUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d02d      	beq.n	8003b64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e026      	b.n	8003b66 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2101      	movs	r1, #1
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f7ff ff36 	bl	8003994 <SPI_WaitFlagStateUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01a      	beq.n	8003b64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b32:	f043 0220 	orr.w	r2, r3, #32
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e013      	b.n	8003b66 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2200      	movs	r2, #0
 8003b46:	2101      	movs	r1, #1
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f7ff ff23 	bl	8003994 <SPI_WaitFlagStateUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e000      	b.n	8003b66 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <SPI_EndRxTxTransaction+0x7c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1b      	ldr	r2, [pc, #108]	; (8003bf0 <SPI_EndRxTxTransaction+0x80>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	0d5b      	lsrs	r3, r3, #21
 8003b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b8c:	fb02 f303 	mul.w	r3, r2, r3
 8003b90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b9a:	d112      	bne.n	8003bc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2180      	movs	r1, #128	; 0x80
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f7ff fef4 	bl	8003994 <SPI_WaitFlagStateUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d016      	beq.n	8003be0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb6:	f043 0220 	orr.w	r2, r3, #32
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e00f      	b.n	8003be2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd8:	2b80      	cmp	r3, #128	; 0x80
 8003bda:	d0f2      	beq.n	8003bc2 <SPI_EndRxTxTransaction+0x52>
 8003bdc:	e000      	b.n	8003be0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003bde:	bf00      	nop
  }

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000014 	.word	0x20000014
 8003bf0:	165e9f81 	.word	0x165e9f81

08003bf4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e034      	b.n	8003c74 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f7fd f914 	bl	8000e4c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f000 fca6 	bl	8004580 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	f000 fcf0 	bl	8004624 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6858      	ldr	r0, [r3, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	f000 fd25 	bl	80046a0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	6892      	ldr	r2, [r2, #8]
 8003c5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	6892      	ldr	r2, [r2, #8]
 8003c6a:	f041 0101 	orr.w	r1, r1, #1
 8003c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e041      	b.n	8003d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fe f9ec 	bl	8002080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 fa96 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d001      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e04e      	b.n	8003dd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d022      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5e:	d01d      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1f      	ldr	r2, [pc, #124]	; (8003de4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d018      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d013      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <HAL_TIM_Base_Start_IT+0xd0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00e      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1b      	ldr	r2, [pc, #108]	; (8003df0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d009      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d111      	bne.n	8003dc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b06      	cmp	r3, #6
 8003dac:	d010      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbe:	e007      	b.n	8003dd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800
 8003dec:	40000c00 	.word	0x40000c00
 8003df0:	40010400 	.word	0x40010400
 8003df4:	40014000 	.word	0x40014000
 8003df8:	40001800 	.word	0x40001800

08003dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d122      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d11b      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0202 	mvn.w	r2, #2
 8003e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f9b5 	bl	80041ae <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f9a7 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f9b8 	bl	80041c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d122      	bne.n	8003eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d11b      	bne.n	8003eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0204 	mvn.w	r2, #4
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f98b 	bl	80041ae <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f97d 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f98e 	bl	80041c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d122      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d11b      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0208 	mvn.w	r2, #8
 8003ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f961 	bl	80041ae <HAL_TIM_IC_CaptureCallback>
 8003eec:	e005      	b.n	8003efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f953 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f964 	bl	80041c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d122      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	d11b      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0210 	mvn.w	r2, #16
 8003f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2208      	movs	r2, #8
 8003f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f937 	bl	80041ae <HAL_TIM_IC_CaptureCallback>
 8003f40:	e005      	b.n	8003f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f929 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f93a 	bl	80041c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10e      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d107      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0201 	mvn.w	r2, #1
 8003f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fd ff1e 	bl	8001dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	2b80      	cmp	r3, #128	; 0x80
 8003f8c:	d10e      	bne.n	8003fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f98:	2b80      	cmp	r3, #128	; 0x80
 8003f9a:	d107      	bne.n	8003fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fae0 	bl	800456c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b40      	cmp	r3, #64	; 0x40
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc4:	2b40      	cmp	r3, #64	; 0x40
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8ff 	bl	80041d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d10e      	bne.n	8004004 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d107      	bne.n	8004004 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0220 	mvn.w	r2, #32
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 faaa 	bl	8004558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_TIM_ConfigClockSource+0x1c>
 8004024:	2302      	movs	r3, #2
 8004026:	e0b4      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x186>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800404e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004060:	d03e      	beq.n	80040e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004066:	f200 8087 	bhi.w	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406e:	f000 8086 	beq.w	800417e <HAL_TIM_ConfigClockSource+0x172>
 8004072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004076:	d87f      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 8004078:	2b70      	cmp	r3, #112	; 0x70
 800407a:	d01a      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0xa6>
 800407c:	2b70      	cmp	r3, #112	; 0x70
 800407e:	d87b      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 8004080:	2b60      	cmp	r3, #96	; 0x60
 8004082:	d050      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x11a>
 8004084:	2b60      	cmp	r3, #96	; 0x60
 8004086:	d877      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 8004088:	2b50      	cmp	r3, #80	; 0x50
 800408a:	d03c      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0xfa>
 800408c:	2b50      	cmp	r3, #80	; 0x50
 800408e:	d873      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d058      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x13a>
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	d86f      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 8004098:	2b30      	cmp	r3, #48	; 0x30
 800409a:	d064      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x15a>
 800409c:	2b30      	cmp	r3, #48	; 0x30
 800409e:	d86b      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d060      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x15a>
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d867      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d05c      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x15a>
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d05a      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x15a>
 80040b0:	e062      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6899      	ldr	r1, [r3, #8]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f000 f9ad 	bl	8004420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	609a      	str	r2, [r3, #8]
      break;
 80040de:	e04f      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	6899      	ldr	r1, [r3, #8]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f000 f996 	bl	8004420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004102:	609a      	str	r2, [r3, #8]
      break;
 8004104:	e03c      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6859      	ldr	r1, [r3, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	461a      	mov	r2, r3
 8004114:	f000 f90a 	bl	800432c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2150      	movs	r1, #80	; 0x50
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f963 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 8004124:	e02c      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6859      	ldr	r1, [r3, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	461a      	mov	r2, r3
 8004134:	f000 f929 	bl	800438a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2160      	movs	r1, #96	; 0x60
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f953 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 8004144:	e01c      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6859      	ldr	r1, [r3, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	461a      	mov	r2, r3
 8004154:	f000 f8ea 	bl	800432c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2140      	movs	r1, #64	; 0x40
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f943 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 8004164:	e00c      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4619      	mov	r1, r3
 8004170:	4610      	mov	r0, r2
 8004172:	f000 f93a 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 8004176:	e003      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      break;
 800417c:	e000      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800417e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a40      	ldr	r2, [pc, #256]	; (8004300 <TIM_Base_SetConfig+0x114>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d00f      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a3d      	ldr	r2, [pc, #244]	; (8004304 <TIM_Base_SetConfig+0x118>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00b      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a3c      	ldr	r2, [pc, #240]	; (8004308 <TIM_Base_SetConfig+0x11c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a3b      	ldr	r2, [pc, #236]	; (800430c <TIM_Base_SetConfig+0x120>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3a      	ldr	r2, [pc, #232]	; (8004310 <TIM_Base_SetConfig+0x124>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d108      	bne.n	800423e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2f      	ldr	r2, [pc, #188]	; (8004300 <TIM_Base_SetConfig+0x114>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424c:	d027      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a2c      	ldr	r2, [pc, #176]	; (8004304 <TIM_Base_SetConfig+0x118>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d023      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <TIM_Base_SetConfig+0x11c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01f      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2a      	ldr	r2, [pc, #168]	; (800430c <TIM_Base_SetConfig+0x120>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a29      	ldr	r2, [pc, #164]	; (8004310 <TIM_Base_SetConfig+0x124>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d017      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a28      	ldr	r2, [pc, #160]	; (8004314 <TIM_Base_SetConfig+0x128>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a27      	ldr	r2, [pc, #156]	; (8004318 <TIM_Base_SetConfig+0x12c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00f      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a26      	ldr	r2, [pc, #152]	; (800431c <TIM_Base_SetConfig+0x130>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a25      	ldr	r2, [pc, #148]	; (8004320 <TIM_Base_SetConfig+0x134>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a24      	ldr	r2, [pc, #144]	; (8004324 <TIM_Base_SetConfig+0x138>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a23      	ldr	r2, [pc, #140]	; (8004328 <TIM_Base_SetConfig+0x13c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <TIM_Base_SetConfig+0x114>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_Base_SetConfig+0xf8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a0c      	ldr	r2, [pc, #48]	; (8004310 <TIM_Base_SetConfig+0x124>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d103      	bne.n	80042ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	615a      	str	r2, [r3, #20]
}
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40000c00 	.word	0x40000c00
 8004310:	40010400 	.word	0x40010400
 8004314:	40014000 	.word	0x40014000
 8004318:	40014400 	.word	0x40014400
 800431c:	40014800 	.word	0x40014800
 8004320:	40001800 	.word	0x40001800
 8004324:	40001c00 	.word	0x40001c00
 8004328:	40002000 	.word	0x40002000

0800432c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f023 0201 	bic.w	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f023 030a 	bic.w	r3, r3, #10
 8004368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438a:	b480      	push	{r7}
 800438c:	b087      	sub	sp, #28
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f023 0210 	bic.w	r2, r3, #16
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	031b      	lsls	r3, r3, #12
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	621a      	str	r2, [r3, #32]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	f043 0307 	orr.w	r3, r3, #7
 800440c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800443a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	021a      	lsls	r2, r3, #8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	431a      	orrs	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4313      	orrs	r3, r2
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	609a      	str	r2, [r3, #8]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004474:	2302      	movs	r3, #2
 8004476:	e05a      	b.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a21      	ldr	r2, [pc, #132]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d022      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d01d      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d018      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1b      	ldr	r2, [pc, #108]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1a      	ldr	r2, [pc, #104]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00e      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d009      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a17      	ldr	r2, [pc, #92]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d004      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d10c      	bne.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	4313      	orrs	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40010000 	.word	0x40010000
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00
 800454c:	40010400 	.word	0x40010400
 8004550:	40014000 	.word	0x40014000
 8004554:	40001800 	.word	0x40001800

08004558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004598:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <FSMC_NORSRAM_Init+0xa0>)
 800459e:	4013      	ands	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80045aa:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80045b0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80045b6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80045bc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80045c2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80045c8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80045ce:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80045d4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80045da:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80045e0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80045e6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80045ec:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d103      	bne.n	8004604 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004602:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68f9      	ldr	r1, [r7, #12]
 800460c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	fff00080 	.word	0xfff00080

08004624 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800463e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004646:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004652:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800465a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004662:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	3b01      	subs	r3, #1
 800466a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800466c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	3b02      	subs	r3, #2
 8004674:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004676:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800467c:	4313      	orrs	r3, r2
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6979      	ldr	r1, [r7, #20]
 800468c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046b8:	d122      	bne.n	8004700 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80046d6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80046de:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80046e6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80046ec:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6979      	ldr	r1, [r7, #20]
 80046fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80046fe:	e005      	b.n	800470c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	cff00000 	.word	0xcff00000

08004720 <memset>:
 8004720:	4402      	add	r2, r0
 8004722:	4603      	mov	r3, r0
 8004724:	4293      	cmp	r3, r2
 8004726:	d100      	bne.n	800472a <memset+0xa>
 8004728:	4770      	bx	lr
 800472a:	f803 1b01 	strb.w	r1, [r3], #1
 800472e:	e7f9      	b.n	8004724 <memset+0x4>

08004730 <__libc_init_array>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	4d0d      	ldr	r5, [pc, #52]	; (8004768 <__libc_init_array+0x38>)
 8004734:	4c0d      	ldr	r4, [pc, #52]	; (800476c <__libc_init_array+0x3c>)
 8004736:	1b64      	subs	r4, r4, r5
 8004738:	10a4      	asrs	r4, r4, #2
 800473a:	2600      	movs	r6, #0
 800473c:	42a6      	cmp	r6, r4
 800473e:	d109      	bne.n	8004754 <__libc_init_array+0x24>
 8004740:	4d0b      	ldr	r5, [pc, #44]	; (8004770 <__libc_init_array+0x40>)
 8004742:	4c0c      	ldr	r4, [pc, #48]	; (8004774 <__libc_init_array+0x44>)
 8004744:	f000 f818 	bl	8004778 <_init>
 8004748:	1b64      	subs	r4, r4, r5
 800474a:	10a4      	asrs	r4, r4, #2
 800474c:	2600      	movs	r6, #0
 800474e:	42a6      	cmp	r6, r4
 8004750:	d105      	bne.n	800475e <__libc_init_array+0x2e>
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	f855 3b04 	ldr.w	r3, [r5], #4
 8004758:	4798      	blx	r3
 800475a:	3601      	adds	r6, #1
 800475c:	e7ee      	b.n	800473c <__libc_init_array+0xc>
 800475e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004762:	4798      	blx	r3
 8004764:	3601      	adds	r6, #1
 8004766:	e7f2      	b.n	800474e <__libc_init_array+0x1e>
 8004768:	080077b4 	.word	0x080077b4
 800476c:	080077b4 	.word	0x080077b4
 8004770:	080077b4 	.word	0x080077b4
 8004774:	080077b8 	.word	0x080077b8

08004778 <_init>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr

08004784 <_fini>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	bf00      	nop
 8004788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478a:	bc08      	pop	{r3}
 800478c:	469e      	mov	lr, r3
 800478e:	4770      	bx	lr
