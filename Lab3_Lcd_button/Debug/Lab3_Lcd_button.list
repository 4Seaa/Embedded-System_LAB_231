
Lab3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003790  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fa0  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b8  080068b8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080068b8  080068b8  000168b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068c0  080068c0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c0  080068c0  000168c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068c4  080068c4  000168c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080068c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000140  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f009  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cca  00000000  00000000  0002f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f00  00000000  00000000  00031d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b6b  00000000  00000000  00032c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002290d  00000000  00000000  000337cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012e99  00000000  00000000  000560d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd0e5  00000000  00000000  00068f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003cac  00000000  00000000  00136058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00139d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003900 	.word	0x08003900

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003900 	.word	0x08003900

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	2108      	movs	r1, #8
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <button_init+0x14>)
 80004de:	f001 fd3f 	bl	8001f60 <HAL_GPIO_WritePin>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40020c00 	.word	0x40020c00

080004ec <get_fsm>:
int count_clearLCD;

fsm_state state;

fsm_state *get_fsm(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
    return &state;
 80004f0:	4b02      	ldr	r3, [pc, #8]	; (80004fc <get_fsm+0x10>)
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	20000038 	.word	0x20000038

08000500 <top_init>:
        }
    }
}

void top_init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
    fsm_state *fsm = get_fsm();
 8000506:	f7ff fff1 	bl	80004ec <get_fsm>
 800050a:	6078      	str	r0, [r7, #4]

    fsm->current_mode = NORMAL;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
    fsm->next_mode = NORMAL;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	705a      	strb	r2, [r3, #1]

    fsm->temp = 0;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]

    fsm->led_count[RED_LED] = 6;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2206      	movs	r2, #6
 8000522:	605a      	str	r2, [r3, #4]
    fsm->led_count[GREEN_LED] = 4;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2204      	movs	r2, #4
 8000528:	609a      	str	r2, [r3, #8]
    fsm->led_count[YELLOW_LED] = 2;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2202      	movs	r2, #2
 800052e:	60da      	str	r2, [r3, #12]

    count_led = 0;
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <top_init+0x44>)
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
    count_clearLCD = 0;
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <top_init+0x48>)
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000030 	.word	0x20000030
 8000548:	20000034 	.word	0x20000034

0800054c <trafficLight>:
    default:
    }
}

void trafficLight(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af04      	add	r7, sp, #16
    lcd_StrCenter(0, 0, "Traffic Light", RED, BLUE, 16, 0);
 8000552:	2300      	movs	r3, #0
 8000554:	9302      	str	r3, [sp, #8]
 8000556:	2310      	movs	r3, #16
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	231f      	movs	r3, #31
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000562:	4a11      	ldr	r2, [pc, #68]	; (80005a8 <trafficLight+0x5c>)
 8000564:	2100      	movs	r1, #0
 8000566:	2000      	movs	r0, #0
 8000568:	f000 fe60 	bl	800122c <lcd_StrCenter>

    lcd_DrawCircle(100, 120, RED, 16, 1);
 800056c:	2301      	movs	r3, #1
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2310      	movs	r3, #16
 8000572:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000576:	2178      	movs	r1, #120	; 0x78
 8000578:	2064      	movs	r0, #100	; 0x64
 800057a:	f000 fd86 	bl	800108a <lcd_DrawCircle>
    lcd_DrawCircle(130, 120, GREEN, 16, 1);
 800057e:	2301      	movs	r3, #1
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2310      	movs	r3, #16
 8000584:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000588:	2178      	movs	r1, #120	; 0x78
 800058a:	2082      	movs	r0, #130	; 0x82
 800058c:	f000 fd7d 	bl	800108a <lcd_DrawCircle>
    lcd_DrawCircle(160, 120, YELLOW, 16, 1);
 8000590:	2301      	movs	r3, #1
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2310      	movs	r3, #16
 8000596:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800059a:	2178      	movs	r1, #120	; 0x78
 800059c:	20a0      	movs	r0, #160	; 0xa0
 800059e:	f000 fd74 	bl	800108a <lcd_DrawCircle>

    // lcd_ShowIntNum(160, 120, 99, 2, RED, GRAY, 12);
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08003918 	.word	0x08003918

080005ac <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08e      	sub	sp, #56	; 0x38
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]
 80005c2:	615a      	str	r2, [r3, #20]
 80005c4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]
 80005d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80005d8:	4b2f      	ldr	r3, [pc, #188]	; (8000698 <MX_FSMC_Init+0xec>)
 80005da:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80005de:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80005e0:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <MX_FSMC_Init+0xec>)
 80005e2:	4a2e      	ldr	r2, [pc, #184]	; (800069c <MX_FSMC_Init+0xf0>)
 80005e4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <MX_FSMC_Init+0xec>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80005ec:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <MX_FSMC_Init+0xec>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80005f2:	4b29      	ldr	r3, [pc, #164]	; (8000698 <MX_FSMC_Init+0xec>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <MX_FSMC_Init+0xec>)
 80005fa:	2210      	movs	r2, #16
 80005fc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <MX_FSMC_Init+0xec>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <MX_FSMC_Init+0xec>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <MX_FSMC_Init+0xec>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000610:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_FSMC_Init+0xec>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_FSMC_Init+0xec>)
 8000618:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800061c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <MX_FSMC_Init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000624:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_FSMC_Init+0xec>)
 8000626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_FSMC_Init+0xec>)
 800062e:	2200      	movs	r2, #0
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_FSMC_Init+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_FSMC_Init+0xec>)
 800063a:	2200      	movs	r2, #0
 800063c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800063e:	230f      	movs	r3, #15
 8000640:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000642:	230f      	movs	r3, #15
 8000644:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000646:	233c      	movs	r3, #60	; 0x3c
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800064e:	2310      	movs	r3, #16
 8000650:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000652:	2311      	movs	r3, #17
 8000654:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000656:	2300      	movs	r3, #0
 8000658:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800065a:	2308      	movs	r3, #8
 800065c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800065e:	230f      	movs	r3, #15
 8000660:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000662:	2309      	movs	r3, #9
 8000664:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800066a:	2310      	movs	r3, #16
 800066c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800066e:	2311      	movs	r3, #17
 8000670:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000676:	463a      	mov	r2, r7
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <MX_FSMC_Init+0xec>)
 8000680:	f002 fb7c 	bl	8002d7c <HAL_SRAM_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800068a:	f000 ff47 	bl	800151c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800068e:	bf00      	nop
 8000690:	3738      	adds	r7, #56	; 0x38
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000004c 	.word	0x2000004c
 800069c:	a0000104 	.word	0xa0000104

080006a0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <HAL_FSMC_MspInit+0x88>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d131      	bne.n	8000720 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <HAL_FSMC_MspInit+0x88>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <HAL_FSMC_MspInit+0x8c>)
 80006c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <HAL_FSMC_MspInit+0x8c>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6393      	str	r3, [r2, #56]	; 0x38
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <HAL_FSMC_MspInit+0x8c>)
 80006d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80006de:	f64f 7388 	movw	r3, #65416	; 0xff88
 80006e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006f0:	230c      	movs	r3, #12
 80006f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <HAL_FSMC_MspInit+0x90>)
 80006fa:	f001 fa95 	bl	8001c28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80006fe:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000702:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000710:	230c      	movs	r3, #12
 8000712:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4806      	ldr	r0, [pc, #24]	; (8000734 <HAL_FSMC_MspInit+0x94>)
 800071a:	f001 fa85 	bl	8001c28 <HAL_GPIO_Init>
 800071e:	e000      	b.n	8000722 <HAL_FSMC_MspInit+0x82>
    return;
 8000720:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000009c 	.word	0x2000009c
 800072c:	40023800 	.word	0x40023800
 8000730:	40021000 	.word	0x40021000
 8000734:	40020c00 	.word	0x40020c00

08000738 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000740:	f7ff ffae 	bl	80006a0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	; 0x30
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	4b6f      	ldr	r3, [pc, #444]	; (8000924 <MX_GPIO_Init+0x1d8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a6e      	ldr	r2, [pc, #440]	; (8000924 <MX_GPIO_Init+0x1d8>)
 800076c:	f043 0310 	orr.w	r3, r3, #16
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b6c      	ldr	r3, [pc, #432]	; (8000924 <MX_GPIO_Init+0x1d8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0310 	and.w	r3, r3, #16
 800077a:	61bb      	str	r3, [r7, #24]
 800077c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	4b68      	ldr	r3, [pc, #416]	; (8000924 <MX_GPIO_Init+0x1d8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a67      	ldr	r2, [pc, #412]	; (8000924 <MX_GPIO_Init+0x1d8>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b65      	ldr	r3, [pc, #404]	; (8000924 <MX_GPIO_Init+0x1d8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b61      	ldr	r3, [pc, #388]	; (8000924 <MX_GPIO_Init+0x1d8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a60      	ldr	r2, [pc, #384]	; (8000924 <MX_GPIO_Init+0x1d8>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b5e      	ldr	r3, [pc, #376]	; (8000924 <MX_GPIO_Init+0x1d8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b5a      	ldr	r3, [pc, #360]	; (8000924 <MX_GPIO_Init+0x1d8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a59      	ldr	r2, [pc, #356]	; (8000924 <MX_GPIO_Init+0x1d8>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b57      	ldr	r3, [pc, #348]	; (8000924 <MX_GPIO_Init+0x1d8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b53      	ldr	r3, [pc, #332]	; (8000924 <MX_GPIO_Init+0x1d8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a52      	ldr	r2, [pc, #328]	; (8000924 <MX_GPIO_Init+0x1d8>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b50      	ldr	r3, [pc, #320]	; (8000924 <MX_GPIO_Init+0x1d8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <MX_GPIO_Init+0x1d8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a4b      	ldr	r2, [pc, #300]	; (8000924 <MX_GPIO_Init+0x1d8>)
 80007f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b49      	ldr	r3, [pc, #292]	; (8000924 <MX_GPIO_Init+0x1d8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b45      	ldr	r3, [pc, #276]	; (8000924 <MX_GPIO_Init+0x1d8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a44      	ldr	r2, [pc, #272]	; (8000924 <MX_GPIO_Init+0x1d8>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b42      	ldr	r3, [pc, #264]	; (8000924 <MX_GPIO_Init+0x1d8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2170      	movs	r1, #112	; 0x70
 800082a:	483f      	ldr	r0, [pc, #252]	; (8000928 <MX_GPIO_Init+0x1dc>)
 800082c:	f001 fb98 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000836:	483d      	ldr	r0, [pc, #244]	; (800092c <MX_GPIO_Init+0x1e0>)
 8000838:	f001 fb92 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2140      	movs	r1, #64	; 0x40
 8000840:	483b      	ldr	r0, [pc, #236]	; (8000930 <MX_GPIO_Init+0x1e4>)
 8000842:	f001 fb8d 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084c:	4839      	ldr	r0, [pc, #228]	; (8000934 <MX_GPIO_Init+0x1e8>)
 800084e:	f001 fb87 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	4838      	ldr	r0, [pc, #224]	; (8000938 <MX_GPIO_Init+0x1ec>)
 8000858:	f001 fb82 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800085c:	2370      	movs	r3, #112	; 0x70
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000864:	2301      	movs	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	482d      	ldr	r0, [pc, #180]	; (8000928 <MX_GPIO_Init+0x1dc>)
 8000874:	f001 f9d8 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000882:	2301      	movs	r3, #1
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4826      	ldr	r0, [pc, #152]	; (800092c <MX_GPIO_Init+0x1e0>)
 8000892:	f001 f9c9 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000896:	23c0      	movs	r3, #192	; 0xc0
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4822      	ldr	r0, [pc, #136]	; (8000934 <MX_GPIO_Init+0x1e8>)
 80008aa:	f001 f9bd 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80008ae:	2330      	movs	r3, #48	; 0x30
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	481a      	ldr	r0, [pc, #104]	; (800092c <MX_GPIO_Init+0x1e0>)
 80008c2:	f001 f9b1 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80008c6:	2340      	movs	r3, #64	; 0x40
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <MX_GPIO_Init+0x1e4>)
 80008de:	f001 f9a3 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80008e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	480e      	ldr	r0, [pc, #56]	; (8000934 <MX_GPIO_Init+0x1e8>)
 80008fc:	f001 f994 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000900:	2308      	movs	r3, #8
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000908:	2301      	movs	r3, #1
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4808      	ldr	r0, [pc, #32]	; (8000938 <MX_GPIO_Init+0x1ec>)
 8000918:	f001 f986 	bl	8001c28 <HAL_GPIO_Init>

}
 800091c:	bf00      	nop
 800091e:	3730      	adds	r7, #48	; 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40021000 	.word	0x40021000
 800092c:	40020800 	.word	0x40020800
 8000930:	40021800 	.word	0x40021800
 8000934:	40020000 	.word	0x40020000
 8000938:	40020c00 	.word	0x40020c00

0800093c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000946:	4a04      	ldr	r2, [pc, #16]	; (8000958 <LCD_WR_REG+0x1c>)
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	8013      	strh	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	600ffffe 	.word	0x600ffffe

0800095c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000966:	4a04      	ldr	r2, [pc, #16]	; (8000978 <LCD_WR_DATA+0x1c>)
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	8053      	strh	r3, [r2, #2]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	600ffffe 	.word	0x600ffffe

0800097c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <LCD_RD_DATA+0x20>)
 8000984:	885b      	ldrh	r3, [r3, #2]
 8000986:	b29b      	uxth	r3, r3
 8000988:	80fb      	strh	r3, [r7, #6]
	return ram;
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	b29b      	uxth	r3, r3
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	600ffffe 	.word	0x600ffffe

080009a0 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4604      	mov	r4, r0
 80009a8:	4608      	mov	r0, r1
 80009aa:	4611      	mov	r1, r2
 80009ac:	461a      	mov	r2, r3
 80009ae:	4623      	mov	r3, r4
 80009b0:	80fb      	strh	r3, [r7, #6]
 80009b2:	4603      	mov	r3, r0
 80009b4:	80bb      	strh	r3, [r7, #4]
 80009b6:	460b      	mov	r3, r1
 80009b8:	807b      	strh	r3, [r7, #2]
 80009ba:	4613      	mov	r3, r2
 80009bc:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80009be:	202a      	movs	r0, #42	; 0x2a
 80009c0:	f7ff ffbc 	bl	800093c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	0a1b      	lsrs	r3, r3, #8
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffc6 	bl	800095c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ffc0 	bl	800095c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80009dc:	887b      	ldrh	r3, [r7, #2]
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ffba 	bl	800095c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80009e8:	887b      	ldrh	r3, [r7, #2]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ffb4 	bl	800095c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80009f4:	202b      	movs	r0, #43	; 0x2b
 80009f6:	f7ff ffa1 	bl	800093c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80009fa:	88bb      	ldrh	r3, [r7, #4]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ffab 	bl	800095c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000a06:	88bb      	ldrh	r3, [r7, #4]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ffa5 	bl	800095c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000a12:	883b      	ldrh	r3, [r7, #0]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff9f 	bl	800095c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000a1e:	883b      	ldrh	r3, [r7, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff99 	bl	800095c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000a2a:	202c      	movs	r0, #44	; 0x2c
 8000a2c:	f7ff ff86 	bl	800093c <LCD_WR_REG>
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}

08000a38 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <lcd_Clear+0x60>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <lcd_Clear+0x60>)
 8000a4c:	885b      	ldrh	r3, [r3, #2]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff ffa3 	bl	80009a0 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	81fb      	strh	r3, [r7, #14]
 8000a5e:	e011      	b.n	8000a84 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	81bb      	strh	r3, [r7, #12]
 8000a64:	e006      	b.n	8000a74 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff77 	bl	800095c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000a6e:	89bb      	ldrh	r3, [r7, #12]
 8000a70:	3301      	adds	r3, #1
 8000a72:	81bb      	strh	r3, [r7, #12]
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <lcd_Clear+0x60>)
 8000a76:	885b      	ldrh	r3, [r3, #2]
 8000a78:	89ba      	ldrh	r2, [r7, #12]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d3f3      	bcc.n	8000a66 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	3301      	adds	r3, #1
 8000a82:	81fb      	strh	r3, [r7, #14]
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <lcd_Clear+0x60>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	89fa      	ldrh	r2, [r7, #14]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d3e8      	bcc.n	8000a60 <lcd_Clear+0x28>
		}
	}
}
 8000a8e:	bf00      	nop
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200000a0 	.word	0x200000a0

08000a9c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80fb      	strh	r3, [r7, #6]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	80bb      	strh	r3, [r7, #4]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000aae:	88bb      	ldrh	r3, [r7, #4]
 8000ab0:	88fa      	ldrh	r2, [r7, #6]
 8000ab2:	88b9      	ldrh	r1, [r7, #4]
 8000ab4:	88f8      	ldrh	r0, [r7, #6]
 8000ab6:	f7ff ff73 	bl	80009a0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff4d 	bl	800095c <LCD_WR_DATA>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80bb      	strh	r3, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	70fb      	strb	r3, [r7, #3]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000af2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000af6:	085b      	lsrs	r3, r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	f003 0307 	and.w	r3, r3, #7
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	bf14      	ite	ne
 8000b0e:	2301      	movne	r3, #1
 8000b10:	2300      	moveq	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	4413      	add	r3, r2
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	fb12 f303 	smulbb	r3, r2, r3
 8000b22:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	3b20      	subs	r3, #32
 8000b28:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	4413      	add	r3, r2
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	3b01      	subs	r3, #1
 8000b36:	b29c      	uxth	r4, r3
 8000b38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	3b01      	subs	r3, #1
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	88b9      	ldrh	r1, [r7, #4]
 8000b4a:	88f8      	ldrh	r0, [r7, #6]
 8000b4c:	4622      	mov	r2, r4
 8000b4e:	f7ff ff27 	bl	80009a0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	827b      	strh	r3, [r7, #18]
 8000b56:	e07a      	b.n	8000c4e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000b58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b5c:	2b0c      	cmp	r3, #12
 8000b5e:	d028      	beq.n	8000bb2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000b60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b64:	2b10      	cmp	r3, #16
 8000b66:	d108      	bne.n	8000b7a <lcd_ShowChar+0xae>
 8000b68:	78fa      	ldrb	r2, [r7, #3]
 8000b6a:	8a7b      	ldrh	r3, [r7, #18]
 8000b6c:	493c      	ldr	r1, [pc, #240]	; (8000c60 <lcd_ShowChar+0x194>)
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	440a      	add	r2, r1
 8000b72:	4413      	add	r3, r2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	75fb      	strb	r3, [r7, #23]
 8000b78:	e01b      	b.n	8000bb2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000b7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b7e:	2b18      	cmp	r3, #24
 8000b80:	d10b      	bne.n	8000b9a <lcd_ShowChar+0xce>
 8000b82:	78fa      	ldrb	r2, [r7, #3]
 8000b84:	8a79      	ldrh	r1, [r7, #18]
 8000b86:	4837      	ldr	r0, [pc, #220]	; (8000c64 <lcd_ShowChar+0x198>)
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	4403      	add	r3, r0
 8000b92:	440b      	add	r3, r1
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	75fb      	strb	r3, [r7, #23]
 8000b98:	e00b      	b.n	8000bb2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000b9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b9e:	2b20      	cmp	r3, #32
 8000ba0:	d15a      	bne.n	8000c58 <lcd_ShowChar+0x18c>
 8000ba2:	78fa      	ldrb	r2, [r7, #3]
 8000ba4:	8a7b      	ldrh	r3, [r7, #18]
 8000ba6:	4930      	ldr	r1, [pc, #192]	; (8000c68 <lcd_ShowChar+0x19c>)
 8000ba8:	0192      	lsls	r2, r2, #6
 8000baa:	440a      	add	r2, r1
 8000bac:	4413      	add	r3, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	75bb      	strb	r3, [r7, #22]
 8000bb6:	e044      	b.n	8000c42 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000bb8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d120      	bne.n	8000c02 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000bc0:	7dfa      	ldrb	r2, [r7, #23]
 8000bc2:	7dbb      	ldrb	r3, [r7, #22]
 8000bc4:	fa42 f303 	asr.w	r3, r2, r3
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d004      	beq.n	8000bda <lcd_ShowChar+0x10e>
 8000bd0:	883b      	ldrh	r3, [r7, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fec2 	bl	800095c <LCD_WR_DATA>
 8000bd8:	e003      	b.n	8000be2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000bda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff febd 	bl	800095c <LCD_WR_DATA>
				m++;
 8000be2:	7d7b      	ldrb	r3, [r7, #21]
 8000be4:	3301      	adds	r3, #1
 8000be6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000be8:	7d7b      	ldrb	r3, [r7, #21]
 8000bea:	7bfa      	ldrb	r2, [r7, #15]
 8000bec:	fbb3 f1f2 	udiv	r1, r3, r2
 8000bf0:	fb01 f202 	mul.w	r2, r1, r2
 8000bf4:	1a9b      	subs	r3, r3, r2
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d11f      	bne.n	8000c3c <lcd_ShowChar+0x170>
				{
					m=0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	757b      	strb	r3, [r7, #21]
					break;
 8000c00:	e022      	b.n	8000c48 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000c02:	7dfa      	ldrb	r2, [r7, #23]
 8000c04:	7dbb      	ldrb	r3, [r7, #22]
 8000c06:	fa42 f303 	asr.w	r3, r2, r3
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d005      	beq.n	8000c1e <lcd_ShowChar+0x152>
 8000c12:	883a      	ldrh	r2, [r7, #0]
 8000c14:	88b9      	ldrh	r1, [r7, #4]
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff3f 	bl	8000a9c <lcd_DrawPoint>
				x++;
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	3301      	adds	r3, #1
 8000c22:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000c24:	88fa      	ldrh	r2, [r7, #6]
 8000c26:	8a3b      	ldrh	r3, [r7, #16]
 8000c28:	1ad2      	subs	r2, r2, r3
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d105      	bne.n	8000c3c <lcd_ShowChar+0x170>
				{
					x=x0;
 8000c30:	8a3b      	ldrh	r3, [r7, #16]
 8000c32:	80fb      	strh	r3, [r7, #6]
					y++;
 8000c34:	88bb      	ldrh	r3, [r7, #4]
 8000c36:	3301      	adds	r3, #1
 8000c38:	80bb      	strh	r3, [r7, #4]
					break;
 8000c3a:	e005      	b.n	8000c48 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000c3c:	7dbb      	ldrb	r3, [r7, #22]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	75bb      	strb	r3, [r7, #22]
 8000c42:	7dbb      	ldrb	r3, [r7, #22]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d9b7      	bls.n	8000bb8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000c48:	8a7b      	ldrh	r3, [r7, #18]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	827b      	strh	r3, [r7, #18]
 8000c4e:	8a7a      	ldrh	r2, [r7, #18]
 8000c50:	89bb      	ldrh	r3, [r7, #12]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d380      	bcc.n	8000b58 <lcd_ShowChar+0x8c>
 8000c56:	e000      	b.n	8000c5a <lcd_ShowChar+0x18e>
		else return;
 8000c58:	bf00      	nop
				}
			}
		}
	}
}
 8000c5a:	371c      	adds	r7, #28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	08003928 	.word	0x08003928
 8000c64:	08003f18 	.word	0x08003f18
 8000c68:	080050e8 	.word	0x080050e8

08000c6c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	091b      	lsrs	r3, r3, #4
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d007      	beq.n	8000c96 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <lcd_SetDir+0x44>)
 8000c88:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c8c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <lcd_SetDir+0x44>)
 8000c90:	22f0      	movs	r2, #240	; 0xf0
 8000c92:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000c94:	e006      	b.n	8000ca4 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <lcd_SetDir+0x44>)
 8000c98:	22f0      	movs	r2, #240	; 0xf0
 8000c9a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <lcd_SetDir+0x44>)
 8000c9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ca2:	805a      	strh	r2, [r3, #2]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	200000a0 	.word	0x200000a0

08000cb4 <lcd_init>:


void lcd_init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	48aa      	ldr	r0, [pc, #680]	; (8000f68 <lcd_init+0x2b4>)
 8000cc0:	f001 f94e 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000cc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc8:	f000 fe78 	bl	80019bc <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd2:	48a5      	ldr	r0, [pc, #660]	; (8000f68 <lcd_init+0x2b4>)
 8000cd4:	f001 f944 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000cd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cdc:	f000 fe6e 	bl	80019bc <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff ffc3 	bl	8000c6c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000ce6:	20d3      	movs	r0, #211	; 0xd3
 8000ce8:	f7ff fe28 	bl	800093c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000cec:	f7ff fe46 	bl	800097c <LCD_RD_DATA>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b9d      	ldr	r3, [pc, #628]	; (8000f6c <lcd_init+0x2b8>)
 8000cf6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000cf8:	f7ff fe40 	bl	800097c <LCD_RD_DATA>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b9a      	ldr	r3, [pc, #616]	; (8000f6c <lcd_init+0x2b8>)
 8000d02:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000d04:	f7ff fe3a 	bl	800097c <LCD_RD_DATA>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b97      	ldr	r3, [pc, #604]	; (8000f6c <lcd_init+0x2b8>)
 8000d0e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000d10:	4b96      	ldr	r3, [pc, #600]	; (8000f6c <lcd_init+0x2b8>)
 8000d12:	889b      	ldrh	r3, [r3, #4]
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	4b94      	ldr	r3, [pc, #592]	; (8000f6c <lcd_init+0x2b8>)
 8000d1a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000d1c:	f7ff fe2e 	bl	800097c <LCD_RD_DATA>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b91      	ldr	r3, [pc, #580]	; (8000f6c <lcd_init+0x2b8>)
 8000d26:	889b      	ldrh	r3, [r3, #4]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	4b8f      	ldr	r3, [pc, #572]	; (8000f6c <lcd_init+0x2b8>)
 8000d2e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000d30:	20cf      	movs	r0, #207	; 0xcf
 8000d32:	f7ff fe03 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff fe10 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000d3c:	20c1      	movs	r0, #193	; 0xc1
 8000d3e:	f7ff fe0d 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000d42:	2030      	movs	r0, #48	; 0x30
 8000d44:	f7ff fe0a 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000d48:	20ed      	movs	r0, #237	; 0xed
 8000d4a:	f7ff fdf7 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000d4e:	2064      	movs	r0, #100	; 0x64
 8000d50:	f7ff fe04 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f7ff fe01 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000d5a:	2012      	movs	r0, #18
 8000d5c:	f7ff fdfe 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000d60:	2081      	movs	r0, #129	; 0x81
 8000d62:	f7ff fdfb 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000d66:	20e8      	movs	r0, #232	; 0xe8
 8000d68:	f7ff fde8 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000d6c:	2085      	movs	r0, #133	; 0x85
 8000d6e:	f7ff fdf5 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000d72:	2010      	movs	r0, #16
 8000d74:	f7ff fdf2 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000d78:	207a      	movs	r0, #122	; 0x7a
 8000d7a:	f7ff fdef 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000d7e:	20cb      	movs	r0, #203	; 0xcb
 8000d80:	f7ff fddc 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000d84:	2039      	movs	r0, #57	; 0x39
 8000d86:	f7ff fde9 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000d8a:	202c      	movs	r0, #44	; 0x2c
 8000d8c:	f7ff fde6 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff fde3 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000d96:	2034      	movs	r0, #52	; 0x34
 8000d98:	f7ff fde0 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f7ff fddd 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000da2:	20f7      	movs	r0, #247	; 0xf7
 8000da4:	f7ff fdca 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000da8:	2020      	movs	r0, #32
 8000daa:	f7ff fdd7 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000dae:	20ea      	movs	r0, #234	; 0xea
 8000db0:	f7ff fdc4 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fdd1 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff fdce 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000dc0:	20c0      	movs	r0, #192	; 0xc0
 8000dc2:	f7ff fdbb 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000dc6:	201b      	movs	r0, #27
 8000dc8:	f7ff fdc8 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000dcc:	20c1      	movs	r0, #193	; 0xc1
 8000dce:	f7ff fdb5 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff fdc2 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000dd8:	20c5      	movs	r0, #197	; 0xc5
 8000dda:	f7ff fdaf 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000dde:	2030      	movs	r0, #48	; 0x30
 8000de0:	f7ff fdbc 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000de4:	2030      	movs	r0, #48	; 0x30
 8000de6:	f7ff fdb9 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000dea:	20c7      	movs	r0, #199	; 0xc7
 8000dec:	f7ff fda6 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000df0:	20b7      	movs	r0, #183	; 0xb7
 8000df2:	f7ff fdb3 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000df6:	2036      	movs	r0, #54	; 0x36
 8000df8:	f7ff fda0 	bl	800093c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8000dfc:	2008      	movs	r0, #8
 8000dfe:	f7ff fdad 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000e02:	203a      	movs	r0, #58	; 0x3a
 8000e04:	f7ff fd9a 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000e08:	2055      	movs	r0, #85	; 0x55
 8000e0a:	f7ff fda7 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000e0e:	20b1      	movs	r0, #177	; 0xb1
 8000e10:	f7ff fd94 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e14:	2000      	movs	r0, #0
 8000e16:	f7ff fda1 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000e1a:	201a      	movs	r0, #26
 8000e1c:	f7ff fd9e 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000e20:	20b6      	movs	r0, #182	; 0xb6
 8000e22:	f7ff fd8b 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000e26:	200a      	movs	r0, #10
 8000e28:	f7ff fd98 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000e2c:	20a2      	movs	r0, #162	; 0xa2
 8000e2e:	f7ff fd95 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000e32:	20f2      	movs	r0, #242	; 0xf2
 8000e34:	f7ff fd82 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fd8f 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000e3e:	2026      	movs	r0, #38	; 0x26
 8000e40:	f7ff fd7c 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f7ff fd89 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000e4a:	20e0      	movs	r0, #224	; 0xe0
 8000e4c:	f7ff fd76 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000e50:	200f      	movs	r0, #15
 8000e52:	f7ff fd83 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000e56:	202a      	movs	r0, #42	; 0x2a
 8000e58:	f7ff fd80 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000e5c:	2028      	movs	r0, #40	; 0x28
 8000e5e:	f7ff fd7d 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000e62:	2008      	movs	r0, #8
 8000e64:	f7ff fd7a 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000e68:	200e      	movs	r0, #14
 8000e6a:	f7ff fd77 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000e6e:	2008      	movs	r0, #8
 8000e70:	f7ff fd74 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000e74:	2054      	movs	r0, #84	; 0x54
 8000e76:	f7ff fd71 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000e7a:	20a9      	movs	r0, #169	; 0xa9
 8000e7c:	f7ff fd6e 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000e80:	2043      	movs	r0, #67	; 0x43
 8000e82:	f7ff fd6b 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000e86:	200a      	movs	r0, #10
 8000e88:	f7ff fd68 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000e8c:	200f      	movs	r0, #15
 8000e8e:	f7ff fd65 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff fd62 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fd5f 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fd5c 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff fd59 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000eaa:	20e1      	movs	r0, #225	; 0xe1
 8000eac:	f7ff fd46 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fd53 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000eb6:	2015      	movs	r0, #21
 8000eb8:	f7ff fd50 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000ebc:	2017      	movs	r0, #23
 8000ebe:	f7ff fd4d 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000ec2:	2007      	movs	r0, #7
 8000ec4:	f7ff fd4a 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000ec8:	2011      	movs	r0, #17
 8000eca:	f7ff fd47 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000ece:	2006      	movs	r0, #6
 8000ed0:	f7ff fd44 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000ed4:	202b      	movs	r0, #43	; 0x2b
 8000ed6:	f7ff fd41 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000eda:	2056      	movs	r0, #86	; 0x56
 8000edc:	f7ff fd3e 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000ee0:	203c      	movs	r0, #60	; 0x3c
 8000ee2:	f7ff fd3b 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000ee6:	2005      	movs	r0, #5
 8000ee8:	f7ff fd38 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000eec:	2010      	movs	r0, #16
 8000eee:	f7ff fd35 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f7ff fd32 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000ef8:	203f      	movs	r0, #63	; 0x3f
 8000efa:	f7ff fd2f 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000efe:	203f      	movs	r0, #63	; 0x3f
 8000f00:	f7ff fd2c 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000f04:	200f      	movs	r0, #15
 8000f06:	f7ff fd29 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8000f0a:	202b      	movs	r0, #43	; 0x2b
 8000f0c:	f7ff fd16 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fd23 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff fd20 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f7ff fd1d 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000f22:	203f      	movs	r0, #63	; 0x3f
 8000f24:	f7ff fd1a 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8000f28:	202a      	movs	r0, #42	; 0x2a
 8000f2a:	f7ff fd07 	bl	800093c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fd14 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fd11 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f7ff fd0e 	bl	800095c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8000f40:	20ef      	movs	r0, #239	; 0xef
 8000f42:	f7ff fd0b 	bl	800095c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8000f46:	2011      	movs	r0, #17
 8000f48:	f7ff fcf8 	bl	800093c <LCD_WR_REG>
	HAL_Delay(120);
 8000f4c:	2078      	movs	r0, #120	; 0x78
 8000f4e:	f000 fd35 	bl	80019bc <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8000f52:	2029      	movs	r0, #41	; 0x29
 8000f54:	f7ff fcf2 	bl	800093c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5e:	4804      	ldr	r0, [pc, #16]	; (8000f70 <lcd_init+0x2bc>)
 8000f60:	f000 fffe 	bl	8001f60 <HAL_GPIO_WritePin>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	200000a0 	.word	0x200000a0
 8000f70:	40020000 	.word	0x40020000

08000f74 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b298      	uxth	r0, r3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	4413      	add	r3, r2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	8b3a      	ldrh	r2, [r7, #24]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fd7d 	bl	8000a9c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	b298      	uxth	r0, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	8b3a      	ldrh	r2, [r7, #24]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fd6d 	bl	8000a9c <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	4413      	add	r3, r2
 8000fcc:	b298      	uxth	r0, r3
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	8b3a      	ldrh	r2, [r7, #24]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fd5d 	bl	8000a9c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	b298      	uxth	r0, r3
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	8b3a      	ldrh	r2, [r7, #24]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f7ff fd4d 	bl	8000a9c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	b29a      	uxth	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b29b      	uxth	r3, r3
 800100a:	4413      	add	r3, r2
 800100c:	b298      	uxth	r0, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	b29a      	uxth	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4413      	add	r3, r2
 8001018:	b29b      	uxth	r3, r3
 800101a:	8b3a      	ldrh	r2, [r7, #24]
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff fd3d 	bl	8000a9c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	b29a      	uxth	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b298      	uxth	r0, r3
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	b29a      	uxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	b29b      	uxth	r3, r3
 8001036:	4413      	add	r3, r2
 8001038:	b29b      	uxth	r3, r3
 800103a:	8b3a      	ldrh	r2, [r7, #24]
 800103c:	4619      	mov	r1, r3
 800103e:	f7ff fd2d 	bl	8000a9c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	b29a      	uxth	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	4413      	add	r3, r2
 800104c:	b298      	uxth	r0, r3
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	b29a      	uxth	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	b29b      	uxth	r3, r3
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	b29b      	uxth	r3, r3
 800105a:	8b3a      	ldrh	r2, [r7, #24]
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fd1d 	bl	8000a9c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	b29a      	uxth	r2, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	b298      	uxth	r0, r3
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	b29a      	uxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	b29b      	uxth	r3, r3
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	b29b      	uxth	r3, r3
 800107a:	8b3a      	ldrh	r2, [r7, #24]
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fd0d 	bl	8000a9c <lcd_DrawPoint>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b08a      	sub	sp, #40	; 0x28
 800108e:	af02      	add	r7, sp, #8
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4613      	mov	r3, r2
 8001098:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	f1c3 0303 	rsb	r3, r3, #3
 80010aa:	613b      	str	r3, [r7, #16]


	if (fill)
 80010ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d04f      	beq.n	8001152 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80010b2:	e029      	b.n	8001108 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e00a      	b.n	80010d0 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f7ff ff55 	bl	8000f74 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	ddf0      	ble.n	80010ba <lcd_DrawCircle+0x30>

			if (d < 0) {
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da06      	bge.n	80010ec <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	009a      	lsls	r2, r3, #2
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4413      	add	r3, r2
 80010e6:	3306      	adds	r3, #6
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	e00a      	b.n	8001102 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80010ec:	69fa      	ldr	r2, [r7, #28]
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	009a      	lsls	r2, r3, #2
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4413      	add	r3, r2
 80010f8:	330a      	adds	r3, #10
 80010fa:	613b      	str	r3, [r7, #16]
				y--;
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	3b01      	subs	r3, #1
 8001100:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3301      	adds	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	429a      	cmp	r2, r3
 800110e:	ddd1      	ble.n	80010b4 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001110:	e023      	b.n	800115a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff ff29 	bl	8000f74 <_draw_circle_8>
			if (d < 0) {
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	2b00      	cmp	r3, #0
 8001126:	da06      	bge.n	8001136 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	009a      	lsls	r2, r3, #2
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4413      	add	r3, r2
 8001130:	3306      	adds	r3, #6
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	e00a      	b.n	800114c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	009a      	lsls	r2, r3, #2
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4413      	add	r3, r2
 8001142:	330a      	adds	r3, #10
 8001144:	613b      	str	r3, [r7, #16]
				y--;
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	3b01      	subs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
			x++;
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	3301      	adds	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	429a      	cmp	r2, r3
 8001158:	dddb      	ble.n	8001112 <lcd_DrawCircle+0x88>
}
 800115a:	bf00      	nop
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b08b      	sub	sp, #44	; 0x2c
 8001168:	af04      	add	r7, sp, #16
 800116a:	60ba      	str	r2, [r7, #8]
 800116c:	461a      	mov	r2, r3
 800116e:	4603      	mov	r3, r0
 8001170:	81fb      	strh	r3, [r7, #14]
 8001172:	460b      	mov	r3, r1
 8001174:	81bb      	strh	r3, [r7, #12]
 8001176:	4613      	mov	r3, r2
 8001178:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800117e:	2300      	movs	r3, #0
 8001180:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001182:	e048      	b.n	8001216 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d145      	bne.n	8001216 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800118a:	89fa      	ldrh	r2, [r7, #14]
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <lcd_ShowStr+0xc4>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001196:	085b      	lsrs	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	1acb      	subs	r3, r1, r3
 800119c:	429a      	cmp	r2, r3
 800119e:	dc3f      	bgt.n	8001220 <lcd_ShowStr+0xbc>
 80011a0:	89ba      	ldrh	r2, [r7, #12]
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <lcd_ShowStr+0xc4>)
 80011a4:	885b      	ldrh	r3, [r3, #2]
 80011a6:	4619      	mov	r1, r3
 80011a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011ac:	1acb      	subs	r3, r1, r3
 80011ae:	429a      	cmp	r2, r3
 80011b0:	dc36      	bgt.n	8001220 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b80      	cmp	r3, #128	; 0x80
 80011b8:	d902      	bls.n	80011c0 <lcd_ShowStr+0x5c>
 80011ba:	2301      	movs	r3, #1
 80011bc:	75fb      	strb	r3, [r7, #23]
 80011be:	e02a      	b.n	8001216 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b0d      	cmp	r3, #13
 80011c6:	d10b      	bne.n	80011e0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80011c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	89bb      	ldrh	r3, [r7, #12]
 80011d0:	4413      	add	r3, r2
 80011d2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80011d4:	8abb      	ldrh	r3, [r7, #20]
 80011d6:	81fb      	strh	r3, [r7, #14]
					str++;
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3301      	adds	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	e017      	b.n	8001210 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	88fc      	ldrh	r4, [r7, #6]
 80011e6:	89b9      	ldrh	r1, [r7, #12]
 80011e8:	89f8      	ldrh	r0, [r7, #14]
 80011ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	4623      	mov	r3, r4
 80011fc:	f7ff fc66 	bl	8000acc <lcd_ShowChar>
					x+=sizey/2;
 8001200:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001204:	085b      	lsrs	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	b29a      	uxth	r2, r3
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	4413      	add	r3, r2
 800120e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	3301      	adds	r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1b2      	bne.n	8001184 <lcd_ShowStr+0x20>
 800121e:	e000      	b.n	8001222 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001220:	bf00      	nop
			}
		}
	}
}
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd90      	pop	{r4, r7, pc}
 8001228:	200000a0 	.word	0x200000a0

0800122c <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af04      	add	r7, sp, #16
 8001232:	60ba      	str	r2, [r7, #8]
 8001234:	461a      	mov	r2, r3
 8001236:	4603      	mov	r3, r0
 8001238:	81fb      	strh	r3, [r7, #14]
 800123a:	460b      	mov	r3, r1
 800123c:	81bb      	strh	r3, [r7, #12]
 800123e:	4613      	mov	r3, r2
 8001240:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001242:	68b8      	ldr	r0, [r7, #8]
 8001244:	f7fe ffc0 	bl	80001c8 <strlen>
 8001248:	4603      	mov	r3, r0
 800124a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <lcd_StrCenter+0x60>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	8afb      	ldrh	r3, [r7, #22]
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	0fda      	lsrs	r2, r3, #31
 800125a:	4413      	add	r3, r2
 800125c:	105b      	asrs	r3, r3, #1
 800125e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001260:	89fa      	ldrh	r2, [r7, #14]
 8001262:	8abb      	ldrh	r3, [r7, #20]
 8001264:	4413      	add	r3, r2
 8001266:	b298      	uxth	r0, r3
 8001268:	88fa      	ldrh	r2, [r7, #6]
 800126a:	89b9      	ldrh	r1, [r7, #12]
 800126c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	8c3b      	ldrh	r3, [r7, #32]
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	4613      	mov	r3, r2
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f7ff ff70 	bl	8001164 <lcd_ShowStr>
}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200000a0 	.word	0x200000a0

08001290 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001294:	2201      	movs	r2, #1
 8001296:	2140      	movs	r1, #64	; 0x40
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <led7_init+0x14>)
 800129a:	f000 fe61 	bl	8001f60 <HAL_GPIO_WritePin>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40021800 	.word	0x40021800

080012a8 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80012ac:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <led7_Scan+0x104>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <led7_Scan+0x104>)
 80012b6:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80012b8:	4b3d      	ldr	r3, [pc, #244]	; (80013b0 <led7_Scan+0x108>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <led7_Scan+0x10c>)
 80012c0:	5c9b      	ldrb	r3, [r3, r2]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <led7_Scan+0x104>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b36      	ldr	r3, [pc, #216]	; (80013ac <led7_Scan+0x104>)
 80012d4:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80012d6:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <led7_Scan+0x108>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d846      	bhi.n	800136c <led7_Scan+0xc4>
 80012de:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <led7_Scan+0x3c>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	080012f5 	.word	0x080012f5
 80012e8:	08001313 	.word	0x08001313
 80012ec:	08001331 	.word	0x08001331
 80012f0:	0800134f 	.word	0x0800134f
	case 0:
		spi_buffer |= 0x00b0;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <led7_Scan+0x104>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <led7_Scan+0x104>)
 8001300:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <led7_Scan+0x104>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <led7_Scan+0x104>)
 800130e:	801a      	strh	r2, [r3, #0]
		break;
 8001310:	e02d      	b.n	800136e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <led7_Scan+0x104>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <led7_Scan+0x104>)
 800131e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <led7_Scan+0x104>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	f023 0320 	bic.w	r3, r3, #32
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <led7_Scan+0x104>)
 800132c:	801a      	strh	r2, [r3, #0]
		break;
 800132e:	e01e      	b.n	800136e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <led7_Scan+0x104>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001338:	b29a      	uxth	r2, r3
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <led7_Scan+0x104>)
 800133c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <led7_Scan+0x104>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	f023 0310 	bic.w	r3, r3, #16
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <led7_Scan+0x104>)
 800134a:	801a      	strh	r2, [r3, #0]
		break;
 800134c:	e00f      	b.n	800136e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <led7_Scan+0x104>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <led7_Scan+0x104>)
 800135a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <led7_Scan+0x104>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001364:	b29a      	uxth	r2, r3
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <led7_Scan+0x104>)
 8001368:	801a      	strh	r2, [r3, #0]
		break;
 800136a:	e000      	b.n	800136e <led7_Scan+0xc6>
	default:
		break;
 800136c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <led7_Scan+0x108>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	425a      	negs	r2, r3
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	f002 0203 	and.w	r2, r2, #3
 800137e:	bf58      	it	pl
 8001380:	4253      	negpl	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <led7_Scan+0x108>)
 8001386:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2140      	movs	r1, #64	; 0x40
 800138c:	480a      	ldr	r0, [pc, #40]	; (80013b8 <led7_Scan+0x110>)
 800138e:	f000 fde7 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001392:	2301      	movs	r3, #1
 8001394:	2202      	movs	r2, #2
 8001396:	4905      	ldr	r1, [pc, #20]	; (80013ac <led7_Scan+0x104>)
 8001398:	4808      	ldr	r0, [pc, #32]	; (80013bc <led7_Scan+0x114>)
 800139a:	f001 fae8 	bl	800296e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800139e:	2201      	movs	r2, #1
 80013a0:	2140      	movs	r1, #64	; 0x40
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <led7_Scan+0x110>)
 80013a4:	f000 fddc 	bl	8001f60 <HAL_GPIO_WritePin>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000004 	.word	0x20000004
 80013b0:	200000a6 	.word	0x200000a6
 80013b4:	20000000 	.word	0x20000000
 80013b8:	40021800 	.word	0x40021800
 80013bc:	200000b0 	.word	0x200000b0

080013c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c4:	f000 fa88 	bl	80018d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c8:	f000 f81c 	bl	8001404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013cc:	f7ff f9be 	bl	800074c <MX_GPIO_Init>
  MX_TIM2_Init();
 80013d0:	f000 f9e6 	bl	80017a0 <MX_TIM2_Init>
  MX_SPI1_Init();
 80013d4:	f000 f8f8 	bl	80015c8 <MX_SPI1_Init>
  MX_FSMC_Init();
 80013d8:	f7ff f8e8 	bl	80005ac <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80013dc:	f000 f87c 	bl	80014d8 <system_init>
  lcd_Clear(WHITE);
 80013e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013e4:	f7ff fb28 	bl	8000a38 <lcd_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 80013e8:	bf00      	nop
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <main+0x40>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0fb      	beq.n	80013ea <main+0x2a>
	  flag_timer2 = 0;
 80013f2:	4b03      	ldr	r3, [pc, #12]	; (8001400 <main+0x40>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	801a      	strh	r2, [r3, #0]
	  // button_Scan();
	  // test_button();

    // top();

    trafficLight();
 80013f8:	f7ff f8a8 	bl	800054c <trafficLight>
	  while(!flag_timer2);
 80013fc:	e7f4      	b.n	80013e8 <main+0x28>
 80013fe:	bf00      	nop
 8001400:	200000a8 	.word	0x200000a8

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b094      	sub	sp, #80	; 0x50
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	f107 0320 	add.w	r3, r7, #32
 800140e:	2230      	movs	r2, #48	; 0x30
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f002 fa48 	bl	80038a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <SystemClock_Config+0xcc>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <SystemClock_Config+0xcc>)
 8001432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001436:	6413      	str	r3, [r2, #64]	; 0x40
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <SystemClock_Config+0xcc>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <SystemClock_Config+0xd0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <SystemClock_Config+0xd0>)
 800144e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <SystemClock_Config+0xd0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001460:	2302      	movs	r3, #2
 8001462:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001464:	2301      	movs	r3, #1
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001468:	2310      	movs	r3, #16
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146c:	2302      	movs	r3, #2
 800146e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001470:	2300      	movs	r3, #0
 8001472:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001474:	2308      	movs	r3, #8
 8001476:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001478:	23a8      	movs	r3, #168	; 0xa8
 800147a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800147c:	2302      	movs	r3, #2
 800147e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001480:	2304      	movs	r3, #4
 8001482:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001484:	f107 0320 	add.w	r3, r7, #32
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fd83 	bl	8001f94 <HAL_RCC_OscConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001494:	f000 f842 	bl	800151c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001498:	230f      	movs	r3, #15
 800149a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149c:	2302      	movs	r3, #2
 800149e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80014aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2105      	movs	r1, #5
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 ffe4 	bl	8002484 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014c2:	f000 f82b 	bl	800151c <Error_Handler>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3750      	adds	r7, #80	; 0x50
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000

080014d8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2120      	movs	r1, #32
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <system_init+0x40>)
 80014e2:	f000 fd3d 	bl	8001f60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	480b      	ldr	r0, [pc, #44]	; (8001518 <system_init+0x40>)
 80014ec:	f000 fd38 	bl	8001f60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2110      	movs	r1, #16
 80014f4:	4808      	ldr	r0, [pc, #32]	; (8001518 <system_init+0x40>)
 80014f6:	f000 fd33 	bl	8001f60 <HAL_GPIO_WritePin>
	  timer_init();
 80014fa:	f000 f815 	bl	8001528 <timer_init>
	  led7_init();
 80014fe:	f7ff fec7 	bl	8001290 <led7_init>
	  button_init();
 8001502:	f7fe ffe7 	bl	80004d4 <button_init>
	  lcd_init();
 8001506:	f7ff fbd5 	bl	8000cb4 <lcd_init>
	  setTimer2(50);
 800150a:	2032      	movs	r0, #50	; 0x32
 800150c:	f000 f816 	bl	800153c <setTimer2>
    top_init();
 8001510:	f7fe fff6 	bl	8000500 <top_init>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	e7fe      	b.n	8001524 <Error_Handler+0x8>
	...

08001528 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <timer_init+0x10>)
 800152e:	f001 fcb9 	bl	8002ea4 <HAL_TIM_Base_Start_IT>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000108 	.word	0x20000108

0800153c <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <setTimer2+0x2c>)
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <setTimer2+0x2c>)
 800154e:	881a      	ldrh	r2, [r3, #0]
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <setTimer2+0x30>)
 8001552:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <setTimer2+0x34>)
 8001556:	2200      	movs	r2, #0
 8001558:	801a      	strh	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200000ac 	.word	0x200000ac
 800156c:	200000aa 	.word	0x200000aa
 8001570:	200000a8 	.word	0x200000a8

08001574 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001584:	d116      	bne.n	80015b4 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d010      	beq.n	80015b0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	3b01      	subs	r3, #1
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001598:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015aa:	881a      	ldrh	r2, [r3, #0]
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80015ae:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 80015b0:	f7ff fe7a 	bl	80012a8 <led7_Scan>
	}
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200000aa 	.word	0x200000aa
 80015c0:	200000a8 	.word	0x200000a8
 80015c4:	200000ac 	.word	0x200000ac

080015c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_SPI1_Init+0x64>)
 80015ce:	4a18      	ldr	r2, [pc, #96]	; (8001630 <MX_SPI1_Init+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_SPI1_Init+0x64>)
 80015d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_SPI1_Init+0x64>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_SPI1_Init+0x64>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_SPI1_Init+0x64>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_SPI1_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_SPI1_Init+0x64>)
 80015f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_SPI1_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <MX_SPI1_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_SPI1_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <MX_SPI1_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_SPI1_Init+0x64>)
 8001614:	220a      	movs	r2, #10
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_SPI1_Init+0x64>)
 800161a:	f001 f91f 	bl	800285c <HAL_SPI_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001624:	f7ff ff7a 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200000b0 	.word	0x200000b0
 8001630:	40013000 	.word	0x40013000

08001634 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_SPI_MspInit+0x84>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12b      	bne.n	80016ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_SPI_MspInit+0x88>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_SPI_MspInit+0x88>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800168e:	2338      	movs	r3, #56	; 0x38
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800169e:	2305      	movs	r3, #5
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_SPI_MspInit+0x8c>)
 80016aa:	f000 fabd 	bl	8001c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	; 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40013000 	.word	0x40013000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020400 	.word	0x40020400

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <HAL_MspInit+0x4c>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x4c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001760:	f000 f90c 	bl	800197c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <TIM2_IRQHandler+0x10>)
 800176e:	f001 fc09 	bl	8002f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000108 	.word	0x20000108

0800177c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <SystemInit+0x20>)
 8001782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <SystemInit+0x20>)
 8001788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800178c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_TIM2_Init+0x94>)
 80017be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_TIM2_Init+0x94>)
 80017c6:	f240 3247 	movw	r2, #839	; 0x347
 80017ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <MX_TIM2_Init+0x94>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_TIM2_Init+0x94>)
 80017d4:	2263      	movs	r2, #99	; 0x63
 80017d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_TIM2_Init+0x94>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_TIM2_Init+0x94>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017e4:	4813      	ldr	r0, [pc, #76]	; (8001834 <MX_TIM2_Init+0x94>)
 80017e6:	f001 fb0d 	bl	8002e04 <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017f0:	f7ff fe94 	bl	800151c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <MX_TIM2_Init+0x94>)
 8001802:	f001 fcc7 	bl	8003194 <HAL_TIM_ConfigClockSource>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800180c:	f7ff fe86 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_TIM2_Init+0x94>)
 800181e:	f001 fee3 	bl	80035e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001828:	f7ff fe78 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000108 	.word	0x20000108

08001838 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001848:	d115      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_TIM_Base_MspInit+0x48>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <HAL_TIM_Base_MspInit+0x48>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_TIM_Base_MspInit+0x48>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	201c      	movs	r0, #28
 800186c:	f000 f9a5 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001870:	201c      	movs	r0, #28
 8001872:	f000 f9be 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188a:	490e      	ldr	r1, [pc, #56]	; (80018c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a0:	4c0b      	ldr	r4, [pc, #44]	; (80018d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ae:	f7ff ff65 	bl	800177c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f002 f801 	bl	80038b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7ff fd83 	bl	80013c0 <main>
  bx  lr    
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80018c8:	080068c8 	.word	0x080068c8
  ldr r2, =_sbss
 80018cc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80018d0:	20000154 	.word	0x20000154

080018d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC_IRQHandler>
	...

080018d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_Init+0x40>)
 80018e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_Init+0x40>)
 80018ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_Init+0x40>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f94f 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001906:	200f      	movs	r0, #15
 8001908:	f000 f808 	bl	800191c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800190c:	f7ff feda 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00

0800191c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x54>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x58>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001932:	fbb3 f3f1 	udiv	r3, r3, r1
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f967 	bl	8001c0e <HAL_SYSTICK_Config>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e00e      	b.n	8001968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d80a      	bhi.n	8001966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f000 f92f 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800195c:	4a06      	ldr	r2, [pc, #24]	; (8001978 <HAL_InitTick+0x5c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e000      	b.n	8001968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000008 	.word	0x20000008
 8001974:	20000010 	.word	0x20000010
 8001978:	2000000c 	.word	0x2000000c

0800197c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x20>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x24>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <HAL_IncTick+0x24>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000010 	.word	0x20000010
 80019a0:	20000150 	.word	0x20000150

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_GetTick+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000150 	.word	0x20000150

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff ffee 	bl	80019a4 <HAL_GetTick>
 80019c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d4:	d005      	beq.n	80019e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_Delay+0x44>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019e2:	bf00      	nop
 80019e4:	f7ff ffde 	bl	80019a4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f7      	bhi.n	80019e4 <HAL_Delay+0x28>
  {
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000010 	.word	0x20000010

08001a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	db0b      	blt.n	8001a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <__NVIC_EnableIRQ+0x38>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2001      	movs	r0, #1
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff8e 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff29 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff3e 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff8e 	bl	8001af8 <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5d 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff31 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffa2 	bl	8001b60 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	e16b      	b.n	8001f1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f040 815a 	bne.w	8001f16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d005      	beq.n	8001c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d130      	bne.n	8001cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 0201 	and.w	r2, r3, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d017      	beq.n	8001d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d123      	bne.n	8001d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	69b9      	ldr	r1, [r7, #24]
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80b4 	beq.w	8001f16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b60      	ldr	r3, [pc, #384]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a5f      	ldr	r2, [pc, #380]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dca:	4a5b      	ldr	r2, [pc, #364]	; (8001f38 <HAL_GPIO_Init+0x310>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <HAL_GPIO_Init+0x314>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d02b      	beq.n	8001e4e <HAL_GPIO_Init+0x226>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a51      	ldr	r2, [pc, #324]	; (8001f40 <HAL_GPIO_Init+0x318>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d025      	beq.n	8001e4a <HAL_GPIO_Init+0x222>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a50      	ldr	r2, [pc, #320]	; (8001f44 <HAL_GPIO_Init+0x31c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01f      	beq.n	8001e46 <HAL_GPIO_Init+0x21e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4f      	ldr	r2, [pc, #316]	; (8001f48 <HAL_GPIO_Init+0x320>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x21a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4e      	ldr	r2, [pc, #312]	; (8001f4c <HAL_GPIO_Init+0x324>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x216>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4d      	ldr	r2, [pc, #308]	; (8001f50 <HAL_GPIO_Init+0x328>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x212>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4c      	ldr	r2, [pc, #304]	; (8001f54 <HAL_GPIO_Init+0x32c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x20e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4b      	ldr	r2, [pc, #300]	; (8001f58 <HAL_GPIO_Init+0x330>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x20a>
 8001e2e:	2307      	movs	r3, #7
 8001e30:	e00e      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e32:	2308      	movs	r3, #8
 8001e34:	e00c      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e36:	2306      	movs	r3, #6
 8001e38:	e00a      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	e008      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	e006      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e42:	2303      	movs	r3, #3
 8001e44:	e004      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	f002 0203 	and.w	r2, r2, #3
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	4093      	lsls	r3, r2
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e60:	4935      	ldr	r1, [pc, #212]	; (8001f38 <HAL_GPIO_Init+0x310>)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	3302      	adds	r3, #2
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e92:	4a32      	ldr	r2, [pc, #200]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e98:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ebc:	4a27      	ldr	r2, [pc, #156]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec2:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee6:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f10:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	f67f ae90 	bls.w	8001c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3724      	adds	r7, #36	; 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40021400 	.word	0x40021400
 8001f54:	40021800 	.word	0x40021800
 8001f58:	40021c00 	.word	0x40021c00
 8001f5c:	40013c00 	.word	0x40013c00

08001f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f70:	787b      	ldrb	r3, [r7, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f7c:	e003      	b.n	8001f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	041a      	lsls	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	619a      	str	r2, [r3, #24]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e267      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d075      	beq.n	800209e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fb2:	4b88      	ldr	r3, [pc, #544]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d00c      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fbe:	4b85      	ldr	r3, [pc, #532]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d112      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fca:	4b82      	ldr	r3, [pc, #520]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	4b7e      	ldr	r3, [pc, #504]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d05b      	beq.n	800209c <HAL_RCC_OscConfig+0x108>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d157      	bne.n	800209c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e242      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	d106      	bne.n	8002008 <HAL_RCC_OscConfig+0x74>
 8001ffa:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a75      	ldr	r2, [pc, #468]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e01d      	b.n	8002044 <HAL_RCC_OscConfig+0xb0>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x98>
 8002012:	4b70      	ldr	r3, [pc, #448]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6f      	ldr	r2, [pc, #444]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8002018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a6c      	ldr	r2, [pc, #432]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0xb0>
 800202c:	4b69      	ldr	r3, [pc, #420]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a68      	ldr	r2, [pc, #416]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8002032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b66      	ldr	r3, [pc, #408]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a65      	ldr	r2, [pc, #404]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 800203e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff fcaa 	bl	80019a4 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff fca6 	bl	80019a4 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e207      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b5b      	ldr	r3, [pc, #364]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0xc0>
 8002072:	e014      	b.n	800209e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff fc96 	bl	80019a4 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff fc92 	bl	80019a4 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e1f3      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0xe8>
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d063      	beq.n	8002172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020aa:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d11c      	bne.n	80020fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c2:	4b44      	ldr	r3, [pc, #272]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d116      	bne.n	80020fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ce:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x152>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e1c7      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4937      	ldr	r1, [pc, #220]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	e03a      	b.n	8002172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002104:	4b34      	ldr	r3, [pc, #208]	; (80021d8 <HAL_RCC_OscConfig+0x244>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210a:	f7ff fc4b 	bl	80019a4 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002112:	f7ff fc47 	bl	80019a4 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e1a8      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002130:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4925      	ldr	r1, [pc, #148]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
 8002144:	e015      	b.n	8002172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_OscConfig+0x244>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff fc2a 	bl	80019a4 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002154:	f7ff fc26 	bl	80019a4 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e187      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d036      	beq.n	80021ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d016      	beq.n	80021b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_RCC_OscConfig+0x248>)
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7ff fc0a 	bl	80019a4 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002194:	f7ff fc06 	bl	80019a4 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e167      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_OscConfig+0x240>)
 80021a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x200>
 80021b2:	e01b      	b.n	80021ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_RCC_OscConfig+0x248>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7ff fbf3 	bl	80019a4 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	e00e      	b.n	80021e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c2:	f7ff fbef 	bl	80019a4 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d907      	bls.n	80021e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e150      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
 80021d4:	40023800 	.word	0x40023800
 80021d8:	42470000 	.word	0x42470000
 80021dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	4b88      	ldr	r3, [pc, #544]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 80021e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ea      	bne.n	80021c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8097 	beq.w	8002328 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fe:	4b81      	ldr	r3, [pc, #516]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10f      	bne.n	800222a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	4b7d      	ldr	r3, [pc, #500]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a7c      	ldr	r2, [pc, #496]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b7a      	ldr	r3, [pc, #488]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b77      	ldr	r3, [pc, #476]	; (8002408 <HAL_RCC_OscConfig+0x474>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b74      	ldr	r3, [pc, #464]	; (8002408 <HAL_RCC_OscConfig+0x474>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a73      	ldr	r2, [pc, #460]	; (8002408 <HAL_RCC_OscConfig+0x474>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7ff fbaf 	bl	80019a4 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7ff fbab 	bl	80019a4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e10c      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b6a      	ldr	r3, [pc, #424]	; (8002408 <HAL_RCC_OscConfig+0x474>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x2ea>
 8002270:	4b64      	ldr	r3, [pc, #400]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	4a63      	ldr	r2, [pc, #396]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6713      	str	r3, [r2, #112]	; 0x70
 800227c:	e01c      	b.n	80022b8 <HAL_RCC_OscConfig+0x324>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b05      	cmp	r3, #5
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x30c>
 8002286:	4b5f      	ldr	r3, [pc, #380]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	4a5e      	ldr	r2, [pc, #376]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	6713      	str	r3, [r2, #112]	; 0x70
 8002292:	4b5c      	ldr	r3, [pc, #368]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	4a5b      	ldr	r2, [pc, #364]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6713      	str	r3, [r2, #112]	; 0x70
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0x324>
 80022a0:	4b58      	ldr	r3, [pc, #352]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	4a57      	ldr	r2, [pc, #348]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	6713      	str	r3, [r2, #112]	; 0x70
 80022ac:	4b55      	ldr	r3, [pc, #340]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	4a54      	ldr	r2, [pc, #336]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 80022b2:	f023 0304 	bic.w	r3, r3, #4
 80022b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d015      	beq.n	80022ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c0:	f7ff fb70 	bl	80019a4 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c6:	e00a      	b.n	80022de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7ff fb6c 	bl	80019a4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e0cb      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022de:	4b49      	ldr	r3, [pc, #292]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0ee      	beq.n	80022c8 <HAL_RCC_OscConfig+0x334>
 80022ea:	e014      	b.n	8002316 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7ff fb5a 	bl	80019a4 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f2:	e00a      	b.n	800230a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7ff fb56 	bl	80019a4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e0b5      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230a:	4b3e      	ldr	r3, [pc, #248]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ee      	bne.n	80022f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002316:	7dfb      	ldrb	r3, [r7, #23]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231c:	4b39      	ldr	r3, [pc, #228]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	4a38      	ldr	r2, [pc, #224]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 8002322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002326:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a1 	beq.w	8002474 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002332:	4b34      	ldr	r3, [pc, #208]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b08      	cmp	r3, #8
 800233c:	d05c      	beq.n	80023f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d141      	bne.n	80023ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002346:	4b31      	ldr	r3, [pc, #196]	; (800240c <HAL_RCC_OscConfig+0x478>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fb2a 	bl	80019a4 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002354:	f7ff fb26 	bl	80019a4 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e087      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002366:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	019b      	lsls	r3, r3, #6
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	085b      	lsrs	r3, r3, #1
 800238a:	3b01      	subs	r3, #1
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	491b      	ldr	r1, [pc, #108]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_RCC_OscConfig+0x478>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7ff faff 	bl	80019a4 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023aa:	f7ff fafb 	bl	80019a4 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e05c      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x416>
 80023c8:	e054      	b.n	8002474 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_RCC_OscConfig+0x478>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7ff fae8 	bl	80019a4 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d8:	f7ff fae4 	bl	80019a4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e045      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_RCC_OscConfig+0x470>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x444>
 80023f6:	e03d      	b.n	8002474 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d107      	bne.n	8002410 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e038      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
 8002404:	40023800 	.word	0x40023800
 8002408:	40007000 	.word	0x40007000
 800240c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_RCC_OscConfig+0x4ec>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d028      	beq.n	8002470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d121      	bne.n	8002470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	429a      	cmp	r2, r3
 8002438:	d11a      	bne.n	8002470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002440:	4013      	ands	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002448:	4293      	cmp	r3, r2
 800244a:	d111      	bne.n	8002470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	085b      	lsrs	r3, r3, #1
 8002458:	3b01      	subs	r3, #1
 800245a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d107      	bne.n	8002470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800

08002484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0cc      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d90c      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b65      	ldr	r3, [pc, #404]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b63      	ldr	r3, [pc, #396]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0b8      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d8:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a52      	ldr	r2, [pc, #328]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fc:	4b50      	ldr	r3, [pc, #320]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	494d      	ldr	r1, [pc, #308]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d044      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d119      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e07f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d003      	beq.n	8002542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253e:	2b03      	cmp	r3, #3
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e06f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e067      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4934      	ldr	r1, [pc, #208]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002574:	f7ff fa16 	bl	80019a4 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7ff fa12 	bl	80019a4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e04f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 020c 	and.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1eb      	bne.n	800257c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a4:	4b25      	ldr	r3, [pc, #148]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d20c      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e032      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4916      	ldr	r1, [pc, #88]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	490e      	ldr	r1, [pc, #56]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800260a:	f000 f821 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 800260e:	4602      	mov	r2, r0
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	490a      	ldr	r1, [pc, #40]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	5ccb      	ldrb	r3, [r1, r3]
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_RCC_ClockConfig+0x1c8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff f976 	bl	800191c <HAL_InitTick>

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023c00 	.word	0x40023c00
 8002640:	40023800 	.word	0x40023800
 8002644:	080068a8 	.word	0x080068a8
 8002648:	20000008 	.word	0x20000008
 800264c:	2000000c 	.word	0x2000000c

08002650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002654:	b094      	sub	sp, #80	; 0x50
 8002656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	647b      	str	r3, [r7, #68]	; 0x44
 800265c:	2300      	movs	r3, #0
 800265e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002660:	2300      	movs	r3, #0
 8002662:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002668:	4b79      	ldr	r3, [pc, #484]	; (8002850 <HAL_RCC_GetSysClockFreq+0x200>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b08      	cmp	r3, #8
 8002672:	d00d      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x40>
 8002674:	2b08      	cmp	r3, #8
 8002676:	f200 80e1 	bhi.w	800283c <HAL_RCC_GetSysClockFreq+0x1ec>
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x34>
 800267e:	2b04      	cmp	r3, #4
 8002680:	d003      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0x3a>
 8002682:	e0db      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002684:	4b73      	ldr	r3, [pc, #460]	; (8002854 <HAL_RCC_GetSysClockFreq+0x204>)
 8002686:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002688:	e0db      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800268a:	4b73      	ldr	r3, [pc, #460]	; (8002858 <HAL_RCC_GetSysClockFreq+0x208>)
 800268c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800268e:	e0d8      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_GetSysClockFreq+0x200>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002698:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800269a:	4b6d      	ldr	r3, [pc, #436]	; (8002850 <HAL_RCC_GetSysClockFreq+0x200>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d063      	beq.n	800276e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a6:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	099b      	lsrs	r3, r3, #6
 80026ac:	2200      	movs	r2, #0
 80026ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80026b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b8:	633b      	str	r3, [r7, #48]	; 0x30
 80026ba:	2300      	movs	r3, #0
 80026bc:	637b      	str	r3, [r7, #52]	; 0x34
 80026be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026c2:	4622      	mov	r2, r4
 80026c4:	462b      	mov	r3, r5
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	0159      	lsls	r1, r3, #5
 80026d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d4:	0150      	lsls	r0, r2, #5
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4621      	mov	r1, r4
 80026dc:	1a51      	subs	r1, r2, r1
 80026de:	6139      	str	r1, [r7, #16]
 80026e0:	4629      	mov	r1, r5
 80026e2:	eb63 0301 	sbc.w	r3, r3, r1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026f4:	4659      	mov	r1, fp
 80026f6:	018b      	lsls	r3, r1, #6
 80026f8:	4651      	mov	r1, sl
 80026fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026fe:	4651      	mov	r1, sl
 8002700:	018a      	lsls	r2, r1, #6
 8002702:	4651      	mov	r1, sl
 8002704:	ebb2 0801 	subs.w	r8, r2, r1
 8002708:	4659      	mov	r1, fp
 800270a:	eb63 0901 	sbc.w	r9, r3, r1
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800271a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800271e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002722:	4690      	mov	r8, r2
 8002724:	4699      	mov	r9, r3
 8002726:	4623      	mov	r3, r4
 8002728:	eb18 0303 	adds.w	r3, r8, r3
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	462b      	mov	r3, r5
 8002730:	eb49 0303 	adc.w	r3, r9, r3
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002742:	4629      	mov	r1, r5
 8002744:	024b      	lsls	r3, r1, #9
 8002746:	4621      	mov	r1, r4
 8002748:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800274c:	4621      	mov	r1, r4
 800274e:	024a      	lsls	r2, r1, #9
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002756:	2200      	movs	r2, #0
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
 800275a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800275c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002760:	f7fd fd3a 	bl	80001d8 <__aeabi_uldivmod>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4613      	mov	r3, r2
 800276a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800276c:	e058      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276e:	4b38      	ldr	r3, [pc, #224]	; (8002850 <HAL_RCC_GetSysClockFreq+0x200>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	099b      	lsrs	r3, r3, #6
 8002774:	2200      	movs	r2, #0
 8002776:	4618      	mov	r0, r3
 8002778:	4611      	mov	r1, r2
 800277a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800277e:	623b      	str	r3, [r7, #32]
 8002780:	2300      	movs	r3, #0
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
 8002784:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002788:	4642      	mov	r2, r8
 800278a:	464b      	mov	r3, r9
 800278c:	f04f 0000 	mov.w	r0, #0
 8002790:	f04f 0100 	mov.w	r1, #0
 8002794:	0159      	lsls	r1, r3, #5
 8002796:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800279a:	0150      	lsls	r0, r2, #5
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4641      	mov	r1, r8
 80027a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80027a6:	4649      	mov	r1, r9
 80027a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027c0:	ebb2 040a 	subs.w	r4, r2, sl
 80027c4:	eb63 050b 	sbc.w	r5, r3, fp
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	00eb      	lsls	r3, r5, #3
 80027d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027d6:	00e2      	lsls	r2, r4, #3
 80027d8:	4614      	mov	r4, r2
 80027da:	461d      	mov	r5, r3
 80027dc:	4643      	mov	r3, r8
 80027de:	18e3      	adds	r3, r4, r3
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	464b      	mov	r3, r9
 80027e4:	eb45 0303 	adc.w	r3, r5, r3
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027f6:	4629      	mov	r1, r5
 80027f8:	028b      	lsls	r3, r1, #10
 80027fa:	4621      	mov	r1, r4
 80027fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002800:	4621      	mov	r1, r4
 8002802:	028a      	lsls	r2, r1, #10
 8002804:	4610      	mov	r0, r2
 8002806:	4619      	mov	r1, r3
 8002808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280a:	2200      	movs	r2, #0
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	61fa      	str	r2, [r7, #28]
 8002810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002814:	f7fd fce0 	bl	80001d8 <__aeabi_uldivmod>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4613      	mov	r3, r2
 800281e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_GetSysClockFreq+0x200>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002830:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800283a:	e002      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetSysClockFreq+0x204>)
 800283e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002844:	4618      	mov	r0, r3
 8002846:	3750      	adds	r7, #80	; 0x50
 8002848:	46bd      	mov	sp, r7
 800284a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	00f42400 	.word	0x00f42400
 8002858:	007a1200 	.word	0x007a1200

0800285c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e07b      	b.n	8002966 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	2b00      	cmp	r3, #0
 8002874:	d108      	bne.n	8002888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800287e:	d009      	beq.n	8002894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
 8002886:	e005      	b.n	8002894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe fec0 	bl	8001634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	ea42 0103 	orr.w	r1, r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	f003 0104 	and.w	r1, r3, #4
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	f003 0210 	and.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002954:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b088      	sub	sp, #32
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_SPI_Transmit+0x22>
 800298c:	2302      	movs	r3, #2
 800298e:	e126      	b.n	8002bde <HAL_SPI_Transmit+0x270>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002998:	f7ff f804 	bl	80019a4 <HAL_GetTick>
 800299c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d002      	beq.n	80029b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
 80029b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029b2:	e10b      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_SPI_Transmit+0x52>
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029c4:	e102      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2203      	movs	r2, #3
 80029ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	88fa      	ldrh	r2, [r7, #6]
 80029de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	88fa      	ldrh	r2, [r7, #6]
 80029e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0c:	d10f      	bne.n	8002a2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d007      	beq.n	8002a4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a54:	d14b      	bne.n	8002aee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_SPI_Transmit+0xf6>
 8002a5e:	8afb      	ldrh	r3, [r7, #22]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d13e      	bne.n	8002ae2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	1c9a      	adds	r2, r3, #2
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a88:	e02b      	b.n	8002ae2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d112      	bne.n	8002abe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	1c9a      	adds	r2, r3, #2
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	86da      	strh	r2, [r3, #54]	; 0x36
 8002abc:	e011      	b.n	8002ae2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002abe:	f7fe ff71 	bl	80019a4 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d803      	bhi.n	8002ad6 <HAL_SPI_Transmit+0x168>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d102      	bne.n	8002adc <HAL_SPI_Transmit+0x16e>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d102      	bne.n	8002ae2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ae0:	e074      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ce      	bne.n	8002a8a <HAL_SPI_Transmit+0x11c>
 8002aec:	e04c      	b.n	8002b88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_SPI_Transmit+0x18e>
 8002af6:	8afb      	ldrh	r3, [r7, #22]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d140      	bne.n	8002b7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b22:	e02c      	b.n	8002b7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d113      	bne.n	8002b5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b58:	e011      	b.n	8002b7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b5a:	f7fe ff23 	bl	80019a4 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d803      	bhi.n	8002b72 <HAL_SPI_Transmit+0x204>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d102      	bne.n	8002b78 <HAL_SPI_Transmit+0x20a>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b7c:	e026      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1cd      	bne.n	8002b24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	6839      	ldr	r1, [r7, #0]
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f8b3 	bl	8002cf8 <SPI_EndRxTxTransaction>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	e000      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
  }

error:
 8002bca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bf8:	f7fe fed4 	bl	80019a4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c08:	f7fe fecc 	bl	80019a4 <HAL_GetTick>
 8002c0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c0e:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	015b      	lsls	r3, r3, #5
 8002c14:	0d1b      	lsrs	r3, r3, #20
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c1e:	e054      	b.n	8002cca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c26:	d050      	beq.n	8002cca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c28:	f7fe febc 	bl	80019a4 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d902      	bls.n	8002c3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d13d      	bne.n	8002cba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c56:	d111      	bne.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c60:	d004      	beq.n	8002c6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6a:	d107      	bne.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c84:	d10f      	bne.n	8002ca6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ca4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e017      	b.n	8002cea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d19b      	bne.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000008 	.word	0x20000008

08002cf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <SPI_EndRxTxTransaction+0x7c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <SPI_EndRxTxTransaction+0x80>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	0d5b      	lsrs	r3, r3, #21
 8002d10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d14:	fb02 f303 	mul.w	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d22:	d112      	bne.n	8002d4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2180      	movs	r1, #128	; 0x80
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f7ff ff5a 	bl	8002be8 <SPI_WaitFlagStateUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d016      	beq.n	8002d68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f043 0220 	orr.w	r2, r3, #32
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e00f      	b.n	8002d6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b80      	cmp	r3, #128	; 0x80
 8002d62:	d0f2      	beq.n	8002d4a <SPI_EndRxTxTransaction+0x52>
 8002d64:	e000      	b.n	8002d68 <SPI_EndRxTxTransaction+0x70>
        break;
 8002d66:	bf00      	nop
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000008 	.word	0x20000008
 8002d78:	165e9f81 	.word	0x165e9f81

08002d7c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e034      	b.n	8002dfc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f7fd fcc6 	bl	8000738 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3308      	adds	r3, #8
 8002db4:	4619      	mov	r1, r3
 8002db6:	4610      	mov	r0, r2
 8002db8:	f000 fca6 	bl	8003708 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	f000 fcf0 	bl	80037ac <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6858      	ldr	r0, [r3, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	f000 fd25 	bl	8003828 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	6892      	ldr	r2, [r2, #8]
 8002de6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	6892      	ldr	r2, [r2, #8]
 8002df2:	f041 0101 	orr.w	r1, r1, #1
 8002df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e041      	b.n	8002e9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fe fd04 	bl	8001838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	4619      	mov	r1, r3
 8002e42:	4610      	mov	r0, r2
 8002e44:	f000 fa96 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d001      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e04e      	b.n	8002f5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a23      	ldr	r2, [pc, #140]	; (8002f68 <HAL_TIM_Base_Start_IT+0xc4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d022      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d01d      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <HAL_TIM_Base_Start_IT+0xc8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d018      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1e      	ldr	r2, [pc, #120]	; (8002f70 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d013      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00e      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d009      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <HAL_TIM_Base_Start_IT+0xd8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d004      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d111      	bne.n	8002f48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d010      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f46:	e007      	b.n	8002f58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40010000 	.word	0x40010000
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	40000800 	.word	0x40000800
 8002f74:	40000c00 	.word	0x40000c00
 8002f78:	40010400 	.word	0x40010400
 8002f7c:	40014000 	.word	0x40014000
 8002f80:	40001800 	.word	0x40001800

08002f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d122      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d11b      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0202 	mvn.w	r2, #2
 8002fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f9b5 	bl	8003336 <HAL_TIM_IC_CaptureCallback>
 8002fcc:	e005      	b.n	8002fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f9a7 	bl	8003322 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f9b8 	bl	800334a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d122      	bne.n	8003034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d11b      	bne.n	8003034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0204 	mvn.w	r2, #4
 8003004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f98b 	bl	8003336 <HAL_TIM_IC_CaptureCallback>
 8003020:	e005      	b.n	800302e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f97d 	bl	8003322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f98e 	bl	800334a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b08      	cmp	r3, #8
 8003040:	d122      	bne.n	8003088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b08      	cmp	r3, #8
 800304e:	d11b      	bne.n	8003088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0208 	mvn.w	r2, #8
 8003058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2204      	movs	r2, #4
 800305e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f961 	bl	8003336 <HAL_TIM_IC_CaptureCallback>
 8003074:	e005      	b.n	8003082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f953 	bl	8003322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f964 	bl	800334a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b10      	cmp	r3, #16
 8003094:	d122      	bne.n	80030dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b10      	cmp	r3, #16
 80030a2:	d11b      	bne.n	80030dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0210 	mvn.w	r2, #16
 80030ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2208      	movs	r2, #8
 80030b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f937 	bl	8003336 <HAL_TIM_IC_CaptureCallback>
 80030c8:	e005      	b.n	80030d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f929 	bl	8003322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f93a 	bl	800334a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d10e      	bne.n	8003108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d107      	bne.n	8003108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0201 	mvn.w	r2, #1
 8003100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fe fa36 	bl	8001574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	2b80      	cmp	r3, #128	; 0x80
 8003114:	d10e      	bne.n	8003134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003120:	2b80      	cmp	r3, #128	; 0x80
 8003122:	d107      	bne.n	8003134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800312c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fae0 	bl	80036f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313e:	2b40      	cmp	r3, #64	; 0x40
 8003140:	d10e      	bne.n	8003160 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314c:	2b40      	cmp	r3, #64	; 0x40
 800314e:	d107      	bne.n	8003160 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f8ff 	bl	800335e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b20      	cmp	r3, #32
 800316c:	d10e      	bne.n	800318c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b20      	cmp	r3, #32
 800317a:	d107      	bne.n	800318c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0220 	mvn.w	r2, #32
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 faaa 	bl	80036e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_TIM_ConfigClockSource+0x1c>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e0b4      	b.n	800331a <HAL_TIM_ConfigClockSource+0x186>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e8:	d03e      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0xd4>
 80031ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ee:	f200 8087 	bhi.w	8003300 <HAL_TIM_ConfigClockSource+0x16c>
 80031f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f6:	f000 8086 	beq.w	8003306 <HAL_TIM_ConfigClockSource+0x172>
 80031fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fe:	d87f      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x16c>
 8003200:	2b70      	cmp	r3, #112	; 0x70
 8003202:	d01a      	beq.n	800323a <HAL_TIM_ConfigClockSource+0xa6>
 8003204:	2b70      	cmp	r3, #112	; 0x70
 8003206:	d87b      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x16c>
 8003208:	2b60      	cmp	r3, #96	; 0x60
 800320a:	d050      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x11a>
 800320c:	2b60      	cmp	r3, #96	; 0x60
 800320e:	d877      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x16c>
 8003210:	2b50      	cmp	r3, #80	; 0x50
 8003212:	d03c      	beq.n	800328e <HAL_TIM_ConfigClockSource+0xfa>
 8003214:	2b50      	cmp	r3, #80	; 0x50
 8003216:	d873      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x16c>
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d058      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x13a>
 800321c:	2b40      	cmp	r3, #64	; 0x40
 800321e:	d86f      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x16c>
 8003220:	2b30      	cmp	r3, #48	; 0x30
 8003222:	d064      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x15a>
 8003224:	2b30      	cmp	r3, #48	; 0x30
 8003226:	d86b      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x16c>
 8003228:	2b20      	cmp	r3, #32
 800322a:	d060      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x15a>
 800322c:	2b20      	cmp	r3, #32
 800322e:	d867      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x16c>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d05c      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x15a>
 8003234:	2b10      	cmp	r3, #16
 8003236:	d05a      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x15a>
 8003238:	e062      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6899      	ldr	r1, [r3, #8]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f000 f9ad 	bl	80035a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800325c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	609a      	str	r2, [r3, #8]
      break;
 8003266:	e04f      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6899      	ldr	r1, [r3, #8]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f000 f996 	bl	80035a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800328a:	609a      	str	r2, [r3, #8]
      break;
 800328c:	e03c      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6859      	ldr	r1, [r3, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	461a      	mov	r2, r3
 800329c:	f000 f90a 	bl	80034b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2150      	movs	r1, #80	; 0x50
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f963 	bl	8003572 <TIM_ITRx_SetConfig>
      break;
 80032ac:	e02c      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6859      	ldr	r1, [r3, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f000 f929 	bl	8003512 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2160      	movs	r1, #96	; 0x60
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f953 	bl	8003572 <TIM_ITRx_SetConfig>
      break;
 80032cc:	e01c      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	461a      	mov	r2, r3
 80032dc:	f000 f8ea 	bl	80034b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2140      	movs	r1, #64	; 0x40
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f943 	bl	8003572 <TIM_ITRx_SetConfig>
      break;
 80032ec:	e00c      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f000 f93a 	bl	8003572 <TIM_ITRx_SetConfig>
      break;
 80032fe:	e003      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
      break;
 8003304:	e000      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003306:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a40      	ldr	r2, [pc, #256]	; (8003488 <TIM_Base_SetConfig+0x114>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d013      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003392:	d00f      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3d      	ldr	r2, [pc, #244]	; (800348c <TIM_Base_SetConfig+0x118>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00b      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3c      	ldr	r2, [pc, #240]	; (8003490 <TIM_Base_SetConfig+0x11c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3b      	ldr	r2, [pc, #236]	; (8003494 <TIM_Base_SetConfig+0x120>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a3a      	ldr	r2, [pc, #232]	; (8003498 <TIM_Base_SetConfig+0x124>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d108      	bne.n	80033c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2f      	ldr	r2, [pc, #188]	; (8003488 <TIM_Base_SetConfig+0x114>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02b      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d4:	d027      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a2c      	ldr	r2, [pc, #176]	; (800348c <TIM_Base_SetConfig+0x118>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d023      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a2b      	ldr	r2, [pc, #172]	; (8003490 <TIM_Base_SetConfig+0x11c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01f      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <TIM_Base_SetConfig+0x120>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01b      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a29      	ldr	r2, [pc, #164]	; (8003498 <TIM_Base_SetConfig+0x124>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d017      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a28      	ldr	r2, [pc, #160]	; (800349c <TIM_Base_SetConfig+0x128>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a27      	ldr	r2, [pc, #156]	; (80034a0 <TIM_Base_SetConfig+0x12c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00f      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a26      	ldr	r2, [pc, #152]	; (80034a4 <TIM_Base_SetConfig+0x130>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00b      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a25      	ldr	r2, [pc, #148]	; (80034a8 <TIM_Base_SetConfig+0x134>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a24      	ldr	r2, [pc, #144]	; (80034ac <TIM_Base_SetConfig+0x138>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d003      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <TIM_Base_SetConfig+0x13c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d108      	bne.n	8003438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <TIM_Base_SetConfig+0x114>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_Base_SetConfig+0xf8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a0c      	ldr	r2, [pc, #48]	; (8003498 <TIM_Base_SetConfig+0x124>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d103      	bne.n	8003474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	615a      	str	r2, [r3, #20]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40010000 	.word	0x40010000
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	40000c00 	.word	0x40000c00
 8003498:	40010400 	.word	0x40010400
 800349c:	40014000 	.word	0x40014000
 80034a0:	40014400 	.word	0x40014400
 80034a4:	40014800 	.word	0x40014800
 80034a8:	40001800 	.word	0x40001800
 80034ac:	40001c00 	.word	0x40001c00
 80034b0:	40002000 	.word	0x40002000

080034b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f023 0201 	bic.w	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f023 030a 	bic.w	r3, r3, #10
 80034f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003512:	b480      	push	{r7}
 8003514:	b087      	sub	sp, #28
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f023 0210 	bic.w	r2, r3, #16
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800353c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	031b      	lsls	r3, r3, #12
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800354e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	621a      	str	r2, [r3, #32]
}
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003572:	b480      	push	{r7}
 8003574:	b085      	sub	sp, #20
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	f043 0307 	orr.w	r3, r3, #7
 8003594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	021a      	lsls	r2, r3, #8
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	609a      	str	r2, [r3, #8]
}
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e05a      	b.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d022      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d01d      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d018      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1a      	ldr	r2, [pc, #104]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00e      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a15      	ldr	r2, [pc, #84]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d10c      	bne.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	4313      	orrs	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800
 80036d0:	40000c00 	.word	0x40000c00
 80036d4:	40010400 	.word	0x40010400
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40001800 	.word	0x40001800

080036e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003720:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <FSMC_NORSRAM_Init+0xa0>)
 8003726:	4013      	ands	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003732:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8003738:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800373e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8003744:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800374a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8003750:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8003756:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800375c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8003762:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8003768:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800376e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8003774:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b08      	cmp	r3, #8
 8003782:	d103      	bne.n	800378c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68f9      	ldr	r1, [r7, #12]
 8003794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	fff00080 	.word	0xfff00080

080037ac <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80037ce:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80037da:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80037e2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80037ea:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80037f4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	3b02      	subs	r3, #2
 80037fc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80037fe:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003804:	4313      	orrs	r3, r2
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6979      	ldr	r1, [r7, #20]
 8003814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003840:	d122      	bne.n	8003888 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800384a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8003850:	4013      	ands	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800385e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8003866:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800386e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8003874:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6979      	ldr	r1, [r7, #20]
 8003882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003886:	e005      	b.n	8003894 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	cff00000 	.word	0xcff00000

080038a8 <memset>:
 80038a8:	4402      	add	r2, r0
 80038aa:	4603      	mov	r3, r0
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d100      	bne.n	80038b2 <memset+0xa>
 80038b0:	4770      	bx	lr
 80038b2:	f803 1b01 	strb.w	r1, [r3], #1
 80038b6:	e7f9      	b.n	80038ac <memset+0x4>

080038b8 <__libc_init_array>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4d0d      	ldr	r5, [pc, #52]	; (80038f0 <__libc_init_array+0x38>)
 80038bc:	4c0d      	ldr	r4, [pc, #52]	; (80038f4 <__libc_init_array+0x3c>)
 80038be:	1b64      	subs	r4, r4, r5
 80038c0:	10a4      	asrs	r4, r4, #2
 80038c2:	2600      	movs	r6, #0
 80038c4:	42a6      	cmp	r6, r4
 80038c6:	d109      	bne.n	80038dc <__libc_init_array+0x24>
 80038c8:	4d0b      	ldr	r5, [pc, #44]	; (80038f8 <__libc_init_array+0x40>)
 80038ca:	4c0c      	ldr	r4, [pc, #48]	; (80038fc <__libc_init_array+0x44>)
 80038cc:	f000 f818 	bl	8003900 <_init>
 80038d0:	1b64      	subs	r4, r4, r5
 80038d2:	10a4      	asrs	r4, r4, #2
 80038d4:	2600      	movs	r6, #0
 80038d6:	42a6      	cmp	r6, r4
 80038d8:	d105      	bne.n	80038e6 <__libc_init_array+0x2e>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e0:	4798      	blx	r3
 80038e2:	3601      	adds	r6, #1
 80038e4:	e7ee      	b.n	80038c4 <__libc_init_array+0xc>
 80038e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ea:	4798      	blx	r3
 80038ec:	3601      	adds	r6, #1
 80038ee:	e7f2      	b.n	80038d6 <__libc_init_array+0x1e>
 80038f0:	080068c0 	.word	0x080068c0
 80038f4:	080068c0 	.word	0x080068c0
 80038f8:	080068c0 	.word	0x080068c0
 80038fc:	080068c4 	.word	0x080068c4

08003900 <_init>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	bf00      	nop
 8003904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003906:	bc08      	pop	{r3}
 8003908:	469e      	mov	lr, r3
 800390a:	4770      	bx	lr

0800390c <_fini>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr
