
Lab2_Timer_7seg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b58  08002b58  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002b58  08002b58  00012b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b60  08002b60  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000000cc  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e0  200000e0  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b811  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000201b  00000000  00000000  0002b898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c20  00000000  00000000  0002d8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000949  00000000  00000000  0002e4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002093e  00000000  00000000  0002ee21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e5e8  00000000  00000000  0004f75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6519  00000000  00000000  0005dd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000315c  00000000  00000000  00124260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001273bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b30 	.word	0x08002b30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002b30 	.word	0x08002b30

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08c      	sub	sp, #48	; 0x30
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 031c 	add.w	r3, r7, #28
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
 80004de:	4b5a      	ldr	r3, [pc, #360]	; (8000648 <MX_GPIO_Init+0x184>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a59      	ldr	r2, [pc, #356]	; (8000648 <MX_GPIO_Init+0x184>)
 80004e4:	f043 0310 	orr.w	r3, r3, #16
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b57      	ldr	r3, [pc, #348]	; (8000648 <MX_GPIO_Init+0x184>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f003 0310 	and.w	r3, r3, #16
 80004f2:	61bb      	str	r3, [r7, #24]
 80004f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	4b53      	ldr	r3, [pc, #332]	; (8000648 <MX_GPIO_Init+0x184>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a52      	ldr	r2, [pc, #328]	; (8000648 <MX_GPIO_Init+0x184>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b50      	ldr	r3, [pc, #320]	; (8000648 <MX_GPIO_Init+0x184>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	613b      	str	r3, [r7, #16]
 8000516:	4b4c      	ldr	r3, [pc, #304]	; (8000648 <MX_GPIO_Init+0x184>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a4b      	ldr	r2, [pc, #300]	; (8000648 <MX_GPIO_Init+0x184>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b49      	ldr	r3, [pc, #292]	; (8000648 <MX_GPIO_Init+0x184>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	4b45      	ldr	r3, [pc, #276]	; (8000648 <MX_GPIO_Init+0x184>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a44      	ldr	r2, [pc, #272]	; (8000648 <MX_GPIO_Init+0x184>)
 8000538:	f043 0304 	orr.w	r3, r3, #4
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b42      	ldr	r3, [pc, #264]	; (8000648 <MX_GPIO_Init+0x184>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	4b3e      	ldr	r3, [pc, #248]	; (8000648 <MX_GPIO_Init+0x184>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a3d      	ldr	r2, [pc, #244]	; (8000648 <MX_GPIO_Init+0x184>)
 8000554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b3b      	ldr	r3, [pc, #236]	; (8000648 <MX_GPIO_Init+0x184>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b37      	ldr	r3, [pc, #220]	; (8000648 <MX_GPIO_Init+0x184>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a36      	ldr	r2, [pc, #216]	; (8000648 <MX_GPIO_Init+0x184>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b34      	ldr	r3, [pc, #208]	; (8000648 <MX_GPIO_Init+0x184>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	4b30      	ldr	r3, [pc, #192]	; (8000648 <MX_GPIO_Init+0x184>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a2f      	ldr	r2, [pc, #188]	; (8000648 <MX_GPIO_Init+0x184>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <MX_GPIO_Init+0x184>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2170      	movs	r1, #112	; 0x70
 80005a2:	482a      	ldr	r0, [pc, #168]	; (800064c <MX_GPIO_Init+0x188>)
 80005a4:	f000 ff08 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2140      	movs	r1, #64	; 0x40
 80005ac:	4828      	ldr	r0, [pc, #160]	; (8000650 <MX_GPIO_Init+0x18c>)
 80005ae:	f000 ff03 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2108      	movs	r1, #8
 80005b6:	4827      	ldr	r0, [pc, #156]	; (8000654 <MX_GPIO_Init+0x190>)
 80005b8:	f000 fefe 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80005bc:	2370      	movs	r3, #112	; 0x70
 80005be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	4619      	mov	r1, r3
 80005d2:	481e      	ldr	r0, [pc, #120]	; (800064c <MX_GPIO_Init+0x188>)
 80005d4:	f000 fd54 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80005d8:	23c0      	movs	r3, #192	; 0xc0
 80005da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	4619      	mov	r1, r3
 80005ea:	481b      	ldr	r0, [pc, #108]	; (8000658 <MX_GPIO_Init+0x194>)
 80005ec:	f000 fd48 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80005f0:	2330      	movs	r3, #48	; 0x30
 80005f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	4816      	ldr	r0, [pc, #88]	; (800065c <MX_GPIO_Init+0x198>)
 8000604:	f000 fd3c 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000608:	2340      	movs	r3, #64	; 0x40
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000610:	2301      	movs	r3, #1
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_GPIO_Init+0x18c>)
 8000620:	f000 fd2e 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000624:	2308      	movs	r3, #8
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062c:	2301      	movs	r3, #1
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <MX_GPIO_Init+0x190>)
 800063c:	f000 fd20 	bl	8001080 <HAL_GPIO_Init>

}
 8000640:	bf00      	nop
 8000642:	3730      	adds	r7, #48	; 0x30
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40021000 	.word	0x40021000
 8000650:	40021800 	.word	0x40021800
 8000654:	40020c00 	.word	0x40020c00
 8000658:	40020000 	.word	0x40020000
 800065c:	40020800 	.word	0x40020800

08000660 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <led7_init+0x14>)
 800066a:	f000 fea5 	bl	80013b8 <HAL_GPIO_WritePin>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021800 	.word	0x40021800

08000678 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <led7_Scan+0x104>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b3d      	ldr	r3, [pc, #244]	; (800077c <led7_Scan+0x104>)
 8000686:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <led7_Scan+0x108>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b3d      	ldr	r3, [pc, #244]	; (8000784 <led7_Scan+0x10c>)
 8000690:	5c9b      	ldrb	r3, [r3, r2]
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b21a      	sxth	r2, r3
 8000696:	4b39      	ldr	r3, [pc, #228]	; (800077c <led7_Scan+0x104>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	b21b      	sxth	r3, r3
 800069c:	4313      	orrs	r3, r2
 800069e:	b21b      	sxth	r3, r3
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b36      	ldr	r3, [pc, #216]	; (800077c <led7_Scan+0x104>)
 80006a4:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80006a6:	4b36      	ldr	r3, [pc, #216]	; (8000780 <led7_Scan+0x108>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d846      	bhi.n	800073c <led7_Scan+0xc4>
 80006ae:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <led7_Scan+0x3c>)
 80006b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b4:	080006c5 	.word	0x080006c5
 80006b8:	080006e3 	.word	0x080006e3
 80006bc:	08000701 	.word	0x08000701
 80006c0:	0800071f 	.word	0x0800071f
	case 0:
		spi_buffer |= 0x00b0;
 80006c4:	4b2d      	ldr	r3, [pc, #180]	; (800077c <led7_Scan+0x104>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	4b2b      	ldr	r3, [pc, #172]	; (800077c <led7_Scan+0x104>)
 80006d0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80006d2:	4b2a      	ldr	r3, [pc, #168]	; (800077c <led7_Scan+0x104>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4b27      	ldr	r3, [pc, #156]	; (800077c <led7_Scan+0x104>)
 80006de:	801a      	strh	r2, [r3, #0]
		break;
 80006e0:	e02d      	b.n	800073e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <led7_Scan+0x104>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4b23      	ldr	r3, [pc, #140]	; (800077c <led7_Scan+0x104>)
 80006ee:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <led7_Scan+0x104>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	f023 0320 	bic.w	r3, r3, #32
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <led7_Scan+0x104>)
 80006fc:	801a      	strh	r2, [r3, #0]
		break;
 80006fe:	e01e      	b.n	800073e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <led7_Scan+0x104>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <led7_Scan+0x104>)
 800070c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <led7_Scan+0x104>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	f023 0310 	bic.w	r3, r3, #16
 8000716:	b29a      	uxth	r2, r3
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <led7_Scan+0x104>)
 800071a:	801a      	strh	r2, [r3, #0]
		break;
 800071c:	e00f      	b.n	800073e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <led7_Scan+0x104>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <led7_Scan+0x104>)
 800072a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <led7_Scan+0x104>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <led7_Scan+0x104>)
 8000738:	801a      	strh	r2, [r3, #0]
		break;
 800073a:	e000      	b.n	800073e <led7_Scan+0xc6>
	default:
		break;
 800073c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <led7_Scan+0x108>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	425a      	negs	r2, r3
 8000746:	f003 0303 	and.w	r3, r3, #3
 800074a:	f002 0203 	and.w	r2, r2, #3
 800074e:	bf58      	it	pl
 8000750:	4253      	negpl	r3, r2
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <led7_Scan+0x108>)
 8000756:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2140      	movs	r1, #64	; 0x40
 800075c:	480a      	ldr	r0, [pc, #40]	; (8000788 <led7_Scan+0x110>)
 800075e:	f000 fe2b 	bl	80013b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8000762:	2301      	movs	r3, #1
 8000764:	2202      	movs	r2, #2
 8000766:	4905      	ldr	r1, [pc, #20]	; (800077c <led7_Scan+0x104>)
 8000768:	4808      	ldr	r0, [pc, #32]	; (800078c <led7_Scan+0x114>)
 800076a:	f001 fb2c 	bl	8001dc6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	2140      	movs	r1, #64	; 0x40
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <led7_Scan+0x110>)
 8000774:	f000 fe20 	bl	80013b8 <HAL_GPIO_WritePin>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000004 	.word	0x20000004
 8000780:	20000030 	.word	0x20000030
 8000784:	20000000 	.word	0x20000000
 8000788:	40021800 	.word	0x40021800
 800078c:	2000003c 	.word	0x2000003c

08000790 <led7_SetColon>:
  *          This parameter can be one of the following values:
  *            @arg 0: Turn off
  *            @arg 1: Turn on
  * @retval None
  */
void led7_SetColon(uint8_t status){
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d107      	bne.n	80007b0 <led7_SetColon+0x20>
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <led7_SetColon+0x3c>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	f023 0308 	bic.w	r3, r3, #8
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <led7_SetColon+0x3c>)
 80007ac:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 80007ae:	e006      	b.n	80007be <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <led7_SetColon+0x3c>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <led7_SetColon+0x3c>)
 80007bc:	801a      	strh	r2, [r3, #0]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000004 	.word	0x20000004

080007d0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80007d4:	f000 fad0 	bl	8000d78 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80007d8:	f000 f818 	bl	800080c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80007dc:	f7ff fe72 	bl	80004c4 <MX_GPIO_Init>
    MX_TIM2_Init();
 80007e0:	f000 fa2e 	bl	8000c40 <MX_TIM2_Init>
    MX_SPI1_Init();
 80007e4:	f000 f940 	bl	8000a68 <MX_SPI1_Init>
    /* USER CODE BEGIN 2 */
    system_init();
 80007e8:	f000 f87a 	bl	80008e0 <system_init>
    led7_SetColon(1);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f7ff ffcf 	bl	8000790 <led7_SetColon>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        while (!flag_timer2);
 80007f2:	bf00      	nop
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <main+0x38>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d0fb      	beq.n	80007f4 <main+0x24>
        flag_timer2 = 0;
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <main+0x38>)
 80007fe:	2200      	movs	r2, #0
 8000800:	801a      	strh	r2, [r3, #0]
        // main task, every 50ms
//	  test_LedDebug();
//	  test_LedY0();
//	  test_LedY1();
//	  test_7seg();
        trafficLight();
 8000802:	f000 f889 	bl	8000918 <trafficLight>
        while (!flag_timer2);
 8000806:	e7f4      	b.n	80007f2 <main+0x22>
 8000808:	20000034 	.word	0x20000034

0800080c <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2230      	movs	r2, #48	; 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f002 f95c 	bl	8002ad8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a27      	ldr	r2, [pc, #156]	; (80008d8 <SystemClock_Config+0xcc>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
 8000840:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a21      	ldr	r2, [pc, #132]	; (80008dc <SystemClock_Config+0xd0>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2310      	movs	r3, #16
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2302      	movs	r3, #2
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000878:	2300      	movs	r3, #0
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 800087c:	2308      	movs	r3, #8
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8000880:	23a8      	movs	r3, #168	; 0xa8
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000884:	2302      	movs	r3, #2
 8000886:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000888:	2304      	movs	r3, #4
 800088a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800088c:	f107 0320 	add.w	r3, r7, #32
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fdab 	bl	80013ec <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x94>
        Error_Handler();
 800089c:	f000 f88e 	bl	80009bc <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008a0:	230f      	movs	r3, #15
 80008a2:	60fb      	str	r3, [r7, #12]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a4:	2302      	movs	r3, #2
 80008a6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b0:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80008b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b6:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2105      	movs	r1, #5
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 f80c 	bl	80018dc <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xc2>
        Error_Handler();
 80008ca:	f000 f877 	bl	80009bc <Error_Handler>
    }
}
 80008ce:	bf00      	nop
 80008d0:	3750      	adds	r7, #80	; 0x50
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2120      	movs	r1, #32
 80008e8:	480a      	ldr	r0, [pc, #40]	; (8000914 <system_init+0x34>)
 80008ea:	f000 fd65 	bl	80013b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	4808      	ldr	r0, [pc, #32]	; (8000914 <system_init+0x34>)
 80008f4:	f000 fd60 	bl	80013b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2110      	movs	r1, #16
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <system_init+0x34>)
 80008fe:	f000 fd5b 	bl	80013b8 <HAL_GPIO_WritePin>
    timer_init();
 8000902:	f000 f861 	bl	80009c8 <timer_init>
    led7_init();
 8000906:	f7ff feab 	bl	8000660 <led7_init>
    setTimer2(50);
 800090a:	2032      	movs	r0, #50	; 0x32
 800090c:	f000 f866 	bl	80009dc <setTimer2>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000

08000918 <trafficLight>:
 *
 * DEBUG_LED -> RED
 * OUTPUT_Y0 -> GREEN
 * OUTPUT_Y1 -> RED
 * */
void trafficLight() {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
    count = (count + 1) % 180;
 800091c:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <trafficLight+0x98>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <trafficLight+0x9c>)
 8000924:	fb82 1203 	smull	r1, r2, r2, r3
 8000928:	441a      	add	r2, r3
 800092a:	11d1      	asrs	r1, r2, #7
 800092c:	17da      	asrs	r2, r3, #31
 800092e:	1a8a      	subs	r2, r1, r2
 8000930:	21b4      	movs	r1, #180	; 0xb4
 8000932:	fb01 f202 	mul.w	r2, r1, r2
 8000936:	1a9a      	subs	r2, r3, r2
 8000938:	b2d2      	uxtb	r2, r2
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <trafficLight+0x98>)
 800093c:	701a      	strb	r2, [r3, #0]
    if (count < 100) /* < 5s*/ {
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <trafficLight+0x98>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b63      	cmp	r3, #99	; 0x63
 8000944:	d80f      	bhi.n	8000966 <trafficLight+0x4e>
        //RED on
        HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8000946:	2201      	movs	r2, #1
 8000948:	2110      	movs	r1, #16
 800094a:	481b      	ldr	r0, [pc, #108]	; (80009b8 <trafficLight+0xa0>)
 800094c:	f000 fd34 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2120      	movs	r1, #32
 8000954:	4818      	ldr	r0, [pc, #96]	; (80009b8 <trafficLight+0xa0>)
 8000956:	f000 fd2f 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	4816      	ldr	r0, [pc, #88]	; (80009b8 <trafficLight+0xa0>)
 8000960:	f000 fd2a 	bl	80013b8 <HAL_GPIO_WritePin>
        //YELLOW on
        HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
        HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
        HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 1);
    }
}
 8000964:	e022      	b.n	80009ac <trafficLight+0x94>
    } else if (count < 160) /*from 5s to 8s*/ {
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <trafficLight+0x98>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b9f      	cmp	r3, #159	; 0x9f
 800096c:	d80f      	bhi.n	800098e <trafficLight+0x76>
        HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2110      	movs	r1, #16
 8000972:	4811      	ldr	r0, [pc, #68]	; (80009b8 <trafficLight+0xa0>)
 8000974:	f000 fd20 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 8000978:	2201      	movs	r2, #1
 800097a:	2120      	movs	r1, #32
 800097c:	480e      	ldr	r0, [pc, #56]	; (80009b8 <trafficLight+0xa0>)
 800097e:	f000 fd1b 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2140      	movs	r1, #64	; 0x40
 8000986:	480c      	ldr	r0, [pc, #48]	; (80009b8 <trafficLight+0xa0>)
 8000988:	f000 fd16 	bl	80013b8 <HAL_GPIO_WritePin>
}
 800098c:	e00e      	b.n	80009ac <trafficLight+0x94>
        HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2110      	movs	r1, #16
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <trafficLight+0xa0>)
 8000994:	f000 fd10 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2120      	movs	r1, #32
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <trafficLight+0xa0>)
 800099e:	f000 fd0b 	bl	80013b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 1);
 80009a2:	2201      	movs	r2, #1
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	4804      	ldr	r0, [pc, #16]	; (80009b8 <trafficLight+0xa0>)
 80009a8:	f000 fd06 	bl	80013b8 <HAL_GPIO_WritePin>
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000032 	.word	0x20000032
 80009b4:	b60b60b7 	.word	0xb60b60b7
 80009b8:	40021000 	.word	0x40021000

080009bc <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <timer_init+0x10>)
 80009ce:	f001 fc51 	bl	8002274 <HAL_TIM_Base_Start_IT>
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000094 	.word	0x20000094

080009dc <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <setTimer2+0x2c>)
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <setTimer2+0x2c>)
 80009ee:	881a      	ldrh	r2, [r3, #0]
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <setTimer2+0x30>)
 80009f2:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <setTimer2+0x34>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	801a      	strh	r2, [r3, #0]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000038 	.word	0x20000038
 8000a0c:	20000036 	.word	0x20000036
 8000a10:	20000034 	.word	0x20000034

08000a14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a24:	d116      	bne.n	8000a54 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d010      	beq.n	8000a50 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a38:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d106      	bne.n	8000a50 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000a4a:	881a      	ldrh	r2, [r3, #0]
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a4e:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8000a50:	f7ff fe12 	bl	8000678 <led7_Scan>
	}
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000036 	.word	0x20000036
 8000a60:	20000034 	.word	0x20000034
 8000a64:	20000038 	.word	0x20000038

08000a68 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_SPI1_Init+0x64>)
 8000a6e:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <MX_SPI1_Init+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_SPI1_Init+0x64>)
 8000a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_SPI1_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_SPI1_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_SPI1_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_SPI1_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_SPI1_Init+0x64>)
 8000a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_SPI1_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <MX_SPI1_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_SPI1_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MX_SPI1_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_SPI1_Init+0x64>)
 8000ab4:	220a      	movs	r2, #10
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_SPI1_Init+0x64>)
 8000aba:	f001 f8fb 	bl	8001cb4 <HAL_SPI_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ac4:	f7ff ff7a 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000003c 	.word	0x2000003c
 8000ad0:	40013000 	.word	0x40013000

08000ad4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a19      	ldr	r2, [pc, #100]	; (8000b58 <HAL_SPI_MspInit+0x84>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d12b      	bne.n	8000b4e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_SPI_MspInit+0x88>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <HAL_SPI_MspInit+0x88>)
 8000b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_SPI_MspInit+0x88>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_SPI_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <HAL_SPI_MspInit+0x88>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_SPI_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000b2e:	2338      	movs	r3, #56	; 0x38
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b3e:	2305      	movs	r3, #5
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <HAL_SPI_MspInit+0x8c>)
 8000b4a:	f000 fa99 	bl	8001080 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	; 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40013000 	.word	0x40013000
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020400 	.word	0x40020400

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c00:	f000 f90c 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM2_IRQHandler+0x10>)
 8000c0e:	f001 fba1 	bl	8002354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000094 	.word	0x20000094

08000c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c66:	f240 3247 	movw	r2, #839	; 0x347
 8000c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c74:	2263      	movs	r2, #99	; 0x63
 8000c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c84:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c86:	f001 faa5 	bl	80021d4 <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c90:	f7ff fe94 	bl	80009bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000ca2:	f001 fc5f 	bl	8002564 <HAL_TIM_ConfigClockSource>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cac:	f7ff fe86 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000cbe:	f001 fe7b 	bl	80029b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cc8:	f7ff fe78 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000094 	.word	0x20000094

08000cd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce8:	d115      	bne.n	8000d16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_TIM_Base_MspInit+0x48>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_TIM_Base_MspInit+0x48>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_TIM_Base_MspInit+0x48>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	201c      	movs	r0, #28
 8000d0c:	f000 f981 	bl	8001012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d10:	201c      	movs	r0, #28
 8000d12:	f000 f99a 	bl	800104a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2a:	490e      	ldr	r1, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d2c:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d40:	4c0b      	ldr	r4, [pc, #44]	; (8000d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d4e:	f7ff ff65 	bl	8000c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f001 fec9 	bl	8002ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d56:	f7ff fd3b 	bl	80007d0 <main>
  bx  lr    
 8000d5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d68:	08002b68 	.word	0x08002b68
  ldr r2, =_sbss
 8000d6c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d70:	200000e0 	.word	0x200000e0

08000d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <HAL_Init+0x40>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_Init+0x40>)
 8000d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_Init+0x40>)
 8000d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 f92b 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da6:	200f      	movs	r0, #15
 8000da8:	f000 f808 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff feda 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023c00 	.word	0x40023c00

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x54>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x58>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f943 	bl	8001066 <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00e      	b.n	8000e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d80a      	bhi.n	8000e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f000 f90b 	bl	8001012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <HAL_InitTick+0x5c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000010 	.word	0x20000010
 8000e18:	2000000c 	.word	0x2000000c

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000010 	.word	0x20000010
 8000e40:	200000dc 	.word	0x200000dc

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200000dc 	.word	0x200000dc

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff29 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff3e 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff8e 	bl	8000f50 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff31 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffa2 	bl	8000fb8 <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	e16b      	b.n	8001374 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	f040 815a 	bne.w	800136e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d005      	beq.n	80010d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d130      	bne.n	8001134 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 0201 	and.w	r2, r3, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b03      	cmp	r3, #3
 800113e:	d017      	beq.n	8001170 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d123      	bne.n	80011c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	08da      	lsrs	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3208      	adds	r2, #8
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	69b9      	ldr	r1, [r7, #24]
 80011c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0203 	and.w	r2, r3, #3
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80b4 	beq.w	800136e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b60      	ldr	r3, [pc, #384]	; (800138c <HAL_GPIO_Init+0x30c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	4a5f      	ldr	r2, [pc, #380]	; (800138c <HAL_GPIO_Init+0x30c>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001214:	6453      	str	r3, [r2, #68]	; 0x44
 8001216:	4b5d      	ldr	r3, [pc, #372]	; (800138c <HAL_GPIO_Init+0x30c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001222:	4a5b      	ldr	r2, [pc, #364]	; (8001390 <HAL_GPIO_Init+0x310>)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a52      	ldr	r2, [pc, #328]	; (8001394 <HAL_GPIO_Init+0x314>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d02b      	beq.n	80012a6 <HAL_GPIO_Init+0x226>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a51      	ldr	r2, [pc, #324]	; (8001398 <HAL_GPIO_Init+0x318>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d025      	beq.n	80012a2 <HAL_GPIO_Init+0x222>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a50      	ldr	r2, [pc, #320]	; (800139c <HAL_GPIO_Init+0x31c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01f      	beq.n	800129e <HAL_GPIO_Init+0x21e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4f      	ldr	r2, [pc, #316]	; (80013a0 <HAL_GPIO_Init+0x320>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d019      	beq.n	800129a <HAL_GPIO_Init+0x21a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4e      	ldr	r2, [pc, #312]	; (80013a4 <HAL_GPIO_Init+0x324>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d013      	beq.n	8001296 <HAL_GPIO_Init+0x216>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4d      	ldr	r2, [pc, #308]	; (80013a8 <HAL_GPIO_Init+0x328>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d00d      	beq.n	8001292 <HAL_GPIO_Init+0x212>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4c      	ldr	r2, [pc, #304]	; (80013ac <HAL_GPIO_Init+0x32c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d007      	beq.n	800128e <HAL_GPIO_Init+0x20e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4b      	ldr	r2, [pc, #300]	; (80013b0 <HAL_GPIO_Init+0x330>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d101      	bne.n	800128a <HAL_GPIO_Init+0x20a>
 8001286:	2307      	movs	r3, #7
 8001288:	e00e      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800128a:	2308      	movs	r3, #8
 800128c:	e00c      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800128e:	2306      	movs	r3, #6
 8001290:	e00a      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 8001292:	2305      	movs	r3, #5
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 8001296:	2304      	movs	r3, #4
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 80012a6:	2300      	movs	r3, #0
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b8:	4935      	ldr	r1, [pc, #212]	; (8001390 <HAL_GPIO_Init+0x310>)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c6:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_GPIO_Init+0x334>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ea:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <HAL_GPIO_Init+0x334>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_GPIO_Init+0x334>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001314:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <HAL_GPIO_Init+0x334>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <HAL_GPIO_Init+0x334>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <HAL_GPIO_Init+0x334>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_GPIO_Init+0x334>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <HAL_GPIO_Init+0x334>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3301      	adds	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	f67f ae90 	bls.w	800109c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40013800 	.word	0x40013800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40021400 	.word	0x40021400
 80013ac:	40021800 	.word	0x40021800
 80013b0:	40021c00 	.word	0x40021c00
 80013b4:	40013c00 	.word	0x40013c00

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d4:	e003      	b.n	80013de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e267      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d075      	beq.n	80014f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800140a:	4b88      	ldr	r3, [pc, #544]	; (800162c <HAL_RCC_OscConfig+0x240>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b04      	cmp	r3, #4
 8001414:	d00c      	beq.n	8001430 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001416:	4b85      	ldr	r3, [pc, #532]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800141e:	2b08      	cmp	r3, #8
 8001420:	d112      	bne.n	8001448 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001422:	4b82      	ldr	r3, [pc, #520]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800142e:	d10b      	bne.n	8001448 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	4b7e      	ldr	r3, [pc, #504]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d05b      	beq.n	80014f4 <HAL_RCC_OscConfig+0x108>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d157      	bne.n	80014f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e242      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001450:	d106      	bne.n	8001460 <HAL_RCC_OscConfig+0x74>
 8001452:	4b76      	ldr	r3, [pc, #472]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a75      	ldr	r2, [pc, #468]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e01d      	b.n	800149c <HAL_RCC_OscConfig+0xb0>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0x98>
 800146a:	4b70      	ldr	r3, [pc, #448]	; (800162c <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a6f      	ldr	r2, [pc, #444]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b6d      	ldr	r3, [pc, #436]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6c      	ldr	r2, [pc, #432]	; (800162c <HAL_RCC_OscConfig+0x240>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0xb0>
 8001484:	4b69      	ldr	r3, [pc, #420]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a68      	ldr	r2, [pc, #416]	; (800162c <HAL_RCC_OscConfig+0x240>)
 800148a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b66      	ldr	r3, [pc, #408]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a65      	ldr	r2, [pc, #404]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fcce 	bl	8000e44 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fcca 	bl	8000e44 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e207      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b5b      	ldr	r3, [pc, #364]	; (800162c <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0xc0>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fcba 	bl	8000e44 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fcb6 	bl	8000e44 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e1f3      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e6:	4b51      	ldr	r3, [pc, #324]	; (800162c <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0xe8>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d063      	beq.n	80015ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001502:	4b4a      	ldr	r3, [pc, #296]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00b      	beq.n	8001526 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150e:	4b47      	ldr	r3, [pc, #284]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001516:	2b08      	cmp	r3, #8
 8001518:	d11c      	bne.n	8001554 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151a:	4b44      	ldr	r3, [pc, #272]	; (800162c <HAL_RCC_OscConfig+0x240>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d116      	bne.n	8001554 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	4b41      	ldr	r3, [pc, #260]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <HAL_RCC_OscConfig+0x152>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e1c7      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153e:	4b3b      	ldr	r3, [pc, #236]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4937      	ldr	r1, [pc, #220]	; (800162c <HAL_RCC_OscConfig+0x240>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	e03a      	b.n	80015ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d020      	beq.n	800159e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <HAL_RCC_OscConfig+0x244>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff fc6f 	bl	8000e44 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fc6b 	bl	8000e44 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e1a8      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_RCC_OscConfig+0x240>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <HAL_RCC_OscConfig+0x240>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4925      	ldr	r1, [pc, #148]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <HAL_RCC_OscConfig+0x244>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fc4e 	bl	8000e44 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ac:	f7ff fc4a 	bl	8000e44 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e187      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d036      	beq.n	8001644 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d016      	beq.n	800160c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_RCC_OscConfig+0x248>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fc2e 	bl	8000e44 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff fc2a 	bl	8000e44 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e167      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_OscConfig+0x240>)
 8001600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x200>
 800160a:	e01b      	b.n	8001644 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_OscConfig+0x248>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001612:	f7ff fc17 	bl	8000e44 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001618:	e00e      	b.n	8001638 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161a:	f7ff fc13 	bl	8000e44 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d907      	bls.n	8001638 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e150      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
 800162c:	40023800 	.word	0x40023800
 8001630:	42470000 	.word	0x42470000
 8001634:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	4b88      	ldr	r3, [pc, #544]	; (800185c <HAL_RCC_OscConfig+0x470>)
 800163a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1ea      	bne.n	800161a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8097 	beq.w	8001780 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001656:	4b81      	ldr	r3, [pc, #516]	; (800185c <HAL_RCC_OscConfig+0x470>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10f      	bne.n	8001682 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b7d      	ldr	r3, [pc, #500]	; (800185c <HAL_RCC_OscConfig+0x470>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a7c      	ldr	r2, [pc, #496]	; (800185c <HAL_RCC_OscConfig+0x470>)
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b7a      	ldr	r3, [pc, #488]	; (800185c <HAL_RCC_OscConfig+0x470>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167e:	2301      	movs	r3, #1
 8001680:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	4b77      	ldr	r3, [pc, #476]	; (8001860 <HAL_RCC_OscConfig+0x474>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d118      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168e:	4b74      	ldr	r3, [pc, #464]	; (8001860 <HAL_RCC_OscConfig+0x474>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a73      	ldr	r2, [pc, #460]	; (8001860 <HAL_RCC_OscConfig+0x474>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169a:	f7ff fbd3 	bl	8000e44 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a2:	f7ff fbcf 	bl	8000e44 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e10c      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	4b6a      	ldr	r3, [pc, #424]	; (8001860 <HAL_RCC_OscConfig+0x474>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x2ea>
 80016c8:	4b64      	ldr	r3, [pc, #400]	; (800185c <HAL_RCC_OscConfig+0x470>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	4a63      	ldr	r2, [pc, #396]	; (800185c <HAL_RCC_OscConfig+0x470>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
 80016d4:	e01c      	b.n	8001710 <HAL_RCC_OscConfig+0x324>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x30c>
 80016de:	4b5f      	ldr	r3, [pc, #380]	; (800185c <HAL_RCC_OscConfig+0x470>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	4a5e      	ldr	r2, [pc, #376]	; (800185c <HAL_RCC_OscConfig+0x470>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ea:	4b5c      	ldr	r3, [pc, #368]	; (800185c <HAL_RCC_OscConfig+0x470>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	4a5b      	ldr	r2, [pc, #364]	; (800185c <HAL_RCC_OscConfig+0x470>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6713      	str	r3, [r2, #112]	; 0x70
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0x324>
 80016f8:	4b58      	ldr	r3, [pc, #352]	; (800185c <HAL_RCC_OscConfig+0x470>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	4a57      	ldr	r2, [pc, #348]	; (800185c <HAL_RCC_OscConfig+0x470>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6713      	str	r3, [r2, #112]	; 0x70
 8001704:	4b55      	ldr	r3, [pc, #340]	; (800185c <HAL_RCC_OscConfig+0x470>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	4a54      	ldr	r2, [pc, #336]	; (800185c <HAL_RCC_OscConfig+0x470>)
 800170a:	f023 0304 	bic.w	r3, r3, #4
 800170e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d015      	beq.n	8001744 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff fb94 	bl	8000e44 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171e:	e00a      	b.n	8001736 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff fb90 	bl	8000e44 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e0cb      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001736:	4b49      	ldr	r3, [pc, #292]	; (800185c <HAL_RCC_OscConfig+0x470>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0ee      	beq.n	8001720 <HAL_RCC_OscConfig+0x334>
 8001742:	e014      	b.n	800176e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001744:	f7ff fb7e 	bl	8000e44 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174a:	e00a      	b.n	8001762 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff fb7a 	bl	8000e44 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	; 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e0b5      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001762:	4b3e      	ldr	r3, [pc, #248]	; (800185c <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1ee      	bne.n	800174c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <HAL_RCC_OscConfig+0x470>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	4a38      	ldr	r2, [pc, #224]	; (800185c <HAL_RCC_OscConfig+0x470>)
 800177a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 80a1 	beq.w	80018cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <HAL_RCC_OscConfig+0x470>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b08      	cmp	r3, #8
 8001794:	d05c      	beq.n	8001850 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d141      	bne.n	8001822 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179e:	4b31      	ldr	r3, [pc, #196]	; (8001864 <HAL_RCC_OscConfig+0x478>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fb4e 	bl	8000e44 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff fb4a 	bl	8000e44 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e087      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017be:	4b27      	ldr	r3, [pc, #156]	; (800185c <HAL_RCC_OscConfig+0x470>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69da      	ldr	r2, [r3, #28]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	019b      	lsls	r3, r3, #6
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	085b      	lsrs	r3, r3, #1
 80017e2:	3b01      	subs	r3, #1
 80017e4:	041b      	lsls	r3, r3, #16
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	061b      	lsls	r3, r3, #24
 80017ee:	491b      	ldr	r1, [pc, #108]	; (800185c <HAL_RCC_OscConfig+0x470>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <HAL_RCC_OscConfig+0x478>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff fb23 	bl	8000e44 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001802:	f7ff fb1f 	bl	8000e44 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e05c      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_RCC_OscConfig+0x470>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x416>
 8001820:	e054      	b.n	80018cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_RCC_OscConfig+0x478>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fb0c 	bl	8000e44 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff fb08 	bl	8000e44 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e045      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_RCC_OscConfig+0x470>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x444>
 800184e:	e03d      	b.n	80018cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d107      	bne.n	8001868 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e038      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000
 8001864:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_RCC_OscConfig+0x4ec>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d028      	beq.n	80018c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d121      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d11a      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001898:	4013      	ands	r3, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800189e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d111      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	085b      	lsrs	r3, r3, #1
 80018b0:	3b01      	subs	r3, #1
 80018b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d107      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0cc      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018f0:	4b68      	ldr	r3, [pc, #416]	; (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d90c      	bls.n	8001918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b65      	ldr	r3, [pc, #404]	; (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001906:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0b8      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d020      	beq.n	8001966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001930:	4b59      	ldr	r3, [pc, #356]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a58      	ldr	r2, [pc, #352]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800193a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001948:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a52      	ldr	r2, [pc, #328]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001954:	4b50      	ldr	r3, [pc, #320]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	494d      	ldr	r1, [pc, #308]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d044      	beq.n	80019fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d119      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e07f      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d003      	beq.n	800199a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001996:	2b03      	cmp	r3, #3
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199a:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06f      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e067      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f023 0203 	bic.w	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4934      	ldr	r1, [pc, #208]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019cc:	f7ff fa3a 	bl	8000e44 <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d4:	f7ff fa36 	bl	8000e44 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e04f      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 020c 	and.w	r2, r3, #12
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1eb      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019fc:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d20c      	bcs.n	8001a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e032      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4916      	ldr	r1, [pc, #88]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	490e      	ldr	r1, [pc, #56]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a62:	f000 f821 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 8001a66:	4602      	mov	r2, r0
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	490a      	ldr	r1, [pc, #40]	; (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	5ccb      	ldrb	r3, [r1, r3]
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f99a 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023c00 	.word	0x40023c00
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	08002b48 	.word	0x08002b48
 8001aa0:	20000008 	.word	0x20000008
 8001aa4:	2000000c 	.word	0x2000000c

08001aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aac:	b094      	sub	sp, #80	; 0x50
 8001aae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ab8:	2300      	movs	r3, #0
 8001aba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac0:	4b79      	ldr	r3, [pc, #484]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d00d      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	f200 80e1 	bhi.w	8001c94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x34>
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d003      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ada:	e0db      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b73      	ldr	r3, [pc, #460]	; (8001cac <HAL_RCC_GetSysClockFreq+0x204>)
 8001ade:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ae0:	e0db      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ae2:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ae4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae6:	e0d8      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af2:	4b6d      	ldr	r3, [pc, #436]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d063      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afe:	4b6a      	ldr	r3, [pc, #424]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	099b      	lsrs	r3, r3, #6
 8001b04:	2200      	movs	r2, #0
 8001b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b10:	633b      	str	r3, [r7, #48]	; 0x30
 8001b12:	2300      	movs	r3, #0
 8001b14:	637b      	str	r3, [r7, #52]	; 0x34
 8001b16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	462b      	mov	r3, r5
 8001b1e:	f04f 0000 	mov.w	r0, #0
 8001b22:	f04f 0100 	mov.w	r1, #0
 8001b26:	0159      	lsls	r1, r3, #5
 8001b28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b2c:	0150      	lsls	r0, r2, #5
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4621      	mov	r1, r4
 8001b34:	1a51      	subs	r1, r2, r1
 8001b36:	6139      	str	r1, [r7, #16]
 8001b38:	4629      	mov	r1, r5
 8001b3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b4c:	4659      	mov	r1, fp
 8001b4e:	018b      	lsls	r3, r1, #6
 8001b50:	4651      	mov	r1, sl
 8001b52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b56:	4651      	mov	r1, sl
 8001b58:	018a      	lsls	r2, r1, #6
 8001b5a:	4651      	mov	r1, sl
 8001b5c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b60:	4659      	mov	r1, fp
 8001b62:	eb63 0901 	sbc.w	r9, r3, r1
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b7a:	4690      	mov	r8, r2
 8001b7c:	4699      	mov	r9, r3
 8001b7e:	4623      	mov	r3, r4
 8001b80:	eb18 0303 	adds.w	r3, r8, r3
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	462b      	mov	r3, r5
 8001b88:	eb49 0303 	adc.w	r3, r9, r3
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	024b      	lsls	r3, r1, #9
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	024a      	lsls	r2, r1, #9
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bae:	2200      	movs	r2, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bb8:	f7fe fb06 	bl	80001c8 <__aeabi_uldivmod>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bc4:	e058      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bd6:	623b      	str	r3, [r7, #32]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
 8001bdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001be0:	4642      	mov	r2, r8
 8001be2:	464b      	mov	r3, r9
 8001be4:	f04f 0000 	mov.w	r0, #0
 8001be8:	f04f 0100 	mov.w	r1, #0
 8001bec:	0159      	lsls	r1, r3, #5
 8001bee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf2:	0150      	lsls	r0, r2, #5
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4641      	mov	r1, r8
 8001bfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bfe:	4649      	mov	r1, r9
 8001c00:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c18:	ebb2 040a 	subs.w	r4, r2, sl
 8001c1c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	00eb      	lsls	r3, r5, #3
 8001c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c2e:	00e2      	lsls	r2, r4, #3
 8001c30:	4614      	mov	r4, r2
 8001c32:	461d      	mov	r5, r3
 8001c34:	4643      	mov	r3, r8
 8001c36:	18e3      	adds	r3, r4, r3
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	464b      	mov	r3, r9
 8001c3c:	eb45 0303 	adc.w	r3, r5, r3
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c4e:	4629      	mov	r1, r5
 8001c50:	028b      	lsls	r3, r1, #10
 8001c52:	4621      	mov	r1, r4
 8001c54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c58:	4621      	mov	r1, r4
 8001c5a:	028a      	lsls	r2, r1, #10
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c62:	2200      	movs	r2, #0
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	61fa      	str	r2, [r7, #28]
 8001c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c6c:	f7fe faac 	bl	80001c8 <__aeabi_uldivmod>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4613      	mov	r3, r2
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	0c1b      	lsrs	r3, r3, #16
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	3301      	adds	r3, #1
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c92:	e002      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_RCC_GetSysClockFreq+0x204>)
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3750      	adds	r7, #80	; 0x50
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	00f42400 	.word	0x00f42400
 8001cb0:	007a1200 	.word	0x007a1200

08001cb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e07b      	b.n	8001dbe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d108      	bne.n	8001ce0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cd6:	d009      	beq.n	8001cec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
 8001cde:	e005      	b.n	8001cec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fee4 	bl	8000ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d70:	ea42 0103 	orr.w	r1, r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	0c1b      	lsrs	r3, r3, #16
 8001d8a:	f003 0104 	and.w	r1, r3, #4
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	f003 0210 	and.w	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b088      	sub	sp, #32
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_SPI_Transmit+0x22>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e126      	b.n	8002036 <HAL_SPI_Transmit+0x270>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001df0:	f7ff f828 	bl	8000e44 <HAL_GetTick>
 8001df4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d002      	beq.n	8001e0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
 8001e08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e0a:	e10b      	b.n	8002024 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_SPI_Transmit+0x52>
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e1c:	e102      	b.n	8002024 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2203      	movs	r2, #3
 8001e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	88fa      	ldrh	r2, [r7, #6]
 8001e36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	88fa      	ldrh	r2, [r7, #6]
 8001e3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e64:	d10f      	bne.n	8001e86 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	d007      	beq.n	8001ea4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ea2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eac:	d14b      	bne.n	8001f46 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <HAL_SPI_Transmit+0xf6>
 8001eb6:	8afb      	ldrh	r3, [r7, #22]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d13e      	bne.n	8001f3a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	881a      	ldrh	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	1c9a      	adds	r2, r3, #2
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ee0:	e02b      	b.n	8001f3a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d112      	bne.n	8001f16 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	881a      	ldrh	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	1c9a      	adds	r2, r3, #2
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f14:	e011      	b.n	8001f3a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f16:	f7fe ff95 	bl	8000e44 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d803      	bhi.n	8001f2e <HAL_SPI_Transmit+0x168>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d102      	bne.n	8001f34 <HAL_SPI_Transmit+0x16e>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f38:	e074      	b.n	8002024 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1ce      	bne.n	8001ee2 <HAL_SPI_Transmit+0x11c>
 8001f44:	e04c      	b.n	8001fe0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <HAL_SPI_Transmit+0x18e>
 8001f4e:	8afb      	ldrh	r3, [r7, #22]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d140      	bne.n	8001fd6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	330c      	adds	r3, #12
 8001f5e:	7812      	ldrb	r2, [r2, #0]
 8001f60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f7a:	e02c      	b.n	8001fd6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d113      	bne.n	8001fb2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	330c      	adds	r3, #12
 8001f94:	7812      	ldrb	r2, [r2, #0]
 8001f96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fb0:	e011      	b.n	8001fd6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fb2:	f7fe ff47 	bl	8000e44 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d803      	bhi.n	8001fca <HAL_SPI_Transmit+0x204>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d102      	bne.n	8001fd0 <HAL_SPI_Transmit+0x20a>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fd4:	e026      	b.n	8002024 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1cd      	bne.n	8001f7c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	6839      	ldr	r1, [r7, #0]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f8b3 	bl	8002150 <SPI_EndRxTxTransaction>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10a      	bne.n	8002014 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	77fb      	strb	r3, [r7, #31]
 8002020:	e000      	b.n	8002024 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002022:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002034:	7ffb      	ldrb	r3, [r7, #31]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002050:	f7fe fef8 	bl	8000e44 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	4413      	add	r3, r2
 800205e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002060:	f7fe fef0 	bl	8000e44 <HAL_GetTick>
 8002064:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	015b      	lsls	r3, r3, #5
 800206c:	0d1b      	lsrs	r3, r3, #20
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	fb02 f303 	mul.w	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002076:	e054      	b.n	8002122 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207e:	d050      	beq.n	8002122 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002080:	f7fe fee0 	bl	8000e44 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	429a      	cmp	r2, r3
 800208e:	d902      	bls.n	8002096 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d13d      	bne.n	8002112 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ae:	d111      	bne.n	80020d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b8:	d004      	beq.n	80020c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c2:	d107      	bne.n	80020d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020dc:	d10f      	bne.n	80020fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e017      	b.n	8002142 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3b01      	subs	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4013      	ands	r3, r2
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	429a      	cmp	r2, r3
 8002130:	bf0c      	ite	eq
 8002132:	2301      	moveq	r3, #1
 8002134:	2300      	movne	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	429a      	cmp	r2, r3
 800213e:	d19b      	bne.n	8002078 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000008 	.word	0x20000008

08002150 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <SPI_EndRxTxTransaction+0x7c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <SPI_EndRxTxTransaction+0x80>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0d5b      	lsrs	r3, r3, #21
 8002168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800216c:	fb02 f303 	mul.w	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800217a:	d112      	bne.n	80021a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2200      	movs	r2, #0
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7ff ff5a 	bl	8002040 <SPI_WaitFlagStateUntilTimeout>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d016      	beq.n	80021c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f043 0220 	orr.w	r2, r3, #32
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e00f      	b.n	80021c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b8:	2b80      	cmp	r3, #128	; 0x80
 80021ba:	d0f2      	beq.n	80021a2 <SPI_EndRxTxTransaction+0x52>
 80021bc:	e000      	b.n	80021c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80021be:	bf00      	nop
  }

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000008 	.word	0x20000008
 80021d0:	165e9f81 	.word	0x165e9f81

080021d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e041      	b.n	800226a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe fd6c 	bl	8000cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3304      	adds	r3, #4
 8002210:	4619      	mov	r1, r3
 8002212:	4610      	mov	r0, r2
 8002214:	f000 fa96 	bl	8002744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d001      	beq.n	800228c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e04e      	b.n	800232a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a23      	ldr	r2, [pc, #140]	; (8002338 <HAL_TIM_Base_Start_IT+0xc4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d022      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x80>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b6:	d01d      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x80>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1f      	ldr	r2, [pc, #124]	; (800233c <HAL_TIM_Base_Start_IT+0xc8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d018      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x80>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <HAL_TIM_Base_Start_IT+0xcc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x80>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <HAL_TIM_Base_Start_IT+0xd0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00e      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x80>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <HAL_TIM_Base_Start_IT+0xd4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d009      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x80>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a19      	ldr	r2, [pc, #100]	; (800234c <HAL_TIM_Base_Start_IT+0xd8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d004      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x80>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a18      	ldr	r2, [pc, #96]	; (8002350 <HAL_TIM_Base_Start_IT+0xdc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d111      	bne.n	8002318 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b06      	cmp	r3, #6
 8002304:	d010      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0201 	orr.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002316:	e007      	b.n	8002328 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40010000 	.word	0x40010000
 800233c:	40000400 	.word	0x40000400
 8002340:	40000800 	.word	0x40000800
 8002344:	40000c00 	.word	0x40000c00
 8002348:	40010400 	.word	0x40010400
 800234c:	40014000 	.word	0x40014000
 8002350:	40001800 	.word	0x40001800

08002354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	d122      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b02      	cmp	r3, #2
 8002376:	d11b      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0202 	mvn.w	r2, #2
 8002380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f9b5 	bl	8002706 <HAL_TIM_IC_CaptureCallback>
 800239c:	e005      	b.n	80023aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f9a7 	bl	80026f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f9b8 	bl	800271a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d122      	bne.n	8002404 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d11b      	bne.n	8002404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0204 	mvn.w	r2, #4
 80023d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f98b 	bl	8002706 <HAL_TIM_IC_CaptureCallback>
 80023f0:	e005      	b.n	80023fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f97d 	bl	80026f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f98e 	bl	800271a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b08      	cmp	r3, #8
 8002410:	d122      	bne.n	8002458 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b08      	cmp	r3, #8
 800241e:	d11b      	bne.n	8002458 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0208 	mvn.w	r2, #8
 8002428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2204      	movs	r2, #4
 800242e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f961 	bl	8002706 <HAL_TIM_IC_CaptureCallback>
 8002444:	e005      	b.n	8002452 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f953 	bl	80026f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f964 	bl	800271a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b10      	cmp	r3, #16
 8002464:	d122      	bne.n	80024ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b10      	cmp	r3, #16
 8002472:	d11b      	bne.n	80024ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0210 	mvn.w	r2, #16
 800247c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2208      	movs	r2, #8
 8002482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f937 	bl	8002706 <HAL_TIM_IC_CaptureCallback>
 8002498:	e005      	b.n	80024a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f929 	bl	80026f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f93a 	bl	800271a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d10e      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d107      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0201 	mvn.w	r2, #1
 80024d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fa9e 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	2b80      	cmp	r3, #128	; 0x80
 80024e4:	d10e      	bne.n	8002504 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f0:	2b80      	cmp	r3, #128	; 0x80
 80024f2:	d107      	bne.n	8002504 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fae0 	bl	8002ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250e:	2b40      	cmp	r3, #64	; 0x40
 8002510:	d10e      	bne.n	8002530 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d107      	bne.n	8002530 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f8ff 	bl	800272e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b20      	cmp	r3, #32
 800253c:	d10e      	bne.n	800255c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b20      	cmp	r3, #32
 800254a:	d107      	bne.n	800255c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0220 	mvn.w	r2, #32
 8002554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 faaa 	bl	8002ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_TIM_ConfigClockSource+0x1c>
 800257c:	2302      	movs	r3, #2
 800257e:	e0b4      	b.n	80026ea <HAL_TIM_ConfigClockSource+0x186>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800259e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b8:	d03e      	beq.n	8002638 <HAL_TIM_ConfigClockSource+0xd4>
 80025ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025be:	f200 8087 	bhi.w	80026d0 <HAL_TIM_ConfigClockSource+0x16c>
 80025c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c6:	f000 8086 	beq.w	80026d6 <HAL_TIM_ConfigClockSource+0x172>
 80025ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ce:	d87f      	bhi.n	80026d0 <HAL_TIM_ConfigClockSource+0x16c>
 80025d0:	2b70      	cmp	r3, #112	; 0x70
 80025d2:	d01a      	beq.n	800260a <HAL_TIM_ConfigClockSource+0xa6>
 80025d4:	2b70      	cmp	r3, #112	; 0x70
 80025d6:	d87b      	bhi.n	80026d0 <HAL_TIM_ConfigClockSource+0x16c>
 80025d8:	2b60      	cmp	r3, #96	; 0x60
 80025da:	d050      	beq.n	800267e <HAL_TIM_ConfigClockSource+0x11a>
 80025dc:	2b60      	cmp	r3, #96	; 0x60
 80025de:	d877      	bhi.n	80026d0 <HAL_TIM_ConfigClockSource+0x16c>
 80025e0:	2b50      	cmp	r3, #80	; 0x50
 80025e2:	d03c      	beq.n	800265e <HAL_TIM_ConfigClockSource+0xfa>
 80025e4:	2b50      	cmp	r3, #80	; 0x50
 80025e6:	d873      	bhi.n	80026d0 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	2b40      	cmp	r3, #64	; 0x40
 80025ea:	d058      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x13a>
 80025ec:	2b40      	cmp	r3, #64	; 0x40
 80025ee:	d86f      	bhi.n	80026d0 <HAL_TIM_ConfigClockSource+0x16c>
 80025f0:	2b30      	cmp	r3, #48	; 0x30
 80025f2:	d064      	beq.n	80026be <HAL_TIM_ConfigClockSource+0x15a>
 80025f4:	2b30      	cmp	r3, #48	; 0x30
 80025f6:	d86b      	bhi.n	80026d0 <HAL_TIM_ConfigClockSource+0x16c>
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	d060      	beq.n	80026be <HAL_TIM_ConfigClockSource+0x15a>
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d867      	bhi.n	80026d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d05c      	beq.n	80026be <HAL_TIM_ConfigClockSource+0x15a>
 8002604:	2b10      	cmp	r3, #16
 8002606:	d05a      	beq.n	80026be <HAL_TIM_ConfigClockSource+0x15a>
 8002608:	e062      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6899      	ldr	r1, [r3, #8]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f000 f9ad 	bl	8002978 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800262c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	609a      	str	r2, [r3, #8]
      break;
 8002636:	e04f      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f000 f996 	bl	8002978 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800265a:	609a      	str	r2, [r3, #8]
      break;
 800265c:	e03c      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6859      	ldr	r1, [r3, #4]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	461a      	mov	r2, r3
 800266c:	f000 f90a 	bl	8002884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2150      	movs	r1, #80	; 0x50
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f963 	bl	8002942 <TIM_ITRx_SetConfig>
      break;
 800267c:	e02c      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6859      	ldr	r1, [r3, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	461a      	mov	r2, r3
 800268c:	f000 f929 	bl	80028e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2160      	movs	r1, #96	; 0x60
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f953 	bl	8002942 <TIM_ITRx_SetConfig>
      break;
 800269c:	e01c      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f000 f8ea 	bl	8002884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2140      	movs	r1, #64	; 0x40
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f943 	bl	8002942 <TIM_ITRx_SetConfig>
      break;
 80026bc:	e00c      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4619      	mov	r1, r3
 80026c8:	4610      	mov	r0, r2
 80026ca:	f000 f93a 	bl	8002942 <TIM_ITRx_SetConfig>
      break;
 80026ce:	e003      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      break;
 80026d4:	e000      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a40      	ldr	r2, [pc, #256]	; (8002858 <TIM_Base_SetConfig+0x114>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d013      	beq.n	8002784 <TIM_Base_SetConfig+0x40>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002762:	d00f      	beq.n	8002784 <TIM_Base_SetConfig+0x40>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3d      	ldr	r2, [pc, #244]	; (800285c <TIM_Base_SetConfig+0x118>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00b      	beq.n	8002784 <TIM_Base_SetConfig+0x40>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3c      	ldr	r2, [pc, #240]	; (8002860 <TIM_Base_SetConfig+0x11c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d007      	beq.n	8002784 <TIM_Base_SetConfig+0x40>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a3b      	ldr	r2, [pc, #236]	; (8002864 <TIM_Base_SetConfig+0x120>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d003      	beq.n	8002784 <TIM_Base_SetConfig+0x40>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a3a      	ldr	r2, [pc, #232]	; (8002868 <TIM_Base_SetConfig+0x124>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d108      	bne.n	8002796 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a2f      	ldr	r2, [pc, #188]	; (8002858 <TIM_Base_SetConfig+0x114>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d02b      	beq.n	80027f6 <TIM_Base_SetConfig+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a4:	d027      	beq.n	80027f6 <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a2c      	ldr	r2, [pc, #176]	; (800285c <TIM_Base_SetConfig+0x118>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d023      	beq.n	80027f6 <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a2b      	ldr	r2, [pc, #172]	; (8002860 <TIM_Base_SetConfig+0x11c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01f      	beq.n	80027f6 <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a2a      	ldr	r2, [pc, #168]	; (8002864 <TIM_Base_SetConfig+0x120>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d01b      	beq.n	80027f6 <TIM_Base_SetConfig+0xb2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a29      	ldr	r2, [pc, #164]	; (8002868 <TIM_Base_SetConfig+0x124>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d017      	beq.n	80027f6 <TIM_Base_SetConfig+0xb2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a28      	ldr	r2, [pc, #160]	; (800286c <TIM_Base_SetConfig+0x128>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d013      	beq.n	80027f6 <TIM_Base_SetConfig+0xb2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a27      	ldr	r2, [pc, #156]	; (8002870 <TIM_Base_SetConfig+0x12c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00f      	beq.n	80027f6 <TIM_Base_SetConfig+0xb2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a26      	ldr	r2, [pc, #152]	; (8002874 <TIM_Base_SetConfig+0x130>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00b      	beq.n	80027f6 <TIM_Base_SetConfig+0xb2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a25      	ldr	r2, [pc, #148]	; (8002878 <TIM_Base_SetConfig+0x134>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <TIM_Base_SetConfig+0xb2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a24      	ldr	r2, [pc, #144]	; (800287c <TIM_Base_SetConfig+0x138>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d003      	beq.n	80027f6 <TIM_Base_SetConfig+0xb2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a23      	ldr	r2, [pc, #140]	; (8002880 <TIM_Base_SetConfig+0x13c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d108      	bne.n	8002808 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <TIM_Base_SetConfig+0x114>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d003      	beq.n	800283c <TIM_Base_SetConfig+0xf8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a0c      	ldr	r2, [pc, #48]	; (8002868 <TIM_Base_SetConfig+0x124>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d103      	bne.n	8002844 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	615a      	str	r2, [r3, #20]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40010000 	.word	0x40010000
 800285c:	40000400 	.word	0x40000400
 8002860:	40000800 	.word	0x40000800
 8002864:	40000c00 	.word	0x40000c00
 8002868:	40010400 	.word	0x40010400
 800286c:	40014000 	.word	0x40014000
 8002870:	40014400 	.word	0x40014400
 8002874:	40014800 	.word	0x40014800
 8002878:	40001800 	.word	0x40001800
 800287c:	40001c00 	.word	0x40001c00
 8002880:	40002000 	.word	0x40002000

08002884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	f023 0201 	bic.w	r2, r3, #1
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f023 030a 	bic.w	r3, r3, #10
 80028c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	621a      	str	r2, [r3, #32]
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b087      	sub	sp, #28
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f023 0210 	bic.w	r2, r3, #16
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800290c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	031b      	lsls	r3, r3, #12
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800291e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	621a      	str	r2, [r3, #32]
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002942:	b480      	push	{r7}
 8002944:	b085      	sub	sp, #20
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	f043 0307 	orr.w	r3, r3, #7
 8002964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	609a      	str	r2, [r3, #8]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	021a      	lsls	r2, r3, #8
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	431a      	orrs	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	609a      	str	r2, [r3, #8]
}
 80029ac:	bf00      	nop
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e05a      	b.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d022      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1c:	d01d      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1d      	ldr	r2, [pc, #116]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d018      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1b      	ldr	r2, [pc, #108]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1a      	ldr	r2, [pc, #104]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00e      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a18      	ldr	r2, [pc, #96]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d009      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a15      	ldr	r2, [pc, #84]	; (8002aac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10c      	bne.n	8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800
 8002aa0:	40000c00 	.word	0x40000c00
 8002aa4:	40010400 	.word	0x40010400
 8002aa8:	40014000 	.word	0x40014000
 8002aac:	40001800 	.word	0x40001800

08002ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <memset>:
 8002ad8:	4402      	add	r2, r0
 8002ada:	4603      	mov	r3, r0
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d100      	bne.n	8002ae2 <memset+0xa>
 8002ae0:	4770      	bx	lr
 8002ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ae6:	e7f9      	b.n	8002adc <memset+0x4>

08002ae8 <__libc_init_array>:
 8002ae8:	b570      	push	{r4, r5, r6, lr}
 8002aea:	4d0d      	ldr	r5, [pc, #52]	; (8002b20 <__libc_init_array+0x38>)
 8002aec:	4c0d      	ldr	r4, [pc, #52]	; (8002b24 <__libc_init_array+0x3c>)
 8002aee:	1b64      	subs	r4, r4, r5
 8002af0:	10a4      	asrs	r4, r4, #2
 8002af2:	2600      	movs	r6, #0
 8002af4:	42a6      	cmp	r6, r4
 8002af6:	d109      	bne.n	8002b0c <__libc_init_array+0x24>
 8002af8:	4d0b      	ldr	r5, [pc, #44]	; (8002b28 <__libc_init_array+0x40>)
 8002afa:	4c0c      	ldr	r4, [pc, #48]	; (8002b2c <__libc_init_array+0x44>)
 8002afc:	f000 f818 	bl	8002b30 <_init>
 8002b00:	1b64      	subs	r4, r4, r5
 8002b02:	10a4      	asrs	r4, r4, #2
 8002b04:	2600      	movs	r6, #0
 8002b06:	42a6      	cmp	r6, r4
 8002b08:	d105      	bne.n	8002b16 <__libc_init_array+0x2e>
 8002b0a:	bd70      	pop	{r4, r5, r6, pc}
 8002b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b10:	4798      	blx	r3
 8002b12:	3601      	adds	r6, #1
 8002b14:	e7ee      	b.n	8002af4 <__libc_init_array+0xc>
 8002b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b1a:	4798      	blx	r3
 8002b1c:	3601      	adds	r6, #1
 8002b1e:	e7f2      	b.n	8002b06 <__libc_init_array+0x1e>
 8002b20:	08002b60 	.word	0x08002b60
 8002b24:	08002b60 	.word	0x08002b60
 8002b28:	08002b60 	.word	0x08002b60
 8002b2c:	08002b64 	.word	0x08002b64

08002b30 <_init>:
 8002b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b32:	bf00      	nop
 8002b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b36:	bc08      	pop	{r3}
 8002b38:	469e      	mov	lr, r3
 8002b3a:	4770      	bx	lr

08002b3c <_fini>:
 8002b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3e:	bf00      	nop
 8002b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b42:	bc08      	pop	{r3}
 8002b44:	469e      	mov	lr, r3
 8002b46:	4770      	bx	lr
